Implementation smell,Namespace,Class,File,Method,Description
Long Method,ShipManifest.InternalObjects,SMToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMToolTips.cs,GetCurrentToolTip,The method has 102 lines of code.
Long Method,ShipManifest.Process,TransferCrew,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferCrew.cs,CrewTransferProcess,The method has 100 lines of code.
Long Method,ShipManifest.Process,TransferCrew,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferCrew.cs,CrewTransferProcesses,The method has 102 lines of code.
Long Method,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The method has 197 lines of code.
Long Method,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,LoadSettings,The method has 254 lines of code.
Long Method,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SaveSettings,The method has 118 lines of code.
Long Method,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,The method has 123 lines of code.
Long Method,ShipManifest.Windows.Tabs.Settings,TabHighlight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabHighlight.cs,Display,The method has 129 lines of code.
Long Method,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The method has 488 lines of code.
Long Method,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The method has 148 lines of code.
Long Method,ShipManifest.Windows.Tabs.Settings,TabToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabToolTips.cs,Display,The method has 262 lines of code.
Long Method,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The method has 123 lines of code.
Long Method,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The method has 130 lines of code.
Long Method,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResolveResourcePartSelections,The method has 109 lines of code.
Long Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The method has 105 lines of code.
Long Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The method has 170 lines of code.
Long Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The method has 161 lines of code.
Long Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The method has 120 lines of code.
Complex Method,ShipManifest.InternalObjects,SMConditions,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMConditions.cs,CanKerbalsBeXferred,Cyclomatic complexity of the method is 15
Complex Method,ShipManifest.InternalObjects,SMConditions,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMConditions.cs,IsClsInSameSpace,Cyclomatic complexity of the method is 10
Complex Method,ShipManifest.InternalObjects,SMToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMToolTips.cs,GetCurrentToolTip,Cyclomatic complexity of the method is 16
Complex Method,ShipManifest.InternalObjects,SMHighlighter,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMHighlighter.cs,RevertMouseOverHighlight,Cyclomatic complexity of the method is 10
Complex Method,ShipManifest.InternalObjects,SMHighlighter,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMHighlighter.cs,Update_Highlighter,Cyclomatic complexity of the method is 10
Complex Method,ShipManifest.Process,ProcessController,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\ProcessController.cs,TransferScienceLab,Cyclomatic complexity of the method is 11
Complex Method,ShipManifest.Process,ProcessController,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\ProcessController.cs,TransferScience,Cyclomatic complexity of the method is 14
Complex Method,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,ProcessActivePumps,Cyclomatic complexity of the method is 8
Complex Method,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,FillParts,Cyclomatic complexity of the method is 13
Complex Method,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,DrainParts,Cyclomatic complexity of the method is 13
Complex Method,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Start,Cyclomatic complexity of the method is 9
Complex Method,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Update,Cyclomatic complexity of the method is 11
Complex Method,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,OnCrewTransferPartListCreated,Cyclomatic complexity of the method is 10
Complex Method,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,OnCrewTransferSelected,Cyclomatic complexity of the method is 10
Complex Method,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,Cyclomatic complexity of the method is 10
Complex Method,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,UpdateClsSpaces,Cyclomatic complexity of the method is 10
Complex Method,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,UpdatePartsByResource,Cyclomatic complexity of the method is 17
Complex Method,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,BuildDockedVesselList,Cyclomatic complexity of the method is 8
Complex Method,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,FilterVesselListByResources,Cyclomatic complexity of the method is 13
Complex Method,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,ScrubVesselList,Cyclomatic complexity of the method is 13
Complex Method,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetDockedVessels,Cyclomatic complexity of the method is 20
Complex Method,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetHatches,Cyclomatic complexity of the method is 9
Complex Method,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetAntennas,Cyclomatic complexity of the method is 9
Complex Method,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetVesselsPartsByResource,Cyclomatic complexity of the method is 10
Complex Method,ShipManifest.Windows.Tabs.Control,TabVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabVessels.cs,Display,Cyclomatic complexity of the method is 11
Complex Method,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,Cyclomatic complexity of the method is 13
Complex Method,ShipManifest.Windows.Tabs.Settings,TabHighlight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabHighlight.cs,Display,Cyclomatic complexity of the method is 19
Complex Method,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,Cyclomatic complexity of the method is 44
Complex Method,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,DisplayRealismButtons,Cyclomatic complexity of the method is 8
Complex Method,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,Cyclomatic complexity of the method is 11
Complex Method,ShipManifest.Windows.Tabs.Settings,TabToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabToolTips.cs,Display,Cyclomatic complexity of the method is 18
Complex Method,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,Cyclomatic complexity of the method is 21
Complex Method,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,Cyclomatic complexity of the method is 14
Complex Method,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,Cyclomatic complexity of the method is 8
Complex Method,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,Cyclomatic complexity of the method is 9
Complex Method,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,Cyclomatic complexity of the method is 17
Complex Method,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,Cyclomatic complexity of the method is 11
Complex Method,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayTabButtons,Cyclomatic complexity of the method is 11
Complex Method,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayActionButtons,Cyclomatic complexity of the method is 8
Complex Method,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceButtonsList,Cyclomatic complexity of the method is 9
Complex Method,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResolveResourcePartSelections,Cyclomatic complexity of the method is 13
Complex Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,PartsTransferViewer,Cyclomatic complexity of the method is 9
Complex Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,Cyclomatic complexity of the method is 8
Complex Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDumpFillButtons,Cyclomatic complexity of the method is 8
Complex Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpVesselButtons,Cyclomatic complexity of the method is 9
Complex Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewDetails,Cyclomatic complexity of the method is 12
Complex Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ShowSelectAllOption,Cyclomatic complexity of the method is 9
Complex Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,Cyclomatic complexity of the method is 26
Complex Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,Cyclomatic complexity of the method is 26
Complex Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsTarget,Cyclomatic complexity of the method is 9
Complex Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,Cyclomatic complexity of the method is 11
Complex Method,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceFlowButtons,Cyclomatic complexity of the method is 8
Long Parameter List,ShipManifest.InternalObjects,SMHighlighter,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMHighlighter.cs,SetMouseOverData,The method has 6 parameters. Parameters: rect' scrollY' scrollX' height' vessel' mouseposition
Long Parameter List,ShipManifest.InternalObjects,SMHighlighter,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMHighlighter.cs,SetMouseOverData,The method has 6 parameters. Parameters: rect' scrollY' scrollX' height' part' mouseposition
Long Parameter List,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,GetPumpIdFromHash,The method has 5 parameters. Parameters: resource' firstPart' lastPart' pumpType' trigger
Long Parameter List,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewDetails,The method has 5 parameters. Parameters: selectedCrewMembers' selectedPartsFrom' selectedPartsTo' isVesselMode' isSourceView
Long Parameter List,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ShowSelectAllOption,The method has 9 parameters. Parameters: selectedCrewMembers' selectedPartsFrom' selectedPartsTo' isSourceView' sourceCrewCount' targetCapacity' selectAll' touristsOnly' xOffset
Long Parameter List,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewMemberDetails,The method has 7 parameters. Parameters: selectedPartsFrom' selectedPartsTo' crewMembers' crewMember' xOffset' isVesselMode' targetCapacity
Long Identifier,ShipManifest.Distribution,Smapi,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Distribution\SMWrapper.cs,,The length of the parameter _getOverrideStockCrewXferMethod is 31.
Long Identifier,ShipManifest.Distribution,Smapi,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Distribution\SMWrapper.cs,,The length of the parameter _getSeat2SeatXferDelaySecMethod is 31.
Long Identifier,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,,The length of the parameter _sourceTransferViewerScrollPosition is 35.
Long Identifier,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,,The length of the parameter _sourceDetailsViewerScrollPosition is 34.
Long Identifier,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,,The length of the parameter _targetTransferViewerScrollPosition is 35.
Long Identifier,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,,The length of the parameter _targetDetailsViewerScrollPosition is 34.
Long Statement,ShipManifest.APIClients,DfWrapper,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\APIClients\DFWrapper.cs,LogFormatted,The length of the statement  "      string strMessageLine = $"{DateTime.Now}'{Assembly.GetExecutingAssembly().GetName().Name}-{MethodBase.GetCurrentMethod()?.DeclaringType?.Name}'{message}"; " is 154.
Long Statement,ShipManifest.InternalObjects,SMConditions,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMConditions.cs,CanKerbalsBeXferred,The length of the statement  "        // If one of the parts is a DeepFreeze part and no crew are showing in protoModuleCrew' check it isn't full of frozen Kerbals.  " is 126.
Long Statement,ShipManifest.InternalObjects,SMConditions,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMConditions.cs,CanKerbalsBeXferred,The length of the statement  "        // If there is just one spare seat or seat taken by a Thawed Kerbal that is OK because SM will just transfer them into the empty " is 128.
Long Statement,ShipManifest.InternalObjects,SMConditions,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMConditions.cs,CanShowShipManifest,The length of the statement  "          values += $"!FlightGlobals.ActiveVessel.isEVA = {(FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel.isEVA)}\r\n"; " is 128.
Long Statement,ShipManifest.InternalObjects,SMConditions,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMConditions.cs,CanShowShipManifest,The length of the statement  "          values += $"CameraManager.Instance.currentCameraMode != CameraManager.CameraMode.IVA = {(CameraManager.Instance.currentCameraMode != CameraManager.CameraMode.IVA)}"; " is 165.
Long Statement,ShipManifest.InternalObjects,SMConditions,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMConditions.cs,CanShowShipManifest,The length of the statement  "            $" in CanShowShipManifest (repeating error).  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}\r\n\r\nValues:  {values}"' SmUtils.LogType.Error' true); " is 147.
Long Statement,ShipManifest.InternalObjects,SMConditions,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMConditions.cs,GetTransferMode,The length of the statement  "      return SMAddon.SmVessel.SelectedResources.Contains(TransferMode.Crew.ToString()) ? TransferMode.Science : TransferMode.Resources; " is 129.
Long Statement,ShipManifest.InternalObjects,SMToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMToolTips.cs,ShowToolTips,The length of the statement  "        //LogMessage(String.Format("ShowToolTips: \r\nToolTip: {0}\r\nToolTipPos:  {1}"' SmAddon.toolTip' SMToolTIps.ToolTipPos.ToString())' Utilities.LogType.Info' Settings.VerboseLogging); " is 182.
Long Statement,ShipManifest.InternalObjects,SMToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMToolTips.cs,SetActiveToolTip,The length of the statement  "      // Note:  all values are screen point based.  (0'0 in lower left).  this removes confusion with the gui point of elements (0'0 in upper left). " is 142.
Long Statement,ShipManifest.InternalObjects,SMHighlighter,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMHighlighter.cs,SetMouseOverData,The length of the statement  "      // Note rect.x and rect.y' as well as mouseposition.x and mouseposition.y are with respect to the container withing the scrollviewer. " is 133.
Long Statement,ShipManifest.InternalObjects,SMHighlighter,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMHighlighter.cs,HighlightClsVessel,The length of the statement  "            $" in HighlightCLSVessel (repeating error).  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true); " is 121.
Long Statement,ShipManifest.InternalObjects,SMHighlighter,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMHighlighter.cs,Update_Highlighter,The length of the statement  "          SmUtils.LogMessage($" in SMHighlighter.UpdateHighlighting (repeating error).  Error in step:  {step}.  Error:  {ex.Message}\n\n{ex.StackTrace}"' " is 144.
Long Statement,ShipManifest.Process,ProcessController,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\ProcessController.cs,TransferScienceLab,The length of the statement  "        List<ModuleScienceLab>.Enumerator labs = SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().GetEnumerator(); " is 129.
Long Statement,ShipManifest.Process,ProcessController,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\ProcessController.cs,TransferScienceLab,The length of the statement  "        SmUtils.LogMessage($" in ProcessController.TransferScienceLab:  Error:  {ex}"' SmUtils.LogType.Info' SMSettings.VerboseLogging); " is 128.
Long Statement,ShipManifest.Process,ProcessController,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\ProcessController.cs,TransferScience,The length of the statement  "      // Pick a destination part. Preferably the Science Lab with the most science stored'  If no lab' then Science Container with most science stored. " is 145.
Long Statement,ShipManifest.Process,ProcessController,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\ProcessController.cs,TransferScience,The length of the statement  "        // if none of the above' pick the first Container' then check for the container holding the largest amount of science' and move it all there. " is 141.
Long Statement,ShipManifest.Process,ProcessController,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\ProcessController.cs,TransferScience,The length of the statement  "        SmUtils.LogMessage($" in ProcessController.TransferScience:  Error:  {ex}"' SmUtils.LogType.Info' SMSettings.VerboseLogging); " is 125.
Long Statement,ShipManifest.Process,ProcessController,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\ProcessController.cs,DumpResources,The length of the statement  "      // This initiates the Dump process and with realism off' does the dump immediately; with realism on' initiates the real time process. " is 133.
Long Statement,ShipManifest.Process,TransferCrew,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferCrew.cs,AssignSeats,The length of the statement  "          if (toSeats.Current.kerbalRef == null || toSeats.Current.kerbalRef.protoCrewMember.rosterStatus == ProtoCrewMember.RosterStatus.Dead) continue; " is 143.
Long Statement,ShipManifest.Process,TransferCrew,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferCrew.cs,CrewTransferProcess,The length of the statement  "            $" in CrewTransferProcess (repeating error).  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true); " is 122.
Long Statement,ShipManifest.Process,TransferCrew,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferCrew.cs,CrewTransferProcesses,The length of the statement  "            $" in CrewTransferProcess (repeating error).  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true); " is 122.
Long Statement,ShipManifest.Process,TransferCrew,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferCrew.cs,CrewTransferAction,The length of the statement  "        // not sure if these help.   We have been experiencing issues with "ghost" kerbals & EVAs/docking/undocking after Crew Moves.    " is 125.
Long Statement,ShipManifest.Process,TransferCrew,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferCrew.cs,CrewTransferAction,The length of the statement  "          $"in CrewTransferAction.  Error moving crewmember.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true); " is 128.
Long Statement,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,ProcessActivePumps,The length of the statement  "      //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps"' Utilities.LogType.Info' SMSettings.VerboseLogging); " is 120.
Long Statement,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,ProcessActivePumps,The length of the statement  "              //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps - Off"' Utilities.LogType.Info' SMSettings.VerboseLogging); " is 126.
Long Statement,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,ProcessActivePumps,The length of the statement  "              //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps - Start"' Utilities.LogType.Info' SMSettings.VerboseLogging); " is 128.
Long Statement,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,ProcessActivePumps,The length of the statement  "              //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps - Run"' Utilities.LogType.Info' SMSettings.VerboseLogging); " is 126.
Long Statement,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,ProcessActivePumps,The length of the statement  "              //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps - Stop"' Utilities.LogType.Info' SMSettings.VerboseLogging); " is 127.
Long Statement,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,ProcessActivePumps,The length of the statement  "            $" in TransferPump.ProcessActivePumps (repeating error).  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true); " is 134.
Long Statement,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,Running,The length of the statement  "      deltaAmt = deltaAmt > FromRemaining ? FromRemaining : deltaAmt + AmtPumped > PumpAmount ? PumpAmount - AmtPumped : deltaAmt; " is 124.
Long Statement,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,RunPumpCycle,The length of the statement  "      //Utilities.LogMessage(string.Format("Exiting:  TransferPump.RunPumpCycle.  PumpStatus = {0}"' PumpStatus)' Utilities.LogType.Info' SMSettings.VerboseLogging); " is 159.
Long Statement,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,FillParts,The length of the statement  "        //Utilities.LogMessage(string.Format("Inside:  TransferPump.FillParts:  toPartAmt = {0}' minAmt = {1}' PartsLeft = {2}' cycleBalance = {3}"' toPartAmt' minAmt[0]' toPartCount' cycleBalance)' Utilities.LogType.Info' SMSettings.VerboseLogging); " is 242.
Long Statement,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,FillParts,The length of the statement  "        //Utilities.LogMessage(string.Format("Inside:  TransferPump.FillParts:  toPartAmt = {0}' minAmt = {1}' PartsLeft = {2}' cycleBalance = {3}"' toPartAmt' minAmt[0]' toPartCount' cycleBalance)' Utilities.LogType.Info' SMSettings.VerboseLogging); " is 242.
Long Statement,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,DrainParts,The length of the statement  "        //Utilities.LogMessage(string.Format("Inside:  TransferPump.DrainParts:  fromPartAmt = {0}' minAmt = {1}' PartsLeft = {2}' cycleBalance = {3}"' fromPartAmt' minAmt' fromPartCount' cycleBalance)' Utilities.LogType.Info' SMSettings.VerboseLogging); " is 246.
Long Statement,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,DrainParts,The length of the statement  "        //Utilities.LogMessage(string.Format("Inside:  TransferPump.DrainParts:  fromPartAmt = {0}' minAmt = {1}' PartsLeft = {2}' cycleBalance = {3}"' fromPartAmt' minAmt' fromPartCount' cycleBalance)' Utilities.LogType.Info' SMSettings.VerboseLogging); " is 246.
Long Statement,ShipManifest,SMPart,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMPart.cs,FillCrew,The length of the statement  "      //Utilities.LogMessage(string.Format("Entering Fill Crew with part {0}"' part.partInfo.name)' Utilities.LogType.Info' true); " is 124.
Long Statement,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetStockCrewTransferState,The length of the statement  "        List<Part>.Enumerator parts = SMAddon.SmVessel.PartsByResource[SMConditions.ResourceType.Crew.ToString()].GetEnumerator(); " is 122.
Long Statement,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,OnGameSceneSwitchRequested,The length of the statement  "      // Since the changes to Startup options' ON destroy is not being called when a Scene change occurs.  Startup is being called when the proper scene is loaded. " is 157.
Long Statement,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,OnCrewTransferPartListCreated,The length of the statement  "      if (SMSettings.EnableStockCrewXfer && !SMSettings.OverrideStockCrewXfer && TransferCrew.CrewXferState == TransferCrew.XferState.Off) return; " is 140.
Long Statement,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,OnCrewTransferSelected,The length of the statement  "      if (SMSettings.EnableStockCrewXfer && !SMSettings.OverrideStockCrewXfer && TransferCrew.CrewXferState == TransferCrew.XferState.Off) return; " is 140.
Long Statement,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,OnCrewTransferSelected,The length of the statement  "        if (!SMSettings.EnableStockCrewXfer) DisplayScreenMsg("SM Has Disabled Stock Crew Transfers. (Check your SM settings)"); " is 120.
Long Statement,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,OnCrewTransferSelected,The length of the statement  "        if (TransferCrew.CrewXferState != TransferCrew.XferState.Off) DisplayScreenMsg("Stock Crew Transfer Disabled.  SM Crew Transfer in Progress."); " is 143.
Long Statement,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,OnCrewTransferSelected,The length of the statement  "      if (InstalledMods.IsDfInstalled && InstalledMods.IsDfApiReady && crewTransferData.destPart.Modules.Contains("DeepFreezer")) " is 123.
Long Statement,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The length of the statement  "          SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true); " is 136.
Long Statement,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,UpdatePartsByResource,The length of the statement  "        if (SMSettings.EnableCrew && (part.CrewCapacity > 0 || SMConditions.IsUsiInflatable(part)) && part.partInfo.name != "kerbalEVA") " is 128.
Long Statement,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetSelectedResourcesParts,The length of the statement  "            if (partlist.Current.Resources.Contains(SelectedResources[0]) && partlist.Current.Resources.Contains(SelectedResources[1])) " is 123.
Long Statement,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetAntennas,The length of the statement  "          if (!pParts.Current.Modules.Contains("ModuleDataTransmitter") && !pParts.Current.Modules.Contains("ModuleRTAntenna")) continue; " is 127.
Long Statement,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetAntennas,The length of the statement  "              || pModule is ModuleAnimateGeneric && (pModule.Events["Toggle"].guiName == "Extend" || pModule.Events["Toggle"].guiName == "Retract")) " is 134.
Long Statement,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetDockedVesselParts,The length of the statement  "          // The root part matters for the original vessel.  However' vessels that are split from the original vessel have their docking port as the root. " is 144.
Long Statement,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetDockedVesselParts,The length of the statement  "          // So' if the root is the docking port' we want to grab the children from the docking port.  if the root is different than the port' we want to use " is 147.
Long Statement,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetChildren,The length of the statement  "        if (dNode != null && dNode.vesselInfo != null && dNode.otherNode != null && dNode.otherNode.vesselInfo != null) continue; " is 121.
Long Statement,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,FillCrew,The length of the statement  "        //Utilities.LogMessage(string.Format("Processing FillCrew with part {0}"' parts.Current.partInfo.name)' Utilities.LogType.Info' true); " is 134.
Long Statement,ShipManifest.Windows.Tabs.Control,TabAntenna,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabAntenna.cs,Display,The length of the statement  "        InstalledMods.IsRtInstalled ? SmUtils.Localize("#smloc_control_antenna_001") : SmUtils.Localize("#smloc_control_antenna_000")' " is 126.
Long Statement,ShipManifest.Windows.Tabs.Control,TabAntenna,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabAntenna.cs,Display,The length of the statement  "            SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' iAntennas.Current.SPart' Event.current.mousePosition); " is 138.
Long Statement,ShipManifest.Windows.Tabs.Control,TabVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabVessels.cs,Display,The length of the statement  "            SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' SMAddon.SmVessel.DockedVessels[v]' Event.current.mousePosition); " is 148.
Long Statement,ShipManifest.Windows.Tabs.Control,TabVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabVessels.cs,Display,The length of the statement  "            SMAddon.SmVessel.DockedVessels[v].renameVessel = GUILayout.TextField(SMAddon.SmVessel.DockedVessels[v].renameVessel' GUILayout.Width(guiLabelWidth - (guiBtnWidth + 5))); " is 169.
Long Statement,ShipManifest.Windows.Tabs.Control,TabVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabVessels.cs,Display,The length of the statement  "            SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' SMAddon.SmVessel.DockedVessels[v]' Event.current.mousePosition); " is 148.
Long Statement,ShipManifest.Windows.Tabs.Control,TabVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabVessels.cs,Display,The length of the statement  "          GUIContent content = SMAddon.SmVessel.DockedVessels[v].IsEditing ? new GUIContent("Save"' "Saves the changes to the docked vessel name.") : new GUIContent("Edit"' "Change the docked vessel name."); " is 197.
Long Statement,ShipManifest.Windows.Tabs.Control,TabVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabVessels.cs,UndockSelectedVessel,The length of the statement  "        List<ModuleDockingNode>.Enumerator dockingNodes = parts.Current.FindModulesImplementing<ModuleDockingNode>().GetEnumerator(); " is 125.
Long Statement,ShipManifest.Windows.Tabs.Control,TabScienceLab,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabScienceLabs.cs,Display,The length of the statement  "          string label = $"{iLabs.Current.name} - ({(iLabs.Current.IsOperational() ? SmUtils.Localize("#smloc_control_lab_001") : SmUtils.Localize("#smloc_control_lab_002"))})"; // Operational' InOp " is 188.
Long Statement,ShipManifest.Windows.Tabs.Control,TabScienceLab,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabScienceLabs.cs,Display,The length of the statement  "            SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' iLabs.Current.part' Event.current.mousePosition); " is 133.
Long Statement,ShipManifest.Windows.Tabs.Control,TabHatch,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabHatch.cs,Display,The length of the statement  "            SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' iHatch.ClsPart.Part' Event.current.mousePosition); " is 134.
Long Statement,ShipManifest.Windows.Tabs.Control,TabHatch,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabHatch.cs,OpenAllHatches,The length of the statement  "      List<IModuleDockingHatch>.Enumerator iModules = SMAddon.SmVessel.Hatches.Select(iHatch => (IModuleDockingHatch) iHatch.HatchModule) " is 131.
Long Statement,ShipManifest.Windows.Tabs.Control,TabHatch,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabHatch.cs,CloseAllHatches,The length of the statement  "      List<IModuleDockingHatch>.Enumerator iModules = SMAddon.SmVessel.Hatches.Select(iHatch => (IModuleDockingHatch)iHatch.HatchModule) " is 130.
Long Statement,ShipManifest.Windows.Tabs.Control,TabLight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabLight.cs,Display,The length of the statement  "            SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' iLights.Current.SPart' Event.current.mousePosition); " is 136.
Long Statement,ShipManifest.Windows.Tabs.Control,TabSolarPanel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabSolarPanel.cs,Display,The length of the statement  "            label = $"{iPanels.Current.PanelStatus} - ({SmUtils.Localize("#smloc_module_004")}) - {iPanels.Current.Title}"; // "Broken" " is 123.
Long Statement,ShipManifest.Windows.Tabs.Control,TabSolarPanel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabSolarPanel.cs,Display,The length of the statement  "            label = $"{iPanels.Current.PanelStatus} - ({SmUtils.Localize("#smloc_module_005")}) - {iPanels.Current.Title}"; // "Locked" " is 123.
Long Statement,ShipManifest.Windows.Tabs.Control,TabSolarPanel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabSolarPanel.cs,Display,The length of the statement  "            SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' iPanels.Current.SPart' Event.current.mousePosition); " is 136.
Long Statement,ShipManifest.Windows.Tabs.Control,TabSolarPanel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabSolarPanel.cs,ExtendAllPanels,The length of the statement  "        if (((ModuleDeployableSolarPanel)iPanels.Current.PanelModule).deployState != ModuleDeployablePart.DeployState.RETRACTED) continue; " is 130.
Long Statement,ShipManifest.Windows.Tabs.Control,TabSolarPanel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabSolarPanel.cs,RetractAllPanels,The length of the statement  "        if (((ModuleDeployableSolarPanel)iPanels.Current.PanelModule).deployState != ModuleDeployablePart.DeployState.EXTENDED) continue; " is 129.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,The length of the statement  "      SMSettings.EnableBlizzyToolbar = GUILayout.Toggle(SMSettings.EnableBlizzyToolbar' _guiLabel' GUILayout.Width(guiMaintoggleWidth)); " is 130.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,The length of the statement  "      WindowDebugger.ShowWindow = GUILayout.Toggle(WindowDebugger.ShowWindow' _guiLabel' GUILayout.Width(guiMaintoggleWidth)); " is 120.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,The length of the statement  "      SMSettings.VerboseLogging = GUILayout.Toggle(SMSettings.VerboseLogging' _guiLabel' GUILayout.Width(guiMaintoggleWidth)); " is 120.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabHighlight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabHighlight.cs,Display,The length of the statement  "      SMSettings.EnableHighlighting = GUILayout.Toggle(SMSettings.EnableHighlighting' _guiLabel' GUILayout.Width(guiToggleWidth)); " is 124.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabHighlight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabHighlight.cs,Display,The length of the statement  "      SMSettings.OnlySourceTarget = GUILayout.Toggle(SMSettings.OnlySourceTarget' _guiLabel' GUILayout.Width(guiToggleWidth)); " is 120.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabHighlight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabHighlight.cs,Display,The length of the statement  "      SMSettings.EnableClsHighlighting = GUILayout.Toggle(SMSettings.EnableClsHighlighting' _guiLabel' GUILayout.Width(guiToggleWidth)); " is 130.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabHighlight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabHighlight.cs,Display,The length of the statement  "      SMSettings.EnableEdgeHighlighting = GUILayout.Toggle(SMSettings.EnableEdgeHighlighting' _guiLabel' GUILayout.Width(guiToggleWidth)); " is 132.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The length of the statement  "      //_toolTip += "\r\nWhen Off' you have full control of the vessel at any time (subject to the availability of resources)."; " is 122.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The length of the statement  "      SMSettings.EnableCrewModify = GUILayout.Toggle(SMSettings.EnableCrewModify' _guiLabel' GUILayout.Width(guiToggleWidth)); " is 120.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The length of the statement  "      SMSettings.EnableKerbalRename = GUILayout.Toggle(SMSettings.EnableKerbalRename' _guiLabel' GUILayout.Width(guiToggleWidth)); " is 124.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The length of the statement  "      //_toolTip += "\r\nWhen ON stock crew transfers will behave like SM style transfers.\n(requires both Stock Crew Transfers & SM Crew Transfers ON)"; " is 147.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The length of the statement  "      SMSettings.EnablePfResources = GUILayout.Toggle(SMSettings.EnablePfResources' _guiLabel' GUILayout.Width(guiToggleWidth)); " is 122.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The length of the statement  "      SMSettings.PumpSoundVol = GUILayout.HorizontalSlider((float)SMSettings.PumpSoundVol' 0f' 1f' GUILayout.Width(140)' GUILayout.Height(20)); " is 137.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The length of the statement  "      SMSettings.CrewSoundVol = GUILayout.HorizontalSlider((float)SMSettings.CrewSoundVol' 0f' 1f' GUILayout.Width(140)' GUILayout.Height(20)); " is 137.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabToolTips.cs,Display,The length of the statement  "      WindowDebugger.ShowToolTips = GUILayout.Toggle(WindowDebugger.ShowToolTips' _guiLabel' GUILayout.Width(guiToggleWidth)); " is 120.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabToolTips.cs,Display,The length of the statement  "      WindowManifest.ShowToolTips = GUILayout.Toggle(WindowManifest.ShowToolTips' _guiLabel' GUILayout.Width(guiToggleWidth)); " is 120.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabToolTips.cs,Display,The length of the statement  "      WindowTransfer.ShowToolTips = GUILayout.Toggle(WindowTransfer.ShowToolTips' _guiLabel' GUILayout.Width(guiToggleWidth)); " is 120.
Long Statement,ShipManifest.Windows.Tabs.Settings,TabToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabToolTips.cs,Display,The length of the statement  "      WindowSettings.ShowToolTips = GUILayout.Toggle(WindowSettings.ShowToolTips' _guiLabel' GUILayout.Width(guiToggleWidth)); " is 120.
Long Statement,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,The length of the statement  "      if (GUILayout.Button(new GUIContent(""' "Blue")' SMStyle.ButtonStyle' GUILayout.Width(guiWidth)' GUILayout.Height(guiHeight))) " is 126.
Long Statement,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,The length of the statement  "      if (GUILayout.Button(new GUIContent(""' "Black")' SMStyle.ButtonStyle' GUILayout.Width(guiWidth)' GUILayout.Height(guiHeight))) " is 127.
Long Statement,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,The length of the statement  "      if (GUILayout.Button(new GUIContent(""' "Clear")' SMStyle.ButtonStyle' GUILayout.Width(guiWidth)' GUILayout.Height(guiHeight))) " is 127.
Long Statement,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,The length of the statement  "      if (GUILayout.Button(new GUIContent(""' "Cyan")' SMStyle.ButtonStyle' GUILayout.Width(guiWidth)' GUILayout.Height(guiHeight))) " is 126.
Long Statement,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,The length of the statement  "      if (GUILayout.Button(new GUIContent(""' "Gray")' SMStyle.ButtonStyle' GUILayout.Width(guiWidth)' GUILayout.Height(guiHeight))) " is 126.
Long Statement,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,The length of the statement  "      if (GUILayout.Button(new GUIContent(""' "Green")' SMStyle.ButtonStyle' GUILayout.Width(guiWidth)' GUILayout.Height(guiHeight))) " is 127.
Long Statement,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,The length of the statement  "      if (GUILayout.Button(new GUIContent(""' "Magenta")' SMStyle.ButtonStyle' GUILayout.Width(guiWidth)' GUILayout.Height(guiHeight))) " is 129.
Long Statement,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,The length of the statement  "      if (GUILayout.Button(new GUIContent(""' "Red")' SMStyle.ButtonStyle' GUILayout.Width(guiWidth)' GUILayout.Height(guiHeight))) " is 125.
Long Statement,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,The length of the statement  "      if (GUILayout.Button(new GUIContent(""' "White")' SMStyle.ButtonStyle' GUILayout.Width(guiWidth)' GUILayout.Height(guiHeight))) " is 127.
Long Statement,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,The length of the statement  "      if (GUILayout.Button(new GUIContent(""' "Yellow")' SMStyle.ButtonStyle' GUILayout.Width(guiWidth)' GUILayout.Height(guiHeight))) " is 128.
Long Statement,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Savelog,The length of the statement  "        string filename = $"DebugLog_{DateTime.Now.ToString(CultureInfo.InvariantCulture).Replace(" "' "_").Replace("/"' "").Replace(":"' "")}.txt"; " is 140.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplaySelectProfession,The length of the statement  "      bool isPilot = GUILayout.Toggle(KerbalProfession == Professions.Pilot' SmUtils.Localize("#smloc_roster_006")' GUILayout.Width(90)); // "Pilot" " is 142.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplaySelectProfession,The length of the statement  "      bool isEngineer = GUILayout.Toggle(KerbalProfession == Professions.Engineer' SmUtils.Localize("#smloc_roster_007")' GUILayout.Width(90)); // "Engineer" " is 151.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplaySelectProfession,The length of the statement  "      bool isScientist = GUILayout.Toggle(KerbalProfession == Professions.Scientist' SmUtils.Localize("#smloc_roster_008")' GUILayout.Width(90)); // "Scientist" " is 154.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplaySelectProfession,The length of the statement  "      bool isTourist = GUILayout.Toggle(KerbalProfession == Professions.Tourist' SmUtils.Localize("#smloc_roster_032")' GUILayout.Width(90)); // "Toruist" " is 148.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The length of the statement  "      bool isAll = GUILayout.Toggle(CurrentFilter == KerbalFilters.All' SmUtils.Localize("#smloc_roster_010")' GUILayout.Width(60)); // "All" " is 135.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The length of the statement  "      bool isAssign = GUILayout.Toggle(CurrentFilter == KerbalFilters.Assigned' SmUtils.Localize("#smloc_roster_011")' GUILayout.Width(95)); // "Assigned" " is 148.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The length of the statement  "        bool isVessel = GUILayout.Toggle(CurrentFilter == KerbalFilters.Vessel' SmUtils.Localize("#smloc_roster_012")' GUILayout.Width(80)); // "Vessel" " is 144.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The length of the statement  "      bool isAvail = GUILayout.Toggle(CurrentFilter == KerbalFilters.Available' SmUtils.Localize("#smloc_roster_013")' GUILayout.Width(95)); // "Available" " is 149.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The length of the statement  "      bool isDead = GUILayout.Toggle(CurrentFilter == KerbalFilters.Dead' SmUtils.Localize("#smloc_roster_014")' GUILayout.Width(130)); // "Dead/Missing" " is 147.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The length of the statement  "        bool isFrozen = GUILayout.Toggle(CurrentFilter == KerbalFilters.Frozen' SmUtils.Localize("#smloc_roster_015")' GUILayout.Width(80)); // "Frozen" " is 144.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The length of the statement  "          else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned) " is 121.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The length of the statement  "          SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true); " is 120.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,The length of the statement  "      SelectedKerbal.Badass = GUILayout.Toggle(SelectedKerbal.Badass' SmUtils.Localize("#smloc_roster_031")' GUILayout.Height(30)); // "Badass" " is 137.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,The length of the statement  "      //string toolTip = "Applies the changes made to this Kerbal.\r\nDesired Name and Profession will be Retained after save."; " is 122.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,SetupEditButton,The length of the statement  "      buttonText = SelectedKerbal == null || SelectedKerbal.Kerbal != kerbal ? SmUtils.Localize("#smloc_roster_020") : SmUtils.Localize("#smloc_roster_004"); " is 151.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,SetupActionButton,The length of the statement  "          // buttonToolTip = "Thaw disabled.  Vessel not active. UnFreeze a Kerbal and Revive them.\r\nWill then become assigned to current vessel."; " is 139.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,SetupActionButton,The length of the statement  "          // buttonToolTip = "Freezes a Kerbal in the DeepFreezer.\r\nWill then become Unowned and will not consume life support."; " is 121.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,SetupActionButton,The length of the statement  "          buttonToolTip = SmUtils.Localize("#smloc_roster_tt_014");  // "Removes a Kerbal from the active vessel.\r\nWill then become available."; " is 136.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,SetupActionButton,The length of the statement  "          buttonToolTip = SmUtils.Localize("#smloc_roster_tt_023");  // "Remove Disabled. Roster Modifications is preventing this action.\r\nTo Remove this Kerbal' Change your Roster Modifications Setting."; " is 197.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,SetupActionButton,The length of the statement  "          // buttonToolTip = "Add Disabled.  No source part is selected.\r\nTo add a Kerbal' Select a Source Part with an available seat."; " is 129.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,SetupActionButton,The length of the statement  "          // buttonToolTip = "Add Disabled.  Roster Modifications is preventing this action.\r\nTo add a Kerbal' Change your Roster Modifications Setting."; " is 146.
Long Statement,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,GetFrozenKerbalDetails,The length of the statement  "            ? $"{SmUtils.Localize("#smloc_roster_015")} - {DfWrapper.DeepFreezeApi.FrozenKerbals[kerbal.name].VesselName.Replace("(unloaded)"' "")}"  " is 136.
Long Statement,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,PreLaunchGui,The length of the statement  "          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_005")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Crew" " is 142.
Long Statement,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,PreLaunchGui,The length of the statement  "          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_006")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Crew" " is 143.
Long Statement,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,PreLaunchGui,The length of the statement  "        if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_007")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Resources" " is 147.
Long Statement,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,PreLaunchGui,The length of the statement  "        if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_008")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Resources" " is 148.
Long Statement,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceButtonsList,The length of the statement  "              ? new GUIContent(SmUtils.Localize("#smloc_manifest_009")' SmUtils.Localize("#smloc_manifest_tt_001")) // "Dump"' "Dumps the selected resource in this vessel" " is 157.
Long Statement,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceButtonsList,The length of the statement  "              : new GUIContent(SmUtils.Localize("#smloc_manifest_010")' SmUtils.Localize("#smloc_manifest_tt_002")); // "Stop"' "Halts the dumping of the selected resource in this vessel" " is 173.
Long Statement,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceDetailsViewer,The length of the statement  "                  $" - {sResources.Current}:  ({part.Resources[sResources.Current].amount:######0.####}/{part.Resources[sResources.Current].maxAmount:######0.####})"' noPad' GUILayout.Width(265)' " is 177.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,Display,The length of the statement  "      Title = $"{SmUtils.Localize("#smloc_transfer_000")} - {SMAddon.SmVessel.Vessel.vesselName}{displayAmounts}"; // "Transfer" " is 122.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,SourceTransferViewer,The length of the statement  "          $" in Ship Manifest Window - SourceTransferViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true); " is 128.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,SourceDetailsViewer,The length of the statement  "          CrewDetails(SMAddon.SmVessel.SourceMembersSelected' SMAddon.SmVessel.SelectedPartsSource' SMAddon.SmVessel.SelectedPartsTarget' ShowSourceVessels' true); " is 153.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,TextBetweenViewers,The length of the statement  "      if (SMAddon.SmVessel.ModDockedVessels.Count > 0 && !SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Science.ToString())) " is 142.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,TargetTransferViewer,The length of the statement  "          $" in Ship Manifest Window - TargetTransferViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true); " is 128.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,TargetDetailsViewer,The length of the statement  "          CrewDetails(SMAddon.SmVessel.TargetMembersSelected' SMAddon.SmVessel.SelectedPartsTarget' SMAddon.SmVessel.SelectedPartsSource' ShowTargetVessels' false); " is 154.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,PartsTransferViewer,The length of the statement  "          else if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()) && SMConditions.CanShowCrewFillDumpButtons()) " is 124.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The length of the statement  "            SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' modDockedVessels.Current' Event.current.mousePosition); " is 128.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The length of the statement  "            //GUIContent fillContent = new GUIContent("Fill"'"Fills the Selected vessel with the selected resource(s)\r\n(Fill is from ground source' NOT from other parts in vessel)"); " is 172.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The length of the statement  "            GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_006")); " is 125.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDumpFillButtons,The length of the statement  "      //GUIContent fillContent = new GUIContent("Fill"' "Fills the Selected part with the selected resource(s)\r\n(Fill is from ground source' NOT from other parts in vessel)"); " is 171.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDumpFillButtons,The length of the statement  "      GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_003")); " is 125.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpVesselButtons,The length of the statement  "      GUIContent dumpContent = new GUIContent(SmUtils.Localize("#smloc_transfer_004")' SmUtils.Localize("#smloc_transfer_tt_007")); " is 125.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpVesselButtons,The length of the statement  "      GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_008")); " is 125.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpPartButtons,The length of the statement  "      GUIContent dumpContent = new GUIContent(SmUtils.Localize("#smloc_transfer_004")' SmUtils.Localize("#smloc_transfer_tt_007")); " is 125.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpPartButtons,The length of the statement  "      GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_008")); " is 125.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewDetails,The length of the statement  "        ShowSelectAllOption(selectedCrewMembers' selectedPartsFrom' selectedPartsTo' isSourceView' sourceCrewCount' targetCapacity' selectAll' touristsOnly' xOffset); " is 158.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewDetails,The length of the statement  "        CrewMemberDetails(selectedPartsFrom' selectedPartsTo' selectedCrewMembers' crewMember.Current' xOffset' isVesselMode' targetCapacity); " is 134.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewDetails,The length of the statement  "          $" in WindowTransfer.CrewDetails.  Error attempting to check DeepFreeze for FrozenKerbals.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true); " is 168.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewMemberDetails,The length of the statement  "        selected = GUILayout.Toggle(selected' $"{crewMember.name} ({crewMember.experienceTrait.Title})"' GUILayout.Width(cmWidth)' GUILayout.Height(20)); " is 145.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewMemberDetails,The length of the statement  "        GUILayout.Label($"  {crewMember.name} ({crewMember.experienceTrait.Title })"' GUILayout.Width(cmWidth)' GUILayout.Height(20)); " is 126.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The length of the statement  "        // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)"); " is 129.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The length of the statement  "            GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014")); " is 121.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The length of the statement  "              $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}"; " is 140.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The length of the statement  "              $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue; " is 124.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The length of the statement  "            toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost " is 126.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The length of the statement  "            GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20)); " is 131.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The length of the statement  "        // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)"); " is 129.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The length of the statement  "            GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014")); " is 121.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The length of the statement  "              $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}"; " is 141.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The length of the statement  "              $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue; " is 125.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The length of the statement  "            toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost " is 127.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The length of the statement  "            GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20)); " is 131.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsTarget,The length of the statement  "        if (!(modules.Current is IScienceDataContainer) || ((PartModule)modules.Current).moduleName == "ModuleScienceExperiment") continue; " is 131.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsTarget,The length of the statement  "          GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_013")' SmUtils.Localize("#smloc_transfer_tt_024")); " is 121.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The length of the statement  "          //toolTip = "Smaller Tank xfer amount.  Calculated at " + ratioPump.PumpRatio + ".\r\n(Note: A value of 0.818181 = 0.9/1.1)"; " is 125.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The length of the statement  "          toolTip = $"{SmUtils.Localize("#smloc_transfer_tt_027")}:  {ratioPump.PumpRatio}.\n{SmUtils.Localize("#smloc_transfer_tt_028")}"; " is 129.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The length of the statement  "      if (SMConditions.IsShipControllable() && (SMConditions.CanResourceBeXferred(pumpType' maxPumpAmount) || activePump.PumpType == pumpType && activePump.IsPumpOn)) " is 160.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The length of the statement  "        //toolTip = "Xfer amount slider control.\r\nMove slider to select a different value.\r\nYou can use this instead of the text box above."; " is 137.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceFlowButtons,The length of the statement  "            $"{displayPumps.Current.Resource}: ({displayPumps.Current.FromRemaining:#######0.##}/{displayPumps.Current.FromCapacity:######0.##})"; " is 134.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceFlowButtons,The length of the statement  "            GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_019")' SmUtils.Localize("#smloc_transfer_tt_032")); " is 121.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceFlowButtons,The length of the statement  "            $" in WindowTransfer.ResourceFlowButtons at step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true); " is 136.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselButtonToggled,The length of the statement  "          // Since the objects are reconstructed during Refresh Lists' the objects are no longer reference objects' but value Objects. " is 124.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselButtonToggled,The length of the statement  "          // I may play with IEquatable to see if it suits my needs at a later date' or alter the object to be consumed differently. " is 122.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CanSelectVessel,The length of the statement  "        if (SMAddon.SmVessel.SelectedVesselsTarget.Find(v => v.VesselInfo.rootPartUId == modDockedVessel.VesselInfo.rootPartUId) != null) " is 129.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CanSelectVessel,The length of the statement  "        if (SMAddon.SmVessel.SelectedVesselsSource.Find(v => v.VesselInfo.rootPartUId == modDockedVessel.VesselInfo.rootPartUId) != null) " is 129.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,GetVesselButtonStyle,The length of the statement  "        style = SMAddon.SmVessel.SelectedVesselsSource.Find(v => v.VesselInfo.rootPartUId == modDockedVessel.VesselInfo.rootPartUId) != null " is 132.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,GetVesselButtonStyle,The length of the statement  "        style = SMAddon.SmVessel.SelectedVesselsTarget.Find(v => v.VesselInfo.rootPartUId == modDockedVessel.VesselInfo.rootPartUId) != null " is 132.
Long Statement,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,GetVesselResourceTotals,The length of the statement  "          List<Part>.Enumerator parts = SMAddon.SmVessel.GetVesselsPartsByResource(modDockedVessels' selectedResources).GetEnumerator(); " is 126.
Complex Conditional,ShipManifest.InternalObjects,SMConditions,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMConditions.cs,CanShowShipManifest,The conditional expression  "SMAddon.ShowUi              && HighLogic.LoadedScene == GameScenes.FLIGHT              && !IsPauseMenuOpen()              && !IsFlightDialogDisplaying()              && FlightGlobals.fetch != null              && FlightGlobals.ActiveVessel != null              && !FlightGlobals.ActiveVessel.isEVA              && FlightGlobals.ActiveVessel.vesselType != VesselType.Flag"  is complex.
Complex Conditional,ShipManifest.Process,ProcessController,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\ProcessController.cs,TransferScienceLab,The conditional expression  "(sel != Selection.OnlyProcessed || !processed) &&                (sel != Selection.OnlyUnprocessed || processed)"  is complex.
Complex Conditional,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,MaxPumpAmt,The conditional expression  "FromParts == null || ToParts == null || FromParts.Count == 0 || ToParts.Count == 0"  is complex.
Complex Conditional,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,CalcMaxPumpAmt,The conditional expression  "partsFrom == null || partsTo == null || partsFrom.Count == 0 || partsTo.Count == 0 ||            selectedResources.Count == 0"  is complex.
Complex Conditional,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The conditional expression  "RealXfers            && RealControl            && EnableCrew            && EnableKerbalRename == false            && EnableChangeProfession == false            && EnableCrewModify == false            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources == false            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.0001f            && MaxFlowTimeSec == 180            && LockSettings == false"  is complex.
Complex Conditional,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The conditional expression  "RealXfers == false            && RealControl == false            && EnableCrew            && EnableCrewModify            && EnableKerbalRename            && EnableChangeProfession            && EnableStockCrewXfer            && OverrideStockCrewXfer == false            && EnableClsAllowTransfer            && EnableCls == false            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources            && EnableXferCost == false            && LockSettings == false"  is complex.
Complex Conditional,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The conditional expression  "RealXfers            && RealControl            && EnableCrew            && EnableCrewModify            && EnableKerbalRename            && EnableChangeProfession            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.000001f            && MaxFlowTimeSec == 180            && LockSettings == false"  is complex.
Complex Conditional,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The conditional expression  "HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen()"  is complex.
Complex Conditional,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The conditional expression  "HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel))"  is complex.
Complex Conditional,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,UpdatePartsByResource,The conditional expression  "SMSettings.EnableCrew && (part.CrewCapacity > 0 || SMConditions.IsUsiInflatable(part)) && part.partInfo.name != "kerbalEVA""  is complex.
Complex Conditional,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,FilterVesselListByResources,The conditional expression  "parts.Current.FindModulesImplementing<ModuleScienceExperiment>().Count > 0                  || parts.Current.FindModulesImplementing<ModuleScienceContainer>().Count > 0                  || parts.Current.FindModulesImplementing<ModuleScienceConverter>().Count > 0                  || parts.Current.FindModulesImplementing<ModuleScienceLab>().Count > 0"  is complex.
Complex Conditional,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetAntennas,The conditional expression  "pModule is ModuleDeployableAntenna                || pModule is ModuleAnimateGeneric && (pModule.Events["Toggle"].guiName == "Extend" || pModule.Events["Toggle"].guiName == "Retract")"  is complex.
Complex Conditional,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetVesselsPartsByResource,The conditional expression  "modDockedVessels == null || modDockedVessels.Count <= 0           || selectedResources == null || selectedResources.Count <= 0"  is complex.
Complex Conditional,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetVesselsPartsByResource,The conditional expression  "mdvPart.Current.FindModulesImplementing<ModuleScienceExperiment>().Any()                  || mdvPart.Current.FindModulesImplementing<ModuleScienceContainer>().Any()                  || mdvPart.Current.FindModulesImplementing<ModuleScienceConverter>().Any()                  || mdvPart.Current.FindModulesImplementing<ModuleScienceLab>().Any()"  is complex.
Complex Conditional,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetChildren,The conditional expression  "dNode != null && dNode.vesselInfo != null && dNode.otherNode != null && dNode.otherNode.vesselInfo != null"  is complex.
Complex Conditional,ShipManifest.Windows.Tabs.Settings,TabHighlight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabHighlight.cs,Display,The conditional expression  "HighLogic.LoadedSceneIsFlight && SMSettings.EnableCls &&            SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()) &&            WindowTransfer.ShowWindow"  is complex.
Complex Conditional,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The conditional expression  "SMConditions.IsShipControllable() && (SMConditions.CanResourceBeXferred(pumpType' maxPumpAmount) || activePump.PumpType == pumpType && activePump.IsPumpOn)"  is complex.
Empty Catch Block,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetStockCrewTransferState,The method has an empty catch block.
Magic Number,ShipManifest.InternalObjects,SMToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMToolTips.cs,SetActiveToolTip,The following statement contains a magic number: if (!toolTipActive && control.Contains(Event.current.mousePosition))        {          toolTipActive = true;          // Note at this time controlPosition is in Gui Point system and is local position.  convert to screenpoint.          Rect newControl = new Rect          {            position = GUIUtility.GUIToScreenPoint(control.position)'            width = control.width'            height = control.height          };            // Event.current.mousePosition returns sceen mouseposition.  GuI elements return a value in gui position..           // Add the height of parent GUI elements already drawn to y offset to get the correct screen position          if (control.Contains(Event.current.mousePosition))          {            // Let's use the rectangle as a solid anchor and a stable tooltip' forgiving of mouse movement within bounding box...            ToolTipPos = new Vector2(newControl.xMax + xOffset' newControl.y - 10);              ControlRect = newControl;            XOffset = xOffset;            ControlRect.x += xOffset;            ControlRect.y -= 10;          }          else            toolTip = "";        }
Magic Number,ShipManifest.InternalObjects,SMToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMToolTips.cs,SetActiveToolTip,The following statement contains a magic number: if (!toolTipActive && control.Contains(Event.current.mousePosition))        {          toolTipActive = true;          // Note at this time controlPosition is in Gui Point system and is local position.  convert to screenpoint.          Rect newControl = new Rect          {            position = GUIUtility.GUIToScreenPoint(control.position)'            width = control.width'            height = control.height          };            // Event.current.mousePosition returns sceen mouseposition.  GuI elements return a value in gui position..           // Add the height of parent GUI elements already drawn to y offset to get the correct screen position          if (control.Contains(Event.current.mousePosition))          {            // Let's use the rectangle as a solid anchor and a stable tooltip' forgiving of mouse movement within bounding box...            ToolTipPos = new Vector2(newControl.xMax + xOffset' newControl.y - 10);              ControlRect = newControl;            XOffset = xOffset;            ControlRect.x += xOffset;            ControlRect.y -= 10;          }          else            toolTip = "";        }
Magic Number,ShipManifest.InternalObjects,SMToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMToolTips.cs,RepositionToolTip,The following statement contains a magic number: if (Position.xMax > Screen.width)          Position.x = ControlRect.x - Position.width - (XOffset > 30 ? 30 : XOffset);
Magic Number,ShipManifest.InternalObjects,SMToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\InternalObjects\SMToolTips.cs,RepositionToolTip,The following statement contains a magic number: if (Position.xMax > Screen.width)          Position.x = ControlRect.x - Position.width - (XOffset > 30 ? 30 : XOffset);
Magic Number,ShipManifest.Process,TransferCrew,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferCrew.cs,CrewTransferProcess,The following statement contains a magic number: try        {          if (!CrewXferActive) return;          if (CameraManager.Instance.currentCameraMode == CameraManager.CameraMode.IVA)          {            ScreenMessages.PostScreenMessage("<color=orange>Cannot go IVA.  An SM Crew Xfer is in progress</color>"' 4f);            CameraManager.Instance.SetCameraMode(CameraManager.CameraMode.Flight);          }            switch (CrewXferState)          {            case XferState.Off:              // We're just starting loop' so set some evnironment stuff.              // We want to run the start sound no matter what the realism settings are               // to give an audio indication to the player that the process is active              Timestamp = DateTime.Now;              SMSound.SourceCrewStart.Play();              CrewXferState = XferState.Start;              break;              case XferState.Start:                SMAddon.Elapsed += (DateTime.Now - Timestamp).TotalSeconds;                if (SMSettings.RealXfers)              {                // Play run sound when start sound is nearly done. (repeats)                if (SMAddon.Elapsed >= SMSound.ClipPumpStart.length - 0.25)                {                  SMSound.SourceCrewStart.Stop();                  SMSound.SourceCrewRun.Play();                  SMAddon.Elapsed = 0;                  CrewXferState = XferState.Transfer;                }              }              else              {                CrewXferState = XferState.Transfer;              }              break;              case XferState.Transfer:                SMAddon.Elapsed += (DateTime.Now - Timestamp).TotalSeconds;                if (SMSettings.RealXfers)              {                // wait for movement to end...                if (SMAddon.Elapsed >= CrewXferDelaySec || (IsSeat2SeatXfer && SMAddon.Elapsed > Seat2SeatXferDelaySec))                {                  CrewXferState = XferState.Stop;                  CrewTransferStartAction();                }              }              else              {                if (SMAddon.Elapsed > 1)                {                  CrewXferState = XferState.Stop;                  CrewTransferStartAction();                }              }              break;              case XferState.Stop:              if (SMConditions.ListsUpdating) break;              // Spawn crew in parts and in vessel.              if (SMSettings.RealXfers)              {                // play crew sit.                SMSound.SourceCrewRun.Stop();                SMSound.SourceCrewStop.Play();              }              SMAddon.Elapsed = 0;              CrewTransferStopAction();              CrewXferState = XferState.Portraits;              IvaDelayActive = true;              break;              case XferState.Portraits:                // Account for crew move callbacks by adding a frame delay for portrait updates after crew move...              if (IvaDelayActive && IvaPortraitDelay < SMSettings.IvaUpdateFrameDelay)              {                IvaPortraitDelay += 1;              }              else if ((IvaDelayActive && IvaPortraitDelay >= SMSettings.IvaUpdateFrameDelay) || !IvaDelayActive)              {                if (IsStockXfer)                  ScreenMessages.PostScreenMessage(                    $"<color=yellow>{FromCrewMember.name} moved (by SM) to {ToPart.partInfo.title}.</color>"' 5f);                  ResetXferProcess();              }              break;          }          if (CrewXferState != XferState.Off) Timestamp = DateTime.Now;        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Transfer State:  {CrewXferState}..."' SmUtils.LogType.Error' true);            SmUtils.LogMessage(              $" in CrewTransferProcess (repeating error).  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;            ResetXferProcess();          }        }
Magic Number,ShipManifest.Process,TransferCrew,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferCrew.cs,CrewTransferProcesses,The following statement contains a magic number: try        {          if (!CrewXferActive) return;          if (CameraManager.Instance.currentCameraMode == CameraManager.CameraMode.IVA)          {            ScreenMessages.PostScreenMessage("<color=orange>Cannot go IVA.  An SM Crew Xfer is in progress</color>"' 4f);            CameraManager.Instance.SetCameraMode(CameraManager.CameraMode.Flight);          }            switch (CrewXferState)          {            case XferState.Off:              // We're just starting loop' so set some evnironment stuff.              // We want to run the start sound no matter what the realism settings are               // to give an audio indication to the player that the process is active              Timestamp = DateTime.Now;              SMSound.SourceCrewStart.Play();              CrewXferState = XferState.Start;              break;              case XferState.Start:                SMAddon.Elapsed += (DateTime.Now - Timestamp).TotalSeconds;                if (SMSettings.RealXfers)              {                // Play run sound when start sound is nearly done. (repeats)                if (SMAddon.Elapsed >= SMSound.ClipPumpStart.length - 0.25)                {                  SMSound.SourceCrewStart.Stop();                  SMSound.SourceCrewRun.Play();                  SMAddon.Elapsed = 0;                  CrewXferState = XferState.Transfer;                }              }              else              {                CrewXferState = XferState.Transfer;              }              break;              case XferState.Transfer:                SMAddon.Elapsed += (DateTime.Now - Timestamp).TotalSeconds;                if (SMSettings.RealXfers)              {                // wait for movement to end...                if (SMAddon.Elapsed >= CrewXferDelaySec || (IsSeat2SeatXfer && SMAddon.Elapsed > Seat2SeatXferDelaySec))                {                  CrewXferState = XferState.Stop;                  CrewTransferStartAction();                }              }              else              {                if (SMAddon.Elapsed > 1)                {                  CrewXferState = XferState.Stop;                }               }              break;              case XferState.Stop:                // Spawn crew in parts and in vessel.              if (SMSettings.RealXfers)              {                // play crew sit.                SMSound.SourceCrewRun.Stop();                SMSound.SourceCrewStop.Play();              }              CrewTransferStartAction();              CrewTransferStopAction();              Vessel.CrewWasModified(SMAddon.SmVessel.Vessel);              SMAddon.SmVessel.Vessel.DespawnCrew();              SMAddon.Elapsed = 0;              CrewXferState = XferState.Portraits;              IvaDelayActive = true;              break;              case XferState.Portraits:                // Account for crew move callbacks by adding a frame delay for portrait updates after crew move...              SMAddon.SmVessel.Vessel.SpawnCrew();              if (IvaDelayActive && IvaPortraitDelay < SMSettings.IvaUpdateFrameDelay)              {                IvaPortraitDelay += 1;              }              else if ((IvaDelayActive && IvaPortraitDelay >= SMSettings.IvaUpdateFrameDelay) || !IvaDelayActive)              {                if (IsStockXfer)                  ScreenMessages.PostScreenMessage(                    $"<color=yellow>{FromCrewMember.name} moved (by SM) to {ToPart.partInfo.title}.</color>"' 5f);                  ResetXferProcess();              }              break;          }          if (CrewXferState != XferState.Off) Timestamp = DateTime.Now;        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Transfer State:  {CrewXferState}..."' SmUtils.LogType.Error' true);            SmUtils.LogMessage(              $" in CrewTransferProcess (repeating error).  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;            ResetXferProcess();          }        }
Magic Number,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,ProcessActivePumps,The following statement contains a magic number: try        {          List<TransferPump>.Enumerator tPumps = SMAddon.SmVessel.TransferPumps.GetEnumerator();          while (tPumps.MoveNext())          {            if (tPumps.Current == null) continue;            // Check Pump state:            if (!tPumps.Current.IsPumpOn) continue;            TransferPump pump = tPumps.Current;            switch (pump.PumpStatus)            {              case PumpState.Off:                //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps - Off"' Utilities.LogType.Info' SMSettings.VerboseLogging);                pump.TimeStamp = DateTime.Now;                pump.Start();                pump.PumpStatus = PumpState.Start;                break;              case PumpState.Start:                //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps - Start"' Utilities.LogType.Info' SMSettings.VerboseLogging);                // Calculate Elapsed.                pump.Elapsed += (DateTime.Now - pump.TimeStamp).TotalSeconds;                if (pump.Elapsed >= SMSound.SourcePumpStart.clip.length - 0.25)                {                  pump.Run();                  pump.PumpStatus = PumpState.Run;                }                break;              case PumpState.Run:                //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps - Run"' Utilities.LogType.Info' SMSettings.VerboseLogging);                // 1.  Get Elapsed from last run                double deltaT = (DateTime.Now - pump.TimeStamp).TotalSeconds;                  // 2. Lets wait long enough to get a resource volume worth moving                pump.TimeStamp = DateTime.Now;                pump.Running(deltaT);                break;              case PumpState.Stop:                //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps - Stop"' Utilities.LogType.Info' SMSettings.VerboseLogging);                pump.Stop();                pump.PumpStatus = PumpState.Off;                pumpsToRemove.Add(pump);                break;            }          }          tPumps.Dispose();          if (pumpsToRemove.Count <= 0) return;          List<TransferPump>.Enumerator rpumps = pumpsToRemove.GetEnumerator();          while (rpumps.MoveNext())          {            if (rpumps.Current == null) continue;            SMAddon.SmVessel.TransferPumps.Remove(rpumps.Current);          }          rpumps.Dispose();          pumpsToRemove.Clear();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in TransferPump.ProcessActivePumps (repeating error).  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }        finally        {          PumpProcessOn = IsAnyPumpOn();          UpdateDisplayPumps();        }
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ButtonStyle = new GUIStyle(GUI.skin.button)        {          normal = {textColor = Color.white}'          hover = {textColor = Color.blue}'          fontSize = 12'          padding =          {            top = 0'            bottom = 0          }'          fontStyle = FontStyle.Normal'          alignment = TextAnchor.MiddleCenter'          clipping = TextClipping.Clip        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ButtonToggledStyle = new GUIStyle(GUI.skin.button)        {          normal = {textColor = Color.green}'          fontSize = 12'          padding =          {            top = 0'            bottom = 0          }'          hover = {textColor = Color.blue}        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ButtonStyleLeft = new GUIStyle(GUI.skin.button)        {          normal = {textColor = Color.white}'          hover = {textColor = Color.green}'          fontSize = 12'          padding =          {            top = 0'            bottom = 0          }'          fontStyle = FontStyle.Normal'          alignment = TextAnchor.MiddleLeft'          clipping = TextClipping.Clip        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ButtonToggledStyleLeft = new GUIStyle(GUI.skin.button)        {          normal = {textColor = Color.green}'          fontSize = 12'          padding =          {            top = 0'            bottom = 0          }'          hover = {textColor = Color.white}        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ButtonSourceStyle = new GUIStyle(GUI.skin.button)        {          normal = {textColor = Color.white}'          fontSize = 12'          padding =          {            top = 0'            bottom = 0          }'          hover = {textColor = Color.blue}'          fontStyle = FontStyle.Normal'          alignment = TextAnchor.MiddleLeft'          clipping = TextClipping.Clip        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ButtonToggledSourceStyle = new GUIStyle(GUI.skin.button)        {          normal = {textColor = SMSettings.Colors[SMSettings.SourcePartColor]}'          fontSize = 12'          padding =          {            top = 0'            bottom = 0          }'          hover = {textColor = Color.blue}        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ButtonTargetStyle = new GUIStyle(GUI.skin.button)        {          normal = {textColor = Color.white}'          fontSize = 12'          padding =          {            top = 0'            bottom = 0          }'          hover = {textColor = Color.blue}'          fontStyle = FontStyle.Normal'          alignment = TextAnchor.MiddleLeft'          clipping = TextClipping.Clip        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ButtonToggledTargetStyle = new GUIStyle(GUI.skin.button)        {          normal = {textColor = SMSettings.Colors[SMSettings.TargetPartColor]}'          fontSize = 12'          padding =          {            top = 0'            bottom = 0          }'          hover = {textColor = Color.blue}        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ToggleStyleHeader = new GUIStyle(GUI.skin.toggle)        {          padding =          {            top = 10'            bottom = 6          }'          wordWrap = false'          fontStyle = FontStyle.Bold'          margin = new RectOffset(0' 0' 0' 0)'          alignment = TextAnchor.LowerLeft        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ToggleStyleHeader = new GUIStyle(GUI.skin.toggle)        {          padding =          {            top = 10'            bottom = 6          }'          wordWrap = false'          fontStyle = FontStyle.Bold'          margin = new RectOffset(0' 0' 0' 0)'          alignment = TextAnchor.LowerLeft        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: LabelTabHeader = new GUIStyle(GUI.skin.label)        {          padding =          {            top = 10'            bottom = 6          }'          wordWrap = false'          fontStyle = FontStyle.Bold'          margin = new RectOffset(0' 0' 0' 0)        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: LabelTabHeader = new GUIStyle(GUI.skin.label)        {          padding =          {            top = 10'            bottom = 6          }'          wordWrap = false'          fontStyle = FontStyle.Bold'          margin = new RectOffset(0' 0' 0' 0)        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: LabelStyleHardRule = new GUIStyle(GUI.skin.label)        {          padding =          {            top = 0'            bottom = 6          }'          wordWrap = false'          alignment = TextAnchor.LowerLeft'          fontStyle = FontStyle.Bold'          margin = new RectOffset(0' 0' 0' 0)        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: LabelStyleBold = new GUIStyle(GUI.skin.label)        {          fontSize = 18'          fontStyle = FontStyle.Bold        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle(GUI.skin.textArea)        {          border = new RectOffset(4' 4' 4' 4)'          padding = new RectOffset(5' 5' 5' 5)'          alignment = TextAnchor.MiddleLeft'          fontStyle = FontStyle.Italic'          wordWrap = false'          normal = {textColor = Color.green}'          hover = {textColor = Color.green}        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle(GUI.skin.textArea)        {          border = new RectOffset(4' 4' 4' 4)'          padding = new RectOffset(5' 5' 5' 5)'          alignment = TextAnchor.MiddleLeft'          fontStyle = FontStyle.Italic'          wordWrap = false'          normal = {textColor = Color.green}'          hover = {textColor = Color.green}        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle(GUI.skin.textArea)        {          border = new RectOffset(4' 4' 4' 4)'          padding = new RectOffset(5' 5' 5' 5)'          alignment = TextAnchor.MiddleLeft'          fontStyle = FontStyle.Italic'          wordWrap = false'          normal = {textColor = Color.green}'          hover = {textColor = Color.green}        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle(GUI.skin.textArea)        {          border = new RectOffset(4' 4' 4' 4)'          padding = new RectOffset(5' 5' 5' 5)'          alignment = TextAnchor.MiddleLeft'          fontStyle = FontStyle.Italic'          wordWrap = false'          normal = {textColor = Color.green}'          hover = {textColor = Color.green}        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle(GUI.skin.textArea)        {          border = new RectOffset(4' 4' 4' 4)'          padding = new RectOffset(5' 5' 5' 5)'          alignment = TextAnchor.MiddleLeft'          fontStyle = FontStyle.Italic'          wordWrap = false'          normal = {textColor = Color.green}'          hover = {textColor = Color.green}        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle(GUI.skin.textArea)        {          border = new RectOffset(4' 4' 4' 4)'          padding = new RectOffset(5' 5' 5' 5)'          alignment = TextAnchor.MiddleLeft'          fontStyle = FontStyle.Italic'          wordWrap = false'          normal = {textColor = Color.green}'          hover = {textColor = Color.green}        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle(GUI.skin.textArea)        {          border = new RectOffset(4' 4' 4' 4)'          padding = new RectOffset(5' 5' 5' 5)'          alignment = TextAnchor.MiddleLeft'          fontStyle = FontStyle.Italic'          wordWrap = false'          normal = {textColor = Color.green}'          hover = {textColor = Color.green}        };
Magic Number,ShipManifest,SMStyle,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMStyle.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle(GUI.skin.textArea)        {          border = new RectOffset(4' 4' 4' 4)'          padding = new RectOffset(5' 5' 5' 5)'          alignment = TextAnchor.MiddleLeft'          fontStyle = FontStyle.Italic'          wordWrap = false'          normal = {textColor = Color.green}'          hover = {textColor = Color.green}        };
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: if (mode < 3) RealismMode = mode;
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following statement contains a magic number: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The following statement contains a magic number: if ( // Full            RealXfers            && RealControl            && EnableCrew            && EnableKerbalRename == false            && EnableChangeProfession == false            && EnableCrewModify == false            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources == false            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.0001f            && MaxFlowTimeSec == 180            && LockSettings == false)          return 0;
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The following statement contains a magic number: if ( // Full            RealXfers            && RealControl            && EnableCrew            && EnableKerbalRename == false            && EnableChangeProfession == false            && EnableCrewModify == false            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources == false            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.0001f            && MaxFlowTimeSec == 180            && LockSettings == false)          return 0;
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The following statement contains a magic number: if ( // Full            RealXfers            && RealControl            && EnableCrew            && EnableKerbalRename == false            && EnableChangeProfession == false            && EnableCrewModify == false            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources == false            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.0001f            && MaxFlowTimeSec == 180            && LockSettings == false)          return 0;
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The following statement contains a magic number: if ( // Full            RealXfers            && RealControl            && EnableCrew            && EnableKerbalRename == false            && EnableChangeProfession == false            && EnableCrewModify == false            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources == false            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.0001f            && MaxFlowTimeSec == 180            && LockSettings == false)          return 0;
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The following statement contains a magic number: if ( // Full            RealXfers            && RealControl            && EnableCrew            && EnableKerbalRename == false            && EnableChangeProfession == false            && EnableCrewModify == false            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources == false            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.0001f            && MaxFlowTimeSec == 180            && LockSettings == false)          return 0;
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The following statement contains a magic number: if ( // Default            RealXfers            && RealControl            && EnableCrew            && EnableCrewModify            && EnableKerbalRename            && EnableChangeProfession            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.000001f            && MaxFlowTimeSec == 180            && LockSettings == false)          return 2;
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The following statement contains a magic number: if ( // Default            RealXfers            && RealControl            && EnableCrew            && EnableCrewModify            && EnableKerbalRename            && EnableChangeProfession            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.000001f            && MaxFlowTimeSec == 180            && LockSettings == false)          return 2;
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The following statement contains a magic number: if ( // Default            RealXfers            && RealControl            && EnableCrew            && EnableCrewModify            && EnableKerbalRename            && EnableChangeProfession            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.000001f            && MaxFlowTimeSec == 180            && LockSettings == false)          return 2;
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The following statement contains a magic number: if ( // Default            RealXfers            && RealControl            && EnableCrew            && EnableCrewModify            && EnableKerbalRename            && EnableChangeProfession            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.000001f            && MaxFlowTimeSec == 180            && LockSettings == false)          return 2;
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The following statement contains a magic number: if ( // Default            RealXfers            && RealControl            && EnableCrew            && EnableCrewModify            && EnableKerbalRename            && EnableChangeProfession            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.000001f            && MaxFlowTimeSec == 180            && LockSettings == false)          return 2;
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The following statement contains a magic number: if ( // Default            RealXfers            && RealControl            && EnableCrew            && EnableCrewModify            && EnableKerbalRename            && EnableChangeProfession            && EnableStockCrewXfer            && OverrideStockCrewXfer            && EnableClsAllowTransfer            && EnableCls == ClsInstalled            && EnableScience            && EnableResources            && EnablePfCrews == false            && EnablePfResources            && EnableXferCost            && Math.Abs(FlowCost - 0.0015) < 0.0001f            && Math.Abs(FlowRate - 100) < 0.0001f            && Math.Abs(MinFlowRate) < 0.0001f            && Math.Abs(MaxFlowRate - 1000) < 0.0001f            && Math.Abs(Tolerance - 0.000001) < 0.000001f            && MaxFlowTimeSec == 180            && LockSettings == false)          return 2;
Magic Number,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,GetRealismMode,The following statement contains a magic number: return 3;
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Start,The following statement contains a magic number: try        {          // Reset frame error latch if set          if (FrameErrTripped)             FrameErrTripped = false;            if (WindowRoster.ResetRosterSize)            WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;            if (HighLogic.LoadedScene == GameScenes.SPACECENTER)          {            if (GetClsAddon())            {              SMSettings.ClsInstalled = true;            }            else            {              SMSettings.EnableCls = false;              SMSettings.ClsInstalled = false;            }            // reset any hacked kerbal names in game save from old version of SM/KSP            if (SMSettings.EnableChangeProfession)              WindowRoster.ResetKerbalNames();              SMSettings.SaveSettings();            //RunSave();          }            // Instantiate Event handlers          GameEvents.onGameSceneSwitchRequested.Add(OnGameSceneSwitchRequested);            // If we are not in flight' the rest does not get done!          if (HighLogic.LoadedScene != GameScenes.FLIGHT) return;            GameEvents.onCrewTransferPartListCreated.Add(OnCrewTransferPartListCreated);          GameEvents.onItemTransferStarted.Add(OnItemTransferStarted);          GameEvents.onCrewTransferSelected.Add(OnCrewTransferSelected);          GameEvents.onGameSceneLoadRequested.Add(OnGameSceneLoadRequested);          GameEvents.onVesselChange.Add(OnVesselChange);          GameEvents.onVesselWasModified.Add(OnVesselWasModified);          GameEvents.onVesselChange.Add(OnVesselChange);          GameEvents.onVesselLoaded.Add(OnVesselLoaded);          GameEvents.onShowUI.Add(OnShowUi);          GameEvents.onHideUI.Add(OnHideUi);            // get the current Vessel data          SmVessel = SMVessel.GetInstance(FlightGlobals.ActiveVessel);          SmVessel.RefreshLists();                    // Is CLS installed and enabled?          if (GetClsAddon())          {            SMSettings.ClsInstalled = true;            SMSettings.SaveSettings();            UpdateClsSpaces();            _onClsVesselChangeEvent = GameEvents.FindEvent<EventData<Vessel>>("onCLSVesselChange");            if (_onClsVesselChangeEvent != null) _onClsVesselChangeEvent.Add(OnCLSVesselChange);          }          else          {            SMSettings.EnableCls = false;            SMSettings.ClsInstalled = false;            SMSettings.SaveSettings();          }            SMSettings.SetClsOverride();            // Support for DeepFreeze          //Trigger Update to check and initialize the DeepFreeze Wrapper API          SceneChangeInitDfWrapper = true;            // Load sounds for transfers.          SMSound.LoadSounds();        }        catch (Exception ex)        {          SmUtils.LogMessage($"Error in:  SMAddon.Start.  {ex}"' SmUtils.LogType.Error' true);        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Start,The following statement contains a magic number: try        {          // Reset frame error latch if set          if (FrameErrTripped)             FrameErrTripped = false;            if (WindowRoster.ResetRosterSize)            WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;            if (HighLogic.LoadedScene == GameScenes.SPACECENTER)          {            if (GetClsAddon())            {              SMSettings.ClsInstalled = true;            }            else            {              SMSettings.EnableCls = false;              SMSettings.ClsInstalled = false;            }            // reset any hacked kerbal names in game save from old version of SM/KSP            if (SMSettings.EnableChangeProfession)              WindowRoster.ResetKerbalNames();              SMSettings.SaveSettings();            //RunSave();          }            // Instantiate Event handlers          GameEvents.onGameSceneSwitchRequested.Add(OnGameSceneSwitchRequested);            // If we are not in flight' the rest does not get done!          if (HighLogic.LoadedScene != GameScenes.FLIGHT) return;            GameEvents.onCrewTransferPartListCreated.Add(OnCrewTransferPartListCreated);          GameEvents.onItemTransferStarted.Add(OnItemTransferStarted);          GameEvents.onCrewTransferSelected.Add(OnCrewTransferSelected);          GameEvents.onGameSceneLoadRequested.Add(OnGameSceneLoadRequested);          GameEvents.onVesselChange.Add(OnVesselChange);          GameEvents.onVesselWasModified.Add(OnVesselWasModified);          GameEvents.onVesselChange.Add(OnVesselChange);          GameEvents.onVesselLoaded.Add(OnVesselLoaded);          GameEvents.onShowUI.Add(OnShowUi);          GameEvents.onHideUI.Add(OnHideUi);            // get the current Vessel data          SmVessel = SMVessel.GetInstance(FlightGlobals.ActiveVessel);          SmVessel.RefreshLists();                    // Is CLS installed and enabled?          if (GetClsAddon())          {            SMSettings.ClsInstalled = true;            SMSettings.SaveSettings();            UpdateClsSpaces();            _onClsVesselChangeEvent = GameEvents.FindEvent<EventData<Vessel>>("onCLSVesselChange");            if (_onClsVesselChangeEvent != null) _onClsVesselChangeEvent.Add(OnCLSVesselChange);          }          else          {            SMSettings.EnableCls = false;            SMSettings.ClsInstalled = false;            SMSettings.SaveSettings();          }            SMSettings.SetClsOverride();            // Support for DeepFreeze          //Trigger Update to check and initialize the DeepFreeze Wrapper API          SceneChangeInitDfWrapper = true;            // Load sounds for transfers.          SMSound.LoadSounds();        }        catch (Exception ex)        {          SmUtils.LogMessage($"Error in:  SMAddon.Start.  {ex}"' SmUtils.LogType.Error' true);        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,SMAddon,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,Display,The following statement contains a magic number: try        {          step = "0 - Start";          if (WindowDebugger.ShowWindow)            WindowDebugger.Position = GUILayout.Window(398643' WindowDebugger.Position' WindowDebugger.Display'              WindowDebugger.Title' GUILayout.MinHeight(20));            if (HighLogic.LoadedScene == GameScenes.FLIGHT && SMConditions.CanShowShipManifest() ||               HighLogic.LoadedScene == GameScenes.SPACECENTER && ShowUi && !SMConditions.IsPauseMenuOpen())          {            if (WindowSettings.ShowWindow)            {              step = "4 - Show Settings";              WindowSettings.Position = GUILayout.Window(398546' WindowSettings.Position' WindowSettings.Display'                WindowSettings.Title' GUILayout.MinHeight(20));            }              if (WindowRoster.ShowWindow)            {              step = "6 - Show Roster";              if (WindowRoster.ResetRosterSize)                WindowRoster.Position.height = SMSettings.UseUnityStyle ? 330 : 350;              WindowRoster.Position = GUILayout.Window(398547' WindowRoster.Position' WindowRoster.Display'                WindowRoster.Title' GUILayout.MinHeight(20));            }          }          if (HighLogic.LoadedScene == GameScenes.FLIGHT &&              (FlightGlobals.fetch == null ||               (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel != SmVessel.Vessel)))          {            step = "0a - Vessel Change";            SmVessel.SelectedPartsSource.Clear();            SmVessel.SelectedPartsTarget.Clear();            SmVessel.SelectedVesselsSource.Clear();            SmVessel.SelectedVesselsTarget.Clear();            SmVessel.SelectedResources.Clear();            return;          }            step = "1 - Show Interface(s)";          // Is the scene one we want to be visible in?          if (SMConditions.CanShowShipManifest())          {            // What windows do we want to show?            step = "2 - Can Show Manifest - true";            WindowManifest.Position = GUILayout.Window(398544' WindowManifest.Position' WindowManifest.Display'              WindowManifest.Title' GUILayout.MinHeight(20));              if (WindowTransfer.ShowWindow && SmVessel.SelectedResources.Count > 0)            {              step = "3 - Show Transfer";              // Lets build the running totals for each resource for display in title...              WindowTransfer.Position = GUILayout.Window(398545' WindowTransfer.Position' WindowTransfer.Display'                WindowTransfer.Title' GUILayout.MinHeight(20));            }              if (!WindowManifest.ShowWindow || !WindowControl.ShowWindow) return;            step = "7 - Show Control";            WindowControl.Position = GUILayout.Window(398548' WindowControl.Position' WindowControl.Display'              WindowControl.Title' GUILayout.MinWidth(350)' GUILayout.MinHeight(20));          }          else          {            step = "2 - Can Show Manifest = false";            if (!SMSettings.EnableCls || SmVessel == null) return;            if (SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              SMHighlighter.HighlightClsVessel(false' true);          }        }        catch (Exception ex)        {          if (!FrameErrTripped)          {            SmUtils.LogMessage($" in Display at or near step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            FrameErrTripped = true;          }        }
Magic Number,ShipManifest,ShipManifestModule,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMAddon.cs,DestoryPart,The following statement contains a magic number: if (part != null)          part.temperature = 5000;
Magic Number,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetSelectedResourcesParts,The following statement contains a magic number: switch (SelectedResources.Count)        {          case 1:            SelectedResourcesParts = PartsByResource[SelectedResources[0]];            break;          case 2:            SelectedResourcesParts.Clear();            List<Part>.Enumerator partlist = Vessel.Parts.GetEnumerator();            while (partlist.MoveNext())            {              if (partlist.Current == null) continue;              if (partlist.Current.Resources.Contains(SelectedResources[0]) && partlist.Current.Resources.Contains(SelectedResources[1]))                SelectedResourcesParts.Add(partlist.Current);            }            partlist.Dispose();            break;        }
Magic Number,ShipManifest.Windows.Tabs.Control,TabAntenna,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabAntenna.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Control,TabAntenna,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabAntenna.cs,Display,The following statement contains a magic number: try        {          // Display all antennas          List<ModAntenna>.Enumerator iAntennas = SMAddon.SmVessel.Antennas.GetEnumerator();          while (iAntennas.MoveNext())          {            if (iAntennas.Current == null) continue;            if (!IsRtAntennas && iAntennas.Current.IsRtModule) IsRtAntennas = true;            step = "get Antenna label";            string label = $"{iAntennas.Current.AntennaStatus} - {iAntennas.Current.Title}";            bool open = iAntennas.Current.Extended;            bool newOpen = GUILayout.Toggle(open' label' GUILayout.Width(guiToggleWidth)' GUILayout.Height(40));            step = "button toggle check";            if (!open && newOpen)              iAntennas.Current.ExtendAntenna();            else if (open && !newOpen)              iAntennas.Current.RetractAntenna();              Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' iAntennas.Current.SPart' Event.current.mousePosition);          }          iAntennas.Dispose();            // Display MouseOverHighlighting' if any          SMHighlighter.MouseOverHighlight();        }        catch (Exception ex)        {          SmUtils.LogMessage(            $" in Antenna Tab at step {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'            SmUtils.LogType.Error' true);        }
Magic Number,ShipManifest.Windows.Tabs.Control,TabVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabVessels.cs,Display,The following statement contains a magic number: float scrollX = 20;
Magic Number,ShipManifest.Windows.Tabs.Control,TabVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabVessels.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Control,TabVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabVessels.cs,Display,The following statement contains a magic number: try        {          // Display all Vessels Docked together          // ReSharper disable once ForCanBeConvertedToForeach          for (int v = 0; v < SMAddon.SmVessel.DockedVessels.Count; v++)          {            GUI.enabled = SMAddon.SmVessel.DockedVessels[v].IsDocked;              GUILayout.BeginHorizontal();            if (GUILayout.Button("UnDock"' GUILayout.Width(guiBtnWidth)))            {              // close hatches If CLS applies              if (SMConditions.IsClsEnabled()) CloseVesselHatches(SMAddon.SmVessel.DockedVessels[v]);                // Decouple/undock selected vessel.              UndockSelectedVessel(SMAddon.SmVessel.DockedVessels[v]);            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' SMAddon.SmVessel.DockedVessels[v]' Event.current.mousePosition);            GUI.enabled = true;            if (SMAddon.SmVessel.DockedVessels[v].IsEditing)              SMAddon.SmVessel.DockedVessels[v].renameVessel = GUILayout.TextField(SMAddon.SmVessel.DockedVessels[v].renameVessel' GUILayout.Width(guiLabelWidth - (guiBtnWidth + 5)));            else GUILayout.Label($"{SMAddon.SmVessel.DockedVessels[v].VesselInfo.name}"' GUILayout.Width(guiLabelWidth));            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' SMAddon.SmVessel.DockedVessels[v]' Event.current.mousePosition);            // now editing buttons.            GUIContent content = SMAddon.SmVessel.DockedVessels[v].IsEditing ? new GUIContent("Save"' "Saves the changes to the docked vessel name.") : new GUIContent("Edit"' "Change the docked vessel name.");            if (GUILayout.Button(content' GUILayout.Width(50)))            {              if (SMAddon.SmVessel.DockedVessels[v].IsEditing)              {                SMAddon.SmVessel.DockedVessels[v].VesselInfo.name = SMAddon.SmVessel.DockedVessels[v].renameVessel;                SMAddon.SmVessel.DockedVessels[v].renameVessel = null;                SMAddon.SmVessel.DockedVessels[v].IsEditing = false;              }              else              {                SMAddon.SmVessel.DockedVessels[v].IsEditing = true;                SMAddon.SmVessel.DockedVessels[v].renameVessel = SMAddon.SmVessel.DockedVessels[v].VesselInfo.name;                }            }            if (SMAddon.SmVessel.DockedVessels[v].IsEditing)            {              GUIContent cancelContent = new GUIContent("Cancel"'"Cancel changes to docked vessel name");              if (GUILayout.Button(cancelContent' GUILayout.Width(guiBtnWidth)))              {                SMAddon.SmVessel.DockedVessels[v].renameVessel = null;                SMAddon.SmVessel.DockedVessels[v].IsEditing = false;              }            }            GUILayout.EndHorizontal();          }                    // Display MouseOverHighlighting' if any          SMHighlighter.MouseOverHighlight();        }        catch (Exception ex)        {          SmUtils.LogMessage(            $" in Vessels Tab at step {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'            SmUtils.LogType.Error' true);        }
Magic Number,ShipManifest.Windows.Tabs.Control,TabVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabVessels.cs,Display,The following statement contains a magic number: try        {          // Display all Vessels Docked together          // ReSharper disable once ForCanBeConvertedToForeach          for (int v = 0; v < SMAddon.SmVessel.DockedVessels.Count; v++)          {            GUI.enabled = SMAddon.SmVessel.DockedVessels[v].IsDocked;              GUILayout.BeginHorizontal();            if (GUILayout.Button("UnDock"' GUILayout.Width(guiBtnWidth)))            {              // close hatches If CLS applies              if (SMConditions.IsClsEnabled()) CloseVesselHatches(SMAddon.SmVessel.DockedVessels[v]);                // Decouple/undock selected vessel.              UndockSelectedVessel(SMAddon.SmVessel.DockedVessels[v]);            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' SMAddon.SmVessel.DockedVessels[v]' Event.current.mousePosition);            GUI.enabled = true;            if (SMAddon.SmVessel.DockedVessels[v].IsEditing)              SMAddon.SmVessel.DockedVessels[v].renameVessel = GUILayout.TextField(SMAddon.SmVessel.DockedVessels[v].renameVessel' GUILayout.Width(guiLabelWidth - (guiBtnWidth + 5)));            else GUILayout.Label($"{SMAddon.SmVessel.DockedVessels[v].VesselInfo.name}"' GUILayout.Width(guiLabelWidth));            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' SMAddon.SmVessel.DockedVessels[v]' Event.current.mousePosition);            // now editing buttons.            GUIContent content = SMAddon.SmVessel.DockedVessels[v].IsEditing ? new GUIContent("Save"' "Saves the changes to the docked vessel name.") : new GUIContent("Edit"' "Change the docked vessel name.");            if (GUILayout.Button(content' GUILayout.Width(50)))            {              if (SMAddon.SmVessel.DockedVessels[v].IsEditing)              {                SMAddon.SmVessel.DockedVessels[v].VesselInfo.name = SMAddon.SmVessel.DockedVessels[v].renameVessel;                SMAddon.SmVessel.DockedVessels[v].renameVessel = null;                SMAddon.SmVessel.DockedVessels[v].IsEditing = false;              }              else              {                SMAddon.SmVessel.DockedVessels[v].IsEditing = true;                SMAddon.SmVessel.DockedVessels[v].renameVessel = SMAddon.SmVessel.DockedVessels[v].VesselInfo.name;                }            }            if (SMAddon.SmVessel.DockedVessels[v].IsEditing)            {              GUIContent cancelContent = new GUIContent("Cancel"'"Cancel changes to docked vessel name");              if (GUILayout.Button(cancelContent' GUILayout.Width(guiBtnWidth)))              {                SMAddon.SmVessel.DockedVessels[v].renameVessel = null;                SMAddon.SmVessel.DockedVessels[v].IsEditing = false;              }            }            GUILayout.EndHorizontal();          }                    // Display MouseOverHighlighting' if any          SMHighlighter.MouseOverHighlight();        }        catch (Exception ex)        {          SmUtils.LogMessage(            $" in Vessels Tab at step {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'            SmUtils.LogType.Error' true);        }
Magic Number,ShipManifest.Windows.Tabs.Control,TabScienceLab,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabScienceLabs.cs,Display,The following statement contains a magic number: float scrollX = 10;
Magic Number,ShipManifest.Windows.Tabs.Control,TabScienceLab,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabScienceLabs.cs,Display,The following statement contains a magic number: float scrollY = 50 - displayViewerPosition.y;
Magic Number,ShipManifest.Windows.Tabs.Control,TabScienceLab,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabScienceLabs.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Control,TabScienceLab,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabScienceLabs.cs,Display,The following statement contains a magic number: try        {          // Display all Labs          List<ModuleScienceLab>.Enumerator iLabs = SMAddon.SmVessel.Labs.GetEnumerator();          while (iLabs.MoveNext())          {            if (iLabs.Current == null) continue;              step = "gui enable";            GUI.enabled = true;            string label = $"{iLabs.Current.name} - ({(iLabs.Current.IsOperational() ? SmUtils.Localize("#smloc_control_lab_001") : SmUtils.Localize("#smloc_control_lab_002"))})"; // Operational' InOp            GUILayout.Label(label' GUILayout.Width(guiLabelWidth)' GUILayout.Height(40));              Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' iLabs.Current.part' Event.current.mousePosition);          }          iLabs.Dispose();            // Display MouseOverHighlighting' if any          SMHighlighter.MouseOverHighlight();        }        catch (Exception ex)        {          SmUtils.LogMessage(            $" in Solar Panel Tab at step {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'            SmUtils.LogType.Error' true);        }
Magic Number,ShipManifest.Windows.Tabs.Control,TabHatch,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabHatch.cs,Display,The following statement contains a magic number: float scrollX = 20;
Magic Number,ShipManifest.Windows.Tabs.Control,TabHatch,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabHatch.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Control,TabLight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabLight.cs,Display,The following statement contains a magic number: float scrollX = 20;
Magic Number,ShipManifest.Windows.Tabs.Control,TabLight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabLight.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Control,TabLight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabLight.cs,Display,The following statement contains a magic number: try        {          // Display all Lights          List<ModLight>.Enumerator iLights = SMAddon.SmVessel.Lights.GetEnumerator();          while (iLights.MoveNext())          {            if (iLights.Current == null) continue;            string label = $"{iLights.Current.Status} - {iLights.Current.Title}";            bool onState = iLights.Current.IsOn;            bool newOnState = GUILayout.Toggle(onState' label' GUILayout.Width(guiToggleWidth)' GUILayout.Height(40));            step = "button toggle check";            if (!onState && newOnState)              iLights.Current.TurnOnLight();            else if (onState && !newOnState)              iLights.Current.TurnOffLight();            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' iLights.Current.SPart' Event.current.mousePosition);          }          iLights.Dispose();            // Display MouseOverHighlighting' if any          SMHighlighter.MouseOverHighlight();        }        catch (Exception ex)        {          SmUtils.LogMessage(            $" in Light Tab at step {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error'            true);        }
Magic Number,ShipManifest.Windows.Tabs.Control,TabSolarPanel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabSolarPanel.cs,Display,The following statement contains a magic number: float scrollX = 10;
Magic Number,ShipManifest.Windows.Tabs.Control,TabSolarPanel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabSolarPanel.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Control,TabSolarPanel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Control\TabSolarPanel.cs,Display,The following statement contains a magic number: try        {          // Display all hatches          List<ModSolarPanel>.Enumerator iPanels = SMAddon.SmVessel.SolarPanels.GetEnumerator();          while (iPanels.MoveNext())          {            if (iPanels.Current == null) continue;            bool isEnabled = true;            string label = $"{iPanels.Current.PanelStatus} - {iPanels.Current.Title}";            if (iPanels.Current.PanelState == ModuleDeployablePart.DeployState.BROKEN)            {              isEnabled = false;              label = $"{iPanels.Current.PanelStatus} - ({SmUtils.Localize("#smloc_module_004")}) - {iPanels.Current.Title}"; // "Broken"            }            bool open =              !(iPanels.Current.PanelState == ModuleDeployablePart.DeployState.RETRACTED ||                iPanels.Current.PanelState == ModuleDeployablePart.DeployState.RETRACTING ||                iPanels.Current.PanelState == ModuleDeployablePart.DeployState.BROKEN);              step = "gui enable";            GUI.enabled = isEnabled;            if (!iPanels.Current.CanBeRetracted)            {              label = $"{iPanels.Current.PanelStatus} - ({SmUtils.Localize("#smloc_module_005")}) - {iPanels.Current.Title}"; // "Locked"            }            bool newOpen = GUILayout.Toggle(open' label' GUILayout.Width(guiToggleWidth)' GUILayout.Height(40));            step = "button toggle check";            if (!open && newOpen)              iPanels.Current.ExtendPanel();            else if (open && !newOpen)              iPanels.Current.RetractPanel();              Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' WindowControl.TabBox.height' iPanels.Current.SPart' Event.current.mousePosition);          }          iPanels.Dispose();            // Display MouseOverHighlighting' if any          SMHighlighter.MouseOverHighlight();        }        catch (Exception ex)        {          SmUtils.LogMessage(            $" in Solar Panel Tab at step {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'            SmUtils.LogType.Error' true);        }
Magic Number,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,The following statement contains a magic number: int scrollX = 20;
Magic Number,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(110));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,The following statement contains a magic number: SMSettings.ErrorLogLength = GUILayout.TextField(SMSettings.ErrorLogLength' GUILayout.Width(40));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,The following statement contains a magic number: GUILayout.Label("(lines)"' GUILayout.Width(50));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(110));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,The following statement contains a magic number: TxtSaveInterval = GUILayout.TextField(TxtSaveInterval' GUILayout.Width(40));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabConfig,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabConfig.cs,Display,The following statement contains a magic number: GUILayout.Label(SmUtils.Localize("#smloc_settings_config_010")' GUILayout.Width(40));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabHighlight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabHighlight.cs,Display,The following statement contains a magic number: int scrollX = 20;
Magic Number,ShipManifest.Windows.Tabs.Settings,TabHighlight,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabHighlight.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: int scrollX = 20;
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Space(20);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Space(20);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: SMSettings.OverrideStockCrewXfer = GUILayout.Toggle(SMSettings.OverrideStockCrewXfer' _guiLabel'          GUILayout.Width(300));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Space(20);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Space(20);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Space(20);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Space(20);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Space(35);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(125)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(125)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: StrFlowCost = GUILayout.TextField(StrFlowCost' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: StrFlowCost = GUILayout.TextField(StrFlowCost' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: StrFlowCost = GUILayout.TextField(StrFlowCost' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(80)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(80)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Space(25);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(135)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(135)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: strFlowRate = GUILayout.TextField(strFlowRate' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: strFlowRate = GUILayout.TextField(strFlowRate' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: strFlowRate = GUILayout.TextField(strFlowRate' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(80)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(80)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Space(30);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(SMSettings.MinFlowRate.ToString(CultureInfo.InvariantCulture)' GUILayout.Width(10)'          GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(SMSettings.MinFlowRate.ToString(CultureInfo.InvariantCulture)' GUILayout.Width(10)'          GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: SMSettings.FlowRate = GUILayout.HorizontalSlider((float) SMSettings.FlowRate' (float) SMSettings.MinFlowRate'          (float) SMSettings.MaxFlowRate' GUILayout.Width(240)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: SMSettings.FlowRate = GUILayout.HorizontalSlider((float) SMSettings.FlowRate' (float) SMSettings.MinFlowRate'          (float) SMSettings.MaxFlowRate' GUILayout.Width(240)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(40)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(40)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Space(30);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(130)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(130)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: strMinFlowRate = GUILayout.TextField(strMinFlowRate' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: strMinFlowRate = GUILayout.TextField(strMinFlowRate' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: strMinFlowRate = GUILayout.TextField(strMinFlowRate' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(80)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(80)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Space(30);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(130)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(130)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: strMaxFlowRate = GUILayout.TextField(strMaxFlowRate' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: strMaxFlowRate = GUILayout.TextField(strMaxFlowRate' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: strMaxFlowRate = GUILayout.TextField(strMaxFlowRate' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(80)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(80)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Space(30);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(130)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(130)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: strMaxFlowTime = GUILayout.TextField(strMaxFlowTime' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: strMaxFlowTime = GUILayout.TextField(strMaxFlowTime' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: strMaxFlowTime = GUILayout.TextField(strMaxFlowTime' 20' GUILayout.Height(20)' GUILayout.Width(80));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(80)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label(_guiLabel' GUILayout.Width(80)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,DisplayRealismButtons,The following statement contains a magic number: GUIStyle[] styles =        {          SMSettings.RealismMode == 0 ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle'          SMSettings.RealismMode == 1 ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle'          SMSettings.RealismMode == 2 ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle'          SMSettings.RealismMode == 3 ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle'        };
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,DisplayRealismButtons,The following statement contains a magic number: GUIStyle[] styles =        {          SMSettings.RealismMode == 0 ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle'          SMSettings.RealismMode == 1 ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle'          SMSettings.RealismMode == 2 ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle'          SMSettings.RealismMode == 3 ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle'        };
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,DisplayRealismButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && _canShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(_rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,DisplayRealismButtons,The following statement contains a magic number: GUILayout.Label(_guiLabel' SMStyle.LabelStyleNoWrap' GUILayout.Width(90));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,DisplayRealismButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && _canShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(_rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,DisplayRealismButtons,The following statement contains a magic number: for (int x = 0; x <= 3; x++)        {          if (x == 3) GUI.enabled = false;          if (GUILayout.Button(options[x]' styles[x]' GUILayout.Height(20)))          {            if (x != SMSettings.RealismMode) SMSettings.SetRealismMode(x);          }          _rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(_rect' GUI.tooltip' ref ToolTipActive' 10);          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,DisplayRealismButtons,The following statement contains a magic number: for (int x = 0; x <= 3; x++)        {          if (x == 3) GUI.enabled = false;          if (GUILayout.Button(options[x]' styles[x]' GUILayout.Height(20)))          {            if (x != SMSettings.RealismMode) SMSettings.SetRealismMode(x);          }          _rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(_rect' GUI.tooltip' ref ToolTipActive' 10);          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,DisplayRealismButtons,The following statement contains a magic number: for (int x = 0; x <= 3; x++)        {          if (x == 3) GUI.enabled = false;          if (GUILayout.Button(options[x]' styles[x]' GUILayout.Height(20)))          {            if (x != SMSettings.RealismMode) SMSettings.SetRealismMode(x);          }          _rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(_rect' GUI.tooltip' ref ToolTipActive' 10);          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows.Tabs.Settings,TabRealism,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabRealism.cs,DisplayRealismButtons,The following statement contains a magic number: for (int x = 0; x <= 3; x++)        {          if (x == 3) GUI.enabled = false;          if (GUILayout.Button(options[x]' styles[x]' GUILayout.Height(20)))          {            if (x != SMSettings.RealismMode) SMSettings.SetRealismMode(x);          }          _rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(_rect' GUI.tooltip' ref ToolTipActive' 10);          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: int scrollX = 20;
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: GUILayout.Label($"{SmUtils.Localize("#smloc_settings_sounds_001")}:"' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: GUILayout.Label(SmUtils.Localize("#smloc_settings_sounds_006")' GUILayout.Width(40)'GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: GUILayout.Label(SmUtils.Localize("#smloc_settings_sounds_006")' GUILayout.Width(40)'GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: SMSettings.PumpSoundVol = GUILayout.HorizontalSlider((float)SMSettings.PumpSoundVol' 0f' 1f' GUILayout.Width(140)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: SMSettings.PumpSoundVol = GUILayout.HorizontalSlider((float)SMSettings.PumpSoundVol' 0f' 1f' GUILayout.Width(140)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: GUILayout.Label(new GUIContent(_label' _toolTip)' GUILayout.Width(40)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: GUILayout.Label(new GUIContent(_label' _toolTip)' GUILayout.Width(40)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: GUILayout.Label(" "' GUILayout.Height(10));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: GUILayout.Label($"{SmUtils.Localize("#smloc_settings_sounds_008")}:"' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: GUILayout.Label(SmUtils.Localize("#smloc_settings_sounds_006")' GUILayout.Width(40)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: GUILayout.Label(SmUtils.Localize("#smloc_settings_sounds_006")' GUILayout.Width(40)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: SMSettings.CrewSoundVol = GUILayout.HorizontalSlider((float)SMSettings.CrewSoundVol' 0f' 1f' GUILayout.Width(140)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: SMSettings.CrewSoundVol = GUILayout.HorizontalSlider((float)SMSettings.CrewSoundVol' 0f' 1f' GUILayout.Width(140)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: GUILayout.Label(new GUIContent(_label' _toolTip)' GUILayout.Width(40)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabSounds,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabSounds.cs,Display,The following statement contains a magic number: GUILayout.Label(new GUIContent(_label' _toolTip)' GUILayout.Width(40)' GUILayout.Height(20));
Magic Number,ShipManifest.Windows.Tabs.Settings,TabToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabToolTips.cs,Display,The following statement contains a magic number: int scrollX = 20;
Magic Number,ShipManifest.Windows.Tabs.Settings,TabToolTips,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\Tabs\Settings\TabToolTips.cs,Display,The following statement contains a magic number: GUILayout.Label("____________________________________________________________________________________________"'          SMStyle.LabelStyleHardRule' GUILayout.Height(10)' GUILayout.Width(guiRuleWidth));
Magic Number,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,The following statement contains a magic number: const float guiWidth = 20;
Magic Number,ShipManifest.Windows,GuiUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\GuiUtils.cs,ColorSelector,The following statement contains a magic number: const float guiHeight = 20;
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,Display,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,Display,The following statement contains a magic number: GUI.DragWindow(new Rect(0' 0' Screen.width' 30));
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The following statement contains a magic number: if (GUILayout.Button(label' vesselsStyle' GUILayout.Height(20))) // Vessels"        {          try          {            SMAddon.SmVessel.GetDockedVessels();            _selectedTab = Tab.Vessel;          }          catch (Exception ex)          {            SmUtils.LogMessage(              $" opening Solar Panels Tab.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error'              true);          }        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The following statement contains a magic number: if (SMSettings.EnableCls)        {          label = new GUIContent(SmUtils.Localize("#smloc_control_002")' SmUtils.Localize("#smloc_control_tt_001"));          GUIStyle hatchesStyle = _selectedTab == Tab.Hatch ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (GUILayout.Button(label' hatchesStyle' GUILayout.Height(20))) // "Hatches"          {            try            {              SMAddon.UpdateClsSpaces();              SMAddon.SmVessel.GetHatches();              _selectedTab = Tab.Hatch;            }            catch (Exception ex)            {              SmUtils.LogMessage(                $" opening Hatches Tab.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'                SmUtils.LogType.Error' true);            }          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The following statement contains a magic number: if (SMSettings.EnableCls)        {          label = new GUIContent(SmUtils.Localize("#smloc_control_002")' SmUtils.Localize("#smloc_control_tt_001"));          GUIStyle hatchesStyle = _selectedTab == Tab.Hatch ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (GUILayout.Button(label' hatchesStyle' GUILayout.Height(20))) // "Hatches"          {            try            {              SMAddon.UpdateClsSpaces();              SMAddon.SmVessel.GetHatches();              _selectedTab = Tab.Hatch;            }            catch (Exception ex)            {              SmUtils.LogMessage(                $" opening Hatches Tab.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'                SmUtils.LogType.Error' true);            }          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The following statement contains a magic number: if (GUILayout.Button(label' panelsStyle' GUILayout.Height(20))) // "Solar Panels"        {          try          {            SMAddon.SmVessel.GetSolarPanels();            _selectedTab = Tab.Panel;          }          catch (Exception ex)          {            SmUtils.LogMessage(              $" opening Solar Panels Tab.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error'              true);          }        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The following statement contains a magic number: if (GUILayout.Button(label' antennaStyle' GUILayout.Height(20))) // "Antennas"        {          try          {            SMAddon.SmVessel.GetAntennas();            _selectedTab = Tab.Antenna;          }          catch (Exception ex)          {            SmUtils.LogMessage(              $" opening Antennas Tab.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The following statement contains a magic number: if (GUILayout.Button(label' lightsStyle' GUILayout.Height(20))) // "Lights"        {          try          {            SMAddon.SmVessel.GetLights();            _selectedTab = Tab.Light;          }          catch (Exception ex)          {            SmUtils.LogMessage(              $" opening Lights Tab.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The following statement contains a magic number: if (GUILayout.Button(label' labsStyle' GUILayout.Height(20))) // "Labs"        {          try          {            SMAddon.SmVessel.GetLabs();            _selectedTab = Tab.Lab;          }          catch (Exception ex)          {            SmUtils.LogMessage(              $" opening Labs Tab.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayWindowTabs,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayTabActions,The following statement contains a magic number: switch (_selectedTab)        {          case Tab.Panel:            GUI.enabled = SMAddon.SmVessel.SolarPanels.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_016")' GUILayout.Height(20))) // "Retract All Solar Panels"              TabSolarPanel.RetractAllPanels();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_007")' GUILayout.Height(20))) // "Extend All Solar Panels"              TabSolarPanel.ExtendAllPanels();            break;          case Tab.Hatch:            GUI.enabled = SMAddon.SmVessel.Hatches.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_008")' GUILayout.Height(20))) // "Close All Hatches"              TabHatch.CloseAllHatches();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_009")' GUILayout.Height(20))) // "Open All Hatches"              TabHatch.OpenAllHatches();            break;          case Tab.Antenna:            GUI.enabled = SMAddon.SmVessel.Antennas.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_010")' GUILayout.Height(20))) // "Retract All Antennas"              TabAntenna.RetractAllAntennas();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_011")' GUILayout.Height(20))) // "Extend All Antennas"              TabAntenna.ExtendAllAntennas();            break;          case Tab.Light:            GUI.enabled = SMAddon.SmVessel.Lights.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_012")' GUILayout.Height(20))) // "Turn Off All Lights"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_013")' GUILayout.Height(20))) // "Turn On All Lights"              TabLight.TurnOnAllLights();            break;          case Tab.Lab:            GUI.enabled = SMAddon.SmVessel.Labs.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_014")' GUILayout.Height(20))) // "Turn Off All Labs"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_015")' GUILayout.Height(20))) // "Turn On All Labs"              TabLight.TurnOnAllLights();            break;          case Tab.Vessel:          case Tab.None:            break;          default:            throw new ArgumentOutOfRangeException();        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayTabActions,The following statement contains a magic number: switch (_selectedTab)        {          case Tab.Panel:            GUI.enabled = SMAddon.SmVessel.SolarPanels.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_016")' GUILayout.Height(20))) // "Retract All Solar Panels"              TabSolarPanel.RetractAllPanels();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_007")' GUILayout.Height(20))) // "Extend All Solar Panels"              TabSolarPanel.ExtendAllPanels();            break;          case Tab.Hatch:            GUI.enabled = SMAddon.SmVessel.Hatches.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_008")' GUILayout.Height(20))) // "Close All Hatches"              TabHatch.CloseAllHatches();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_009")' GUILayout.Height(20))) // "Open All Hatches"              TabHatch.OpenAllHatches();            break;          case Tab.Antenna:            GUI.enabled = SMAddon.SmVessel.Antennas.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_010")' GUILayout.Height(20))) // "Retract All Antennas"              TabAntenna.RetractAllAntennas();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_011")' GUILayout.Height(20))) // "Extend All Antennas"              TabAntenna.ExtendAllAntennas();            break;          case Tab.Light:            GUI.enabled = SMAddon.SmVessel.Lights.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_012")' GUILayout.Height(20))) // "Turn Off All Lights"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_013")' GUILayout.Height(20))) // "Turn On All Lights"              TabLight.TurnOnAllLights();            break;          case Tab.Lab:            GUI.enabled = SMAddon.SmVessel.Labs.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_014")' GUILayout.Height(20))) // "Turn Off All Labs"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_015")' GUILayout.Height(20))) // "Turn On All Labs"              TabLight.TurnOnAllLights();            break;          case Tab.Vessel:          case Tab.None:            break;          default:            throw new ArgumentOutOfRangeException();        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayTabActions,The following statement contains a magic number: switch (_selectedTab)        {          case Tab.Panel:            GUI.enabled = SMAddon.SmVessel.SolarPanels.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_016")' GUILayout.Height(20))) // "Retract All Solar Panels"              TabSolarPanel.RetractAllPanels();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_007")' GUILayout.Height(20))) // "Extend All Solar Panels"              TabSolarPanel.ExtendAllPanels();            break;          case Tab.Hatch:            GUI.enabled = SMAddon.SmVessel.Hatches.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_008")' GUILayout.Height(20))) // "Close All Hatches"              TabHatch.CloseAllHatches();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_009")' GUILayout.Height(20))) // "Open All Hatches"              TabHatch.OpenAllHatches();            break;          case Tab.Antenna:            GUI.enabled = SMAddon.SmVessel.Antennas.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_010")' GUILayout.Height(20))) // "Retract All Antennas"              TabAntenna.RetractAllAntennas();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_011")' GUILayout.Height(20))) // "Extend All Antennas"              TabAntenna.ExtendAllAntennas();            break;          case Tab.Light:            GUI.enabled = SMAddon.SmVessel.Lights.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_012")' GUILayout.Height(20))) // "Turn Off All Lights"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_013")' GUILayout.Height(20))) // "Turn On All Lights"              TabLight.TurnOnAllLights();            break;          case Tab.Lab:            GUI.enabled = SMAddon.SmVessel.Labs.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_014")' GUILayout.Height(20))) // "Turn Off All Labs"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_015")' GUILayout.Height(20))) // "Turn On All Labs"              TabLight.TurnOnAllLights();            break;          case Tab.Vessel:          case Tab.None:            break;          default:            throw new ArgumentOutOfRangeException();        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayTabActions,The following statement contains a magic number: switch (_selectedTab)        {          case Tab.Panel:            GUI.enabled = SMAddon.SmVessel.SolarPanels.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_016")' GUILayout.Height(20))) // "Retract All Solar Panels"              TabSolarPanel.RetractAllPanels();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_007")' GUILayout.Height(20))) // "Extend All Solar Panels"              TabSolarPanel.ExtendAllPanels();            break;          case Tab.Hatch:            GUI.enabled = SMAddon.SmVessel.Hatches.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_008")' GUILayout.Height(20))) // "Close All Hatches"              TabHatch.CloseAllHatches();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_009")' GUILayout.Height(20))) // "Open All Hatches"              TabHatch.OpenAllHatches();            break;          case Tab.Antenna:            GUI.enabled = SMAddon.SmVessel.Antennas.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_010")' GUILayout.Height(20))) // "Retract All Antennas"              TabAntenna.RetractAllAntennas();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_011")' GUILayout.Height(20))) // "Extend All Antennas"              TabAntenna.ExtendAllAntennas();            break;          case Tab.Light:            GUI.enabled = SMAddon.SmVessel.Lights.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_012")' GUILayout.Height(20))) // "Turn Off All Lights"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_013")' GUILayout.Height(20))) // "Turn On All Lights"              TabLight.TurnOnAllLights();            break;          case Tab.Lab:            GUI.enabled = SMAddon.SmVessel.Labs.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_014")' GUILayout.Height(20))) // "Turn Off All Labs"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_015")' GUILayout.Height(20))) // "Turn On All Labs"              TabLight.TurnOnAllLights();            break;          case Tab.Vessel:          case Tab.None:            break;          default:            throw new ArgumentOutOfRangeException();        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayTabActions,The following statement contains a magic number: switch (_selectedTab)        {          case Tab.Panel:            GUI.enabled = SMAddon.SmVessel.SolarPanels.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_016")' GUILayout.Height(20))) // "Retract All Solar Panels"              TabSolarPanel.RetractAllPanels();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_007")' GUILayout.Height(20))) // "Extend All Solar Panels"              TabSolarPanel.ExtendAllPanels();            break;          case Tab.Hatch:            GUI.enabled = SMAddon.SmVessel.Hatches.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_008")' GUILayout.Height(20))) // "Close All Hatches"              TabHatch.CloseAllHatches();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_009")' GUILayout.Height(20))) // "Open All Hatches"              TabHatch.OpenAllHatches();            break;          case Tab.Antenna:            GUI.enabled = SMAddon.SmVessel.Antennas.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_010")' GUILayout.Height(20))) // "Retract All Antennas"              TabAntenna.RetractAllAntennas();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_011")' GUILayout.Height(20))) // "Extend All Antennas"              TabAntenna.ExtendAllAntennas();            break;          case Tab.Light:            GUI.enabled = SMAddon.SmVessel.Lights.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_012")' GUILayout.Height(20))) // "Turn Off All Lights"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_013")' GUILayout.Height(20))) // "Turn On All Lights"              TabLight.TurnOnAllLights();            break;          case Tab.Lab:            GUI.enabled = SMAddon.SmVessel.Labs.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_014")' GUILayout.Height(20))) // "Turn Off All Labs"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_015")' GUILayout.Height(20))) // "Turn On All Labs"              TabLight.TurnOnAllLights();            break;          case Tab.Vessel:          case Tab.None:            break;          default:            throw new ArgumentOutOfRangeException();        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayTabActions,The following statement contains a magic number: switch (_selectedTab)        {          case Tab.Panel:            GUI.enabled = SMAddon.SmVessel.SolarPanels.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_016")' GUILayout.Height(20))) // "Retract All Solar Panels"              TabSolarPanel.RetractAllPanels();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_007")' GUILayout.Height(20))) // "Extend All Solar Panels"              TabSolarPanel.ExtendAllPanels();            break;          case Tab.Hatch:            GUI.enabled = SMAddon.SmVessel.Hatches.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_008")' GUILayout.Height(20))) // "Close All Hatches"              TabHatch.CloseAllHatches();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_009")' GUILayout.Height(20))) // "Open All Hatches"              TabHatch.OpenAllHatches();            break;          case Tab.Antenna:            GUI.enabled = SMAddon.SmVessel.Antennas.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_010")' GUILayout.Height(20))) // "Retract All Antennas"              TabAntenna.RetractAllAntennas();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_011")' GUILayout.Height(20))) // "Extend All Antennas"              TabAntenna.ExtendAllAntennas();            break;          case Tab.Light:            GUI.enabled = SMAddon.SmVessel.Lights.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_012")' GUILayout.Height(20))) // "Turn Off All Lights"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_013")' GUILayout.Height(20))) // "Turn On All Lights"              TabLight.TurnOnAllLights();            break;          case Tab.Lab:            GUI.enabled = SMAddon.SmVessel.Labs.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_014")' GUILayout.Height(20))) // "Turn Off All Labs"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_015")' GUILayout.Height(20))) // "Turn On All Labs"              TabLight.TurnOnAllLights();            break;          case Tab.Vessel:          case Tab.None:            break;          default:            throw new ArgumentOutOfRangeException();        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayTabActions,The following statement contains a magic number: switch (_selectedTab)        {          case Tab.Panel:            GUI.enabled = SMAddon.SmVessel.SolarPanels.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_016")' GUILayout.Height(20))) // "Retract All Solar Panels"              TabSolarPanel.RetractAllPanels();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_007")' GUILayout.Height(20))) // "Extend All Solar Panels"              TabSolarPanel.ExtendAllPanels();            break;          case Tab.Hatch:            GUI.enabled = SMAddon.SmVessel.Hatches.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_008")' GUILayout.Height(20))) // "Close All Hatches"              TabHatch.CloseAllHatches();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_009")' GUILayout.Height(20))) // "Open All Hatches"              TabHatch.OpenAllHatches();            break;          case Tab.Antenna:            GUI.enabled = SMAddon.SmVessel.Antennas.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_010")' GUILayout.Height(20))) // "Retract All Antennas"              TabAntenna.RetractAllAntennas();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_011")' GUILayout.Height(20))) // "Extend All Antennas"              TabAntenna.ExtendAllAntennas();            break;          case Tab.Light:            GUI.enabled = SMAddon.SmVessel.Lights.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_012")' GUILayout.Height(20))) // "Turn Off All Lights"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_013")' GUILayout.Height(20))) // "Turn On All Lights"              TabLight.TurnOnAllLights();            break;          case Tab.Lab:            GUI.enabled = SMAddon.SmVessel.Labs.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_014")' GUILayout.Height(20))) // "Turn Off All Labs"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_015")' GUILayout.Height(20))) // "Turn On All Labs"              TabLight.TurnOnAllLights();            break;          case Tab.Vessel:          case Tab.None:            break;          default:            throw new ArgumentOutOfRangeException();        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayTabActions,The following statement contains a magic number: switch (_selectedTab)        {          case Tab.Panel:            GUI.enabled = SMAddon.SmVessel.SolarPanels.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_016")' GUILayout.Height(20))) // "Retract All Solar Panels"              TabSolarPanel.RetractAllPanels();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_007")' GUILayout.Height(20))) // "Extend All Solar Panels"              TabSolarPanel.ExtendAllPanels();            break;          case Tab.Hatch:            GUI.enabled = SMAddon.SmVessel.Hatches.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_008")' GUILayout.Height(20))) // "Close All Hatches"              TabHatch.CloseAllHatches();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_009")' GUILayout.Height(20))) // "Open All Hatches"              TabHatch.OpenAllHatches();            break;          case Tab.Antenna:            GUI.enabled = SMAddon.SmVessel.Antennas.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_010")' GUILayout.Height(20))) // "Retract All Antennas"              TabAntenna.RetractAllAntennas();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_011")' GUILayout.Height(20))) // "Extend All Antennas"              TabAntenna.ExtendAllAntennas();            break;          case Tab.Light:            GUI.enabled = SMAddon.SmVessel.Lights.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_012")' GUILayout.Height(20))) // "Turn Off All Lights"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_013")' GUILayout.Height(20))) // "Turn On All Lights"              TabLight.TurnOnAllLights();            break;          case Tab.Lab:            GUI.enabled = SMAddon.SmVessel.Labs.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_014")' GUILayout.Height(20))) // "Turn Off All Labs"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_015")' GUILayout.Height(20))) // "Turn On All Labs"              TabLight.TurnOnAllLights();            break;          case Tab.Vessel:          case Tab.None:            break;          default:            throw new ArgumentOutOfRangeException();        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayTabActions,The following statement contains a magic number: switch (_selectedTab)        {          case Tab.Panel:            GUI.enabled = SMAddon.SmVessel.SolarPanels.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_016")' GUILayout.Height(20))) // "Retract All Solar Panels"              TabSolarPanel.RetractAllPanels();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_007")' GUILayout.Height(20))) // "Extend All Solar Panels"              TabSolarPanel.ExtendAllPanels();            break;          case Tab.Hatch:            GUI.enabled = SMAddon.SmVessel.Hatches.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_008")' GUILayout.Height(20))) // "Close All Hatches"              TabHatch.CloseAllHatches();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_009")' GUILayout.Height(20))) // "Open All Hatches"              TabHatch.OpenAllHatches();            break;          case Tab.Antenna:            GUI.enabled = SMAddon.SmVessel.Antennas.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_010")' GUILayout.Height(20))) // "Retract All Antennas"              TabAntenna.RetractAllAntennas();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_011")' GUILayout.Height(20))) // "Extend All Antennas"              TabAntenna.ExtendAllAntennas();            break;          case Tab.Light:            GUI.enabled = SMAddon.SmVessel.Lights.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_012")' GUILayout.Height(20))) // "Turn Off All Lights"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_013")' GUILayout.Height(20))) // "Turn On All Lights"              TabLight.TurnOnAllLights();            break;          case Tab.Lab:            GUI.enabled = SMAddon.SmVessel.Labs.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_014")' GUILayout.Height(20))) // "Turn Off All Labs"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_015")' GUILayout.Height(20))) // "Turn On All Labs"              TabLight.TurnOnAllLights();            break;          case Tab.Vessel:          case Tab.None:            break;          default:            throw new ArgumentOutOfRangeException();        }
Magic Number,ShipManifest.Windows,WindowControl,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowControl.cs,DisplayTabActions,The following statement contains a magic number: switch (_selectedTab)        {          case Tab.Panel:            GUI.enabled = SMAddon.SmVessel.SolarPanels.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_016")' GUILayout.Height(20))) // "Retract All Solar Panels"              TabSolarPanel.RetractAllPanels();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_007")' GUILayout.Height(20))) // "Extend All Solar Panels"              TabSolarPanel.ExtendAllPanels();            break;          case Tab.Hatch:            GUI.enabled = SMAddon.SmVessel.Hatches.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_008")' GUILayout.Height(20))) // "Close All Hatches"              TabHatch.CloseAllHatches();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_009")' GUILayout.Height(20))) // "Open All Hatches"              TabHatch.OpenAllHatches();            break;          case Tab.Antenna:            GUI.enabled = SMAddon.SmVessel.Antennas.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_010")' GUILayout.Height(20))) // "Retract All Antennas"              TabAntenna.RetractAllAntennas();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_011")' GUILayout.Height(20))) // "Extend All Antennas"              TabAntenna.ExtendAllAntennas();            break;          case Tab.Light:            GUI.enabled = SMAddon.SmVessel.Lights.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_012")' GUILayout.Height(20))) // "Turn Off All Lights"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_013")' GUILayout.Height(20))) // "Turn On All Lights"              TabLight.TurnOnAllLights();            break;          case Tab.Lab:            GUI.enabled = SMAddon.SmVessel.Labs.Count > 0 && (!SMSettings.RealControl || SMConditions.IsShipControllable());            if (GUILayout.Button(SmUtils.Localize("#smloc_control_014")' GUILayout.Height(20))) // "Turn Off All Labs"              TabLight.TurnOffAllLights();            if (GUILayout.Button(SmUtils.Localize("#smloc_control_015")' GUILayout.Height(20))) // "Turn On All Labs"              TabLight.TurnOnAllLights();            break;          case Tab.Vessel:          case Tab.None:            break;          default:            throw new ArgumentOutOfRangeException();        }
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,The following statement contains a magic number: SmUtils.DebugScrollPosition = GUILayout.BeginScrollView(SmUtils.DebugScrollPosition' SMStyle.ScrollStyle'          GUILayout.Height(300)' GUILayout.Width(500));
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,The following statement contains a magic number: SmUtils.DebugScrollPosition = GUILayout.BeginScrollView(SmUtils.DebugScrollPosition' SMStyle.ScrollStyle'          GUILayout.Height(300)' GUILayout.Width(500));
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,The following statement contains a magic number: while (errors.MoveNext())        {          if (errors.Current == null) continue;          GUILayout.TextArea(errors.Current' GUILayout.Width(460));                  }
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,The following statement contains a magic number: if (GUILayout.Button(SmUtils.Localize("#smloc_debug_001")' GUILayout.Height(20))) //"Clear log"        {          SmUtils.LogItemList.Clear();          SmUtils.LogItemList.Add($"Info:  Log Cleared at {DateTime.UtcNow.ToString(CultureInfo.InvariantCulture)} UTC.");        }
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,The following statement contains a magic number: if (GUILayout.Button(SmUtils.Localize("#smloc_debug_002")' GUILayout.Height(20))) // "Save Log"        {          // Create log file and save.          Savelog();        }
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,The following statement contains a magic number: if (GUILayout.Button(SmUtils.Localize("#smloc_debug_003")' GUILayout.Height(20))) // "Close"        {          // Create log file and save.          ShowWindow = false;          SMSettings.MemStoreTempSettings();        }
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Display,The following statement contains a magic number: GUI.DragWindow(new Rect(0' 0' Screen.width' 30));
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Savelog,The following statement contains a magic number: try        {          // time to create a file...          string filename = $"DebugLog_{DateTime.Now.ToString(CultureInfo.InvariantCulture).Replace(" "' "_").Replace("/"' "").Replace(":"' "")}.txt";            string path = Directory.GetCurrentDirectory() + @"\GameData\ShipManifest\";          if (SMSettings.DebugLogPath.StartsWith(@"\\"))            SMSettings.DebugLogPath = SMSettings.DebugLogPath.Substring(2' SMSettings.DebugLogPath.Length - 2);          else if (SMSettings.DebugLogPath.StartsWith(@"\"))            SMSettings.DebugLogPath = SMSettings.DebugLogPath.Substring(1' SMSettings.DebugLogPath.Length - 1);            if (!SMSettings.DebugLogPath.EndsWith(@"\"))            SMSettings.DebugLogPath += @"\";            filename = path + SMSettings.DebugLogPath + filename;          SmUtils.LogMessage($"File Name = {filename}"' SmUtils.LogType.Info' true);            try          {            StringBuilder sb = new StringBuilder();            List<string>.Enumerator lines = SmUtils.LogItemList.GetEnumerator();            while (lines.MoveNext())            {              if (lines.Current == null) continue;              sb.AppendLine(lines.Current);            }            lines.Dispose();              File.WriteAllText(filename' sb.ToString());              SmUtils.LogMessage("File written"' SmUtils.LogType.Info' true);          }          catch (Exception ex)          {            SmUtils.LogMessage($"Error Writing File:  {ex}"' SmUtils.LogType.Error' true);          }        }        catch (Exception ex)        {          SmUtils.LogMessage($" in Savelog.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error'            true);        }
Magic Number,ShipManifest.Windows,WindowDebugger,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowDebugger.cs,Savelog,The following statement contains a magic number: try        {          // time to create a file...          string filename = $"DebugLog_{DateTime.Now.ToString(CultureInfo.InvariantCulture).Replace(" "' "_").Replace("/"' "").Replace(":"' "")}.txt";            string path = Directory.GetCurrentDirectory() + @"\GameData\ShipManifest\";          if (SMSettings.DebugLogPath.StartsWith(@"\\"))            SMSettings.DebugLogPath = SMSettings.DebugLogPath.Substring(2' SMSettings.DebugLogPath.Length - 2);          else if (SMSettings.DebugLogPath.StartsWith(@"\"))            SMSettings.DebugLogPath = SMSettings.DebugLogPath.Substring(1' SMSettings.DebugLogPath.Length - 1);            if (!SMSettings.DebugLogPath.EndsWith(@"\"))            SMSettings.DebugLogPath += @"\";            filename = path + SMSettings.DebugLogPath + filename;          SmUtils.LogMessage($"File Name = {filename}"' SmUtils.LogType.Info' true);            try          {            StringBuilder sb = new StringBuilder();            List<string>.Enumerator lines = SmUtils.LogItemList.GetEnumerator();            while (lines.MoveNext())            {              if (lines.Current == null) continue;              sb.AppendLine(lines.Current);            }            lines.Dispose();              File.WriteAllText(filename' sb.ToString());              SmUtils.LogMessage("File written"' SmUtils.LogType.Info' true);          }          catch (Exception ex)          {            SmUtils.LogMessage($"Error Writing File:  {ex}"' SmUtils.LogType.Error' true);          }        }        catch (Exception ex)        {          SmUtils.LogMessage($" in Savelog.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error'            true);        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,Display,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,Display,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          DisplayRosterFilter();            DisplayRosterListViewer();            if (OnCreate)            CreateKerbalViewer();          else if (SelectedKerbal != null)          {            EditKerbalViewer();          }          else          {            GUILayout.BeginHorizontal();            GUI.enabled = SMSettings.EnableCrewModify;            GUIContent guilabel = new GUIContent(SmUtils.Localize("#smloc_roster_002")' GUI.enabled // "Create Kerbal"              ? SmUtils.Localize("#smloc_roster_tt_001") // Realistic Control is On.  Create a Kerbal is disabled.              : SmUtils.Localize("#smloc_roster_tt_022")); // "Opens the Kerbal creation editor."            if (GUILayout.Button(guilabel' GUILayout.MaxWidth(120)' GUILayout.Height(20)))            {              OnCreate = true;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);            GUILayout.EndHorizontal();            GUI.enabled = true;          }            GUILayout.EndVertical();          GUI.DragWindow(new Rect(0' 0' Screen.width' 30));          SMAddon.RepositionWindow(ref Position);        }        catch (Exception ex)        {          SmUtils.LogMessage($" in Roster Window.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'            SmUtils.LogType.Error' true);        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,Display,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          DisplayRosterFilter();            DisplayRosterListViewer();            if (OnCreate)            CreateKerbalViewer();          else if (SelectedKerbal != null)          {            EditKerbalViewer();          }          else          {            GUILayout.BeginHorizontal();            GUI.enabled = SMSettings.EnableCrewModify;            GUIContent guilabel = new GUIContent(SmUtils.Localize("#smloc_roster_002")' GUI.enabled // "Create Kerbal"              ? SmUtils.Localize("#smloc_roster_tt_001") // Realistic Control is On.  Create a Kerbal is disabled.              : SmUtils.Localize("#smloc_roster_tt_022")); // "Opens the Kerbal creation editor."            if (GUILayout.Button(guilabel' GUILayout.MaxWidth(120)' GUILayout.Height(20)))            {              OnCreate = true;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);            GUILayout.EndHorizontal();            GUI.enabled = true;          }            GUILayout.EndVertical();          GUI.DragWindow(new Rect(0' 0' Screen.width' 30));          SMAddon.RepositionWindow(ref Position);        }        catch (Exception ex)        {          SmUtils.LogMessage($" in Roster Window.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'            SmUtils.LogType.Error' true);        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,Display,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          DisplayRosterFilter();            DisplayRosterListViewer();            if (OnCreate)            CreateKerbalViewer();          else if (SelectedKerbal != null)          {            EditKerbalViewer();          }          else          {            GUILayout.BeginHorizontal();            GUI.enabled = SMSettings.EnableCrewModify;            GUIContent guilabel = new GUIContent(SmUtils.Localize("#smloc_roster_002")' GUI.enabled // "Create Kerbal"              ? SmUtils.Localize("#smloc_roster_tt_001") // Realistic Control is On.  Create a Kerbal is disabled.              : SmUtils.Localize("#smloc_roster_tt_022")); // "Opens the Kerbal creation editor."            if (GUILayout.Button(guilabel' GUILayout.MaxWidth(120)' GUILayout.Height(20)))            {              OnCreate = true;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);            GUILayout.EndHorizontal();            GUI.enabled = true;          }            GUILayout.EndVertical();          GUI.DragWindow(new Rect(0' 0' Screen.width' 30));          SMAddon.RepositionWindow(ref Position);        }        catch (Exception ex)        {          SmUtils.LogMessage($" in Roster Window.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'            SmUtils.LogType.Error' true);        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,Display,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          DisplayRosterFilter();            DisplayRosterListViewer();            if (OnCreate)            CreateKerbalViewer();          else if (SelectedKerbal != null)          {            EditKerbalViewer();          }          else          {            GUILayout.BeginHorizontal();            GUI.enabled = SMSettings.EnableCrewModify;            GUIContent guilabel = new GUIContent(SmUtils.Localize("#smloc_roster_002")' GUI.enabled // "Create Kerbal"              ? SmUtils.Localize("#smloc_roster_tt_001") // Realistic Control is On.  Create a Kerbal is disabled.              : SmUtils.Localize("#smloc_roster_tt_022")); // "Opens the Kerbal creation editor."            if (GUILayout.Button(guilabel' GUILayout.MaxWidth(120)' GUILayout.Height(20)))            {              OnCreate = true;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);            GUILayout.EndHorizontal();            GUI.enabled = true;          }            GUILayout.EndVertical();          GUI.DragWindow(new Rect(0' 0' Screen.width' 30));          SMAddon.RepositionWindow(ref Position);        }        catch (Exception ex)        {          SmUtils.LogMessage($" in Roster Window.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'            SmUtils.LogType.Error' true);        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,CreateKerbalViewer,The following statement contains a magic number: if (GUILayout.Button(guilabel' GUILayout.MaxWidth(80)' GUILayout.Height(20)))        {          bool kerbalFound = false;          ProtoCrewMember.KerbalType kerbalType = KerbalProfession == Professions.Tourist            ? ProtoCrewMember.KerbalType.Tourist            : ProtoCrewMember.KerbalType.Crew;          while (!kerbalFound)          {            SelectedKerbal = ModKerbal.CreateKerbal(kerbalType);            if (SelectedKerbal.Trait == KerbalProfession.ToString())              kerbalFound = true;          }          OnCreate = false;        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,CreateKerbalViewer,The following statement contains a magic number: if (GUILayout.Button(guilabel' GUILayout.MaxWidth(80)' GUILayout.Height(20)))        {          bool kerbalFound = false;          ProtoCrewMember.KerbalType kerbalType = KerbalProfession == Professions.Tourist            ? ProtoCrewMember.KerbalType.Tourist            : ProtoCrewMember.KerbalType.Crew;          while (!kerbalFound)          {            SelectedKerbal = ModKerbal.CreateKerbal(kerbalType);            if (SelectedKerbal.Trait == KerbalProfession.ToString())              kerbalFound = true;          }          OnCreate = false;        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,CreateKerbalViewer,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,CreateKerbalViewer,The following statement contains a magic number: if (GUILayout.Button(guilabel' GUILayout.MaxWidth(80)' GUILayout.Height(20)))        {          OnCreate = false;          SelectedKerbal = null;        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,CreateKerbalViewer,The following statement contains a magic number: if (GUILayout.Button(guilabel' GUILayout.MaxWidth(80)' GUILayout.Height(20)))        {          OnCreate = false;          SelectedKerbal = null;        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,CreateKerbalViewer,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplaySelectProfession,The following statement contains a magic number: GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(85));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplaySelectProfession,The following statement contains a magic number: bool isPilot = GUILayout.Toggle(KerbalProfession == Professions.Pilot' SmUtils.Localize("#smloc_roster_006")' GUILayout.Width(90));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplaySelectProfession,The following statement contains a magic number: bool isEngineer = GUILayout.Toggle(KerbalProfession == Professions.Engineer' SmUtils.Localize("#smloc_roster_007")' GUILayout.Width(90));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplaySelectProfession,The following statement contains a magic number: bool isScientist = GUILayout.Toggle(KerbalProfession == Professions.Scientist' SmUtils.Localize("#smloc_roster_008")' GUILayout.Width(90));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplaySelectProfession,The following statement contains a magic number: bool isTourist = GUILayout.Toggle(KerbalProfession == Professions.Tourist' SmUtils.Localize("#smloc_roster_032")' GUILayout.Width(90));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The following statement contains a magic number: GUILayout.Label($"{SmUtils.Localize("#smloc_roster_009")}:"' GUILayout.Width(40));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The following statement contains a magic number: bool isAll = GUILayout.Toggle(CurrentFilter == KerbalFilters.All' SmUtils.Localize("#smloc_roster_010")' GUILayout.Width(60));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The following statement contains a magic number: bool isAssign = GUILayout.Toggle(CurrentFilter == KerbalFilters.Assigned' SmUtils.Localize("#smloc_roster_011")' GUILayout.Width(95));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)        {          bool isVessel = GUILayout.Toggle(CurrentFilter == KerbalFilters.Vessel' SmUtils.Localize("#smloc_roster_012")' GUILayout.Width(80)); // "Vessel"          if (isVessel) CurrentFilter = KerbalFilters.Vessel;        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The following statement contains a magic number: bool isAvail = GUILayout.Toggle(CurrentFilter == KerbalFilters.Available' SmUtils.Localize("#smloc_roster_013")' GUILayout.Width(95));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The following statement contains a magic number: bool isDead = GUILayout.Toggle(CurrentFilter == KerbalFilters.Dead' SmUtils.Localize("#smloc_roster_014")' GUILayout.Width(130));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterFilter,The following statement contains a magic number: if (InstalledMods.IsDfInstalled)        {          bool isFrozen = GUILayout.Toggle(CurrentFilter == KerbalFilters.Frozen' SmUtils.Localize("#smloc_roster_015")' GUILayout.Width(80)); // "Frozen"          if (isFrozen) CurrentFilter = KerbalFilters.Frozen;        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,DisplayRosterListViewer,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          // Roster List Header...          GUILayout.BeginHorizontal();          //GUILayout.Label(""' GUILayout.Width(5));          GUILayout.Label(SmUtils.Localize("#smloc_roster_016")' GUILayout.Width(140)); // "Name"          GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(50)); // "Gender"          GUILayout.Label(SmUtils.Localize("#smloc_roster_005")' GUILayout.Width(70)); // "Profession"          GUILayout.Label(SmUtils.Localize("#smloc_roster_018")' GUILayout.Width(30)); // "Skill"          GUILayout.Label(SmUtils.Localize("#smloc_roster_019")' GUILayout.Width(220)); // "Status"          GUILayout.Label(SmUtils.Localize("#smloc_roster_020")' GUILayout.Width(55)); // "Edit"          GUILayout.Label(SmUtils.Localize("#smloc_roster_021")' GUILayout.Width(65)); // "Action"          GUILayout.EndHorizontal();            _scrollViewerPosition = GUILayout.BeginScrollView(_scrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(ViewBox.height)' GUILayout.Width(ViewBox.width));            // vars for acton to occurs after button press          bool isAction = false;          Part actionPart = null;          string actionText = "";          ProtoCrewMember actionKerbal = null;            List<ProtoCrewMember>.Enumerator kerbals = RosterList.GetEnumerator();          while (kerbals.MoveNext())          {            if (kerbals.Current == null) continue;            if (!CanDisplayKerbal(kerbals.Current)) continue;            GUIStyle labelStyle;            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Dead ||                kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              labelStyle = SMStyle.LabelStyleRed;            else if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              labelStyle = SMStyle.LabelStyleYellow;            else              labelStyle = SMStyle.LabelStyle;              // What vessel is this Kerbal Assigned to?            string rosterDetails = "";            if (kerbals.Current.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)            {              List<Vessel>.Enumerator theseVessels = FlightGlobals.Vessels.GetEnumerator();              while (theseVessels.MoveNext())              {                if (theseVessels.Current == null) continue;                List<ProtoCrewMember> crew = theseVessels.Current.GetVesselCrew();                if (crew.Any(crewMember => crewMember == kerbals.Current))                {                  rosterDetails =                    $"{SmUtils.Localize("#smloc_roster_011")} - {theseVessels.Current.GetName().Replace("(unloaded)"' "")}"; // "Assigned"                }              }              theseVessels.Dispose();            }            else if (InstalledMods.IsDfInstalled && DfWrapper.ApiReady && kerbals.Current.type == ProtoCrewMember.KerbalType.Unowned)            {              // This kerbal could be frozen.  Lets find out...              rosterDetails = GetFrozenKerbalDetails(kerbals.Current);              labelStyle = SMStyle.LabelStyleCyan;            }            else            {              // Since the kerbal has no vessel assignment' lets show what their status...              rosterDetails = kerbals.Current.rosterStatus.ToString();            }            string buttonText;            string buttonToolTip;            GUILayout.BeginHorizontal();            GUILayout.Label(kerbals.Current.name' labelStyle' GUILayout.Width(140)' GUILayout.Height(20));            GUILayout.Label(kerbals.Current.gender.ToString()' labelStyle' GUILayout.Width(50));            GUILayout.Label(kerbals.Current.experienceTrait.Title' labelStyle' GUILayout.Width(70));            GUILayout.Label(kerbals.Current.experienceLevel.ToString()' labelStyle' GUILayout.Width(30));            GUILayout.Label(rosterDetails' labelStyle' GUILayout.Width(215));              SetupEditButton(kerbals.Current' out buttonText' out buttonToolTip);            if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(55)' GUILayout.Height(20)'              GUILayout.Height(20)))            {              if (SelectedKerbal == null || SelectedKerbal.Kerbal != kerbals.Current)              {                SelectedKerbal = new ModKerbal(kerbals.Current' false);                SetProfessionFlag();              }              else              {                SelectedKerbal = null;              }            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' XOffset);              // Setup buttons with gui state' button text and tooltip.            SetupActionButton(kerbals.Current' out buttonText' out buttonToolTip);              if (GUILayout.Button(new GUIContent(buttonText' buttonToolTip)' GUILayout.Width(65)' GUILayout.Height(20)))            {              isAction = true;              actionKerbal = kerbals.Current;              actionText = buttonText;              if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"                actionPart = SMAddon.SmVessel.FindPartByKerbal(kerbals.Current);            }            Rect rect2 = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect2' GUI.tooltip' ref ToolTipActive' XOffset);            GUILayout.EndHorizontal();            GUI.enabled = true;          }          kerbals.Dispose();          GUILayout.EndVertical();          GUILayout.EndScrollView();            // perform action from button press.          if (!isAction) return;          if (actionText == SmUtils.Localize("#smloc_roster_022")) // "Remove"            TransferCrew.RemoveCrewMember(actionKerbal' actionPart);          else if(actionText == SmUtils.Localize("#smloc_roster_023")) // "Add"            TransferCrew.AddCrewMember(actionKerbal' SMAddon.SmVessel.SelectedPartsSource[0]);          else if (actionText == SmUtils.Localize("#smloc_roster_024")) // "Respawn"            RespawnKerbal(actionKerbal);          else if (actionText == SmUtils.Localize("#smloc_roster_025")) // "Thaw"            ThawKerbal(actionKerbal.name);          else if (actionText == SmUtils.Localize("#smloc_roster_026"))// "Freeze"            FreezeKerbal(actionKerbal);          //Refresh all lists...           GameEvents.onVesselWasModified.Fire(SMAddon.SmVessel.Vessel);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($" in RosterListViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,The following statement contains a magic number: if (SMSettings.EnableKerbalRename)        {          GUILayout.BeginHorizontal();          SelectedKerbal.Name = GUILayout.TextField(SelectedKerbal.Name' GUILayout.MaxWidth(300));          GUILayout.Label($" - ({SelectedKerbal.Kerbal.experienceTrait.Title})");          GUILayout.EndHorizontal();        }        else          GUILayout.Label($"{SelectedKerbal.Name} - ({SelectedKerbal.Trait})"' SMStyle.LabelStyleBold'            GUILayout.MaxWidth(300));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,The following statement contains a magic number: if (SMSettings.EnableKerbalRename)        {          GUILayout.BeginHorizontal();          SelectedKerbal.Name = GUILayout.TextField(SelectedKerbal.Name' GUILayout.MaxWidth(300));          GUILayout.Label($" - ({SelectedKerbal.Kerbal.experienceTrait.Title})");          GUILayout.EndHorizontal();        }        else          GUILayout.Label($"{SelectedKerbal.Name} - ({SelectedKerbal.Trait})"' SMStyle.LabelStyleBold'            GUILayout.MaxWidth(300));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,The following statement contains a magic number: GUILayout.Label(SmUtils.Localize("#smloc_roster_017")' GUILayout.Width(85));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,The following statement contains a magic number: isMale = GUILayout.Toggle(isMale' ProtoCrewMember.Gender.Male.ToString()' GUILayout.Width(90));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,The following statement contains a magic number: SelectedKerbal.Courage = GUILayout.HorizontalSlider(SelectedKerbal.Courage' 0' 1' GUILayout.MaxWidth(300));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,The following statement contains a magic number: SelectedKerbal.Stupidity = GUILayout.HorizontalSlider(SelectedKerbal.Stupidity' 0' 1' GUILayout.MaxWidth(300));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,The following statement contains a magic number: SelectedKerbal.Badass = GUILayout.Toggle(SelectedKerbal.Badass' SmUtils.Localize("#smloc_roster_031")' GUILayout.Height(30));
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,The following statement contains a magic number: if (GUILayout.Button(SmUtils.Localize("#smloc_roster_004")' GUILayout.MaxWidth(50))) // "Cancel"        {          SelectedKerbal = null;        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,The following statement contains a magic number: if (GUILayout.Button(new GUIContent(label' toolTip)' GUILayout.MaxWidth(50)))        {          if (SMSettings.EnableKerbalRename && SMSettings.EnableChangeProfession)          {            if (SelectedKerbal != null) SelectedKerbal.Trait = KerbalProfession.ToString();          }          if (SelectedKerbal != null)          {            SMAddon.SaveMessage = SelectedKerbal.SubmitChanges();            GetRosterList();            if (string.IsNullOrEmpty(SMAddon.SaveMessage))              SelectedKerbal = null;          }        }
Magic Number,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,EditKerbalViewer,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,Display,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,Display,The following statement contains a magic number: _displayViewerPosition = GUILayout.BeginScrollView(_displayViewerPosition' SMStyle.ScrollStyle'          GUILayout.Height(300)' GUILayout.Width(380));
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,Display,The following statement contains a magic number: _displayViewerPosition = GUILayout.BeginScrollView(_displayViewerPosition' SMStyle.ScrollStyle'          GUILayout.Height(300)' GUILayout.Width(380));
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,Display,The following statement contains a magic number: GUI.DragWindow(new Rect(0' 0' Screen.width' 30));
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayTabButtons,The following statement contains a magic number: if (GUILayout.Button(label' realismStyle' GUILayout.Height(20)))        {          _selectedTab = Tab.Realism;        }
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayTabButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayTabButtons,The following statement contains a magic number: if (GUILayout.Button(label' highlightStyle' GUILayout.Height(20)))        {          _selectedTab = Tab.Highlight;        }
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayTabButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayTabButtons,The following statement contains a magic number: if (GUILayout.Button(label' tooltipStyle' GUILayout.Height(20)))        {          _selectedTab = Tab.ToolTips;        }
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayTabButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayTabButtons,The following statement contains a magic number: if (GUILayout.Button(label' soundStyle' GUILayout.Height(20)))        {          _selectedTab = Tab.Sounds;        }
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayTabButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayTabButtons,The following statement contains a magic number: if (GUILayout.Button(label' configStyle' GUILayout.Height(20)))        {          _selectedTab = Tab.Config;        }
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayTabButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayActionButtons,The following statement contains a magic number: if (GUILayout.Button(label' GUILayout.Height(20)))        {          ToolTip = "";          SMSettings.SaveIntervalSec = int.Parse(TabConfig.TxtSaveInterval);          SMSettings.SaveSettings();            // Sync SM to CLS override settings with CLS          if (SMSettings.EnableCls && HighLogic.LoadedSceneIsFlight)          {            SMSettings.UpdateClsOverride();          }            if (HighLogic.LoadedScene == GameScenes.SPACECENTER)            SMAddon.OnSmSettingsClicked();          else            ShowWindow = false;        }
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayActionButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayActionButtons,The following statement contains a magic number: if (GUILayout.Button(label' GUILayout.Height(20)))        {          ToolTip = "";          // We've canclled' so restore original settings.          SMSettings.MemRestoreTempSettings();            if (HighLogic.LoadedScene == GameScenes.SPACECENTER)            SMAddon.OnSmSettingsClicked();          else            ShowWindow = false;        }
Magic Number,ShipManifest.Windows,WindowSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowSettings.cs,DisplayActionButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,Display,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,Display,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          _smScrollViewerPosition = GUILayout.BeginScrollView(_smScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            // Prelaunch (landed) Gui          if (SMConditions.IsInPreflight())          {            PreLaunchGui();          }            // Now the Resource Buttons          ResourceButtonsList();            GUILayout.EndVertical();          GUILayout.EndScrollView();            //string resLabel = "No Resource Selected";          string resLabel = SmUtils.Localize("#smloc_manifest_003");          if (SMAddon.SmVessel.SelectedResources.Count == 1)            resLabel = SMAddon.SmVessel.SelectedResources[0];          else if (SMAddon.SmVessel.SelectedResources.Count == 2)            //resLabel = "Multiple Resources selected";            resLabel = SmUtils.Localize("#smloc_manifest_004");          GUILayout.Label($"{resLabel}"' GUILayout.Width(300)' GUILayout.Height(20));            // Resource Details List Viewer          ResourceDetailsViewer();            // Window toggle Button List          WindowToggleButtons();            GUILayout.EndVertical();          GUI.DragWindow(new Rect(0' 0' Screen.width' 30));          SMAddon.RepositionWindow(ref Position);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.Display.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,Display,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          _smScrollViewerPosition = GUILayout.BeginScrollView(_smScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            // Prelaunch (landed) Gui          if (SMConditions.IsInPreflight())          {            PreLaunchGui();          }            // Now the Resource Buttons          ResourceButtonsList();            GUILayout.EndVertical();          GUILayout.EndScrollView();            //string resLabel = "No Resource Selected";          string resLabel = SmUtils.Localize("#smloc_manifest_003");          if (SMAddon.SmVessel.SelectedResources.Count == 1)            resLabel = SMAddon.SmVessel.SelectedResources[0];          else if (SMAddon.SmVessel.SelectedResources.Count == 2)            //resLabel = "Multiple Resources selected";            resLabel = SmUtils.Localize("#smloc_manifest_004");          GUILayout.Label($"{resLabel}"' GUILayout.Width(300)' GUILayout.Height(20));            // Resource Details List Viewer          ResourceDetailsViewer();            // Window toggle Button List          WindowToggleButtons();            GUILayout.EndVertical();          GUI.DragWindow(new Rect(0' 0' Screen.width' 30));          SMAddon.RepositionWindow(ref Position);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.Display.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,Display,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          _smScrollViewerPosition = GUILayout.BeginScrollView(_smScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            // Prelaunch (landed) Gui          if (SMConditions.IsInPreflight())          {            PreLaunchGui();          }            // Now the Resource Buttons          ResourceButtonsList();            GUILayout.EndVertical();          GUILayout.EndScrollView();            //string resLabel = "No Resource Selected";          string resLabel = SmUtils.Localize("#smloc_manifest_003");          if (SMAddon.SmVessel.SelectedResources.Count == 1)            resLabel = SMAddon.SmVessel.SelectedResources[0];          else if (SMAddon.SmVessel.SelectedResources.Count == 2)            //resLabel = "Multiple Resources selected";            resLabel = SmUtils.Localize("#smloc_manifest_004");          GUILayout.Label($"{resLabel}"' GUILayout.Width(300)' GUILayout.Height(20));            // Resource Details List Viewer          ResourceDetailsViewer();            // Window toggle Button List          WindowToggleButtons();            GUILayout.EndVertical();          GUI.DragWindow(new Rect(0' 0' Screen.width' 30));          SMAddon.RepositionWindow(ref Position);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.Display.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,Display,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          _smScrollViewerPosition = GUILayout.BeginScrollView(_smScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            // Prelaunch (landed) Gui          if (SMConditions.IsInPreflight())          {            PreLaunchGui();          }            // Now the Resource Buttons          ResourceButtonsList();            GUILayout.EndVertical();          GUILayout.EndScrollView();            //string resLabel = "No Resource Selected";          string resLabel = SmUtils.Localize("#smloc_manifest_003");          if (SMAddon.SmVessel.SelectedResources.Count == 1)            resLabel = SMAddon.SmVessel.SelectedResources[0];          else if (SMAddon.SmVessel.SelectedResources.Count == 2)            //resLabel = "Multiple Resources selected";            resLabel = SmUtils.Localize("#smloc_manifest_004");          GUILayout.Label($"{resLabel}"' GUILayout.Width(300)' GUILayout.Height(20));            // Resource Details List Viewer          ResourceDetailsViewer();            // Window toggle Button List          WindowToggleButtons();            GUILayout.EndVertical();          GUI.DragWindow(new Rect(0' 0' Screen.width' 30));          SMAddon.RepositionWindow(ref Position);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.Display.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,Display,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          _smScrollViewerPosition = GUILayout.BeginScrollView(_smScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            // Prelaunch (landed) Gui          if (SMConditions.IsInPreflight())          {            PreLaunchGui();          }            // Now the Resource Buttons          ResourceButtonsList();            GUILayout.EndVertical();          GUILayout.EndScrollView();            //string resLabel = "No Resource Selected";          string resLabel = SmUtils.Localize("#smloc_manifest_003");          if (SMAddon.SmVessel.SelectedResources.Count == 1)            resLabel = SMAddon.SmVessel.SelectedResources[0];          else if (SMAddon.SmVessel.SelectedResources.Count == 2)            //resLabel = "Multiple Resources selected";            resLabel = SmUtils.Localize("#smloc_manifest_004");          GUILayout.Label($"{resLabel}"' GUILayout.Width(300)' GUILayout.Height(20));            // Resource Details List Viewer          ResourceDetailsViewer();            // Window toggle Button List          WindowToggleButtons();            GUILayout.EndVertical();          GUI.DragWindow(new Rect(0' 0' Screen.width' 30));          SMAddon.RepositionWindow(ref Position);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.Display.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,Display,The following statement contains a magic number: try        {          GUILayout.BeginVertical();          _smScrollViewerPosition = GUILayout.BeginScrollView(_smScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            // Prelaunch (landed) Gui          if (SMConditions.IsInPreflight())          {            PreLaunchGui();          }            // Now the Resource Buttons          ResourceButtonsList();            GUILayout.EndVertical();          GUILayout.EndScrollView();            //string resLabel = "No Resource Selected";          string resLabel = SmUtils.Localize("#smloc_manifest_003");          if (SMAddon.SmVessel.SelectedResources.Count == 1)            resLabel = SMAddon.SmVessel.SelectedResources[0];          else if (SMAddon.SmVessel.SelectedResources.Count == 2)            //resLabel = "Multiple Resources selected";            resLabel = SmUtils.Localize("#smloc_manifest_004");          GUILayout.Label($"{resLabel}"' GUILayout.Width(300)' GUILayout.Height(20));            // Resource Details List Viewer          ResourceDetailsViewer();            // Window toggle Button List          WindowToggleButtons();            GUILayout.EndVertical();          GUI.DragWindow(new Rect(0' 0' Screen.width' 30));          SMAddon.RepositionWindow(ref Position);        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.Display.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,PreLaunchGui,The following statement contains a magic number: try        {          if (SMSettings.EnablePfCrews)          {            GUILayout.BeginHorizontal();            // Realism Mode is desirable' as there is a cost associated with a kerbal on a flight.   No cheating!            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_005")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Crew"            {              SMAddon.SmVessel.FillCrew();            }            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_006")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Crew"            {              SMAddon.SmVessel.EmptyCrew();            }            GUILayout.EndHorizontal();          }            if (!SMSettings.EnablePfResources) return;          GUILayout.BeginHorizontal();          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_007")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Resources"          {            SMAddon.SmVessel.FillResources();          }          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_008")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Resources"          {            SMAddon.SmVessel.DumpAllResources();          }          GUILayout.EndHorizontal();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in PreLaunchGui.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,PreLaunchGui,The following statement contains a magic number: try        {          if (SMSettings.EnablePfCrews)          {            GUILayout.BeginHorizontal();            // Realism Mode is desirable' as there is a cost associated with a kerbal on a flight.   No cheating!            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_005")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Crew"            {              SMAddon.SmVessel.FillCrew();            }            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_006")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Crew"            {              SMAddon.SmVessel.EmptyCrew();            }            GUILayout.EndHorizontal();          }            if (!SMSettings.EnablePfResources) return;          GUILayout.BeginHorizontal();          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_007")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Resources"          {            SMAddon.SmVessel.FillResources();          }          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_008")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Resources"          {            SMAddon.SmVessel.DumpAllResources();          }          GUILayout.EndHorizontal();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in PreLaunchGui.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,PreLaunchGui,The following statement contains a magic number: try        {          if (SMSettings.EnablePfCrews)          {            GUILayout.BeginHorizontal();            // Realism Mode is desirable' as there is a cost associated with a kerbal on a flight.   No cheating!            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_005")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Crew"            {              SMAddon.SmVessel.FillCrew();            }            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_006")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Crew"            {              SMAddon.SmVessel.EmptyCrew();            }            GUILayout.EndHorizontal();          }            if (!SMSettings.EnablePfResources) return;          GUILayout.BeginHorizontal();          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_007")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Resources"          {            SMAddon.SmVessel.FillResources();          }          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_008")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Resources"          {            SMAddon.SmVessel.DumpAllResources();          }          GUILayout.EndHorizontal();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in PreLaunchGui.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,PreLaunchGui,The following statement contains a magic number: try        {          if (SMSettings.EnablePfCrews)          {            GUILayout.BeginHorizontal();            // Realism Mode is desirable' as there is a cost associated with a kerbal on a flight.   No cheating!            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_005")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Crew"            {              SMAddon.SmVessel.FillCrew();            }            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_006")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Crew"            {              SMAddon.SmVessel.EmptyCrew();            }            GUILayout.EndHorizontal();          }            if (!SMSettings.EnablePfResources) return;          GUILayout.BeginHorizontal();          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_007")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Resources"          {            SMAddon.SmVessel.FillResources();          }          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_008")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Resources"          {            SMAddon.SmVessel.DumpAllResources();          }          GUILayout.EndHorizontal();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in PreLaunchGui.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,PreLaunchGui,The following statement contains a magic number: try        {          if (SMSettings.EnablePfCrews)          {            GUILayout.BeginHorizontal();            // Realism Mode is desirable' as there is a cost associated with a kerbal on a flight.   No cheating!            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_005")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Crew"            {              SMAddon.SmVessel.FillCrew();            }            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_006")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Crew"            {              SMAddon.SmVessel.EmptyCrew();            }            GUILayout.EndHorizontal();          }            if (!SMSettings.EnablePfResources) return;          GUILayout.BeginHorizontal();          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_007")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Resources"          {            SMAddon.SmVessel.FillResources();          }          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_008")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Resources"          {            SMAddon.SmVessel.DumpAllResources();          }          GUILayout.EndHorizontal();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in PreLaunchGui.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,PreLaunchGui,The following statement contains a magic number: try        {          if (SMSettings.EnablePfCrews)          {            GUILayout.BeginHorizontal();            // Realism Mode is desirable' as there is a cost associated with a kerbal on a flight.   No cheating!            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_005")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Crew"            {              SMAddon.SmVessel.FillCrew();            }            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_006")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Crew"            {              SMAddon.SmVessel.EmptyCrew();            }            GUILayout.EndHorizontal();          }            if (!SMSettings.EnablePfResources) return;          GUILayout.BeginHorizontal();          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_007")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Resources"          {            SMAddon.SmVessel.FillResources();          }          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_008")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Resources"          {            SMAddon.SmVessel.DumpAllResources();          }          GUILayout.EndHorizontal();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in PreLaunchGui.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,PreLaunchGui,The following statement contains a magic number: try        {          if (SMSettings.EnablePfCrews)          {            GUILayout.BeginHorizontal();            // Realism Mode is desirable' as there is a cost associated with a kerbal on a flight.   No cheating!            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_005")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Crew"            {              SMAddon.SmVessel.FillCrew();            }            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_006")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Crew"            {              SMAddon.SmVessel.EmptyCrew();            }            GUILayout.EndHorizontal();          }            if (!SMSettings.EnablePfResources) return;          GUILayout.BeginHorizontal();          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_007")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Resources"          {            SMAddon.SmVessel.FillResources();          }          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_008")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Resources"          {            SMAddon.SmVessel.DumpAllResources();          }          GUILayout.EndHorizontal();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in PreLaunchGui.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,PreLaunchGui,The following statement contains a magic number: try        {          if (SMSettings.EnablePfCrews)          {            GUILayout.BeginHorizontal();            // Realism Mode is desirable' as there is a cost associated with a kerbal on a flight.   No cheating!            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_005")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Crew"            {              SMAddon.SmVessel.FillCrew();            }            if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_006")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Crew"            {              SMAddon.SmVessel.EmptyCrew();            }            GUILayout.EndHorizontal();          }            if (!SMSettings.EnablePfResources) return;          GUILayout.BeginHorizontal();          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_007")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Fill Resources"          {            SMAddon.SmVessel.FillResources();          }          if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_008")' SMStyle.ButtonStyle' GUILayout.Width(134)' GUILayout.Height(20))) // "Empty Resources"          {            SMAddon.SmVessel.DumpAllResources();          }          GUILayout.EndHorizontal();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in PreLaunchGui.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceButtonsList,The following statement contains a magic number: try        {          // List required here to prevent loop sync errors with live source.          List<string>.Enumerator keys = SMAddon.SmVessel.PartsByResource.Keys.ToList().GetEnumerator();          while (keys.MoveNext())          {            if (string.IsNullOrEmpty(keys.Current)) continue;            GUILayout.BeginHorizontal();              // Button Widths            int width = 273;            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current)) width = 185;            else if (SMConditions.IsResourceTypeOther(keys.Current)) width = 223;              // Resource Button            string displayAmounts = $"{keys.Current}{SmUtils.DisplayVesselResourceTotals(keys.Current)}";            GUIStyle style = SMAddon.SmVessel.SelectedResources.Contains(keys.Current)              ? SMStyle.ButtonToggledStyle              : SMStyle.ButtonStyle;            if (GUILayout.Button(displayAmounts' style' GUILayout.Width(width)' GUILayout.Height(20)))            {              ResourceButtonToggled(keys.Current);              SMHighlighter.Update_Highlighter();            }              // Dump Button            if (SMConditions.IsResourceTypeOther(keys.Current) && SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              uint pumpId = TransferPump.GetPumpIdFromHash(keys.Current'                SMAddon.SmVessel.PartsByResource[keys.Current].First()'                SMAddon.SmVessel.PartsByResource[keys.Current].Last()' TransferPump.TypeXfer.Dump'                TransferPump.TriggerButton.Manifest);              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_manifest_009")' SmUtils.Localize("#smloc_manifest_tt_001")) // "Dump"' "Dumps the selected resource in this vessel"                : new GUIContent(SmUtils.Localize("#smloc_manifest_010")' SmUtils.Localize("#smloc_manifest_tt_002")); // "Stop"' "Halts the dumping of the selected resource in this vessel"              GUI.enabled = SMConditions.CanResourceBeDumped(keys.Current);              if (GUILayout.Button(dumpContent' SMStyle.ButtonStyle' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMVessel.ToggleDumpResource(keys.Current' pumpId);              }            }              // Fill Button            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current) &&                SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              GUI.enabled = SMConditions.CanResourceBeFilled(keys.Current);              if (GUILayout.Button($"{SmUtils.Localize("#smloc_manifest_011")}"' SMStyle.ButtonStyle' GUILayout.Width(35)'                GUILayout.Height(20))) // "Fill"              {                SMAddon.SmVessel.FillResource(keys.Current);              }            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          keys.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceButtonList.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceButtonsList,The following statement contains a magic number: try        {          // List required here to prevent loop sync errors with live source.          List<string>.Enumerator keys = SMAddon.SmVessel.PartsByResource.Keys.ToList().GetEnumerator();          while (keys.MoveNext())          {            if (string.IsNullOrEmpty(keys.Current)) continue;            GUILayout.BeginHorizontal();              // Button Widths            int width = 273;            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current)) width = 185;            else if (SMConditions.IsResourceTypeOther(keys.Current)) width = 223;              // Resource Button            string displayAmounts = $"{keys.Current}{SmUtils.DisplayVesselResourceTotals(keys.Current)}";            GUIStyle style = SMAddon.SmVessel.SelectedResources.Contains(keys.Current)              ? SMStyle.ButtonToggledStyle              : SMStyle.ButtonStyle;            if (GUILayout.Button(displayAmounts' style' GUILayout.Width(width)' GUILayout.Height(20)))            {              ResourceButtonToggled(keys.Current);              SMHighlighter.Update_Highlighter();            }              // Dump Button            if (SMConditions.IsResourceTypeOther(keys.Current) && SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              uint pumpId = TransferPump.GetPumpIdFromHash(keys.Current'                SMAddon.SmVessel.PartsByResource[keys.Current].First()'                SMAddon.SmVessel.PartsByResource[keys.Current].Last()' TransferPump.TypeXfer.Dump'                TransferPump.TriggerButton.Manifest);              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_manifest_009")' SmUtils.Localize("#smloc_manifest_tt_001")) // "Dump"' "Dumps the selected resource in this vessel"                : new GUIContent(SmUtils.Localize("#smloc_manifest_010")' SmUtils.Localize("#smloc_manifest_tt_002")); // "Stop"' "Halts the dumping of the selected resource in this vessel"              GUI.enabled = SMConditions.CanResourceBeDumped(keys.Current);              if (GUILayout.Button(dumpContent' SMStyle.ButtonStyle' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMVessel.ToggleDumpResource(keys.Current' pumpId);              }            }              // Fill Button            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current) &&                SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              GUI.enabled = SMConditions.CanResourceBeFilled(keys.Current);              if (GUILayout.Button($"{SmUtils.Localize("#smloc_manifest_011")}"' SMStyle.ButtonStyle' GUILayout.Width(35)'                GUILayout.Height(20))) // "Fill"              {                SMAddon.SmVessel.FillResource(keys.Current);              }            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          keys.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceButtonList.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceButtonsList,The following statement contains a magic number: try        {          // List required here to prevent loop sync errors with live source.          List<string>.Enumerator keys = SMAddon.SmVessel.PartsByResource.Keys.ToList().GetEnumerator();          while (keys.MoveNext())          {            if (string.IsNullOrEmpty(keys.Current)) continue;            GUILayout.BeginHorizontal();              // Button Widths            int width = 273;            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current)) width = 185;            else if (SMConditions.IsResourceTypeOther(keys.Current)) width = 223;              // Resource Button            string displayAmounts = $"{keys.Current}{SmUtils.DisplayVesselResourceTotals(keys.Current)}";            GUIStyle style = SMAddon.SmVessel.SelectedResources.Contains(keys.Current)              ? SMStyle.ButtonToggledStyle              : SMStyle.ButtonStyle;            if (GUILayout.Button(displayAmounts' style' GUILayout.Width(width)' GUILayout.Height(20)))            {              ResourceButtonToggled(keys.Current);              SMHighlighter.Update_Highlighter();            }              // Dump Button            if (SMConditions.IsResourceTypeOther(keys.Current) && SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              uint pumpId = TransferPump.GetPumpIdFromHash(keys.Current'                SMAddon.SmVessel.PartsByResource[keys.Current].First()'                SMAddon.SmVessel.PartsByResource[keys.Current].Last()' TransferPump.TypeXfer.Dump'                TransferPump.TriggerButton.Manifest);              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_manifest_009")' SmUtils.Localize("#smloc_manifest_tt_001")) // "Dump"' "Dumps the selected resource in this vessel"                : new GUIContent(SmUtils.Localize("#smloc_manifest_010")' SmUtils.Localize("#smloc_manifest_tt_002")); // "Stop"' "Halts the dumping of the selected resource in this vessel"              GUI.enabled = SMConditions.CanResourceBeDumped(keys.Current);              if (GUILayout.Button(dumpContent' SMStyle.ButtonStyle' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMVessel.ToggleDumpResource(keys.Current' pumpId);              }            }              // Fill Button            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current) &&                SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              GUI.enabled = SMConditions.CanResourceBeFilled(keys.Current);              if (GUILayout.Button($"{SmUtils.Localize("#smloc_manifest_011")}"' SMStyle.ButtonStyle' GUILayout.Width(35)'                GUILayout.Height(20))) // "Fill"              {                SMAddon.SmVessel.FillResource(keys.Current);              }            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          keys.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceButtonList.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceButtonsList,The following statement contains a magic number: try        {          // List required here to prevent loop sync errors with live source.          List<string>.Enumerator keys = SMAddon.SmVessel.PartsByResource.Keys.ToList().GetEnumerator();          while (keys.MoveNext())          {            if (string.IsNullOrEmpty(keys.Current)) continue;            GUILayout.BeginHorizontal();              // Button Widths            int width = 273;            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current)) width = 185;            else if (SMConditions.IsResourceTypeOther(keys.Current)) width = 223;              // Resource Button            string displayAmounts = $"{keys.Current}{SmUtils.DisplayVesselResourceTotals(keys.Current)}";            GUIStyle style = SMAddon.SmVessel.SelectedResources.Contains(keys.Current)              ? SMStyle.ButtonToggledStyle              : SMStyle.ButtonStyle;            if (GUILayout.Button(displayAmounts' style' GUILayout.Width(width)' GUILayout.Height(20)))            {              ResourceButtonToggled(keys.Current);              SMHighlighter.Update_Highlighter();            }              // Dump Button            if (SMConditions.IsResourceTypeOther(keys.Current) && SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              uint pumpId = TransferPump.GetPumpIdFromHash(keys.Current'                SMAddon.SmVessel.PartsByResource[keys.Current].First()'                SMAddon.SmVessel.PartsByResource[keys.Current].Last()' TransferPump.TypeXfer.Dump'                TransferPump.TriggerButton.Manifest);              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_manifest_009")' SmUtils.Localize("#smloc_manifest_tt_001")) // "Dump"' "Dumps the selected resource in this vessel"                : new GUIContent(SmUtils.Localize("#smloc_manifest_010")' SmUtils.Localize("#smloc_manifest_tt_002")); // "Stop"' "Halts the dumping of the selected resource in this vessel"              GUI.enabled = SMConditions.CanResourceBeDumped(keys.Current);              if (GUILayout.Button(dumpContent' SMStyle.ButtonStyle' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMVessel.ToggleDumpResource(keys.Current' pumpId);              }            }              // Fill Button            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current) &&                SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              GUI.enabled = SMConditions.CanResourceBeFilled(keys.Current);              if (GUILayout.Button($"{SmUtils.Localize("#smloc_manifest_011")}"' SMStyle.ButtonStyle' GUILayout.Width(35)'                GUILayout.Height(20))) // "Fill"              {                SMAddon.SmVessel.FillResource(keys.Current);              }            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          keys.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceButtonList.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceButtonsList,The following statement contains a magic number: try        {          // List required here to prevent loop sync errors with live source.          List<string>.Enumerator keys = SMAddon.SmVessel.PartsByResource.Keys.ToList().GetEnumerator();          while (keys.MoveNext())          {            if (string.IsNullOrEmpty(keys.Current)) continue;            GUILayout.BeginHorizontal();              // Button Widths            int width = 273;            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current)) width = 185;            else if (SMConditions.IsResourceTypeOther(keys.Current)) width = 223;              // Resource Button            string displayAmounts = $"{keys.Current}{SmUtils.DisplayVesselResourceTotals(keys.Current)}";            GUIStyle style = SMAddon.SmVessel.SelectedResources.Contains(keys.Current)              ? SMStyle.ButtonToggledStyle              : SMStyle.ButtonStyle;            if (GUILayout.Button(displayAmounts' style' GUILayout.Width(width)' GUILayout.Height(20)))            {              ResourceButtonToggled(keys.Current);              SMHighlighter.Update_Highlighter();            }              // Dump Button            if (SMConditions.IsResourceTypeOther(keys.Current) && SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              uint pumpId = TransferPump.GetPumpIdFromHash(keys.Current'                SMAddon.SmVessel.PartsByResource[keys.Current].First()'                SMAddon.SmVessel.PartsByResource[keys.Current].Last()' TransferPump.TypeXfer.Dump'                TransferPump.TriggerButton.Manifest);              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_manifest_009")' SmUtils.Localize("#smloc_manifest_tt_001")) // "Dump"' "Dumps the selected resource in this vessel"                : new GUIContent(SmUtils.Localize("#smloc_manifest_010")' SmUtils.Localize("#smloc_manifest_tt_002")); // "Stop"' "Halts the dumping of the selected resource in this vessel"              GUI.enabled = SMConditions.CanResourceBeDumped(keys.Current);              if (GUILayout.Button(dumpContent' SMStyle.ButtonStyle' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMVessel.ToggleDumpResource(keys.Current' pumpId);              }            }              // Fill Button            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current) &&                SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              GUI.enabled = SMConditions.CanResourceBeFilled(keys.Current);              if (GUILayout.Button($"{SmUtils.Localize("#smloc_manifest_011")}"' SMStyle.ButtonStyle' GUILayout.Width(35)'                GUILayout.Height(20))) // "Fill"              {                SMAddon.SmVessel.FillResource(keys.Current);              }            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          keys.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceButtonList.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceButtonsList,The following statement contains a magic number: try        {          // List required here to prevent loop sync errors with live source.          List<string>.Enumerator keys = SMAddon.SmVessel.PartsByResource.Keys.ToList().GetEnumerator();          while (keys.MoveNext())          {            if (string.IsNullOrEmpty(keys.Current)) continue;            GUILayout.BeginHorizontal();              // Button Widths            int width = 273;            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current)) width = 185;            else if (SMConditions.IsResourceTypeOther(keys.Current)) width = 223;              // Resource Button            string displayAmounts = $"{keys.Current}{SmUtils.DisplayVesselResourceTotals(keys.Current)}";            GUIStyle style = SMAddon.SmVessel.SelectedResources.Contains(keys.Current)              ? SMStyle.ButtonToggledStyle              : SMStyle.ButtonStyle;            if (GUILayout.Button(displayAmounts' style' GUILayout.Width(width)' GUILayout.Height(20)))            {              ResourceButtonToggled(keys.Current);              SMHighlighter.Update_Highlighter();            }              // Dump Button            if (SMConditions.IsResourceTypeOther(keys.Current) && SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              uint pumpId = TransferPump.GetPumpIdFromHash(keys.Current'                SMAddon.SmVessel.PartsByResource[keys.Current].First()'                SMAddon.SmVessel.PartsByResource[keys.Current].Last()' TransferPump.TypeXfer.Dump'                TransferPump.TriggerButton.Manifest);              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_manifest_009")' SmUtils.Localize("#smloc_manifest_tt_001")) // "Dump"' "Dumps the selected resource in this vessel"                : new GUIContent(SmUtils.Localize("#smloc_manifest_010")' SmUtils.Localize("#smloc_manifest_tt_002")); // "Stop"' "Halts the dumping of the selected resource in this vessel"              GUI.enabled = SMConditions.CanResourceBeDumped(keys.Current);              if (GUILayout.Button(dumpContent' SMStyle.ButtonStyle' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMVessel.ToggleDumpResource(keys.Current' pumpId);              }            }              // Fill Button            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current) &&                SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              GUI.enabled = SMConditions.CanResourceBeFilled(keys.Current);              if (GUILayout.Button($"{SmUtils.Localize("#smloc_manifest_011")}"' SMStyle.ButtonStyle' GUILayout.Width(35)'                GUILayout.Height(20))) // "Fill"              {                SMAddon.SmVessel.FillResource(keys.Current);              }            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          keys.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceButtonList.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceButtonsList,The following statement contains a magic number: try        {          // List required here to prevent loop sync errors with live source.          List<string>.Enumerator keys = SMAddon.SmVessel.PartsByResource.Keys.ToList().GetEnumerator();          while (keys.MoveNext())          {            if (string.IsNullOrEmpty(keys.Current)) continue;            GUILayout.BeginHorizontal();              // Button Widths            int width = 273;            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current)) width = 185;            else if (SMConditions.IsResourceTypeOther(keys.Current)) width = 223;              // Resource Button            string displayAmounts = $"{keys.Current}{SmUtils.DisplayVesselResourceTotals(keys.Current)}";            GUIStyle style = SMAddon.SmVessel.SelectedResources.Contains(keys.Current)              ? SMStyle.ButtonToggledStyle              : SMStyle.ButtonStyle;            if (GUILayout.Button(displayAmounts' style' GUILayout.Width(width)' GUILayout.Height(20)))            {              ResourceButtonToggled(keys.Current);              SMHighlighter.Update_Highlighter();            }              // Dump Button            if (SMConditions.IsResourceTypeOther(keys.Current) && SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              uint pumpId = TransferPump.GetPumpIdFromHash(keys.Current'                SMAddon.SmVessel.PartsByResource[keys.Current].First()'                SMAddon.SmVessel.PartsByResource[keys.Current].Last()' TransferPump.TypeXfer.Dump'                TransferPump.TriggerButton.Manifest);              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_manifest_009")' SmUtils.Localize("#smloc_manifest_tt_001")) // "Dump"' "Dumps the selected resource in this vessel"                : new GUIContent(SmUtils.Localize("#smloc_manifest_010")' SmUtils.Localize("#smloc_manifest_tt_002")); // "Stop"' "Halts the dumping of the selected resource in this vessel"              GUI.enabled = SMConditions.CanResourceBeDumped(keys.Current);              if (GUILayout.Button(dumpContent' SMStyle.ButtonStyle' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMVessel.ToggleDumpResource(keys.Current' pumpId);              }            }              // Fill Button            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current) &&                SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              GUI.enabled = SMConditions.CanResourceBeFilled(keys.Current);              if (GUILayout.Button($"{SmUtils.Localize("#smloc_manifest_011")}"' SMStyle.ButtonStyle' GUILayout.Width(35)'                GUILayout.Height(20))) // "Fill"              {                SMAddon.SmVessel.FillResource(keys.Current);              }            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          keys.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceButtonList.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceButtonsList,The following statement contains a magic number: try        {          // List required here to prevent loop sync errors with live source.          List<string>.Enumerator keys = SMAddon.SmVessel.PartsByResource.Keys.ToList().GetEnumerator();          while (keys.MoveNext())          {            if (string.IsNullOrEmpty(keys.Current)) continue;            GUILayout.BeginHorizontal();              // Button Widths            int width = 273;            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current)) width = 185;            else if (SMConditions.IsResourceTypeOther(keys.Current)) width = 223;              // Resource Button            string displayAmounts = $"{keys.Current}{SmUtils.DisplayVesselResourceTotals(keys.Current)}";            GUIStyle style = SMAddon.SmVessel.SelectedResources.Contains(keys.Current)              ? SMStyle.ButtonToggledStyle              : SMStyle.ButtonStyle;            if (GUILayout.Button(displayAmounts' style' GUILayout.Width(width)' GUILayout.Height(20)))            {              ResourceButtonToggled(keys.Current);              SMHighlighter.Update_Highlighter();            }              // Dump Button            if (SMConditions.IsResourceTypeOther(keys.Current) && SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              uint pumpId = TransferPump.GetPumpIdFromHash(keys.Current'                SMAddon.SmVessel.PartsByResource[keys.Current].First()'                SMAddon.SmVessel.PartsByResource[keys.Current].Last()' TransferPump.TypeXfer.Dump'                TransferPump.TriggerButton.Manifest);              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_manifest_009")' SmUtils.Localize("#smloc_manifest_tt_001")) // "Dump"' "Dumps the selected resource in this vessel"                : new GUIContent(SmUtils.Localize("#smloc_manifest_010")' SmUtils.Localize("#smloc_manifest_tt_002")); // "Stop"' "Halts the dumping of the selected resource in this vessel"              GUI.enabled = SMConditions.CanResourceBeDumped(keys.Current);              if (GUILayout.Button(dumpContent' SMStyle.ButtonStyle' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMVessel.ToggleDumpResource(keys.Current' pumpId);              }            }              // Fill Button            if (!SMSettings.RealXfers && SMConditions.IsResourceTypeOther(keys.Current) &&                SMAddon.SmVessel.PartsByResource[keys.Current].Count > 0)            {              GUI.enabled = SMConditions.CanResourceBeFilled(keys.Current);              if (GUILayout.Button($"{SmUtils.Localize("#smloc_manifest_011")}"' SMStyle.ButtonStyle' GUILayout.Width(35)'                GUILayout.Height(20))) // "Fill"              {                SMAddon.SmVessel.FillResource(keys.Current);              }            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          keys.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceButtonList.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceDetailsViewer,The following statement contains a magic number: try        {          _resourceScrollViewerPosition = GUILayout.BeginScrollView(_resourceScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            if (SMAddon.SmVessel.SelectedResources.Count > 0)          {            List<Part>.Enumerator pParts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();            while (pParts.MoveNext())            {              if (pParts.Current == null) continue;              Part part = pParts.Current;              if (SMConditions.AreSelectedResourcesTypeOther(SMAddon.SmVessel.SelectedResources))              {                GUIStyle noWrap = SMStyle.LabelStyleNoWrap;                GUILayout.Label($"{part.partInfo.title}"' noWrap' GUILayout.Width(265)'                  GUILayout.Height(18));                GUIStyle noPad = SMStyle.LabelStyleNoPad;                List<string>.Enumerator sResources = SMAddon.SmVessel.SelectedResources.GetEnumerator();                while (sResources.MoveNext())                {                  if (sResources.Current == null) continue;                  GUILayout.Label(                    $" - {sResources.Current}:  ({part.Resources[sResources.Current].amount:######0.####}/{part.Resources[sResources.Current].maxAmount:######0.####})"' noPad' GUILayout.Width(265)'                    GUILayout.Height(16));                }                sResources.Dispose();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              {                GUILayout.BeginHorizontal();                GUILayout.Label(                  $"{part.partInfo.title}' ({SmUtils.GetPartCrewCount(part)}/{part.CrewCapacity})"'                  GUILayout.Width(265)' GUILayout.Height(20));                GUILayout.EndHorizontal();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Science.ToString()))              {                int scienceCount = 0;                IEnumerator pModules = part.Modules.GetEnumerator();                while (pModules.MoveNext())                {                  if (pModules.Current == null) continue;                  PartModule pm = (PartModule)pModules.Current;                  ModuleScienceContainer container = pm as ModuleScienceContainer;                  if (container != null)                    scienceCount += container.GetScienceCount();                  else if (pm is ModuleScienceExperiment)                    scienceCount += ((ModuleScienceExperiment) pm).GetScienceCount();                }                GUILayout.BeginHorizontal();                GUILayout.Label($"{part.partInfo.title}' ({scienceCount})"' GUILayout.Width(265));                GUILayout.EndHorizontal();              }            }            pParts.Dispose();          }        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceDetailsViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true); // in' Error            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceDetailsViewer,The following statement contains a magic number: try        {          _resourceScrollViewerPosition = GUILayout.BeginScrollView(_resourceScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            if (SMAddon.SmVessel.SelectedResources.Count > 0)          {            List<Part>.Enumerator pParts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();            while (pParts.MoveNext())            {              if (pParts.Current == null) continue;              Part part = pParts.Current;              if (SMConditions.AreSelectedResourcesTypeOther(SMAddon.SmVessel.SelectedResources))              {                GUIStyle noWrap = SMStyle.LabelStyleNoWrap;                GUILayout.Label($"{part.partInfo.title}"' noWrap' GUILayout.Width(265)'                  GUILayout.Height(18));                GUIStyle noPad = SMStyle.LabelStyleNoPad;                List<string>.Enumerator sResources = SMAddon.SmVessel.SelectedResources.GetEnumerator();                while (sResources.MoveNext())                {                  if (sResources.Current == null) continue;                  GUILayout.Label(                    $" - {sResources.Current}:  ({part.Resources[sResources.Current].amount:######0.####}/{part.Resources[sResources.Current].maxAmount:######0.####})"' noPad' GUILayout.Width(265)'                    GUILayout.Height(16));                }                sResources.Dispose();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              {                GUILayout.BeginHorizontal();                GUILayout.Label(                  $"{part.partInfo.title}' ({SmUtils.GetPartCrewCount(part)}/{part.CrewCapacity})"'                  GUILayout.Width(265)' GUILayout.Height(20));                GUILayout.EndHorizontal();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Science.ToString()))              {                int scienceCount = 0;                IEnumerator pModules = part.Modules.GetEnumerator();                while (pModules.MoveNext())                {                  if (pModules.Current == null) continue;                  PartModule pm = (PartModule)pModules.Current;                  ModuleScienceContainer container = pm as ModuleScienceContainer;                  if (container != null)                    scienceCount += container.GetScienceCount();                  else if (pm is ModuleScienceExperiment)                    scienceCount += ((ModuleScienceExperiment) pm).GetScienceCount();                }                GUILayout.BeginHorizontal();                GUILayout.Label($"{part.partInfo.title}' ({scienceCount})"' GUILayout.Width(265));                GUILayout.EndHorizontal();              }            }            pParts.Dispose();          }        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceDetailsViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true); // in' Error            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceDetailsViewer,The following statement contains a magic number: try        {          _resourceScrollViewerPosition = GUILayout.BeginScrollView(_resourceScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            if (SMAddon.SmVessel.SelectedResources.Count > 0)          {            List<Part>.Enumerator pParts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();            while (pParts.MoveNext())            {              if (pParts.Current == null) continue;              Part part = pParts.Current;              if (SMConditions.AreSelectedResourcesTypeOther(SMAddon.SmVessel.SelectedResources))              {                GUIStyle noWrap = SMStyle.LabelStyleNoWrap;                GUILayout.Label($"{part.partInfo.title}"' noWrap' GUILayout.Width(265)'                  GUILayout.Height(18));                GUIStyle noPad = SMStyle.LabelStyleNoPad;                List<string>.Enumerator sResources = SMAddon.SmVessel.SelectedResources.GetEnumerator();                while (sResources.MoveNext())                {                  if (sResources.Current == null) continue;                  GUILayout.Label(                    $" - {sResources.Current}:  ({part.Resources[sResources.Current].amount:######0.####}/{part.Resources[sResources.Current].maxAmount:######0.####})"' noPad' GUILayout.Width(265)'                    GUILayout.Height(16));                }                sResources.Dispose();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              {                GUILayout.BeginHorizontal();                GUILayout.Label(                  $"{part.partInfo.title}' ({SmUtils.GetPartCrewCount(part)}/{part.CrewCapacity})"'                  GUILayout.Width(265)' GUILayout.Height(20));                GUILayout.EndHorizontal();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Science.ToString()))              {                int scienceCount = 0;                IEnumerator pModules = part.Modules.GetEnumerator();                while (pModules.MoveNext())                {                  if (pModules.Current == null) continue;                  PartModule pm = (PartModule)pModules.Current;                  ModuleScienceContainer container = pm as ModuleScienceContainer;                  if (container != null)                    scienceCount += container.GetScienceCount();                  else if (pm is ModuleScienceExperiment)                    scienceCount += ((ModuleScienceExperiment) pm).GetScienceCount();                }                GUILayout.BeginHorizontal();                GUILayout.Label($"{part.partInfo.title}' ({scienceCount})"' GUILayout.Width(265));                GUILayout.EndHorizontal();              }            }            pParts.Dispose();          }        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceDetailsViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true); // in' Error            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceDetailsViewer,The following statement contains a magic number: try        {          _resourceScrollViewerPosition = GUILayout.BeginScrollView(_resourceScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            if (SMAddon.SmVessel.SelectedResources.Count > 0)          {            List<Part>.Enumerator pParts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();            while (pParts.MoveNext())            {              if (pParts.Current == null) continue;              Part part = pParts.Current;              if (SMConditions.AreSelectedResourcesTypeOther(SMAddon.SmVessel.SelectedResources))              {                GUIStyle noWrap = SMStyle.LabelStyleNoWrap;                GUILayout.Label($"{part.partInfo.title}"' noWrap' GUILayout.Width(265)'                  GUILayout.Height(18));                GUIStyle noPad = SMStyle.LabelStyleNoPad;                List<string>.Enumerator sResources = SMAddon.SmVessel.SelectedResources.GetEnumerator();                while (sResources.MoveNext())                {                  if (sResources.Current == null) continue;                  GUILayout.Label(                    $" - {sResources.Current}:  ({part.Resources[sResources.Current].amount:######0.####}/{part.Resources[sResources.Current].maxAmount:######0.####})"' noPad' GUILayout.Width(265)'                    GUILayout.Height(16));                }                sResources.Dispose();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              {                GUILayout.BeginHorizontal();                GUILayout.Label(                  $"{part.partInfo.title}' ({SmUtils.GetPartCrewCount(part)}/{part.CrewCapacity})"'                  GUILayout.Width(265)' GUILayout.Height(20));                GUILayout.EndHorizontal();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Science.ToString()))              {                int scienceCount = 0;                IEnumerator pModules = part.Modules.GetEnumerator();                while (pModules.MoveNext())                {                  if (pModules.Current == null) continue;                  PartModule pm = (PartModule)pModules.Current;                  ModuleScienceContainer container = pm as ModuleScienceContainer;                  if (container != null)                    scienceCount += container.GetScienceCount();                  else if (pm is ModuleScienceExperiment)                    scienceCount += ((ModuleScienceExperiment) pm).GetScienceCount();                }                GUILayout.BeginHorizontal();                GUILayout.Label($"{part.partInfo.title}' ({scienceCount})"' GUILayout.Width(265));                GUILayout.EndHorizontal();              }            }            pParts.Dispose();          }        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceDetailsViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true); // in' Error            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceDetailsViewer,The following statement contains a magic number: try        {          _resourceScrollViewerPosition = GUILayout.BeginScrollView(_resourceScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            if (SMAddon.SmVessel.SelectedResources.Count > 0)          {            List<Part>.Enumerator pParts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();            while (pParts.MoveNext())            {              if (pParts.Current == null) continue;              Part part = pParts.Current;              if (SMConditions.AreSelectedResourcesTypeOther(SMAddon.SmVessel.SelectedResources))              {                GUIStyle noWrap = SMStyle.LabelStyleNoWrap;                GUILayout.Label($"{part.partInfo.title}"' noWrap' GUILayout.Width(265)'                  GUILayout.Height(18));                GUIStyle noPad = SMStyle.LabelStyleNoPad;                List<string>.Enumerator sResources = SMAddon.SmVessel.SelectedResources.GetEnumerator();                while (sResources.MoveNext())                {                  if (sResources.Current == null) continue;                  GUILayout.Label(                    $" - {sResources.Current}:  ({part.Resources[sResources.Current].amount:######0.####}/{part.Resources[sResources.Current].maxAmount:######0.####})"' noPad' GUILayout.Width(265)'                    GUILayout.Height(16));                }                sResources.Dispose();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              {                GUILayout.BeginHorizontal();                GUILayout.Label(                  $"{part.partInfo.title}' ({SmUtils.GetPartCrewCount(part)}/{part.CrewCapacity})"'                  GUILayout.Width(265)' GUILayout.Height(20));                GUILayout.EndHorizontal();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Science.ToString()))              {                int scienceCount = 0;                IEnumerator pModules = part.Modules.GetEnumerator();                while (pModules.MoveNext())                {                  if (pModules.Current == null) continue;                  PartModule pm = (PartModule)pModules.Current;                  ModuleScienceContainer container = pm as ModuleScienceContainer;                  if (container != null)                    scienceCount += container.GetScienceCount();                  else if (pm is ModuleScienceExperiment)                    scienceCount += ((ModuleScienceExperiment) pm).GetScienceCount();                }                GUILayout.BeginHorizontal();                GUILayout.Label($"{part.partInfo.title}' ({scienceCount})"' GUILayout.Width(265));                GUILayout.EndHorizontal();              }            }            pParts.Dispose();          }        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceDetailsViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true); // in' Error            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceDetailsViewer,The following statement contains a magic number: try        {          _resourceScrollViewerPosition = GUILayout.BeginScrollView(_resourceScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            if (SMAddon.SmVessel.SelectedResources.Count > 0)          {            List<Part>.Enumerator pParts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();            while (pParts.MoveNext())            {              if (pParts.Current == null) continue;              Part part = pParts.Current;              if (SMConditions.AreSelectedResourcesTypeOther(SMAddon.SmVessel.SelectedResources))              {                GUIStyle noWrap = SMStyle.LabelStyleNoWrap;                GUILayout.Label($"{part.partInfo.title}"' noWrap' GUILayout.Width(265)'                  GUILayout.Height(18));                GUIStyle noPad = SMStyle.LabelStyleNoPad;                List<string>.Enumerator sResources = SMAddon.SmVessel.SelectedResources.GetEnumerator();                while (sResources.MoveNext())                {                  if (sResources.Current == null) continue;                  GUILayout.Label(                    $" - {sResources.Current}:  ({part.Resources[sResources.Current].amount:######0.####}/{part.Resources[sResources.Current].maxAmount:######0.####})"' noPad' GUILayout.Width(265)'                    GUILayout.Height(16));                }                sResources.Dispose();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              {                GUILayout.BeginHorizontal();                GUILayout.Label(                  $"{part.partInfo.title}' ({SmUtils.GetPartCrewCount(part)}/{part.CrewCapacity})"'                  GUILayout.Width(265)' GUILayout.Height(20));                GUILayout.EndHorizontal();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Science.ToString()))              {                int scienceCount = 0;                IEnumerator pModules = part.Modules.GetEnumerator();                while (pModules.MoveNext())                {                  if (pModules.Current == null) continue;                  PartModule pm = (PartModule)pModules.Current;                  ModuleScienceContainer container = pm as ModuleScienceContainer;                  if (container != null)                    scienceCount += container.GetScienceCount();                  else if (pm is ModuleScienceExperiment)                    scienceCount += ((ModuleScienceExperiment) pm).GetScienceCount();                }                GUILayout.BeginHorizontal();                GUILayout.Label($"{part.partInfo.title}' ({scienceCount})"' GUILayout.Width(265));                GUILayout.EndHorizontal();              }            }            pParts.Dispose();          }        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceDetailsViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true); // in' Error            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceDetailsViewer,The following statement contains a magic number: try        {          _resourceScrollViewerPosition = GUILayout.BeginScrollView(_resourceScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            if (SMAddon.SmVessel.SelectedResources.Count > 0)          {            List<Part>.Enumerator pParts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();            while (pParts.MoveNext())            {              if (pParts.Current == null) continue;              Part part = pParts.Current;              if (SMConditions.AreSelectedResourcesTypeOther(SMAddon.SmVessel.SelectedResources))              {                GUIStyle noWrap = SMStyle.LabelStyleNoWrap;                GUILayout.Label($"{part.partInfo.title}"' noWrap' GUILayout.Width(265)'                  GUILayout.Height(18));                GUIStyle noPad = SMStyle.LabelStyleNoPad;                List<string>.Enumerator sResources = SMAddon.SmVessel.SelectedResources.GetEnumerator();                while (sResources.MoveNext())                {                  if (sResources.Current == null) continue;                  GUILayout.Label(                    $" - {sResources.Current}:  ({part.Resources[sResources.Current].amount:######0.####}/{part.Resources[sResources.Current].maxAmount:######0.####})"' noPad' GUILayout.Width(265)'                    GUILayout.Height(16));                }                sResources.Dispose();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              {                GUILayout.BeginHorizontal();                GUILayout.Label(                  $"{part.partInfo.title}' ({SmUtils.GetPartCrewCount(part)}/{part.CrewCapacity})"'                  GUILayout.Width(265)' GUILayout.Height(20));                GUILayout.EndHorizontal();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Science.ToString()))              {                int scienceCount = 0;                IEnumerator pModules = part.Modules.GetEnumerator();                while (pModules.MoveNext())                {                  if (pModules.Current == null) continue;                  PartModule pm = (PartModule)pModules.Current;                  ModuleScienceContainer container = pm as ModuleScienceContainer;                  if (container != null)                    scienceCount += container.GetScienceCount();                  else if (pm is ModuleScienceExperiment)                    scienceCount += ((ModuleScienceExperiment) pm).GetScienceCount();                }                GUILayout.BeginHorizontal();                GUILayout.Label($"{part.partInfo.title}' ({scienceCount})"' GUILayout.Width(265));                GUILayout.EndHorizontal();              }            }            pParts.Dispose();          }        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceDetailsViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true); // in' Error            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceDetailsViewer,The following statement contains a magic number: try        {          _resourceScrollViewerPosition = GUILayout.BeginScrollView(_resourceScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            if (SMAddon.SmVessel.SelectedResources.Count > 0)          {            List<Part>.Enumerator pParts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();            while (pParts.MoveNext())            {              if (pParts.Current == null) continue;              Part part = pParts.Current;              if (SMConditions.AreSelectedResourcesTypeOther(SMAddon.SmVessel.SelectedResources))              {                GUIStyle noWrap = SMStyle.LabelStyleNoWrap;                GUILayout.Label($"{part.partInfo.title}"' noWrap' GUILayout.Width(265)'                  GUILayout.Height(18));                GUIStyle noPad = SMStyle.LabelStyleNoPad;                List<string>.Enumerator sResources = SMAddon.SmVessel.SelectedResources.GetEnumerator();                while (sResources.MoveNext())                {                  if (sResources.Current == null) continue;                  GUILayout.Label(                    $" - {sResources.Current}:  ({part.Resources[sResources.Current].amount:######0.####}/{part.Resources[sResources.Current].maxAmount:######0.####})"' noPad' GUILayout.Width(265)'                    GUILayout.Height(16));                }                sResources.Dispose();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              {                GUILayout.BeginHorizontal();                GUILayout.Label(                  $"{part.partInfo.title}' ({SmUtils.GetPartCrewCount(part)}/{part.CrewCapacity})"'                  GUILayout.Width(265)' GUILayout.Height(20));                GUILayout.EndHorizontal();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Science.ToString()))              {                int scienceCount = 0;                IEnumerator pModules = part.Modules.GetEnumerator();                while (pModules.MoveNext())                {                  if (pModules.Current == null) continue;                  PartModule pm = (PartModule)pModules.Current;                  ModuleScienceContainer container = pm as ModuleScienceContainer;                  if (container != null)                    scienceCount += container.GetScienceCount();                  else if (pm is ModuleScienceExperiment)                    scienceCount += ((ModuleScienceExperiment) pm).GetScienceCount();                }                GUILayout.BeginHorizontal();                GUILayout.Label($"{part.partInfo.title}' ({scienceCount})"' GUILayout.Width(265));                GUILayout.EndHorizontal();              }            }            pParts.Dispose();          }        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceDetailsViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true); // in' Error            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,ResourceDetailsViewer,The following statement contains a magic number: try        {          _resourceScrollViewerPosition = GUILayout.BeginScrollView(_resourceScrollViewerPosition' SMStyle.ScrollStyle'            GUILayout.Height(100)' GUILayout.Width(300));          GUILayout.BeginVertical();            if (SMAddon.SmVessel.SelectedResources.Count > 0)          {            List<Part>.Enumerator pParts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();            while (pParts.MoveNext())            {              if (pParts.Current == null) continue;              Part part = pParts.Current;              if (SMConditions.AreSelectedResourcesTypeOther(SMAddon.SmVessel.SelectedResources))              {                GUIStyle noWrap = SMStyle.LabelStyleNoWrap;                GUILayout.Label($"{part.partInfo.title}"' noWrap' GUILayout.Width(265)'                  GUILayout.Height(18));                GUIStyle noPad = SMStyle.LabelStyleNoPad;                List<string>.Enumerator sResources = SMAddon.SmVessel.SelectedResources.GetEnumerator();                while (sResources.MoveNext())                {                  if (sResources.Current == null) continue;                  GUILayout.Label(                    $" - {sResources.Current}:  ({part.Resources[sResources.Current].amount:######0.####}/{part.Resources[sResources.Current].maxAmount:######0.####})"' noPad' GUILayout.Width(265)'                    GUILayout.Height(16));                }                sResources.Dispose();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))              {                GUILayout.BeginHorizontal();                GUILayout.Label(                  $"{part.partInfo.title}' ({SmUtils.GetPartCrewCount(part)}/{part.CrewCapacity})"'                  GUILayout.Width(265)' GUILayout.Height(20));                GUILayout.EndHorizontal();              }              else if (SMAddon.SmVessel.SelectedResources.Contains(SMConditions.ResourceType.Science.ToString()))              {                int scienceCount = 0;                IEnumerator pModules = part.Modules.GetEnumerator();                while (pModules.MoveNext())                {                  if (pModules.Current == null) continue;                  PartModule pm = (PartModule)pModules.Current;                  ModuleScienceContainer container = pm as ModuleScienceContainer;                  if (container != null)                    scienceCount += container.GetScienceCount();                  else if (pm is ModuleScienceExperiment)                    scienceCount += ((ModuleScienceExperiment) pm).GetScienceCount();                }                GUILayout.BeginHorizontal();                GUILayout.Label($"{part.partInfo.title}' ({scienceCount})"' GUILayout.Width(265));                GUILayout.EndHorizontal();              }            }            pParts.Dispose();          }        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowManifest.ResourceDetailsViewer.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"'              SmUtils.LogType.Error' true); // in' Error            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,WindowToggleButtons,The following statement contains a magic number: if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_012")' settingsStyle' GUILayout.Height(20))) // "Settings"        {          try          {            WindowSettings.ShowWindow = !WindowSettings.ShowWindow;            if (WindowSettings.ShowWindow)            {              // Store settings in case we cancel later...              SMSettings.MemStoreTempSettings();            }          }          catch (Exception ex)          {            SmUtils.LogMessage(              $" opening Settings Window.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error'              true);          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,WindowToggleButtons,The following statement contains a magic number: if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_013")' rosterStyle' GUILayout.Height(20))) // "Roster"        {          try          {            WindowRoster.ShowWindow = !WindowRoster.ShowWindow;            if (WindowRoster.ShowWindow)            {              WindowRoster.GetRosterList();            }            else            {              WindowRoster.SelectedKerbal = null;              WindowRoster.ToolTip = "";            }          }          catch (Exception ex)          {            SmUtils.LogMessage(              $" opening Roster Window.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error'              true);          }        }
Magic Number,ShipManifest.Windows,WindowManifest,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowManifest.cs,WindowToggleButtons,The following statement contains a magic number: if (GUILayout.Button(SmUtils.Localize("#smloc_manifest_014")' controlStyle' GUILayout.Height(20))) // "Control"        {          try          {            WindowControl.ShowWindow = !WindowControl.ShowWindow;          }          catch (Exception ex)          {            SmUtils.LogMessage(              $" opening Control Window.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error'              true);          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,Display,The following statement contains a magic number: Rect rect = new Rect(Position.width - 20' 4' 16' 16);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,Display,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,Display,The following statement contains a magic number: try        {          // This window assumes that a resource has been selected on the Ship manifest window.          GUILayout.BeginHorizontal();          //Left Column Begins          GUILayout.BeginVertical();            // Build source Transfer Viewer          SourceTransferViewer();            // Text above Source Details. (Between viewers)          TextBetweenViewers(SMAddon.SmVessel.SelectedPartsSource' TransferPump.TypeXfer.SourceToTarget);            // Build Details ScrollViewer          SourceDetailsViewer();            // Okay' we are done with the left column of the dialog...          GUILayout.EndVertical();            // Right Column Begins...          GUILayout.BeginVertical();            // Build Target Transfer Viewer          TargetTransferViewer();            // Text between viewers          TextBetweenViewers(SMAddon.SmVessel.SelectedPartsTarget' TransferPump.TypeXfer.TargetToSource);            // Build Target details Viewer          TargetDetailsViewer();            GUILayout.EndVertical();          GUILayout.EndHorizontal();            // Display MouseOverHighlighting' if any          SMHighlighter.MouseOverHighlight();            GUI.DragWindow(new Rect(0' 0' Screen.width' 30));          SMAddon.RepositionWindow(ref Position);        }        catch (Exception ex)        {          SmUtils.LogMessage(            $" in Ship Manifest Window.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,TextBetweenViewers,The following statement contains a magic number: const float textWidth = 220;
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,TextBetweenViewers,The following statement contains a magic number: const float toggleWidth = 65;
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,PartsTransferViewer,The following statement contains a magic number: float scrollX = (xferType == TransferPump.TypeXfer.SourceToTarget ? 20 : 320);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,PartsTransferViewer,The following statement contains a magic number: float scrollX = (xferType == TransferPump.TypeXfer.SourceToTarget ? 20 : 320);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,PartsTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<Part>.Enumerator parts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();          while (parts.MoveNext())          {            if (parts.Current == null) continue;            // Build the part button title...            step = "part button title";            string strDescription = GetResourceDescription(selectedResources' parts.Current);              // set the conditions for a button style change.            int btnWidth = 273; // Start with full width button...            if (SMConditions.AreSelectedResourcesTypeOther(selectedResources))              btnWidth = !SMSettings.RealXfers || (SMSettings.EnablePfResources && SMConditions.IsInPreflight()) ? 173 : 223;            else if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()) && SMConditions.CanShowCrewFillDumpButtons())              btnWidth = 173;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetPartButtonStyle(xferType' parts.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = IsPartSelectable(selectedResources[0]' xferType' parts.Current);              step = "Render part Buttons";            if (GUILayout.Button(strDescription' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              PartButtonToggled(xferType' parts.Current);              SMHighlighter.Update_Highlighter();            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' parts.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              step = "Render dump/fill buttons";            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())              CrewFillDumpPartButtons(parts.Current);            }            if (SMConditions.AreSelectedResourcesTypeOther(selectedResources))            {              ResourceDumpFillButtons(selectedResources' xferType' parts.Current);            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          parts.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.PartsTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,PartsTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<Part>.Enumerator parts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();          while (parts.MoveNext())          {            if (parts.Current == null) continue;            // Build the part button title...            step = "part button title";            string strDescription = GetResourceDescription(selectedResources' parts.Current);              // set the conditions for a button style change.            int btnWidth = 273; // Start with full width button...            if (SMConditions.AreSelectedResourcesTypeOther(selectedResources))              btnWidth = !SMSettings.RealXfers || (SMSettings.EnablePfResources && SMConditions.IsInPreflight()) ? 173 : 223;            else if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()) && SMConditions.CanShowCrewFillDumpButtons())              btnWidth = 173;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetPartButtonStyle(xferType' parts.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = IsPartSelectable(selectedResources[0]' xferType' parts.Current);              step = "Render part Buttons";            if (GUILayout.Button(strDescription' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              PartButtonToggled(xferType' parts.Current);              SMHighlighter.Update_Highlighter();            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' parts.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              step = "Render dump/fill buttons";            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())              CrewFillDumpPartButtons(parts.Current);            }            if (SMConditions.AreSelectedResourcesTypeOther(selectedResources))            {              ResourceDumpFillButtons(selectedResources' xferType' parts.Current);            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          parts.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.PartsTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,PartsTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<Part>.Enumerator parts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();          while (parts.MoveNext())          {            if (parts.Current == null) continue;            // Build the part button title...            step = "part button title";            string strDescription = GetResourceDescription(selectedResources' parts.Current);              // set the conditions for a button style change.            int btnWidth = 273; // Start with full width button...            if (SMConditions.AreSelectedResourcesTypeOther(selectedResources))              btnWidth = !SMSettings.RealXfers || (SMSettings.EnablePfResources && SMConditions.IsInPreflight()) ? 173 : 223;            else if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()) && SMConditions.CanShowCrewFillDumpButtons())              btnWidth = 173;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetPartButtonStyle(xferType' parts.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = IsPartSelectable(selectedResources[0]' xferType' parts.Current);              step = "Render part Buttons";            if (GUILayout.Button(strDescription' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              PartButtonToggled(xferType' parts.Current);              SMHighlighter.Update_Highlighter();            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' parts.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              step = "Render dump/fill buttons";            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())              CrewFillDumpPartButtons(parts.Current);            }            if (SMConditions.AreSelectedResourcesTypeOther(selectedResources))            {              ResourceDumpFillButtons(selectedResources' xferType' parts.Current);            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          parts.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.PartsTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,PartsTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<Part>.Enumerator parts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();          while (parts.MoveNext())          {            if (parts.Current == null) continue;            // Build the part button title...            step = "part button title";            string strDescription = GetResourceDescription(selectedResources' parts.Current);              // set the conditions for a button style change.            int btnWidth = 273; // Start with full width button...            if (SMConditions.AreSelectedResourcesTypeOther(selectedResources))              btnWidth = !SMSettings.RealXfers || (SMSettings.EnablePfResources && SMConditions.IsInPreflight()) ? 173 : 223;            else if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()) && SMConditions.CanShowCrewFillDumpButtons())              btnWidth = 173;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetPartButtonStyle(xferType' parts.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = IsPartSelectable(selectedResources[0]' xferType' parts.Current);              step = "Render part Buttons";            if (GUILayout.Button(strDescription' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              PartButtonToggled(xferType' parts.Current);              SMHighlighter.Update_Highlighter();            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' parts.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              step = "Render dump/fill buttons";            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())              CrewFillDumpPartButtons(parts.Current);            }            if (SMConditions.AreSelectedResourcesTypeOther(selectedResources))            {              ResourceDumpFillButtons(selectedResources' xferType' parts.Current);            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          parts.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.PartsTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,PartsTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<Part>.Enumerator parts = SMAddon.SmVessel.SelectedResourcesParts.GetEnumerator();          while (parts.MoveNext())          {            if (parts.Current == null) continue;            // Build the part button title...            step = "part button title";            string strDescription = GetResourceDescription(selectedResources' parts.Current);              // set the conditions for a button style change.            int btnWidth = 273; // Start with full width button...            if (SMConditions.AreSelectedResourcesTypeOther(selectedResources))              btnWidth = !SMSettings.RealXfers || (SMSettings.EnablePfResources && SMConditions.IsInPreflight()) ? 173 : 223;            else if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()) && SMConditions.CanShowCrewFillDumpButtons())              btnWidth = 173;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetPartButtonStyle(xferType' parts.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = IsPartSelectable(selectedResources[0]' xferType' parts.Current);              step = "Render part Buttons";            if (GUILayout.Button(strDescription' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              PartButtonToggled(xferType' parts.Current);              SMHighlighter.Update_Highlighter();            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' parts.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              step = "Render dump/fill buttons";            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())              CrewFillDumpPartButtons(parts.Current);            }            if (SMConditions.AreSelectedResourcesTypeOther(selectedResources))            {              ResourceDumpFillButtons(selectedResources' xferType' parts.Current);            }            GUI.enabled = true;            GUILayout.EndHorizontal();          }          parts.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.PartsTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The following statement contains a magic number: float scrollX = xferType == TransferPump.TypeXfer.SourceToTarget ? 20 : 320;
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The following statement contains a magic number: float scrollX = xferType == TransferPump.TypeXfer.SourceToTarget ? 20 : 320;
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<ModDockedVessel>.Enumerator modDockedVessels = SMAddon.SmVessel.ModDockedVessels.GetEnumerator();          while (modDockedVessels.MoveNext())          {            if (modDockedVessels.Current == null) continue;            // Build the part button title...            step = "vessel button title";            string strDescription = GetResourceDescription(selectedResources' modDockedVessels.Current);              // set the conditions for a button style change.            int btnWidth = 273;            if (!SMSettings.RealXfers) btnWidth = 180;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetVesselButtonStyle(xferType' modDockedVessels.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = CanSelectVessel(xferType' modDockedVessels.Current);              step = "Render vessel Buttons";            if (GUILayout.Button($"{strDescription}"' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              VesselButtonToggled(xferType' modDockedVessels.Current);            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' modDockedVessels.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              //step = "Render dump/fill buttons";            // Crew            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())                CrewFillDumpVesselButtons(modDockedVessels.Current);            }              // Science              // Resources            else if (!SMSettings.RealXfers)            {              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[1]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              GUIStyle style1 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'                modDockedVessels.Current.VesselParts.First()' modDockedVessels.Current.VesselParts.Last()' xferType'                TransferPump.TriggerButton.Transfer);              //GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)              //  ? new GUIContent("Dump"' "Dumps the selected resource in this Part")              //  : new GUIContent("Stop"' "Halts the dumping of the selected resource in this part");              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_transfer_004")' SmUtils.Localize("#smloc_transfer_tt_004"))                : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_005"));              if (GUILayout.Button(dumpContent' style1' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMPart.ToggleDumpResource(modDockedVessels.Current.VesselParts' selectedResources' pumpId);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);                GUIStyle style2 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              //GUIContent fillContent = new GUIContent("Fill"'"Fills the Selected vessel with the selected resource(s)\r\n(Fill is from ground source' NOT from other parts in vessel)");              GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_006"));              if (GUILayout.Button(fillContent' style2' GUILayout.Width(30)' GUILayout.Height(20)))              {                SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[0]);                if (selectedResources.Count > 1)                  SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[1]);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);              GUI.enabled = true;            }            GUILayout.EndHorizontal();          }          modDockedVessels.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.VesselTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<ModDockedVessel>.Enumerator modDockedVessels = SMAddon.SmVessel.ModDockedVessels.GetEnumerator();          while (modDockedVessels.MoveNext())          {            if (modDockedVessels.Current == null) continue;            // Build the part button title...            step = "vessel button title";            string strDescription = GetResourceDescription(selectedResources' modDockedVessels.Current);              // set the conditions for a button style change.            int btnWidth = 273;            if (!SMSettings.RealXfers) btnWidth = 180;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetVesselButtonStyle(xferType' modDockedVessels.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = CanSelectVessel(xferType' modDockedVessels.Current);              step = "Render vessel Buttons";            if (GUILayout.Button($"{strDescription}"' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              VesselButtonToggled(xferType' modDockedVessels.Current);            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' modDockedVessels.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              //step = "Render dump/fill buttons";            // Crew            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())                CrewFillDumpVesselButtons(modDockedVessels.Current);            }              // Science              // Resources            else if (!SMSettings.RealXfers)            {              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[1]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              GUIStyle style1 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'                modDockedVessels.Current.VesselParts.First()' modDockedVessels.Current.VesselParts.Last()' xferType'                TransferPump.TriggerButton.Transfer);              //GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)              //  ? new GUIContent("Dump"' "Dumps the selected resource in this Part")              //  : new GUIContent("Stop"' "Halts the dumping of the selected resource in this part");              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_transfer_004")' SmUtils.Localize("#smloc_transfer_tt_004"))                : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_005"));              if (GUILayout.Button(dumpContent' style1' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMPart.ToggleDumpResource(modDockedVessels.Current.VesselParts' selectedResources' pumpId);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);                GUIStyle style2 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              //GUIContent fillContent = new GUIContent("Fill"'"Fills the Selected vessel with the selected resource(s)\r\n(Fill is from ground source' NOT from other parts in vessel)");              GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_006"));              if (GUILayout.Button(fillContent' style2' GUILayout.Width(30)' GUILayout.Height(20)))              {                SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[0]);                if (selectedResources.Count > 1)                  SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[1]);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);              GUI.enabled = true;            }            GUILayout.EndHorizontal();          }          modDockedVessels.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.VesselTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<ModDockedVessel>.Enumerator modDockedVessels = SMAddon.SmVessel.ModDockedVessels.GetEnumerator();          while (modDockedVessels.MoveNext())          {            if (modDockedVessels.Current == null) continue;            // Build the part button title...            step = "vessel button title";            string strDescription = GetResourceDescription(selectedResources' modDockedVessels.Current);              // set the conditions for a button style change.            int btnWidth = 273;            if (!SMSettings.RealXfers) btnWidth = 180;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetVesselButtonStyle(xferType' modDockedVessels.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = CanSelectVessel(xferType' modDockedVessels.Current);              step = "Render vessel Buttons";            if (GUILayout.Button($"{strDescription}"' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              VesselButtonToggled(xferType' modDockedVessels.Current);            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' modDockedVessels.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              //step = "Render dump/fill buttons";            // Crew            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())                CrewFillDumpVesselButtons(modDockedVessels.Current);            }              // Science              // Resources            else if (!SMSettings.RealXfers)            {              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[1]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              GUIStyle style1 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'                modDockedVessels.Current.VesselParts.First()' modDockedVessels.Current.VesselParts.Last()' xferType'                TransferPump.TriggerButton.Transfer);              //GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)              //  ? new GUIContent("Dump"' "Dumps the selected resource in this Part")              //  : new GUIContent("Stop"' "Halts the dumping of the selected resource in this part");              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_transfer_004")' SmUtils.Localize("#smloc_transfer_tt_004"))                : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_005"));              if (GUILayout.Button(dumpContent' style1' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMPart.ToggleDumpResource(modDockedVessels.Current.VesselParts' selectedResources' pumpId);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);                GUIStyle style2 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              //GUIContent fillContent = new GUIContent("Fill"'"Fills the Selected vessel with the selected resource(s)\r\n(Fill is from ground source' NOT from other parts in vessel)");              GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_006"));              if (GUILayout.Button(fillContent' style2' GUILayout.Width(30)' GUILayout.Height(20)))              {                SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[0]);                if (selectedResources.Count > 1)                  SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[1]);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);              GUI.enabled = true;            }            GUILayout.EndHorizontal();          }          modDockedVessels.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.VesselTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<ModDockedVessel>.Enumerator modDockedVessels = SMAddon.SmVessel.ModDockedVessels.GetEnumerator();          while (modDockedVessels.MoveNext())          {            if (modDockedVessels.Current == null) continue;            // Build the part button title...            step = "vessel button title";            string strDescription = GetResourceDescription(selectedResources' modDockedVessels.Current);              // set the conditions for a button style change.            int btnWidth = 273;            if (!SMSettings.RealXfers) btnWidth = 180;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetVesselButtonStyle(xferType' modDockedVessels.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = CanSelectVessel(xferType' modDockedVessels.Current);              step = "Render vessel Buttons";            if (GUILayout.Button($"{strDescription}"' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              VesselButtonToggled(xferType' modDockedVessels.Current);            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' modDockedVessels.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              //step = "Render dump/fill buttons";            // Crew            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())                CrewFillDumpVesselButtons(modDockedVessels.Current);            }              // Science              // Resources            else if (!SMSettings.RealXfers)            {              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[1]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              GUIStyle style1 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'                modDockedVessels.Current.VesselParts.First()' modDockedVessels.Current.VesselParts.Last()' xferType'                TransferPump.TriggerButton.Transfer);              //GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)              //  ? new GUIContent("Dump"' "Dumps the selected resource in this Part")              //  : new GUIContent("Stop"' "Halts the dumping of the selected resource in this part");              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_transfer_004")' SmUtils.Localize("#smloc_transfer_tt_004"))                : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_005"));              if (GUILayout.Button(dumpContent' style1' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMPart.ToggleDumpResource(modDockedVessels.Current.VesselParts' selectedResources' pumpId);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);                GUIStyle style2 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              //GUIContent fillContent = new GUIContent("Fill"'"Fills the Selected vessel with the selected resource(s)\r\n(Fill is from ground source' NOT from other parts in vessel)");              GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_006"));              if (GUILayout.Button(fillContent' style2' GUILayout.Width(30)' GUILayout.Height(20)))              {                SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[0]);                if (selectedResources.Count > 1)                  SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[1]);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);              GUI.enabled = true;            }            GUILayout.EndHorizontal();          }          modDockedVessels.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.VesselTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<ModDockedVessel>.Enumerator modDockedVessels = SMAddon.SmVessel.ModDockedVessels.GetEnumerator();          while (modDockedVessels.MoveNext())          {            if (modDockedVessels.Current == null) continue;            // Build the part button title...            step = "vessel button title";            string strDescription = GetResourceDescription(selectedResources' modDockedVessels.Current);              // set the conditions for a button style change.            int btnWidth = 273;            if (!SMSettings.RealXfers) btnWidth = 180;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetVesselButtonStyle(xferType' modDockedVessels.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = CanSelectVessel(xferType' modDockedVessels.Current);              step = "Render vessel Buttons";            if (GUILayout.Button($"{strDescription}"' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              VesselButtonToggled(xferType' modDockedVessels.Current);            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' modDockedVessels.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              //step = "Render dump/fill buttons";            // Crew            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())                CrewFillDumpVesselButtons(modDockedVessels.Current);            }              // Science              // Resources            else if (!SMSettings.RealXfers)            {              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[1]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              GUIStyle style1 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'                modDockedVessels.Current.VesselParts.First()' modDockedVessels.Current.VesselParts.Last()' xferType'                TransferPump.TriggerButton.Transfer);              //GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)              //  ? new GUIContent("Dump"' "Dumps the selected resource in this Part")              //  : new GUIContent("Stop"' "Halts the dumping of the selected resource in this part");              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_transfer_004")' SmUtils.Localize("#smloc_transfer_tt_004"))                : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_005"));              if (GUILayout.Button(dumpContent' style1' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMPart.ToggleDumpResource(modDockedVessels.Current.VesselParts' selectedResources' pumpId);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);                GUIStyle style2 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              //GUIContent fillContent = new GUIContent("Fill"'"Fills the Selected vessel with the selected resource(s)\r\n(Fill is from ground source' NOT from other parts in vessel)");              GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_006"));              if (GUILayout.Button(fillContent' style2' GUILayout.Width(30)' GUILayout.Height(20)))              {                SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[0]);                if (selectedResources.Count > 1)                  SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[1]);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);              GUI.enabled = true;            }            GUILayout.EndHorizontal();          }          modDockedVessels.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.VesselTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<ModDockedVessel>.Enumerator modDockedVessels = SMAddon.SmVessel.ModDockedVessels.GetEnumerator();          while (modDockedVessels.MoveNext())          {            if (modDockedVessels.Current == null) continue;            // Build the part button title...            step = "vessel button title";            string strDescription = GetResourceDescription(selectedResources' modDockedVessels.Current);              // set the conditions for a button style change.            int btnWidth = 273;            if (!SMSettings.RealXfers) btnWidth = 180;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetVesselButtonStyle(xferType' modDockedVessels.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = CanSelectVessel(xferType' modDockedVessels.Current);              step = "Render vessel Buttons";            if (GUILayout.Button($"{strDescription}"' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              VesselButtonToggled(xferType' modDockedVessels.Current);            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' modDockedVessels.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              //step = "Render dump/fill buttons";            // Crew            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())                CrewFillDumpVesselButtons(modDockedVessels.Current);            }              // Science              // Resources            else if (!SMSettings.RealXfers)            {              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[1]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              GUIStyle style1 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'                modDockedVessels.Current.VesselParts.First()' modDockedVessels.Current.VesselParts.Last()' xferType'                TransferPump.TriggerButton.Transfer);              //GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)              //  ? new GUIContent("Dump"' "Dumps the selected resource in this Part")              //  : new GUIContent("Stop"' "Halts the dumping of the selected resource in this part");              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_transfer_004")' SmUtils.Localize("#smloc_transfer_tt_004"))                : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_005"));              if (GUILayout.Button(dumpContent' style1' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMPart.ToggleDumpResource(modDockedVessels.Current.VesselParts' selectedResources' pumpId);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);                GUIStyle style2 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              //GUIContent fillContent = new GUIContent("Fill"'"Fills the Selected vessel with the selected resource(s)\r\n(Fill is from ground source' NOT from other parts in vessel)");              GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_006"));              if (GUILayout.Button(fillContent' style2' GUILayout.Width(30)' GUILayout.Height(20)))              {                SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[0]);                if (selectedResources.Count > 1)                  SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[1]);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);              GUI.enabled = true;            }            GUILayout.EndHorizontal();          }          modDockedVessels.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.VesselTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<ModDockedVessel>.Enumerator modDockedVessels = SMAddon.SmVessel.ModDockedVessels.GetEnumerator();          while (modDockedVessels.MoveNext())          {            if (modDockedVessels.Current == null) continue;            // Build the part button title...            step = "vessel button title";            string strDescription = GetResourceDescription(selectedResources' modDockedVessels.Current);              // set the conditions for a button style change.            int btnWidth = 273;            if (!SMSettings.RealXfers) btnWidth = 180;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetVesselButtonStyle(xferType' modDockedVessels.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = CanSelectVessel(xferType' modDockedVessels.Current);              step = "Render vessel Buttons";            if (GUILayout.Button($"{strDescription}"' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              VesselButtonToggled(xferType' modDockedVessels.Current);            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' modDockedVessels.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              //step = "Render dump/fill buttons";            // Crew            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())                CrewFillDumpVesselButtons(modDockedVessels.Current);            }              // Science              // Resources            else if (!SMSettings.RealXfers)            {              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[1]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              GUIStyle style1 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'                modDockedVessels.Current.VesselParts.First()' modDockedVessels.Current.VesselParts.Last()' xferType'                TransferPump.TriggerButton.Transfer);              //GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)              //  ? new GUIContent("Dump"' "Dumps the selected resource in this Part")              //  : new GUIContent("Stop"' "Halts the dumping of the selected resource in this part");              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_transfer_004")' SmUtils.Localize("#smloc_transfer_tt_004"))                : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_005"));              if (GUILayout.Button(dumpContent' style1' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMPart.ToggleDumpResource(modDockedVessels.Current.VesselParts' selectedResources' pumpId);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);                GUIStyle style2 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              //GUIContent fillContent = new GUIContent("Fill"'"Fills the Selected vessel with the selected resource(s)\r\n(Fill is from ground source' NOT from other parts in vessel)");              GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_006"));              if (GUILayout.Button(fillContent' style2' GUILayout.Width(30)' GUILayout.Height(20)))              {                SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[0]);                if (selectedResources.Count > 1)                  SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[1]);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);              GUI.enabled = true;            }            GUILayout.EndHorizontal();          }          modDockedVessels.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.VesselTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<ModDockedVessel>.Enumerator modDockedVessels = SMAddon.SmVessel.ModDockedVessels.GetEnumerator();          while (modDockedVessels.MoveNext())          {            if (modDockedVessels.Current == null) continue;            // Build the part button title...            step = "vessel button title";            string strDescription = GetResourceDescription(selectedResources' modDockedVessels.Current);              // set the conditions for a button style change.            int btnWidth = 273;            if (!SMSettings.RealXfers) btnWidth = 180;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetVesselButtonStyle(xferType' modDockedVessels.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = CanSelectVessel(xferType' modDockedVessels.Current);              step = "Render vessel Buttons";            if (GUILayout.Button($"{strDescription}"' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              VesselButtonToggled(xferType' modDockedVessels.Current);            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' modDockedVessels.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              //step = "Render dump/fill buttons";            // Crew            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())                CrewFillDumpVesselButtons(modDockedVessels.Current);            }              // Science              // Resources            else if (!SMSettings.RealXfers)            {              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[1]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              GUIStyle style1 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'                modDockedVessels.Current.VesselParts.First()' modDockedVessels.Current.VesselParts.Last()' xferType'                TransferPump.TriggerButton.Transfer);              //GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)              //  ? new GUIContent("Dump"' "Dumps the selected resource in this Part")              //  : new GUIContent("Stop"' "Halts the dumping of the selected resource in this part");              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_transfer_004")' SmUtils.Localize("#smloc_transfer_tt_004"))                : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_005"));              if (GUILayout.Button(dumpContent' style1' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMPart.ToggleDumpResource(modDockedVessels.Current.VesselParts' selectedResources' pumpId);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);                GUIStyle style2 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              //GUIContent fillContent = new GUIContent("Fill"'"Fills the Selected vessel with the selected resource(s)\r\n(Fill is from ground source' NOT from other parts in vessel)");              GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_006"));              if (GUILayout.Button(fillContent' style2' GUILayout.Width(30)' GUILayout.Height(20)))              {                SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[0]);                if (selectedResources.Count > 1)                  SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[1]);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);              GUI.enabled = true;            }            GUILayout.EndHorizontal();          }          modDockedVessels.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.VesselTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,VesselTransferViewer,The following statement contains a magic number: try        {          step = "begin button loop";          List<ModDockedVessel>.Enumerator modDockedVessels = SMAddon.SmVessel.ModDockedVessels.GetEnumerator();          while (modDockedVessels.MoveNext())          {            if (modDockedVessels.Current == null) continue;            // Build the part button title...            step = "vessel button title";            string strDescription = GetResourceDescription(selectedResources' modDockedVessels.Current);              // set the conditions for a button style change.            int btnWidth = 273;            if (!SMSettings.RealXfers) btnWidth = 180;              // Set style based on viewer and toggled state.            step = "Set style";            GUIStyle style = GetVesselButtonStyle(xferType' modDockedVessels.Current);              GUILayout.BeginHorizontal();              // Now let's account for any target buttons already pressed. (sources and targets for resources cannot be the same)            GUI.enabled = CanSelectVessel(xferType' modDockedVessels.Current);              step = "Render vessel Buttons";            if (GUILayout.Button($"{strDescription}"' style' GUILayout.Width(btnWidth)' GUILayout.Height(20)))            {              VesselButtonToggled(xferType' modDockedVessels.Current);            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && rect.Contains(Event.current.mousePosition))              SMHighlighter.SetMouseOverData(rect' scrollY' scrollX' SelectBox.height' modDockedVessels.Current' Event.current.mousePosition);              // Reset Button enabling.            GUI.enabled = true;              //step = "Render dump/fill buttons";            // Crew            if (selectedResources.Contains(SMConditions.ResourceType.Crew.ToString()))            {              if (SMConditions.CanShowCrewFillDumpButtons())                CrewFillDumpVesselButtons(modDockedVessels.Current);            }              // Science              // Resources            else if (!SMSettings.RealXfers)            {              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[1]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingResource(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              GUIStyle style1 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'                modDockedVessels.Current.VesselParts.First()' modDockedVessels.Current.VesselParts.Last()' xferType'                TransferPump.TriggerButton.Transfer);              //GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)              //  ? new GUIContent("Dump"' "Dumps the selected resource in this Part")              //  : new GUIContent("Stop"' "Halts the dumping of the selected resource in this part");              GUIContent dumpContent = !TransferPump.IsPumpInProgress(pumpId)                ? new GUIContent(SmUtils.Localize("#smloc_transfer_004")' SmUtils.Localize("#smloc_transfer_tt_004"))                : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_005"));              if (GUILayout.Button(dumpContent' style1' GUILayout.Width(45)' GUILayout.Height(20)))              {                SMPart.ToggleDumpResource(modDockedVessels.Current.VesselParts' selectedResources' pumpId);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);                GUIStyle style2 = xferType == TransferPump.TypeXfer.SourceToTarget                ? SMStyle.ButtonSourceStyle                : SMStyle.ButtonTargetStyle;              if (selectedResources.Count > 1)                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0 ||                              TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              else                GUI.enabled = TransferPump.CalcRemainingCapacity(modDockedVessels.Current.VesselParts' selectedResources[0]) > 0;              //GUIContent fillContent = new GUIContent("Fill"'"Fills the Selected vessel with the selected resource(s)\r\n(Fill is from ground source' NOT from other parts in vessel)");              GUIContent fillContent = new GUIContent(SmUtils.Localize("#smloc_transfer_006")' SmUtils.Localize("#smloc_transfer_tt_006"));              if (GUILayout.Button(fillContent' style2' GUILayout.Width(30)' GUILayout.Height(20)))              {                SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[0]);                if (selectedResources.Count > 1)                  SMPart.FillResource(modDockedVessels.Current.VesselParts' selectedResources[1]);              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);              GUI.enabled = true;            }            GUILayout.EndHorizontal();          }          modDockedVessels.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage($"Error in Windowtransfer.VesselTransferViewer ({xferType}) at step:  {step}.  Error:  {ex}"'              SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDumpFillButtons,The following statement contains a magic number: if (GUILayout.Button(dumpContent' style1' GUILayout.Width(45)' GUILayout.Height(20)))        {          SMPart.ToggleDumpResource(part' selectedResources' pumpId);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDumpFillButtons,The following statement contains a magic number: if (GUILayout.Button(dumpContent' style1' GUILayout.Width(45)' GUILayout.Height(20)))        {          SMPart.ToggleDumpResource(part' selectedResources' pumpId);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDumpFillButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDumpFillButtons,The following statement contains a magic number: if (GUILayout.Button(fillContent' style2' GUILayout.Width(30)' GUILayout.Height(20)))        {          SMPart.FillResource(part' selectedResources[0]);          if (selectedResources.Count > 1)            SMPart.FillResource(part' selectedResources[1]);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDumpFillButtons,The following statement contains a magic number: if (GUILayout.Button(fillContent' style2' GUILayout.Width(30)' GUILayout.Height(20)))        {          SMPart.FillResource(part' selectedResources[0]);          if (selectedResources.Count > 1)            SMPart.FillResource(part' selectedResources[1]);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDumpFillButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpVesselButtons,The following statement contains a magic number: if (GUILayout.Button(dumpContent' GUILayout.Width(45)' GUILayout.Height(20)))        {          List<Part>.Enumerator part = vessel.VesselParts.GetEnumerator();          while (part.MoveNext())          {            if (part.Current == null) continue;            SMPart.DumpCrew(part.Current);          }          part.Dispose();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpVesselButtons,The following statement contains a magic number: if (GUILayout.Button(dumpContent' GUILayout.Width(45)' GUILayout.Height(20)))        {          List<Part>.Enumerator part = vessel.VesselParts.GetEnumerator();          while (part.MoveNext())          {            if (part.Current == null) continue;            SMPart.DumpCrew(part.Current);          }          part.Dispose();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpVesselButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpVesselButtons,The following statement contains a magic number: if (GUILayout.Button(fillContent' GUILayout.Width(45)' GUILayout.Height(20)))        {          List<Part>.Enumerator part = vessel.VesselParts.GetEnumerator();          while (part.MoveNext())          {            if (part.Current == null) continue;            SMPart.FillCrew(part.Current);          }          part.Dispose();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpVesselButtons,The following statement contains a magic number: if (GUILayout.Button(fillContent' GUILayout.Width(45)' GUILayout.Height(20)))        {          List<Part>.Enumerator part = vessel.VesselParts.GetEnumerator();          while (part.MoveNext())          {            if (part.Current == null) continue;            SMPart.FillCrew(part.Current);          }          part.Dispose();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpVesselButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpPartButtons,The following statement contains a magic number: if (GUILayout.Button(dumpContent' GUILayout.Width(45)' GUILayout.Height(20)))        {          SMPart.DumpCrew(part);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpPartButtons,The following statement contains a magic number: if (GUILayout.Button(dumpContent' GUILayout.Width(45)' GUILayout.Height(20)))        {          SMPart.DumpCrew(part);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpPartButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpPartButtons,The following statement contains a magic number: if (GUILayout.Button(fillContent' GUILayout.Width(45)' GUILayout.Height(20)))        {          SMPart.FillCrew(part);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpPartButtons,The following statement contains a magic number: if (GUILayout.Button(fillContent' GUILayout.Width(45)' GUILayout.Height(20)))        {          SMPart.FillCrew(part);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewFillDumpPartButtons,The following statement contains a magic number: if (Event.current.type == EventType.Repaint && ShowToolTips)          ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' 10);
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewDetails,The following statement contains a magic number: float xOffset = 30;
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,FrozenCrewMemberDetails,The following statement contains a magic number: if (GUILayout.Button(new GUIContent("»"' SmUtils.Localize("#smloc_transfer_tt_009"))' SMStyle.ButtonStyle'          GUILayout.Width(15)' GUILayout.Height(20))) // "Move Kerbal to another seat within Part"        {          ToolTip = "";        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,FrozenCrewMemberDetails,The following statement contains a magic number: if (GUILayout.Button(new GUIContent("»"' SmUtils.Localize("#smloc_transfer_tt_009"))' SMStyle.ButtonStyle'          GUILayout.Width(15)' GUILayout.Height(20))) // "Move Kerbal to another seat within Part"        {          ToolTip = "";        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,FrozenCrewMemberDetails,The following statement contains a magic number: GUILayout.Label($"  {frznCrew.CrewName} ({trait})"' SMStyle.LabelStyleCyan' GUILayout.Width(190)'          GUILayout.Height(20));
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,FrozenCrewMemberDetails,The following statement contains a magic number: GUILayout.Label($"  {frznCrew.CrewName} ({trait})"' SMStyle.LabelStyleCyan' GUILayout.Width(190)'          GUILayout.Height(20));
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,FrozenCrewMemberDetails,The following statement contains a magic number: if (GUILayout.Button(thawContent' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))        {          WindowRoster.ThawKerbal(frznCrew.CrewName);          ToolTip = "";        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,FrozenCrewMemberDetails,The following statement contains a magic number: if (GUILayout.Button(thawContent' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))        {          WindowRoster.ThawKerbal(frznCrew.CrewName);          ToolTip = "";        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ShowSelectAllOption,The following statement contains a magic number: selectAll = GUILayout.Toggle(selectAll' content' GUILayout.Width(180));
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ShowOptionTouristsOnly,The following statement contains a magic number: touristsOnly = GUILayout.Toggle(touristsOnly' tContent' GUILayout.Width(180));
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewMemberDetails,The following statement contains a magic number: const float cmWidth = 180;
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewMemberDetails,The following statement contains a magic number: const float cmMoveWidth = 25;
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewMemberDetails,The following statement contains a magic number: if (isVesselMode)        {          bool selected = crewMembers.Contains(crewMember);          selected = GUILayout.Toggle(selected' $"{crewMember.name} ({crewMember.experienceTrait.Title})"' GUILayout.Width(cmWidth)' GUILayout.Height(20));          if (selected && !crewMembers.Contains(crewMember))          {            if (crewMembers.Count < targetCapacity) crewMembers.Add(crewMember);          }          else if (!selected && crewMembers.Contains(crewMember))          {            crewMembers.Remove(crewMember);          }        }        else        {          GUI.enabled = true;          GUILayout.Label($"  {crewMember.name} ({crewMember.experienceTrait.Title })"' GUILayout.Width(cmWidth)' GUILayout.Height(20));        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewMemberDetails,The following statement contains a magic number: if (isVesselMode)        {          bool selected = crewMembers.Contains(crewMember);          selected = GUILayout.Toggle(selected' $"{crewMember.name} ({crewMember.experienceTrait.Title})"' GUILayout.Width(cmWidth)' GUILayout.Height(20));          if (selected && !crewMembers.Contains(crewMember))          {            if (crewMembers.Count < targetCapacity) crewMembers.Add(crewMember);          }          else if (!selected && crewMembers.Contains(crewMember))          {            crewMembers.Remove(crewMember);          }        }        else        {          GUI.enabled = true;          GUILayout.Label($"  {crewMember.name} ({crewMember.experienceTrait.Title })"' GUILayout.Width(cmWidth)' GUILayout.Height(20));        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewMemberDetails,The following statement contains a magic number: if (GUILayout.Button(moveContent' SMStyle.ButtonStyle' GUILayout.Width(cmMoveWidth)' GUILayout.Height(20)))        {          ToolTip = "";          SMAddon.SmVessel.TransferCrewObj.CrewTransferBegin(crewMember' selectedPartsFrom[0]' selectedPartsFrom[0]);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewMemberXferButton,The following statement contains a magic number: const float btnWidth = 60;
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewMemberXferButton,The following statement contains a magic number: if ((SMAddon.SmVessel.TransferCrewObj.FromCrewMember == crewMember ||             SMAddon.SmVessel.TransferCrewObj.ToCrewMember == crewMember) && SMConditions.IsTransferInProgress())        {          GUI.enabled = true;          //GUILayout.Label("Moving"' GUILayout.Width(btnWidth)' GUILayout.Height(20));          GUILayout.Label(SmUtils.Localize("#smloc_transfer_007")' GUILayout.Width(btnWidth)' GUILayout.Height(20));        }        else if (!SMConditions.IsClsInSameSpace(selectedPartsFrom[0]'          selectedPartsTo.Count > 0 ? selectedPartsTo[0] : null))        {          GUI.enabled = crewMember.type != ProtoCrewMember.KerbalType.Tourist;          //GUIContent evaContent = new GUIContent("EVA"' EvaToolTip);          GUIContent evaContent = new GUIContent(SmUtils.Localize("#smloc_transfer_008")' EvaToolTip);          if (GUILayout.Button(evaContent' SMStyle.ButtonStyle' GUILayout.Width(btnWidth)' GUILayout.Height(20)))          {            ToolTip = "";            FlightEVA.SpawnEVA(crewMember.KerbalRef);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);        }        else        {          if (GUILayout.Button(new GUIContent(SmUtils.Localize("#smloc_transfer_009")' XferToolTip)'            SMStyle.ButtonStyle' GUILayout.Width(btnWidth)' GUILayout.Height(20))) // "Xfer"          {            SMAddon.SmVessel.TransferCrewObj.FromCrewMember = crewMember;            SMAddon.SmVessel.TransferCrewObj.CrewTransferBegin(crewMember' selectedPartsFrom[0]' selectedPartsTo[0]);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewMemberXferButton,The following statement contains a magic number: if ((SMAddon.SmVessel.TransferCrewObj.FromCrewMember == crewMember ||             SMAddon.SmVessel.TransferCrewObj.ToCrewMember == crewMember) && SMConditions.IsTransferInProgress())        {          GUI.enabled = true;          //GUILayout.Label("Moving"' GUILayout.Width(btnWidth)' GUILayout.Height(20));          GUILayout.Label(SmUtils.Localize("#smloc_transfer_007")' GUILayout.Width(btnWidth)' GUILayout.Height(20));        }        else if (!SMConditions.IsClsInSameSpace(selectedPartsFrom[0]'          selectedPartsTo.Count > 0 ? selectedPartsTo[0] : null))        {          GUI.enabled = crewMember.type != ProtoCrewMember.KerbalType.Tourist;          //GUIContent evaContent = new GUIContent("EVA"' EvaToolTip);          GUIContent evaContent = new GUIContent(SmUtils.Localize("#smloc_transfer_008")' EvaToolTip);          if (GUILayout.Button(evaContent' SMStyle.ButtonStyle' GUILayout.Width(btnWidth)' GUILayout.Height(20)))          {            ToolTip = "";            FlightEVA.SpawnEVA(crewMember.KerbalRef);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);        }        else        {          if (GUILayout.Button(new GUIContent(SmUtils.Localize("#smloc_transfer_009")' XferToolTip)'            SMStyle.ButtonStyle' GUILayout.Width(btnWidth)' GUILayout.Height(20))) // "Xfer"          {            SMAddon.SmVessel.TransferCrewObj.FromCrewMember = crewMember;            SMAddon.SmVessel.TransferCrewObj.CrewTransferBegin(crewMember' selectedPartsFrom[0]' selectedPartsTo[0]);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewMemberXferButton,The following statement contains a magic number: if ((SMAddon.SmVessel.TransferCrewObj.FromCrewMember == crewMember ||             SMAddon.SmVessel.TransferCrewObj.ToCrewMember == crewMember) && SMConditions.IsTransferInProgress())        {          GUI.enabled = true;          //GUILayout.Label("Moving"' GUILayout.Width(btnWidth)' GUILayout.Height(20));          GUILayout.Label(SmUtils.Localize("#smloc_transfer_007")' GUILayout.Width(btnWidth)' GUILayout.Height(20));        }        else if (!SMConditions.IsClsInSameSpace(selectedPartsFrom[0]'          selectedPartsTo.Count > 0 ? selectedPartsTo[0] : null))        {          GUI.enabled = crewMember.type != ProtoCrewMember.KerbalType.Tourist;          //GUIContent evaContent = new GUIContent("EVA"' EvaToolTip);          GUIContent evaContent = new GUIContent(SmUtils.Localize("#smloc_transfer_008")' EvaToolTip);          if (GUILayout.Button(evaContent' SMStyle.ButtonStyle' GUILayout.Width(btnWidth)' GUILayout.Height(20)))          {            ToolTip = "";            FlightEVA.SpawnEVA(crewMember.KerbalRef);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);        }        else        {          if (GUILayout.Button(new GUIContent(SmUtils.Localize("#smloc_transfer_009")' XferToolTip)'            SMStyle.ButtonStyle' GUILayout.Width(btnWidth)' GUILayout.Height(20))) // "Xfer"          {            SMAddon.SmVessel.TransferCrewObj.FromCrewMember = crewMember;            SMAddon.SmVessel.TransferCrewObj.CrewTransferBegin(crewMember' selectedPartsFrom[0]' selectedPartsTo[0]);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewSelectedXferButton,The following statement contains a magic number: if ((SMAddon.SmVessel.TransferCrewObj.FromCrewMembers == crewMembers ||             SMAddon.SmVessel.TransferCrewObj.ToCrewMembers == crewMembers) && SMConditions.IsTransferInProgress())        {          GUI.enabled = true;          //GUILayout.Label("Moving"' GUILayout.Width(50)' GUILayout.Height(20));          GUILayout.Label(SmUtils.Localize("#smloc_transfer_007")' GUILayout.Width(50)' GUILayout.Height(20));        }        else        {          if (GUILayout.Button(new GUIContent($"{SmUtils.Localize("#smloc_transfer_021")} ({crewMembers.Count})"' XferToolTip)'            SMStyle.ButtonStyle' GUILayout.Width(90)'            GUILayout.Height(20))) // "Xfer Crew"          {            SMAddon.SmVessel.TransferCrewObj.FromCrewMembers = crewMembers;            SMAddon.SmVessel.TransferCrewObj.CrewTransfersBegin(crewMembers' selectedPartsFrom' selectedPartsTo);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewSelectedXferButton,The following statement contains a magic number: if ((SMAddon.SmVessel.TransferCrewObj.FromCrewMembers == crewMembers ||             SMAddon.SmVessel.TransferCrewObj.ToCrewMembers == crewMembers) && SMConditions.IsTransferInProgress())        {          GUI.enabled = true;          //GUILayout.Label("Moving"' GUILayout.Width(50)' GUILayout.Height(20));          GUILayout.Label(SmUtils.Localize("#smloc_transfer_007")' GUILayout.Width(50)' GUILayout.Height(20));        }        else        {          if (GUILayout.Button(new GUIContent($"{SmUtils.Localize("#smloc_transfer_021")} ({crewMembers.Count})"' XferToolTip)'            SMStyle.ButtonStyle' GUILayout.Width(90)'            GUILayout.Height(20))) // "Xfer Crew"          {            SMAddon.SmVessel.TransferCrewObj.FromCrewMembers = crewMembers;            SMAddon.SmVessel.TransferCrewObj.CrewTransfersBegin(crewMembers' selectedPartsFrom' selectedPartsTo);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewSelectedXferButton,The following statement contains a magic number: if ((SMAddon.SmVessel.TransferCrewObj.FromCrewMembers == crewMembers ||             SMAddon.SmVessel.TransferCrewObj.ToCrewMembers == crewMembers) && SMConditions.IsTransferInProgress())        {          GUI.enabled = true;          //GUILayout.Label("Moving"' GUILayout.Width(50)' GUILayout.Height(20));          GUILayout.Label(SmUtils.Localize("#smloc_transfer_007")' GUILayout.Width(50)' GUILayout.Height(20));        }        else        {          if (GUILayout.Button(new GUIContent($"{SmUtils.Localize("#smloc_transfer_021")} ({crewMembers.Count})"' XferToolTip)'            SMStyle.ButtonStyle' GUILayout.Width(90)'            GUILayout.Height(20))) // "Xfer Crew"          {            SMAddon.SmVessel.TransferCrewObj.FromCrewMembers = crewMembers;            SMAddon.SmVessel.TransferCrewObj.CrewTransfersBegin(crewMembers' selectedPartsFrom' selectedPartsTo);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,CrewSelectedXferButton,The following statement contains a magic number: if ((SMAddon.SmVessel.TransferCrewObj.FromCrewMembers == crewMembers ||             SMAddon.SmVessel.TransferCrewObj.ToCrewMembers == crewMembers) && SMConditions.IsTransferInProgress())        {          GUI.enabled = true;          //GUILayout.Label("Moving"' GUILayout.Width(50)' GUILayout.Height(20));          GUILayout.Label(SmUtils.Localize("#smloc_transfer_007")' GUILayout.Width(50)' GUILayout.Height(20));        }        else        {          if (GUILayout.Button(new GUIContent($"{SmUtils.Localize("#smloc_transfer_021")} ({crewMembers.Count})"' XferToolTip)'            SMStyle.ButtonStyle' GUILayout.Width(90)'            GUILayout.Height(20))) // "Xfer Crew"          {            SMAddon.SmVessel.TransferCrewObj.FromCrewMembers = crewMembers;            SMAddon.SmVessel.TransferCrewObj.CrewTransfersBegin(crewMembers' selectedPartsFrom' selectedPartsTo);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: const float xOffset = 30;
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                  SMAddon.SmVessel.SelectedModuleTarget'                  ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer)modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData)items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData)items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData)items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData)items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: const float xOffset = 30;
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // experiments/Containers.          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          bool isCollectable = true;          switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }            GUILayout.BeginHorizontal();          GUI.enabled = ((IScienceDataContainer)modules.Current).GetScienceCount() > 0;            string label = "+";          // string toolTip = string.Format("{0} {1}"' "Expand/Collapse Science detail."' GUI.enabled? "" : "(Disabled' nothing to xfer)");          string toolTip =            $"{SmUtils.Localize("#smloc_transfer_tt_011")} {(GUI.enabled ? "" : SmUtils.Localize("#smloc_transfer_tt_012"))}";          GUIStyle expandStyle = ScienceModulesSource[modules.Current] ? SMStyle.ButtonToggledStyle : SMStyle.ButtonStyle;          if (ScienceModulesSource[modules.Current]) label = "-";          if (GUILayout.Button(new GUIContent(label' toolTip)' expandStyle' GUILayout.Width(15)' GUILayout.Height(20)))          {            ScienceModulesSource[modules.Current] = !ScienceModulesSource[modules.Current];          }          Rect rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            GUI.enabled = true;          GUILayout.Label($"{modules.Current.moduleName} - ({scienceCount})"' GUILayout.Width(205)'            GUILayout.Height(20));            // If we have target selected' it is not the same as the source' there is science to xfer.          if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)          {            if (SMSettings.RealXfers && !isCollectable)            {              GUI.enabled = false;              //toolTip = "Realism Mode is preventing transfer.\r\nExperiment/data is marked not transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_013");            }            else            {              GUI.enabled = true;              //toolTip = "Realism is off' or Experiment/data is transferable";              toolTip = SmUtils.Localize("#smloc_transfer_tt_014");            }            //GUIContent xferContent = new GUIContent("Xfer"' toolTip);            GUIContent xferContent = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);            if (GUILayout.Button(xferContent' SMStyle.ButtonStyle' GUILayout.Width(40)'              GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleSource = modules.Current;              ProcessController.TransferScience(SMAddon.SmVessel.SelectedModuleSource'                SMAddon.SmVessel.SelectedModuleTarget);              SMAddon.SmVessel.SelectedModuleSource = null;            }            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              if (GUI.enabled && SMAddon.SmVessel.Vessel.FindPartModulesImplementing<ModuleScienceLab>().Count > 0)            {              //GUIContent content = new GUIContent("Proc"' "Transfer only science that was already processed");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_011")' SmUtils.Localize("#smloc_transfer_tt_014"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyProcessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              //content = new GUIContent("Unproc"' "Transfer only science that was not processed yet";              content = new GUIContent(SmUtils.Localize("#smloc_transfer_012")' SmUtils.Localize("#smloc_transfer_tt_015"));              if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(50)' GUILayout.Height(20)))              {                SMAddon.SmVessel.SelectedModuleSource = modules.Current;                ProcessController.TransferScienceLab(SMAddon.SmVessel.SelectedModuleSource'                                                     SMAddon.SmVessel.SelectedModuleTarget'                                               ProcessController.Selection.OnlyUnprocessed);                SMAddon.SmVessel.SelectedModuleSource = null;              }              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);            }          }          GUILayout.EndHorizontal();          if (ScienceModulesSource[modules.Current])          {            IEnumerator items = ((IScienceDataContainer) modules.Current).GetData().GetEnumerator();            while (items.MoveNext())            {              if (items.Current == null) continue;              GUILayout.BeginHorizontal();              GUILayout.Label(""' GUILayout.Width(15)' GUILayout.Height(20));                // Get science data from experiment.              string expId = ((ScienceData)items.Current).subjectID.Split('@')[0];              string expKey = ((ScienceData)items.Current).subjectID.Split('@')[1];              ScienceExperiment se = ResearchAndDevelopment.GetExperiment(expId);              string key = (from k in se.Results.Keys where expKey.Contains(k) select k).FirstOrDefault();              key = key ?? "default";              string results = se.Results[key];                // Build Tooltip              toolTip = ((ScienceData)items.Current).title;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_016")}:  {results}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_017")}:  {((ScienceData) items.Current).dataAmount} {SmUtils.Localize("#smloc_transfer_tt_018")}";              toolTip +=                $"\n-{SmUtils.Localize("#smloc_transfer_tt_019")}:  {((ScienceData) items.Current).baseTransmitValue}"; // was transmitValue;              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_020")}:  {((ScienceData) items.Current).labValue}";              toolTip += $"\n-{SmUtils.Localize("#smloc_transfer_tt_021")}:  {((ScienceData) items.Current).transmitBonus}";  // Was labBoost              //toolTip += "\r\n-Results:    " + results;              //toolTip += "\r\n-Data Amt:   " + ((ScienceData)items.Current).dataAmount + " Mits";              //toolTip += "\r\n-Xmit Value: " + ((ScienceData) items.Current).baseTransmitValue; // was transmitValue;              //toolTip += "\r\n-Lab Value:  " + ((ScienceData)items.Current).labValue;              //toolTip += "\r\n-Lab Boost:  " + ((ScienceData)items.Current).transmitBonus;  // Was labBoost                GUILayout.Label(new GUIContent(se.experimentTitle' toolTip)' SMStyle.LabelStyleNoWrap' GUILayout.Width(205)' GUILayout.Height(20));              rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);                if (SMSettings.RealXfers && !isCollectable)              {                GUI.enabled = false;                //toolTip = "Realistic Transfers is preventing transfer.\r\nData is marked not transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_022");              }              else              {                //toolTip = "Realistic Transfers is off' or Data is transferable";                toolTip = SmUtils.Localize("#smloc_transfer_tt_023");                GUI.enabled = true;              }              if (SMAddon.SmVessel.SelectedModuleTarget != null && scienceCount > 0)              {                //GUIContent content = new GUIContent("Xfer"' toolTip);                GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_tt_009")' toolTip);                if (GUILayout.Button(content' SMStyle.ButtonStyle' GUILayout.Width(40)' GUILayout.Height(20)))                {                  if (((ModuleScienceContainer)SMAddon.SmVessel.SelectedModuleTarget).AddData(((ScienceData)items.Current)))                    ((IScienceDataContainer)modules.Current).DumpData(((ScienceData)items.Current));                }                rect = GUILayoutUtility.GetLastRect();                if (Event.current.type == EventType.Repaint && ShowToolTips)                  ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);              }              GUILayout.EndHorizontal();            }          }          GUI.enabled = true;        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsTarget,The following statement contains a magic number: float xOffset = 30;
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsTarget,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // Containers.          if (!(modules.Current is IScienceDataContainer) || ((PartModule)modules.Current).moduleName == "ModuleScienceExperiment") continue;          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          GUILayout.BeginHorizontal();          GUILayout.Label($"{((PartModule) modules.Current).moduleName} - ({scienceCount})"' GUILayout.Width(220)'            GUILayout.Height(20));          // set the conditions for a button style change.          bool isReceiveToggled = false;          if ((PartModule)modules.Current == SMAddon.SmVessel.SelectedModuleTarget)            isReceiveToggled = true;          else if (count == 1)          {            SMAddon.SmVessel.SelectedModuleTarget = (PartModule)modules.Current;            isReceiveToggled = true;          }          //SelectedModuleTarget = pm;          GUIStyle style = isReceiveToggled ? SMStyle.ButtonToggledTargetStyle : SMStyle.ButtonStyle;            // Only containers can receive science data          if (((PartModule)modules.Current).moduleName != "ModuleScienceExperiment")          {            //GUIContent content = new GUIContent("Recv"' "Set this module as the receiving container");            GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_013")' SmUtils.Localize("#smloc_transfer_tt_024"));            if (GUILayout.Button(content' style' GUILayout.Width(40)' GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleTarget = (PartModule)modules.Current;            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          }          GUILayout.EndHorizontal();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsTarget,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // Containers.          if (!(modules.Current is IScienceDataContainer) || ((PartModule)modules.Current).moduleName == "ModuleScienceExperiment") continue;          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          GUILayout.BeginHorizontal();          GUILayout.Label($"{((PartModule) modules.Current).moduleName} - ({scienceCount})"' GUILayout.Width(220)'            GUILayout.Height(20));          // set the conditions for a button style change.          bool isReceiveToggled = false;          if ((PartModule)modules.Current == SMAddon.SmVessel.SelectedModuleTarget)            isReceiveToggled = true;          else if (count == 1)          {            SMAddon.SmVessel.SelectedModuleTarget = (PartModule)modules.Current;            isReceiveToggled = true;          }          //SelectedModuleTarget = pm;          GUIStyle style = isReceiveToggled ? SMStyle.ButtonToggledTargetStyle : SMStyle.ButtonStyle;            // Only containers can receive science data          if (((PartModule)modules.Current).moduleName != "ModuleScienceExperiment")          {            //GUIContent content = new GUIContent("Recv"' "Set this module as the receiving container");            GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_013")' SmUtils.Localize("#smloc_transfer_tt_024"));            if (GUILayout.Button(content' style' GUILayout.Width(40)' GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleTarget = (PartModule)modules.Current;            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          }          GUILayout.EndHorizontal();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsTarget,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // Containers.          if (!(modules.Current is IScienceDataContainer) || ((PartModule)modules.Current).moduleName == "ModuleScienceExperiment") continue;          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          GUILayout.BeginHorizontal();          GUILayout.Label($"{((PartModule) modules.Current).moduleName} - ({scienceCount})"' GUILayout.Width(220)'            GUILayout.Height(20));          // set the conditions for a button style change.          bool isReceiveToggled = false;          if ((PartModule)modules.Current == SMAddon.SmVessel.SelectedModuleTarget)            isReceiveToggled = true;          else if (count == 1)          {            SMAddon.SmVessel.SelectedModuleTarget = (PartModule)modules.Current;            isReceiveToggled = true;          }          //SelectedModuleTarget = pm;          GUIStyle style = isReceiveToggled ? SMStyle.ButtonToggledTargetStyle : SMStyle.ButtonStyle;            // Only containers can receive science data          if (((PartModule)modules.Current).moduleName != "ModuleScienceExperiment")          {            //GUIContent content = new GUIContent("Recv"' "Set this module as the receiving container");            GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_013")' SmUtils.Localize("#smloc_transfer_tt_024"));            if (GUILayout.Button(content' style' GUILayout.Width(40)' GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleTarget = (PartModule)modules.Current;            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          }          GUILayout.EndHorizontal();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsTarget,The following statement contains a magic number: while (modules.MoveNext())        {          if (modules.Current == null) continue;          // Containers.          if (!(modules.Current is IScienceDataContainer) || ((PartModule)modules.Current).moduleName == "ModuleScienceExperiment") continue;          int scienceCount = ((IScienceDataContainer)modules.Current).GetScienceCount();          GUILayout.BeginHorizontal();          GUILayout.Label($"{((PartModule) modules.Current).moduleName} - ({scienceCount})"' GUILayout.Width(220)'            GUILayout.Height(20));          // set the conditions for a button style change.          bool isReceiveToggled = false;          if ((PartModule)modules.Current == SMAddon.SmVessel.SelectedModuleTarget)            isReceiveToggled = true;          else if (count == 1)          {            SMAddon.SmVessel.SelectedModuleTarget = (PartModule)modules.Current;            isReceiveToggled = true;          }          //SelectedModuleTarget = pm;          GUIStyle style = isReceiveToggled ? SMStyle.ButtonToggledTargetStyle : SMStyle.ButtonStyle;            // Only containers can receive science data          if (((PartModule)modules.Current).moduleName != "ModuleScienceExperiment")          {            //GUIContent content = new GUIContent("Recv"' "Set this module as the receiving container");            GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_013")' SmUtils.Localize("#smloc_transfer_tt_024"));            if (GUILayout.Button(content' style' GUILayout.Width(40)' GUILayout.Height(20)))            {              SMAddon.SmVessel.SelectedModuleTarget = (PartModule)modules.Current;            }            Rect rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          }          GUILayout.EndHorizontal();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The following statement contains a magic number: const int xOffset = 30;
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The following statement contains a magic number: if (TransferPump.PumpProcessOn)        {          // We want to show this during transfer if the direction is correct...          if (activePump.PumpType == pumpType)          {            //GUILayout.Label("Xfer Remaining:"' GUILayout.Width(120));            GUILayout.Label($"{SmUtils.Localize("#smloc_transfer_014")}:"' GUILayout.Width(120));                        GUILayout.Label(activePump.PumpBalance.ToString("#######0.##"));            if (SMAddon.SmVessel.SelectedResources.Count > 1)              GUILayout.Label($" | {ratioPump.PumpBalance:#######0.##}");          }        }        else        {          if (selectedResources.Count > 1)          {            //label = "Xfer Amts:";            //toolTip = "Displays xfer amounts of both resourses selected.";            //toolTip += "\r\nAllows editing of part's larger capacity resourse xfer value.";            //toolTip += "\r\nIt then calculates the smaller xfer amount using a ratio";            //toolTip += "\r\n of the smaller capacity resource to the larger.";            label = $"{SmUtils.Localize("#smloc_transfer_015")}:";            toolTip = SmUtils.Localize("#smloc_transfer_tt_025");          }          else          {            //label = "Xfer Amt:";            //toolTip += "Displays the Amount of selected resource to xfer.";            //toolTip += "\r\nAllows editing of the xfer value.";            label = $"{SmUtils.Localize("#smloc_transfer_016")}:";            toolTip = SmUtils.Localize("#smloc_transfer_tt_026");          }          GUILayout.Label(new GUIContent(label' toolTip)' GUILayout.Width(65));          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          activePump.EditSliderAmount = GUILayout.TextField(activePump.EditSliderAmount' 20' GUILayout.Width(95)'            GUILayout.Height(20));          thisXferAmount = double.Parse(activePump.EditSliderAmount);          double ratioXferAmt = thisXferAmount * ratioPump.PumpRatio > ratioPump.FromCapacity            ? ratioPump.FromCapacity            : thisXferAmount * ratioPump.PumpRatio;          if (SMAddon.SmVessel.SelectedResources.Count > 1)          {            label = $" | {ratioXferAmt:#######0.##}";            //toolTip = "Smaller Tank xfer amount.  Calculated at " + ratioPump.PumpRatio + ".\r\n(Note: A value of 0.818181 = 0.9/1.1)";            toolTip = $"{SmUtils.Localize("#smloc_transfer_tt_027")}:  {ratioPump.PumpRatio}.\n{SmUtils.Localize("#smloc_transfer_tt_028")}";            GUILayout.Label(new GUIContent(label' toolTip)' GUILayout.Width(80));            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The following statement contains a magic number: if (TransferPump.PumpProcessOn)        {          // We want to show this during transfer if the direction is correct...          if (activePump.PumpType == pumpType)          {            //GUILayout.Label("Xfer Remaining:"' GUILayout.Width(120));            GUILayout.Label($"{SmUtils.Localize("#smloc_transfer_014")}:"' GUILayout.Width(120));                        GUILayout.Label(activePump.PumpBalance.ToString("#######0.##"));            if (SMAddon.SmVessel.SelectedResources.Count > 1)              GUILayout.Label($" | {ratioPump.PumpBalance:#######0.##}");          }        }        else        {          if (selectedResources.Count > 1)          {            //label = "Xfer Amts:";            //toolTip = "Displays xfer amounts of both resourses selected.";            //toolTip += "\r\nAllows editing of part's larger capacity resourse xfer value.";            //toolTip += "\r\nIt then calculates the smaller xfer amount using a ratio";            //toolTip += "\r\n of the smaller capacity resource to the larger.";            label = $"{SmUtils.Localize("#smloc_transfer_015")}:";            toolTip = SmUtils.Localize("#smloc_transfer_tt_025");          }          else          {            //label = "Xfer Amt:";            //toolTip += "Displays the Amount of selected resource to xfer.";            //toolTip += "\r\nAllows editing of the xfer value.";            label = $"{SmUtils.Localize("#smloc_transfer_016")}:";            toolTip = SmUtils.Localize("#smloc_transfer_tt_026");          }          GUILayout.Label(new GUIContent(label' toolTip)' GUILayout.Width(65));          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          activePump.EditSliderAmount = GUILayout.TextField(activePump.EditSliderAmount' 20' GUILayout.Width(95)'            GUILayout.Height(20));          thisXferAmount = double.Parse(activePump.EditSliderAmount);          double ratioXferAmt = thisXferAmount * ratioPump.PumpRatio > ratioPump.FromCapacity            ? ratioPump.FromCapacity            : thisXferAmount * ratioPump.PumpRatio;          if (SMAddon.SmVessel.SelectedResources.Count > 1)          {            label = $" | {ratioXferAmt:#######0.##}";            //toolTip = "Smaller Tank xfer amount.  Calculated at " + ratioPump.PumpRatio + ".\r\n(Note: A value of 0.818181 = 0.9/1.1)";            toolTip = $"{SmUtils.Localize("#smloc_transfer_tt_027")}:  {ratioPump.PumpRatio}.\n{SmUtils.Localize("#smloc_transfer_tt_028")}";            GUILayout.Label(new GUIContent(label' toolTip)' GUILayout.Width(80));            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The following statement contains a magic number: if (TransferPump.PumpProcessOn)        {          // We want to show this during transfer if the direction is correct...          if (activePump.PumpType == pumpType)          {            //GUILayout.Label("Xfer Remaining:"' GUILayout.Width(120));            GUILayout.Label($"{SmUtils.Localize("#smloc_transfer_014")}:"' GUILayout.Width(120));                        GUILayout.Label(activePump.PumpBalance.ToString("#######0.##"));            if (SMAddon.SmVessel.SelectedResources.Count > 1)              GUILayout.Label($" | {ratioPump.PumpBalance:#######0.##}");          }        }        else        {          if (selectedResources.Count > 1)          {            //label = "Xfer Amts:";            //toolTip = "Displays xfer amounts of both resourses selected.";            //toolTip += "\r\nAllows editing of part's larger capacity resourse xfer value.";            //toolTip += "\r\nIt then calculates the smaller xfer amount using a ratio";            //toolTip += "\r\n of the smaller capacity resource to the larger.";            label = $"{SmUtils.Localize("#smloc_transfer_015")}:";            toolTip = SmUtils.Localize("#smloc_transfer_tt_025");          }          else          {            //label = "Xfer Amt:";            //toolTip += "Displays the Amount of selected resource to xfer.";            //toolTip += "\r\nAllows editing of the xfer value.";            label = $"{SmUtils.Localize("#smloc_transfer_016")}:";            toolTip = SmUtils.Localize("#smloc_transfer_tt_026");          }          GUILayout.Label(new GUIContent(label' toolTip)' GUILayout.Width(65));          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          activePump.EditSliderAmount = GUILayout.TextField(activePump.EditSliderAmount' 20' GUILayout.Width(95)'            GUILayout.Height(20));          thisXferAmount = double.Parse(activePump.EditSliderAmount);          double ratioXferAmt = thisXferAmount * ratioPump.PumpRatio > ratioPump.FromCapacity            ? ratioPump.FromCapacity            : thisXferAmount * ratioPump.PumpRatio;          if (SMAddon.SmVessel.SelectedResources.Count > 1)          {            label = $" | {ratioXferAmt:#######0.##}";            //toolTip = "Smaller Tank xfer amount.  Calculated at " + ratioPump.PumpRatio + ".\r\n(Note: A value of 0.818181 = 0.9/1.1)";            toolTip = $"{SmUtils.Localize("#smloc_transfer_tt_027")}:  {ratioPump.PumpRatio}.\n{SmUtils.Localize("#smloc_transfer_tt_028")}";            GUILayout.Label(new GUIContent(label' toolTip)' GUILayout.Width(80));            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The following statement contains a magic number: if (TransferPump.PumpProcessOn)        {          // We want to show this during transfer if the direction is correct...          if (activePump.PumpType == pumpType)          {            //GUILayout.Label("Xfer Remaining:"' GUILayout.Width(120));            GUILayout.Label($"{SmUtils.Localize("#smloc_transfer_014")}:"' GUILayout.Width(120));                        GUILayout.Label(activePump.PumpBalance.ToString("#######0.##"));            if (SMAddon.SmVessel.SelectedResources.Count > 1)              GUILayout.Label($" | {ratioPump.PumpBalance:#######0.##}");          }        }        else        {          if (selectedResources.Count > 1)          {            //label = "Xfer Amts:";            //toolTip = "Displays xfer amounts of both resourses selected.";            //toolTip += "\r\nAllows editing of part's larger capacity resourse xfer value.";            //toolTip += "\r\nIt then calculates the smaller xfer amount using a ratio";            //toolTip += "\r\n of the smaller capacity resource to the larger.";            label = $"{SmUtils.Localize("#smloc_transfer_015")}:";            toolTip = SmUtils.Localize("#smloc_transfer_tt_025");          }          else          {            //label = "Xfer Amt:";            //toolTip += "Displays the Amount of selected resource to xfer.";            //toolTip += "\r\nAllows editing of the xfer value.";            label = $"{SmUtils.Localize("#smloc_transfer_016")}:";            toolTip = SmUtils.Localize("#smloc_transfer_tt_026");          }          GUILayout.Label(new GUIContent(label' toolTip)' GUILayout.Width(65));          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          activePump.EditSliderAmount = GUILayout.TextField(activePump.EditSliderAmount' 20' GUILayout.Width(95)'            GUILayout.Height(20));          thisXferAmount = double.Parse(activePump.EditSliderAmount);          double ratioXferAmt = thisXferAmount * ratioPump.PumpRatio > ratioPump.FromCapacity            ? ratioPump.FromCapacity            : thisXferAmount * ratioPump.PumpRatio;          if (SMAddon.SmVessel.SelectedResources.Count > 1)          {            label = $" | {ratioXferAmt:#######0.##}";            //toolTip = "Smaller Tank xfer amount.  Calculated at " + ratioPump.PumpRatio + ".\r\n(Note: A value of 0.818181 = 0.9/1.1)";            toolTip = $"{SmUtils.Localize("#smloc_transfer_tt_027")}:  {ratioPump.PumpRatio}.\n{SmUtils.Localize("#smloc_transfer_tt_028")}";            GUILayout.Label(new GUIContent(label' toolTip)' GUILayout.Width(80));            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The following statement contains a magic number: if (TransferPump.PumpProcessOn)        {          // We want to show this during transfer if the direction is correct...          if (activePump.PumpType == pumpType)          {            //GUILayout.Label("Xfer Remaining:"' GUILayout.Width(120));            GUILayout.Label($"{SmUtils.Localize("#smloc_transfer_014")}:"' GUILayout.Width(120));                        GUILayout.Label(activePump.PumpBalance.ToString("#######0.##"));            if (SMAddon.SmVessel.SelectedResources.Count > 1)              GUILayout.Label($" | {ratioPump.PumpBalance:#######0.##}");          }        }        else        {          if (selectedResources.Count > 1)          {            //label = "Xfer Amts:";            //toolTip = "Displays xfer amounts of both resourses selected.";            //toolTip += "\r\nAllows editing of part's larger capacity resourse xfer value.";            //toolTip += "\r\nIt then calculates the smaller xfer amount using a ratio";            //toolTip += "\r\n of the smaller capacity resource to the larger.";            label = $"{SmUtils.Localize("#smloc_transfer_015")}:";            toolTip = SmUtils.Localize("#smloc_transfer_tt_025");          }          else          {            //label = "Xfer Amt:";            //toolTip += "Displays the Amount of selected resource to xfer.";            //toolTip += "\r\nAllows editing of the xfer value.";            label = $"{SmUtils.Localize("#smloc_transfer_016")}:";            toolTip = SmUtils.Localize("#smloc_transfer_tt_026");          }          GUILayout.Label(new GUIContent(label' toolTip)' GUILayout.Width(65));          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          activePump.EditSliderAmount = GUILayout.TextField(activePump.EditSliderAmount' 20' GUILayout.Width(95)'            GUILayout.Height(20));          thisXferAmount = double.Parse(activePump.EditSliderAmount);          double ratioXferAmt = thisXferAmount * ratioPump.PumpRatio > ratioPump.FromCapacity            ? ratioPump.FromCapacity            : thisXferAmount * ratioPump.PumpRatio;          if (SMAddon.SmVessel.SelectedResources.Count > 1)          {            label = $" | {ratioXferAmt:#######0.##}";            //toolTip = "Smaller Tank xfer amount.  Calculated at " + ratioPump.PumpRatio + ".\r\n(Note: A value of 0.818181 = 0.9/1.1)";            toolTip = $"{SmUtils.Localize("#smloc_transfer_tt_027")}:  {ratioPump.PumpRatio}.\n{SmUtils.Localize("#smloc_transfer_tt_028")}";            GUILayout.Label(new GUIContent(label' toolTip)' GUILayout.Width(80));            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The following statement contains a magic number: if (TransferPump.PumpProcessOn)        {          // We want to show this during transfer if the direction is correct...          if (activePump.PumpType == pumpType)          {            //GUILayout.Label("Xfer Remaining:"' GUILayout.Width(120));            GUILayout.Label($"{SmUtils.Localize("#smloc_transfer_014")}:"' GUILayout.Width(120));                        GUILayout.Label(activePump.PumpBalance.ToString("#######0.##"));            if (SMAddon.SmVessel.SelectedResources.Count > 1)              GUILayout.Label($" | {ratioPump.PumpBalance:#######0.##}");          }        }        else        {          if (selectedResources.Count > 1)          {            //label = "Xfer Amts:";            //toolTip = "Displays xfer amounts of both resourses selected.";            //toolTip += "\r\nAllows editing of part's larger capacity resourse xfer value.";            //toolTip += "\r\nIt then calculates the smaller xfer amount using a ratio";            //toolTip += "\r\n of the smaller capacity resource to the larger.";            label = $"{SmUtils.Localize("#smloc_transfer_015")}:";            toolTip = SmUtils.Localize("#smloc_transfer_tt_025");          }          else          {            //label = "Xfer Amt:";            //toolTip += "Displays the Amount of selected resource to xfer.";            //toolTip += "\r\nAllows editing of the xfer value.";            label = $"{SmUtils.Localize("#smloc_transfer_016")}:";            toolTip = SmUtils.Localize("#smloc_transfer_tt_026");          }          GUILayout.Label(new GUIContent(label' toolTip)' GUILayout.Width(65));          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          activePump.EditSliderAmount = GUILayout.TextField(activePump.EditSliderAmount' 20' GUILayout.Width(95)'            GUILayout.Height(20));          thisXferAmount = double.Parse(activePump.EditSliderAmount);          double ratioXferAmt = thisXferAmount * ratioPump.PumpRatio > ratioPump.FromCapacity            ? ratioPump.FromCapacity            : thisXferAmount * ratioPump.PumpRatio;          if (SMAddon.SmVessel.SelectedResources.Count > 1)          {            label = $" | {ratioXferAmt:#######0.##}";            //toolTip = "Smaller Tank xfer amount.  Calculated at " + ratioPump.PumpRatio + ".\r\n(Note: A value of 0.818181 = 0.9/1.1)";            toolTip = $"{SmUtils.Localize("#smloc_transfer_tt_027")}:  {ratioPump.PumpRatio}.\n{SmUtils.Localize("#smloc_transfer_tt_028")}";            GUILayout.Label(new GUIContent(label' toolTip)' GUILayout.Width(80));            rect = GUILayoutUtility.GetLastRect();            if (Event.current.type == EventType.Repaint && ShowToolTips)              ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The following statement contains a magic number: if (SMConditions.IsShipControllable() && (SMConditions.CanResourceBeXferred(pumpType' maxPumpAmount) || activePump.PumpType == pumpType && activePump.IsPumpOn))        {          GUILayout.BeginHorizontal();          GUIStyle noPad = SMStyle.LabelStyleNoPad;          //label = "Xfer:";          //toolTip = "Xfer amount slider control.\r\nMove slider to select a different value.\r\nYou can use this instead of the text box above.";          label = $"{SmUtils.Localize("#smloc_transfer_009")}:";          toolTip = SmUtils.Localize("#smloc_transfer_tt_029");          GUILayout.Label(new GUIContent(label' toolTip)' noPad' GUILayout.Width(50)' GUILayout.Height(20));          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          thisXferAmount = GUILayout.HorizontalSlider((float)thisXferAmount' 0' (float)maxPumpAmount'            GUILayout.Width(190));          activePump.EditSliderAmount = thisXferAmount.ToString(CultureInfo.InvariantCulture);          // set Xfer button style          //GUIContent xferContent = !TransferPump.PumpProcessOn          //  ? new GUIContent("Xfer"' "Transfers the selected resource(s)\r\nto the selected Part(s)")          //  : new GUIContent("Stop"' "Halts the Transfer of the selected resource(s)\r\nto the selected Part(s)");          GUIContent xferContent = !TransferPump.PumpProcessOn || activePump.PumpType == pumpType && !activePump.IsPumpOn            ? new GUIContent(SmUtils.Localize("#smloc_transfer_009")' SmUtils.Localize("#smloc_transfer_tt_030")) // Xfer            : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_031")); // Stop          GUI.enabled = !TransferPump.PumpProcessOn || activePump.PumpType == pumpType && activePump.IsPumpOn;          if (GUILayout.Button(xferContent' GUILayout.Width(40)' GUILayout.Height(18)))          {            uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'              pumps[0].FromParts.First()' pumps[0].ToParts.Last()' pumpType' TransferPump.TriggerButton.Transfer);            if (!TransferPump.PumpProcessOn)            {              //Calc amounts and update xfer modules              TransferPump.AssignPumpAmounts(pumps' thisXferAmount' pumpId);              ProcessController.TransferResources(pumps);            }            else TransferPump.AbortAllPumpsInProcess(pumpId);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          GUILayout.EndHorizontal();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The following statement contains a magic number: if (SMConditions.IsShipControllable() && (SMConditions.CanResourceBeXferred(pumpType' maxPumpAmount) || activePump.PumpType == pumpType && activePump.IsPumpOn))        {          GUILayout.BeginHorizontal();          GUIStyle noPad = SMStyle.LabelStyleNoPad;          //label = "Xfer:";          //toolTip = "Xfer amount slider control.\r\nMove slider to select a different value.\r\nYou can use this instead of the text box above.";          label = $"{SmUtils.Localize("#smloc_transfer_009")}:";          toolTip = SmUtils.Localize("#smloc_transfer_tt_029");          GUILayout.Label(new GUIContent(label' toolTip)' noPad' GUILayout.Width(50)' GUILayout.Height(20));          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          thisXferAmount = GUILayout.HorizontalSlider((float)thisXferAmount' 0' (float)maxPumpAmount'            GUILayout.Width(190));          activePump.EditSliderAmount = thisXferAmount.ToString(CultureInfo.InvariantCulture);          // set Xfer button style          //GUIContent xferContent = !TransferPump.PumpProcessOn          //  ? new GUIContent("Xfer"' "Transfers the selected resource(s)\r\nto the selected Part(s)")          //  : new GUIContent("Stop"' "Halts the Transfer of the selected resource(s)\r\nto the selected Part(s)");          GUIContent xferContent = !TransferPump.PumpProcessOn || activePump.PumpType == pumpType && !activePump.IsPumpOn            ? new GUIContent(SmUtils.Localize("#smloc_transfer_009")' SmUtils.Localize("#smloc_transfer_tt_030")) // Xfer            : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_031")); // Stop          GUI.enabled = !TransferPump.PumpProcessOn || activePump.PumpType == pumpType && activePump.IsPumpOn;          if (GUILayout.Button(xferContent' GUILayout.Width(40)' GUILayout.Height(18)))          {            uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'              pumps[0].FromParts.First()' pumps[0].ToParts.Last()' pumpType' TransferPump.TriggerButton.Transfer);            if (!TransferPump.PumpProcessOn)            {              //Calc amounts and update xfer modules              TransferPump.AssignPumpAmounts(pumps' thisXferAmount' pumpId);              ProcessController.TransferResources(pumps);            }            else TransferPump.AbortAllPumpsInProcess(pumpId);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          GUILayout.EndHorizontal();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The following statement contains a magic number: if (SMConditions.IsShipControllable() && (SMConditions.CanResourceBeXferred(pumpType' maxPumpAmount) || activePump.PumpType == pumpType && activePump.IsPumpOn))        {          GUILayout.BeginHorizontal();          GUIStyle noPad = SMStyle.LabelStyleNoPad;          //label = "Xfer:";          //toolTip = "Xfer amount slider control.\r\nMove slider to select a different value.\r\nYou can use this instead of the text box above.";          label = $"{SmUtils.Localize("#smloc_transfer_009")}:";          toolTip = SmUtils.Localize("#smloc_transfer_tt_029");          GUILayout.Label(new GUIContent(label' toolTip)' noPad' GUILayout.Width(50)' GUILayout.Height(20));          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          thisXferAmount = GUILayout.HorizontalSlider((float)thisXferAmount' 0' (float)maxPumpAmount'            GUILayout.Width(190));          activePump.EditSliderAmount = thisXferAmount.ToString(CultureInfo.InvariantCulture);          // set Xfer button style          //GUIContent xferContent = !TransferPump.PumpProcessOn          //  ? new GUIContent("Xfer"' "Transfers the selected resource(s)\r\nto the selected Part(s)")          //  : new GUIContent("Stop"' "Halts the Transfer of the selected resource(s)\r\nto the selected Part(s)");          GUIContent xferContent = !TransferPump.PumpProcessOn || activePump.PumpType == pumpType && !activePump.IsPumpOn            ? new GUIContent(SmUtils.Localize("#smloc_transfer_009")' SmUtils.Localize("#smloc_transfer_tt_030")) // Xfer            : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_031")); // Stop          GUI.enabled = !TransferPump.PumpProcessOn || activePump.PumpType == pumpType && activePump.IsPumpOn;          if (GUILayout.Button(xferContent' GUILayout.Width(40)' GUILayout.Height(18)))          {            uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'              pumps[0].FromParts.First()' pumps[0].ToParts.Last()' pumpType' TransferPump.TriggerButton.Transfer);            if (!TransferPump.PumpProcessOn)            {              //Calc amounts and update xfer modules              TransferPump.AssignPumpAmounts(pumps' thisXferAmount' pumpId);              ProcessController.TransferResources(pumps);            }            else TransferPump.AbortAllPumpsInProcess(pumpId);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          GUILayout.EndHorizontal();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The following statement contains a magic number: if (SMConditions.IsShipControllable() && (SMConditions.CanResourceBeXferred(pumpType' maxPumpAmount) || activePump.PumpType == pumpType && activePump.IsPumpOn))        {          GUILayout.BeginHorizontal();          GUIStyle noPad = SMStyle.LabelStyleNoPad;          //label = "Xfer:";          //toolTip = "Xfer amount slider control.\r\nMove slider to select a different value.\r\nYou can use this instead of the text box above.";          label = $"{SmUtils.Localize("#smloc_transfer_009")}:";          toolTip = SmUtils.Localize("#smloc_transfer_tt_029");          GUILayout.Label(new GUIContent(label' toolTip)' noPad' GUILayout.Width(50)' GUILayout.Height(20));          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          thisXferAmount = GUILayout.HorizontalSlider((float)thisXferAmount' 0' (float)maxPumpAmount'            GUILayout.Width(190));          activePump.EditSliderAmount = thisXferAmount.ToString(CultureInfo.InvariantCulture);          // set Xfer button style          //GUIContent xferContent = !TransferPump.PumpProcessOn          //  ? new GUIContent("Xfer"' "Transfers the selected resource(s)\r\nto the selected Part(s)")          //  : new GUIContent("Stop"' "Halts the Transfer of the selected resource(s)\r\nto the selected Part(s)");          GUIContent xferContent = !TransferPump.PumpProcessOn || activePump.PumpType == pumpType && !activePump.IsPumpOn            ? new GUIContent(SmUtils.Localize("#smloc_transfer_009")' SmUtils.Localize("#smloc_transfer_tt_030")) // Xfer            : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_031")); // Stop          GUI.enabled = !TransferPump.PumpProcessOn || activePump.PumpType == pumpType && activePump.IsPumpOn;          if (GUILayout.Button(xferContent' GUILayout.Width(40)' GUILayout.Height(18)))          {            uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'              pumps[0].FromParts.First()' pumps[0].ToParts.Last()' pumpType' TransferPump.TriggerButton.Transfer);            if (!TransferPump.PumpProcessOn)            {              //Calc amounts and update xfer modules              TransferPump.AssignPumpAmounts(pumps' thisXferAmount' pumpId);              ProcessController.TransferResources(pumps);            }            else TransferPump.AbortAllPumpsInProcess(pumpId);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          GUILayout.EndHorizontal();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceDetailsViewer,The following statement contains a magic number: if (SMConditions.IsShipControllable() && (SMConditions.CanResourceBeXferred(pumpType' maxPumpAmount) || activePump.PumpType == pumpType && activePump.IsPumpOn))        {          GUILayout.BeginHorizontal();          GUIStyle noPad = SMStyle.LabelStyleNoPad;          //label = "Xfer:";          //toolTip = "Xfer amount slider control.\r\nMove slider to select a different value.\r\nYou can use this instead of the text box above.";          label = $"{SmUtils.Localize("#smloc_transfer_009")}:";          toolTip = SmUtils.Localize("#smloc_transfer_tt_029");          GUILayout.Label(new GUIContent(label' toolTip)' noPad' GUILayout.Width(50)' GUILayout.Height(20));          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          thisXferAmount = GUILayout.HorizontalSlider((float)thisXferAmount' 0' (float)maxPumpAmount'            GUILayout.Width(190));          activePump.EditSliderAmount = thisXferAmount.ToString(CultureInfo.InvariantCulture);          // set Xfer button style          //GUIContent xferContent = !TransferPump.PumpProcessOn          //  ? new GUIContent("Xfer"' "Transfers the selected resource(s)\r\nto the selected Part(s)")          //  : new GUIContent("Stop"' "Halts the Transfer of the selected resource(s)\r\nto the selected Part(s)");          GUIContent xferContent = !TransferPump.PumpProcessOn || activePump.PumpType == pumpType && !activePump.IsPumpOn            ? new GUIContent(SmUtils.Localize("#smloc_transfer_009")' SmUtils.Localize("#smloc_transfer_tt_030")) // Xfer            : new GUIContent(SmUtils.Localize("#smloc_transfer_005")' SmUtils.Localize("#smloc_transfer_tt_031")); // Stop          GUI.enabled = !TransferPump.PumpProcessOn || activePump.PumpType == pumpType && activePump.IsPumpOn;          if (GUILayout.Button(xferContent' GUILayout.Width(40)' GUILayout.Height(18)))          {            uint pumpId = TransferPump.GetPumpIdFromHash(string.Join(""' selectedResources.ToArray())'              pumps[0].FromParts.First()' pumps[0].ToParts.Last()' pumpType' TransferPump.TriggerButton.Transfer);            if (!TransferPump.PumpProcessOn)            {              //Calc amounts and update xfer modules              TransferPump.AssignPumpAmounts(pumps' thisXferAmount' pumpId);              ProcessController.TransferResources(pumps);            }            else TransferPump.AbortAllPumpsInProcess(pumpId);          }          rect = GUILayoutUtility.GetLastRect();          if (Event.current.type == EventType.Repaint && ShowToolTips)            ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' xOffset);          GUILayout.EndHorizontal();        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceFlowButtons,The following statement contains a magic number: try        {          List<TransferPump>.Enumerator displayPumps = TransferPump.GetDisplayPumpsByType(pumpType).GetEnumerator();          while (displayPumps.MoveNext())          {            if (displayPumps.Current == null) continue;            // this var is used for button state change management            bool flowState = displayPumps.Current.FromParts.Any(part => part.Resources[displayPumps.Current.Resource].flowState);            //string flowtext = flowState ? "On" : "Off";            string flowtext = flowState ? SmUtils.Localize("#smloc_transfer_017") : SmUtils.Localize("#smloc_transfer_018");              // Flow control Display            step = "resource quantities labels";              GUILayout.BeginHorizontal();            string label =              $"{displayPumps.Current.Resource}: ({displayPumps.Current.FromRemaining:#######0.##}/{displayPumps.Current.FromCapacity:######0.##})";            GUILayout.Label(label ' SMStyle.LabelStyleNoWrap' GUILayout.Width(220)'GUILayout.Height(18));            GUILayout.Label(flowtext' GUILayout.Width(20)' GUILayout.Height(18));            if (SMAddon.SmVessel.Vessel.IsControllable)            {              step = "render flow button(s)";              //GUIContent content = new GUIContent("Flow"' "Enables/Disables flow of selected resource(s) from selected part(s).");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_019")' SmUtils.Localize("#smloc_transfer_tt_032"));              if (GUILayout.Button(content' GUILayout.Width(40)' GUILayout.Height(20)))              {                List<Part>.Enumerator parts = displayPumps.Current.FromParts.GetEnumerator();                while (parts.MoveNext())                {                  if (parts.Current == null) continue;                  parts.Current.Resources[displayPumps.Current.Resource].flowState = !flowState;                }                parts.Dispose();              }              Rect rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' scrollX);            }            GUILayout.EndHorizontal();          }          displayPumps.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowTransfer.ResourceFlowButtons at step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceFlowButtons,The following statement contains a magic number: try        {          List<TransferPump>.Enumerator displayPumps = TransferPump.GetDisplayPumpsByType(pumpType).GetEnumerator();          while (displayPumps.MoveNext())          {            if (displayPumps.Current == null) continue;            // this var is used for button state change management            bool flowState = displayPumps.Current.FromParts.Any(part => part.Resources[displayPumps.Current.Resource].flowState);            //string flowtext = flowState ? "On" : "Off";            string flowtext = flowState ? SmUtils.Localize("#smloc_transfer_017") : SmUtils.Localize("#smloc_transfer_018");              // Flow control Display            step = "resource quantities labels";              GUILayout.BeginHorizontal();            string label =              $"{displayPumps.Current.Resource}: ({displayPumps.Current.FromRemaining:#######0.##}/{displayPumps.Current.FromCapacity:######0.##})";            GUILayout.Label(label ' SMStyle.LabelStyleNoWrap' GUILayout.Width(220)'GUILayout.Height(18));            GUILayout.Label(flowtext' GUILayout.Width(20)' GUILayout.Height(18));            if (SMAddon.SmVessel.Vessel.IsControllable)            {              step = "render flow button(s)";              //GUIContent content = new GUIContent("Flow"' "Enables/Disables flow of selected resource(s) from selected part(s).");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_019")' SmUtils.Localize("#smloc_transfer_tt_032"));              if (GUILayout.Button(content' GUILayout.Width(40)' GUILayout.Height(20)))              {                List<Part>.Enumerator parts = displayPumps.Current.FromParts.GetEnumerator();                while (parts.MoveNext())                {                  if (parts.Current == null) continue;                  parts.Current.Resources[displayPumps.Current.Resource].flowState = !flowState;                }                parts.Dispose();              }              Rect rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' scrollX);            }            GUILayout.EndHorizontal();          }          displayPumps.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowTransfer.ResourceFlowButtons at step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceFlowButtons,The following statement contains a magic number: try        {          List<TransferPump>.Enumerator displayPumps = TransferPump.GetDisplayPumpsByType(pumpType).GetEnumerator();          while (displayPumps.MoveNext())          {            if (displayPumps.Current == null) continue;            // this var is used for button state change management            bool flowState = displayPumps.Current.FromParts.Any(part => part.Resources[displayPumps.Current.Resource].flowState);            //string flowtext = flowState ? "On" : "Off";            string flowtext = flowState ? SmUtils.Localize("#smloc_transfer_017") : SmUtils.Localize("#smloc_transfer_018");              // Flow control Display            step = "resource quantities labels";              GUILayout.BeginHorizontal();            string label =              $"{displayPumps.Current.Resource}: ({displayPumps.Current.FromRemaining:#######0.##}/{displayPumps.Current.FromCapacity:######0.##})";            GUILayout.Label(label ' SMStyle.LabelStyleNoWrap' GUILayout.Width(220)'GUILayout.Height(18));            GUILayout.Label(flowtext' GUILayout.Width(20)' GUILayout.Height(18));            if (SMAddon.SmVessel.Vessel.IsControllable)            {              step = "render flow button(s)";              //GUIContent content = new GUIContent("Flow"' "Enables/Disables flow of selected resource(s) from selected part(s).");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_019")' SmUtils.Localize("#smloc_transfer_tt_032"));              if (GUILayout.Button(content' GUILayout.Width(40)' GUILayout.Height(20)))              {                List<Part>.Enumerator parts = displayPumps.Current.FromParts.GetEnumerator();                while (parts.MoveNext())                {                  if (parts.Current == null) continue;                  parts.Current.Resources[displayPumps.Current.Resource].flowState = !flowState;                }                parts.Dispose();              }              Rect rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' scrollX);            }            GUILayout.EndHorizontal();          }          displayPumps.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowTransfer.ResourceFlowButtons at step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceFlowButtons,The following statement contains a magic number: try        {          List<TransferPump>.Enumerator displayPumps = TransferPump.GetDisplayPumpsByType(pumpType).GetEnumerator();          while (displayPumps.MoveNext())          {            if (displayPumps.Current == null) continue;            // this var is used for button state change management            bool flowState = displayPumps.Current.FromParts.Any(part => part.Resources[displayPumps.Current.Resource].flowState);            //string flowtext = flowState ? "On" : "Off";            string flowtext = flowState ? SmUtils.Localize("#smloc_transfer_017") : SmUtils.Localize("#smloc_transfer_018");              // Flow control Display            step = "resource quantities labels";              GUILayout.BeginHorizontal();            string label =              $"{displayPumps.Current.Resource}: ({displayPumps.Current.FromRemaining:#######0.##}/{displayPumps.Current.FromCapacity:######0.##})";            GUILayout.Label(label ' SMStyle.LabelStyleNoWrap' GUILayout.Width(220)'GUILayout.Height(18));            GUILayout.Label(flowtext' GUILayout.Width(20)' GUILayout.Height(18));            if (SMAddon.SmVessel.Vessel.IsControllable)            {              step = "render flow button(s)";              //GUIContent content = new GUIContent("Flow"' "Enables/Disables flow of selected resource(s) from selected part(s).");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_019")' SmUtils.Localize("#smloc_transfer_tt_032"));              if (GUILayout.Button(content' GUILayout.Width(40)' GUILayout.Height(20)))              {                List<Part>.Enumerator parts = displayPumps.Current.FromParts.GetEnumerator();                while (parts.MoveNext())                {                  if (parts.Current == null) continue;                  parts.Current.Resources[displayPumps.Current.Resource].flowState = !flowState;                }                parts.Dispose();              }              Rect rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' scrollX);            }            GUILayout.EndHorizontal();          }          displayPumps.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowTransfer.ResourceFlowButtons at step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceFlowButtons,The following statement contains a magic number: try        {          List<TransferPump>.Enumerator displayPumps = TransferPump.GetDisplayPumpsByType(pumpType).GetEnumerator();          while (displayPumps.MoveNext())          {            if (displayPumps.Current == null) continue;            // this var is used for button state change management            bool flowState = displayPumps.Current.FromParts.Any(part => part.Resources[displayPumps.Current.Resource].flowState);            //string flowtext = flowState ? "On" : "Off";            string flowtext = flowState ? SmUtils.Localize("#smloc_transfer_017") : SmUtils.Localize("#smloc_transfer_018");              // Flow control Display            step = "resource quantities labels";              GUILayout.BeginHorizontal();            string label =              $"{displayPumps.Current.Resource}: ({displayPumps.Current.FromRemaining:#######0.##}/{displayPumps.Current.FromCapacity:######0.##})";            GUILayout.Label(label ' SMStyle.LabelStyleNoWrap' GUILayout.Width(220)'GUILayout.Height(18));            GUILayout.Label(flowtext' GUILayout.Width(20)' GUILayout.Height(18));            if (SMAddon.SmVessel.Vessel.IsControllable)            {              step = "render flow button(s)";              //GUIContent content = new GUIContent("Flow"' "Enables/Disables flow of selected resource(s) from selected part(s).");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_019")' SmUtils.Localize("#smloc_transfer_tt_032"));              if (GUILayout.Button(content' GUILayout.Width(40)' GUILayout.Height(20)))              {                List<Part>.Enumerator parts = displayPumps.Current.FromParts.GetEnumerator();                while (parts.MoveNext())                {                  if (parts.Current == null) continue;                  parts.Current.Resources[displayPumps.Current.Resource].flowState = !flowState;                }                parts.Dispose();              }              Rect rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' scrollX);            }            GUILayout.EndHorizontal();          }          displayPumps.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowTransfer.ResourceFlowButtons at step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Magic Number,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ResourceFlowButtons,The following statement contains a magic number: try        {          List<TransferPump>.Enumerator displayPumps = TransferPump.GetDisplayPumpsByType(pumpType).GetEnumerator();          while (displayPumps.MoveNext())          {            if (displayPumps.Current == null) continue;            // this var is used for button state change management            bool flowState = displayPumps.Current.FromParts.Any(part => part.Resources[displayPumps.Current.Resource].flowState);            //string flowtext = flowState ? "On" : "Off";            string flowtext = flowState ? SmUtils.Localize("#smloc_transfer_017") : SmUtils.Localize("#smloc_transfer_018");              // Flow control Display            step = "resource quantities labels";              GUILayout.BeginHorizontal();            string label =              $"{displayPumps.Current.Resource}: ({displayPumps.Current.FromRemaining:#######0.##}/{displayPumps.Current.FromCapacity:######0.##})";            GUILayout.Label(label ' SMStyle.LabelStyleNoWrap' GUILayout.Width(220)'GUILayout.Height(18));            GUILayout.Label(flowtext' GUILayout.Width(20)' GUILayout.Height(18));            if (SMAddon.SmVessel.Vessel.IsControllable)            {              step = "render flow button(s)";              //GUIContent content = new GUIContent("Flow"' "Enables/Disables flow of selected resource(s) from selected part(s).");              GUIContent content = new GUIContent(SmUtils.Localize("#smloc_transfer_019")' SmUtils.Localize("#smloc_transfer_tt_032"));              if (GUILayout.Button(content' GUILayout.Width(40)' GUILayout.Height(20)))              {                List<Part>.Enumerator parts = displayPumps.Current.FromParts.GetEnumerator();                while (parts.MoveNext())                {                  if (parts.Current == null) continue;                  parts.Current.Resources[displayPumps.Current.Resource].flowState = !flowState;                }                parts.Dispose();              }              Rect rect = GUILayoutUtility.GetLastRect();              if (Event.current.type == EventType.Repaint && ShowToolTips)                ToolTip = SMToolTips.SetActiveToolTip(rect' GUI.tooltip' ref ToolTipActive' scrollX);            }            GUILayout.EndHorizontal();          }          displayPumps.Dispose();        }        catch (Exception ex)        {          if (!SMAddon.FrameErrTripped)          {            SmUtils.LogMessage(              $" in WindowTransfer.ResourceFlowButtons at step:  {step}.  Error:  {ex.Message} \r\n\r\n{ex.StackTrace}"' SmUtils.LogType.Error' true);            SMAddon.FrameErrTripped = true;          }        }
Missing Default,ShipManifest.Process,TransferCrew,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferCrew.cs,CrewTransferProcess,The following switch statement is missing a default case: switch (CrewXferState)          {            case XferState.Off:              // We're just starting loop' so set some evnironment stuff.              // We want to run the start sound no matter what the realism settings are               // to give an audio indication to the player that the process is active              Timestamp = DateTime.Now;              SMSound.SourceCrewStart.Play();              CrewXferState = XferState.Start;              break;              case XferState.Start:                SMAddon.Elapsed += (DateTime.Now - Timestamp).TotalSeconds;                if (SMSettings.RealXfers)              {                // Play run sound when start sound is nearly done. (repeats)                if (SMAddon.Elapsed >= SMSound.ClipPumpStart.length - 0.25)                {                  SMSound.SourceCrewStart.Stop();                  SMSound.SourceCrewRun.Play();                  SMAddon.Elapsed = 0;                  CrewXferState = XferState.Transfer;                }              }              else              {                CrewXferState = XferState.Transfer;              }              break;              case XferState.Transfer:                SMAddon.Elapsed += (DateTime.Now - Timestamp).TotalSeconds;                if (SMSettings.RealXfers)              {                // wait for movement to end...                if (SMAddon.Elapsed >= CrewXferDelaySec || (IsSeat2SeatXfer && SMAddon.Elapsed > Seat2SeatXferDelaySec))                {                  CrewXferState = XferState.Stop;                  CrewTransferStartAction();                }              }              else              {                if (SMAddon.Elapsed > 1)                {                  CrewXferState = XferState.Stop;                  CrewTransferStartAction();                }              }              break;              case XferState.Stop:              if (SMConditions.ListsUpdating) break;              // Spawn crew in parts and in vessel.              if (SMSettings.RealXfers)              {                // play crew sit.                SMSound.SourceCrewRun.Stop();                SMSound.SourceCrewStop.Play();              }              SMAddon.Elapsed = 0;              CrewTransferStopAction();              CrewXferState = XferState.Portraits;              IvaDelayActive = true;              break;              case XferState.Portraits:                // Account for crew move callbacks by adding a frame delay for portrait updates after crew move...              if (IvaDelayActive && IvaPortraitDelay < SMSettings.IvaUpdateFrameDelay)              {                IvaPortraitDelay += 1;              }              else if ((IvaDelayActive && IvaPortraitDelay >= SMSettings.IvaUpdateFrameDelay) || !IvaDelayActive)              {                if (IsStockXfer)                  ScreenMessages.PostScreenMessage(                    $"<color=yellow>{FromCrewMember.name} moved (by SM) to {ToPart.partInfo.title}.</color>"' 5f);                  ResetXferProcess();              }              break;          }
Missing Default,ShipManifest.Process,TransferCrew,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferCrew.cs,CrewTransferProcesses,The following switch statement is missing a default case: switch (CrewXferState)          {            case XferState.Off:              // We're just starting loop' so set some evnironment stuff.              // We want to run the start sound no matter what the realism settings are               // to give an audio indication to the player that the process is active              Timestamp = DateTime.Now;              SMSound.SourceCrewStart.Play();              CrewXferState = XferState.Start;              break;              case XferState.Start:                SMAddon.Elapsed += (DateTime.Now - Timestamp).TotalSeconds;                if (SMSettings.RealXfers)              {                // Play run sound when start sound is nearly done. (repeats)                if (SMAddon.Elapsed >= SMSound.ClipPumpStart.length - 0.25)                {                  SMSound.SourceCrewStart.Stop();                  SMSound.SourceCrewRun.Play();                  SMAddon.Elapsed = 0;                  CrewXferState = XferState.Transfer;                }              }              else              {                CrewXferState = XferState.Transfer;              }              break;              case XferState.Transfer:                SMAddon.Elapsed += (DateTime.Now - Timestamp).TotalSeconds;                if (SMSettings.RealXfers)              {                // wait for movement to end...                if (SMAddon.Elapsed >= CrewXferDelaySec || (IsSeat2SeatXfer && SMAddon.Elapsed > Seat2SeatXferDelaySec))                {                  CrewXferState = XferState.Stop;                  CrewTransferStartAction();                }              }              else              {                if (SMAddon.Elapsed > 1)                {                  CrewXferState = XferState.Stop;                }               }              break;              case XferState.Stop:                // Spawn crew in parts and in vessel.              if (SMSettings.RealXfers)              {                // play crew sit.                SMSound.SourceCrewRun.Stop();                SMSound.SourceCrewStop.Play();              }              CrewTransferStartAction();              CrewTransferStopAction();              Vessel.CrewWasModified(SMAddon.SmVessel.Vessel);              SMAddon.SmVessel.Vessel.DespawnCrew();              SMAddon.Elapsed = 0;              CrewXferState = XferState.Portraits;              IvaDelayActive = true;              break;              case XferState.Portraits:                // Account for crew move callbacks by adding a frame delay for portrait updates after crew move...              SMAddon.SmVessel.Vessel.SpawnCrew();              if (IvaDelayActive && IvaPortraitDelay < SMSettings.IvaUpdateFrameDelay)              {                IvaPortraitDelay += 1;              }              else if ((IvaDelayActive && IvaPortraitDelay >= SMSettings.IvaUpdateFrameDelay) || !IvaDelayActive)              {                if (IsStockXfer)                  ScreenMessages.PostScreenMessage(                    $"<color=yellow>{FromCrewMember.name} moved (by SM) to {ToPart.partInfo.title}.</color>"' 5f);                  ResetXferProcess();              }              break;          }
Missing Default,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,ProcessActivePumps,The following switch statement is missing a default case: switch (pump.PumpStatus)            {              case PumpState.Off:                //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps - Off"' Utilities.LogType.Info' SMSettings.VerboseLogging);                pump.TimeStamp = DateTime.Now;                pump.Start();                pump.PumpStatus = PumpState.Start;                break;              case PumpState.Start:                //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps - Start"' Utilities.LogType.Info' SMSettings.VerboseLogging);                // Calculate Elapsed.                pump.Elapsed += (DateTime.Now - pump.TimeStamp).TotalSeconds;                if (pump.Elapsed >= SMSound.SourcePumpStart.clip.length - 0.25)                {                  pump.Run();                  pump.PumpStatus = PumpState.Run;                }                break;              case PumpState.Run:                //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps - Run"' Utilities.LogType.Info' SMSettings.VerboseLogging);                // 1.  Get Elapsed from last run                double deltaT = (DateTime.Now - pump.TimeStamp).TotalSeconds;                  // 2. Lets wait long enough to get a resource volume worth moving                pump.TimeStamp = DateTime.Now;                pump.Running(deltaT);                break;              case PumpState.Stop:                //Utilities.LogMessage("Entering:  TransferPump.ProcessActivePumps - Stop"' Utilities.LogType.Info' SMSettings.VerboseLogging);                pump.Stop();                pump.PumpStatus = PumpState.Off;                pumpsToRemove.Add(pump);                break;            }
Missing Default,ShipManifest.Process,TransferPump,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Process\TransferPump.cs,UpdateDisplayPumps,The following switch statement is missing a default case: switch (pump.PumpType)          {            case TypeXfer.Dump:            case TypeXfer.SourceToTarget:              pump.FromParts = sourceParts;              pump.ToParts = targetParts;              break;            case TypeXfer.TargetToSource:              pump.FromParts = targetParts;              pump.ToParts = sourceParts;              break;          }
Missing Default,ShipManifest,SMSettings,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMSettings.cs,SetRealismMode,The following switch statement is missing a default case: switch (mode)        {          case 0: // Full            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableKerbalRename = false;            EnableChangeProfession = false;            EnableCrewModify = false;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = false;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 1: // None            RealXfers = false;            RealControl = false;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = false;            EnableClsAllowTransfer = true;            EnableCls = false;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = false;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 2: // Default            RealXfers = true;            RealControl = true;            EnableCrew = true;            EnableCrewModify = true;            EnableKerbalRename = true;            EnableChangeProfession = true;            EnableStockCrewXfer = true;            OverrideStockCrewXfer = true;            EnableClsAllowTransfer = true;            EnableCls = ClsInstalled;            EnableScience = true;            EnableResources = true;            EnablePfCrews = false;            EnablePfResources = true;            EnableXferCost = true;            FlowCost = 0.0015;            FlowRate = 100;            MinFlowRate = 0;            MaxFlowRate = 1000;            Tolerance = 0.000001;            MaxFlowTimeSec = 180;            LockSettings = false;            break;          case 3: // Custom  Do nothing.            break;        }
Missing Default,ShipManifest,SMVessel,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMVessel.cs,GetSelectedResourcesParts,The following switch statement is missing a default case: switch (SelectedResources.Count)        {          case 1:            SelectedResourcesParts = PartsByResource[SelectedResources[0]];            break;          case 2:            SelectedResourcesParts.Clear();            List<Part>.Enumerator partlist = Vessel.Parts.GetEnumerator();            while (partlist.MoveNext())            {              if (partlist.Current == null) continue;              if (partlist.Current.Resources.Contains(SelectedResources[0]) && partlist.Current.Resources.Contains(SelectedResources[1]))                SelectedResourcesParts.Add(partlist.Current);            }            partlist.Dispose();            break;        }
Missing Default,ShipManifest,SmUtils,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\SMUtils.cs,DisplayVesselResourceTotals,The following switch statement is missing a default case: switch (SMConditions.TypeOfResource(selectedResource))          {            case SMConditions.ResourceType.Crew:              currAmount = SMAddon.SmVessel.Vessel.GetCrewCount();              totAmount = SMAddon.SmVessel.Vessel.GetCrewCapacity();                // if DF installed' get total frozen and add to count.              if (InstalledMods.IsDfInstalled)              {                List<Part>.Enumerator cryofreezers = GetFreezerParts().GetEnumerator();                // ReSharper disable once SuspiciousTypeConversion.Global                while (cryofreezers.MoveNext())                {                  if (cryofreezers.Current == null) continue;                  currAmount += new DfWrapper.DeepFreezer(SMConditions.GetFreezerModule(cryofreezers.Current)).TotalFrozen;                }                cryofreezers.Dispose();              }                // Now check for occupied external seats              // external seats that are occupied will show up in getcrewcount and getcrewcapacity              // Since we cannot yet xfer external crew' we need to remove them from the count..              List<KerbalSeat> seatCount = (from iPart in SMAddon.SmVessel.Vessel.parts                where iPart.Modules.Contains("KerbalSeat")                from PartModule iModule in iPart.Modules                where iModule.ClassName == "KerbalSeat"                select (KerbalSeat) iModule                into kSeat                where kSeat.Occupant != null                select kSeat).ToList();              currAmount -= seatCount.Count;              totAmount -= seatCount.Count;              break;            case SMConditions.ResourceType.Science:              currAmount +=                SMAddon.SmVessel.PartsByResource[selectedResource].SelectMany(part => part.Modules.Cast<PartModule>())                  .OfType<IScienceDataContainer>()                  .Sum(module => (double) module.GetScienceCount());              break;          }
Missing Default,ShipManifest.Windows,WindowRoster,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowRoster.cs,CanDisplayKerbal,The following switch statement is missing a default case: switch (CurrentFilter)        {          case KerbalFilters.All:            return true;          case KerbalFilters.Assigned:            if (kerbal.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)              return true;            break;          case KerbalFilters.Available:            if (kerbal.rosterStatus == ProtoCrewMember.RosterStatus.Available)              return true;            break;          case KerbalFilters.Dead:            if ((kerbal.rosterStatus == ProtoCrewMember.RosterStatus.Dead &&                 kerbal.type != ProtoCrewMember.KerbalType.Unowned) ||                kerbal.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              return true;            break;          case KerbalFilters.Frozen:            if (kerbal.rosterStatus == ProtoCrewMember.RosterStatus.Dead &&                kerbal.type == ProtoCrewMember.KerbalType.Unowned)              return true;            break;          case KerbalFilters.Missing:            if (kerbal.rosterStatus == ProtoCrewMember.RosterStatus.Missing)              return true;            break;          case KerbalFilters.Vessel:            if (FlightGlobals.ActiveVessel.GetVesselCrew().Contains(kerbal) ||                (InstalledMods.IsDfInstalled &&                 GetFrozenKerbalDetails(kerbal).Contains(FlightGlobals.ActiveVessel.vesselName.Replace("(unloaded)"' ""))))              return true;            break;        }
Missing Default,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceVesselDetails,The following switch statement is missing a default case: switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;            case "ModuleScienceLab":            case "ModuleScienceConverter":              isCollectable = true;              break;          }
Missing Default,ShipManifest.Windows,WindowTransfer,C:\repos\PapaJoesSoup_ShipManifest\ShipManifest\Windows\WindowTransfer.cs,ScienceDetailsSource,The following switch statement is missing a default case: switch (modules.Current.moduleName)          {            case "ModuleScienceExperiment":              isCollectable = ((ModuleScienceExperiment)modules.Current).dataIsCollectable;              break;            case "ModuleScienceContainer":              isCollectable = ((ModuleScienceContainer)modules.Current).dataIsCollectable;              break;          }
