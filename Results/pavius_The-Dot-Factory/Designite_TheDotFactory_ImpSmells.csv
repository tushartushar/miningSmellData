Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,getBitmapBorder,Cyclomatic complexity of the method is 10
Complex Method,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,manipulateBitmap,Cyclomatic complexity of the method is 8
Complex Method,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,convertBitmapToPageArray,Cyclomatic complexity of the method is 8
Complex Method,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringFromPageArray,Cyclomatic complexity of the method is 12
Complex Method,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromFontInfo,Cyclomatic complexity of the method is 10
Complex Method,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,outputSyntaxColoredString,Cyclomatic complexity of the method is 10
Complex Method,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,populateControls,Cyclomatic complexity of the method is 13
Long Parameter List,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,manipulateBitmap,The method has 5 parameters.
Long Parameter List,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The method has 5 parameters.
Long Parameter List,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateVisualizer,The method has 5 parameters.
Long Parameter List,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,charDescArrayAddCharacter,The method has 6 parameters.
Long Parameter List,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromCharacterDescriptorBlockList,The method has 5 parameters.
Long Identifier,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,Form1_Load,The length of the parameter lastUsedOutputConfigurationIndex is 32.
Long Identifier,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateCharacterDescriptorBlockList,The length of the parameter differenceBetweenCharsForNewGroup is 33.
Long Identifier,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromFontInfo,The length of the parameter spaceCharacterPixelWidthString is 30.
Long Identifier,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,getOutputConfiguration,The length of the parameter displayedOutputConfigurationIndex is 33.
Long Statement,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(InputBoxDialog)); " is 135.
Long Statement,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The length of the statement  "	this.lblPrompt.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 233.
Long Statement,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The length of the statement  "	this.lblPrompt.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 160.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,expandAndRemoveCharacterRanges,The length of the statement  "		if (characterRangePointParse (regexMatch.Groups ["rangeStart"].Value' ref rangeStart) && characterRangePointParse (regexMatch.Groups ["rangeEnd"].Value' ref rangeEnd)) { " is 169.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,manipulateBitmap,The length of the statement  "	Rectangle rect = new Rectangle (bitmapCropBorder.leftX' bitmapCropBorder.topY' bitmapCropBorder.rightX - bitmapCropBorder.leftX + 1' bitmapCropBorder.bottomY - bitmapCropBorder.topY + 1); " is 187.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,getAbsoluteCharacterDimensions,The length of the statement  "		if (m_outputConfig.rotation == OutputConfiguration.Rotation.RotateZero || m_outputConfig.rotation == OutputConfiguration.Rotation.RotateOneEighty) { " is 148.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,populateFontInfoFromCharacters,The length of the statement  "		getAbsoluteCharacterDimensions (ref fontInfo.characters [charIdx].bitmapToGenerate' ref fontInfo.characters [charIdx].width' ref fontInfo.characters [charIdx].height); " is 167.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,populateFontInfo,The length of the statement  "		convertCharacterToBitmap (fontInfo.generatedChars [charIdx]' font' out fontInfo.characters [charIdx].bitmapOriginal' largestBitmap); " is 132.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,populateFontInfo,The length of the statement  "		// fontInfo.characters[charIdx].bitmapOriginal.Save(String.Format("C:/bms/{0}.bmp"' fontInfo.characters[charIdx].character)); " is 125.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,populateFontInfo,The length of the statement  "	if (m_outputConfig.paddingRemovalHorizontal == OutputConfiguration.PaddingRemoval.Fixed || m_outputConfig.paddingRemovalVertical == OutputConfiguration.PaddingRemoval.Fixed) { " is 175.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,populateFontInfo,The length of the statement  "		manipulateBitmap (fontInfo.characters [charIdx].bitmapOriginal' tightestCommonBorder' out fontInfo.characters [charIdx].bitmapToGenerate' m_outputConfig.spaceGenerationPixels' fontInfo.characters [charIdx].bitmapOriginal.Height); " is 229.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,populateFontInfo,The length of the statement  "		// fontInfo.characters[charIdx].bitmapToGenerate.Save(String.Format("C:/bms/{0}_cropped.bmp"' fontInfo.characters[charIdx].character)); " is 135.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateVisualizer,The length of the statement  "			int page = (layout == OutputConfiguration.BitLayout.RowMajor) ? (byte)pages [row * colCount + (col / 8)] : (byte)pages [(row / 8) * colCount + col]; " is 148.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateCharacterDescriptorBlockList,The length of the statement  "	int differenceBetweenCharsForNewGroup = m_outputConfig.generateLookupBlocks ? m_outputConfig.lookupBlocksNewAfterCharCount : int.MaxValue; " is 138.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateCharacterDescriptorBlockList,The length of the statement  "			for (char sequentialCharIndex = (char)(previousCharacter + 1); sequentialCharIndex < currentCharacter; ++sequentialCharIndex) { " is 127.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateCharacterDescriptorBlockList,The length of the statement  "		charDescArrayAddCharacter (characterBlock' fontInfo' currentCharacter' fontInfo.characters [charIndex].width' fontInfo.characters [charIndex].height' fontInfo.characters [charIndex].offsetInBytes); " is 197.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,charDescArrayGetBlockName,The length of the statement  "	return String.Format ("{0}{1}{2}"' variableName' includeBlockIndex ? blockIdString : ""' includeTypeDefinition ? "[]" : ""); " is 124.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromCharacterDescriptorBlockList,The length of the statement  "			resultTextSource += String.Format ("{0}Character descriptors for {1} {2}pt{3}{4}" + nl' m_commentStartString' fontInfo.font.Name' Math.Round (fontInfo.font.Size)' multipleDescBlocksExist ? blockNumberString : ""' m_commentEndString); " is 233.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromCharacterDescriptorBlockList,The length of the statement  "			resultTextSource += String.Format ("{0}{{ {1}{2}[Offset into {3}CharBitmaps in bytes] }}{4}" + nl' m_commentStartString' getCharacterDescName ("width"' m_outputConfig.descCharWidth)' getCharacterDescName ("height"' m_outputConfig.descCharHeight)' getFontName (ref fontInfo.font)' m_commentEndString); " is 300.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromCharacterDescriptorBlockList,The length of the statement  "		resultTextSource += String.Format ("{0} = " + nl + "{{" + nl' charDescArrayGetBlockName (fontInfo' characterBlockList.IndexOf (block)' true' multipleDescBlocksExist)); " is 167.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromCharacterDescriptorBlockList,The length of the statement  "			resultTextSource += String.Format ("\t{{{0}{1}{2}}}' \t\t{3}{4}{5}" + nl' getCharacterDescString (m_outputConfig.descCharWidth' character.width)' getCharacterDescString (m_outputConfig.descCharHeight' character.height)' character.offset' m_commentStartString' character.character' m_commentEndString + " "); " is 307.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromCharacterDescriptorBlockList,The length of the statement  "			resultTextSource += String.Format ("{0}Block lookup array for {1} {2}pt {3}" + nl' m_commentStartString' fontInfo.font.Name' Math.Round (fontInfo.font.Size)' m_commentEndString); " is 178.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromCharacterDescriptorBlockList,The length of the statement  "			resultTextSource += String.Format ("{0}{{ start character' end character' ptr to descriptor block array }}{1}" + nl' m_commentStartString' m_commentEndString); " is 159.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromCharacterDescriptorBlockList,The length of the statement  "		resultTextSource += String.Format ("const FONT_CHAR_INFO_LOOKUP {0}[] = " + nl + "{{" + nl' getCharacterDescriptorArrayLookupDisplayString (fontInfo)); " is 151.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromCharacterDescriptorBlockList,The length of the statement  "			CharacterDescriptorArrayBlock.Character firstChar = (CharacterDescriptorArrayBlock.Character)block.characters [0]' lastChar = (CharacterDescriptorArrayBlock.Character)block.characters [block.characters.Count - 1]; " is 213.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromCharacterDescriptorBlockList,The length of the statement  "			resultTextSource += String.Format ("\t{{{0}' {1}' &{2}}}'" + nl' getCharacterDisplayString (firstChar.character)' getCharacterDisplayString (lastChar.character)' charDescArrayGetBlockName (fontInfo' characterBlockList.IndexOf (block)' false' true)); " is 249.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateCharacterDescriptorArray,The length of the statement  "		generateStringsFromCharacterDescriptorBlockList (fontInfo' characterBlockList' ref resultTextSource' ref resultTextHeader' ref blockLookupGenerated); " is 149.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromFontInfo,The length of the statement  "		resultTextSource += String.Format ("{0}Character bitmaps for {1} {2}pt{3}" + nl' m_commentStartString' fontInfo.font.Name' Math.Round (fontInfo.font.Size)' m_commentEndString); " is 176.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromFontInfo,The length of the statement  "			resultTextSource += String.Format ("\t{0}@{1} '{2}' ({3} pixels wide){4}" + nl' m_commentStartString' fontInfo.characters [charIdx].offsetInBytes' fontInfo.characters [charIdx].character' fontInfo.characters [charIdx].width' m_commentEndString); " is 245.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromFontInfo,The length of the statement  "		resultTextSource += String.Format ("{0}Font information for {1} {2}pt{3}" + nl' m_commentStartString' fontInfo.font.Name' Math.Round (fontInfo.font.Size)' m_commentEndString); " is 175.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromFontInfo,The length of the statement  "		fontCharHeightString = String.Format ("\t{0}' {1} Character height{2}" + nl' convertValueByDescriptorFormat (m_outputConfig.descFontHeight' fontInfo.charHeight)' m_commentStartString' m_commentEndString); " is 204.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromFontInfo,The length of the statement  "		spaceCharacterPixelWidthString = String.Format ("\t{0}' {1} Width' in pixels' of space character{2}" + nl' m_outputConfig.spaceGenerationPixels' m_commentStartString' m_commentEndString); " is 187.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromFontInfo,The length of the statement  "	resultTextSource += String.Format ("{2} =" + nl + "{{" + nl + "{3}" + "\t{4}' {0} Start character{1}" + nl + "\t{5}' {0} End character{1}" + nl + "{6}" + "{7}" + "\t{8}' {0} Character bitmap array{1}" + nl + "}};" + nl' m_commentStartString' m_commentEndString' fontInfoVarName' fontCharHeightString' getCharacterDisplayString (fontInfo.startChar)' getCharacterDisplayString (fontInfo.endChar)' spaceCharacterPixelWidthString' getFontInfoDescriptorsString (fontInfo' blockLookupGenerated)' getVariableNameFromExpression (String.Format (m_outputConfig.varNfBitmaps' getFontName (ref fontInfo.font)))); " is 600.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromFontInfo,The length of the statement  "		resultTextHeader += String.Format ("extern const FONT_CHAR_INFO_LOOKUP {0}[];" + nl' getCharacterDescriptorArrayLookupDisplayString (fontInfo)); " is 144.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateStringsFromFontInfo,The length of the statement  "		resultTextHeader += String.Format ("extern {0}[];" + nl' String.Format (m_outputConfig.varNfCharInfo' getFontName (ref fontInfo.font))); " is 136.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,getFontInfoDescriptorsString,The length of the statement  "		descriptorString += String.Format ("\t{0}' {1} Character block lookup{2}" + nl' blockLookupGenerated ? getCharacterDescriptorArrayLookupDisplayString (fontInfo) : "NULL"' m_commentStartString' m_commentEndString); " is 213.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,getFontInfoDescriptorsString,The length of the statement  "		descriptorString += String.Format ("\t{0}' {1} Character descriptor array{2}" + nl' blockLookupGenerated ? "NULL" : getVariableNameFromExpression (String.Format (m_outputConfig.varNfCharInfo' getFontName (ref fontInfo.font)))' m_commentStartString' m_commentEndString); " is 269.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,getFontInfoDescriptorsString,The length of the statement  "		descriptorString += String.Format ("\t{0}' {1} Character descriptor array{2}" + nl' getVariableNameFromExpression (String.Format (m_outputConfig.varNfCharInfo' getFontName (ref fontInfo.font)))' m_commentStartString' m_commentEndString); " is 237.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateOutputForFont,The length of the statement  "		resultTextSource += String.Format ("{0}" + nl + "{1} Font data for {2} {3}pt" + nl + "{4}" + nl + nl' m_commentStartString' m_commentBlockMiddleString' font.Name' Math.Round (font.Size)' m_commentBlockEndString); " is 212.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateOutputForFont,The length of the statement  "		resultTextHeader += String.Format ("{0}Font data for {1} {2}pt{3}" + nl' m_commentStartString' font.Name' Math.Round (font.Size)' m_commentEndString); " is 150.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateOutputForImage,The length of the statement  "			MessageBox.Show ("No black pixels found in bitmap (currently only monochrome bitmaps supported)"' "Can't convert bitmap"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 166.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateOutputForImage,The length of the statement  "			resultTextSource += String.Format ("{0}" + nl + "{1} Image data for {2}" + nl + "{3}" + nl + nl' m_commentStartString' m_commentBlockMiddleString' imageName' m_commentBlockEndString); " is 183.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateOutputForImage,The length of the statement  "			resultTextHeader += String.Format ("{0}Bitmap info for {1}{2}" + nl' m_commentStartString' imageName' m_commentEndString); " is 122.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateOutputForImage,The length of the statement  "		int pagesPerRow = convertValueByDescriptorFormat (OutputConfiguration.DescriptorFormat.DisplayInBytes' bitmapManipulated.Width); " is 128.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateOutputForImage,The length of the statement  "			resultTextSource += String.Format ("{0}Bitmap sizes for {1}{2}" + nl' m_commentStartString' imageName' m_commentEndString); " is 123.
Long Statement,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateOutputForImage,The length of the statement  "			resultTextSource += String.Format ("{0}Pages = {1};" + nl' heightVarName' convertValueByDescriptorFormat (OutputConfiguration.DescriptorFormat.DisplayInBytes' bitmapManipulated.Height)); " is 186.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The length of the statement  "	outputConfig.paddingRemovalHorizontal = (OutputConfiguration.PaddingRemoval)Enum.Parse (typeof(OutputConfiguration.PaddingRemoval)' cbxPaddingHoriz.Text); " is 154.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The length of the statement  "	outputConfig.paddingRemovalVertical = (OutputConfiguration.PaddingRemoval)Enum.Parse (typeof(OutputConfiguration.PaddingRemoval)' cbxPaddingVert.Text); " is 151.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The length of the statement  "	outputConfig.commentStyle = (OutputConfiguration.CommentStyle)Enum.Parse (typeof(OutputConfiguration.CommentStyle)' cbxCommentStyle.Text); " is 138.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The length of the statement  "	outputConfig.bitLayout = (OutputConfiguration.BitLayout)Enum.Parse (typeof(OutputConfiguration.BitLayout)' cbxBitLayout.Text); " is 126.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The length of the statement  "	outputConfig.byteOrder = (OutputConfiguration.ByteOrder)Enum.Parse (typeof(OutputConfiguration.ByteOrder)' cbxByteOrder.Text); " is 126.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The length of the statement  "	outputConfig.byteFormat = (OutputConfiguration.ByteFormat)Enum.Parse (typeof(OutputConfiguration.ByteFormat)' cbxByteFormat.Text); " is 130.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The length of the statement  "	outputConfig.rotation = (OutputConfiguration.Rotation)Array.IndexOf (OutputConfiguration.RotationDisplayString' cbxRotation.Text); " is 130.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The length of the statement  "	outputConfig.descCharWidth = (OutputConfiguration.DescriptorFormat)Array.IndexOf (OutputConfiguration.DescriptorFormatDisplayString' cbxCharWidthFormat.Text); " is 158.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The length of the statement  "	outputConfig.descCharHeight = (OutputConfiguration.DescriptorFormat)Array.IndexOf (OutputConfiguration.DescriptorFormatDisplayString' cbxCharHeightFormat.Text); " is 160.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The length of the statement  "	outputConfig.descFontHeight = (OutputConfiguration.DescriptorFormat)Array.IndexOf (OutputConfiguration.DescriptorFormatDisplayString' cbxFontHeightFormat.Text); " is 160.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The length of the statement  "	outputConfig.descImgWidth = (OutputConfiguration.DescriptorFormat)Array.IndexOf (OutputConfiguration.DescriptorFormatDisplayString' cbxImgWidthFormat.Text); " is 156.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The length of the statement  "	outputConfig.descImgHeight = (OutputConfiguration.DescriptorFormat)Array.IndexOf (OutputConfiguration.DescriptorFormatDisplayString' cbxImgHeightFormat.Text); " is 158.
Long Statement,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,btnUpdateConfig_Click,The length of the statement  "	OutputConfiguration updatedOutputConfiguration = m_outputConfigurationManager.configurationGetAtIndex (cbxOutputConfigurations.SelectedIndex); " is 142.
Empty Catch Block,TheDotFactory,OutputConfigurationManager,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationManager.cs,loadFromFile,The method has an empty catch block.
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.lblPrompt.Location = new System.Drawing.Point (12' 9);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.lblPrompt.Location = new System.Drawing.Point (12' 9);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.lblPrompt.Size = new System.Drawing.Size (302' 20);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.lblPrompt.Size = new System.Drawing.Size (302' 20);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.lblPrompt.TabIndex = 3;  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (305' 61);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (305' 61);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size (64' 24);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size (64' 24);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (235' 61);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (235' 61);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (64' 24);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (64' 24);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 2;  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.txtInput.Location = new System.Drawing.Point (15' 32);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.txtInput.Location = new System.Drawing.Point (15' 32);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.txtInput.Size = new System.Drawing.Size (371' 20);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.txtInput.Size = new System.Drawing.Size (371' 20);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (398' 93);  
Magic Number,TheDotFactory,InputBoxDialog,C:\repos\pavius_The-Dot-Factory\TheDotFactory\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (398' 93);  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,MainForm,The following statement contains a magic number: splitContainer1.SplitterDistance = 340;  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,MainForm,The following statement contains a magic number: splitContainer1.Panel1MinSize = 287;  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,MainForm,The following statement contains a magic number: splitContainer1.Panel2MinSize = 260;  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,populateTextInsertCheckbox,The following statement contains a magic number: for (char character = ' '; character < 127; ++character) {  	// add to all  	all += character;  	// classify letter  	if (Char.IsNumber (character))  		numbers += character;  	else if (Char.IsSymbol (character))  		symbols += character;  	else if (Char.IsLetter (character) && Char.IsLower (character)) {  		letters += character;  		lowercaseLetters += character;  	}  	else if (Char.IsLetter (character) && !Char.IsLower (character)) {  		letters += character;  		uppercaseLetters += character;  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,characterRangePointParse,The following statement contains a magic number: try {  	// check if 0x is start of range  	if (rangePointString.Substring (0' 2) == "0x") {  		// remove 0x  		rangePointString = rangePointString.Substring (2' rangePointString.Length - 2);  		// do the parse  		rangePoint = Int32.Parse (rangePointString' System.Globalization.NumberStyles.HexNumber);  	}  	else {  		// do the parse  		rangePoint = Int32.Parse (rangePointString);  	}  }  catch {  	// error converting  	return false;  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,characterRangePointParse,The following statement contains a magic number: try {  	// check if 0x is start of range  	if (rangePointString.Substring (0' 2) == "0x") {  		// remove 0x  		rangePointString = rangePointString.Substring (2' rangePointString.Length - 2);  		// do the parse  		rangePoint = Int32.Parse (rangePointString' System.Globalization.NumberStyles.HexNumber);  	}  	else {  		// do the parse  		rangePoint = Int32.Parse (rangePointString);  	}  }  catch {  	// error converting  	return false;  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,characterRangePointParse,The following statement contains a magic number: try {  	// check if 0x is start of range  	if (rangePointString.Substring (0' 2) == "0x") {  		// remove 0x  		rangePointString = rangePointString.Substring (2' rangePointString.Length - 2);  		// do the parse  		rangePoint = Int32.Parse (rangePointString' System.Globalization.NumberStyles.HexNumber);  	}  	else {  		// do the parse  		rangePoint = Int32.Parse (rangePointString);  	}  }  catch {  	// error converting  	return false;  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,characterRangePointParse,The following statement contains a magic number: if (rangePointString.Substring (0' 2) == "0x") {  	// remove 0x  	rangePointString = rangePointString.Substring (2' rangePointString.Length - 2);  	// do the parse  	rangePoint = Int32.Parse (rangePointString' System.Globalization.NumberStyles.HexNumber);  }  else {  	// do the parse  	rangePoint = Int32.Parse (rangePointString);  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,characterRangePointParse,The following statement contains a magic number: if (rangePointString.Substring (0' 2) == "0x") {  	// remove 0x  	rangePointString = rangePointString.Substring (2' rangePointString.Length - 2);  	// do the parse  	rangePoint = Int32.Parse (rangePointString' System.Globalization.NumberStyles.HexNumber);  }  else {  	// do the parse  	rangePoint = Int32.Parse (rangePointString);  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,characterRangePointParse,The following statement contains a magic number: if (rangePointString.Substring (0' 2) == "0x") {  	// remove 0x  	rangePointString = rangePointString.Substring (2' rangePointString.Length - 2);  	// do the parse  	rangePoint = Int32.Parse (rangePointString' System.Globalization.NumberStyles.HexNumber);  }  else {  	// do the parse  	rangePoint = Int32.Parse (rangePointString);  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,characterRangePointParse,The following statement contains a magic number: rangePointString = rangePointString.Substring (2' rangePointString.Length - 2);  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,characterRangePointParse,The following statement contains a magic number: rangePointString = rangePointString.Substring (2' rangePointString.Length - 2);  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,convertBitmapToPageArray,The following statement contains a magic number: for (int row = 0; row < bitmapToGenerate.Height; row++) {  	// current byte value  	byte currentValue = 0' bitsRead = 0;  	// for each column  	for (int column = 0; column < bitmapToGenerate.Width; ++column) {  		// is pixel set?  		if (bitmapToGenerate.GetPixel (column' row).ToArgb () == Color.Black.ToArgb ()) {  			// set the appropriate bit in the page  			if (m_outputConfig.byteOrder == OutputConfiguration.ByteOrder.MsbFirst)  				currentValue |= (byte)(1 << (7 - bitsRead));  			else  				currentValue |= (byte)(1 << bitsRead);  		}  		// increment number of bits read  		++bitsRead;  		// have we filled a page?  		if (bitsRead == 8) {  			// add byte to page array  			pages.Add (currentValue);  			// zero out current value  			currentValue = 0;  			// zero out bits read  			bitsRead = 0;  		}  	}  	// if we have bits left' add it as is  	if (bitsRead != 0)  		pages.Add (currentValue);  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,convertBitmapToPageArray,The following statement contains a magic number: for (int row = 0; row < bitmapToGenerate.Height; row++) {  	// current byte value  	byte currentValue = 0' bitsRead = 0;  	// for each column  	for (int column = 0; column < bitmapToGenerate.Width; ++column) {  		// is pixel set?  		if (bitmapToGenerate.GetPixel (column' row).ToArgb () == Color.Black.ToArgb ()) {  			// set the appropriate bit in the page  			if (m_outputConfig.byteOrder == OutputConfiguration.ByteOrder.MsbFirst)  				currentValue |= (byte)(1 << (7 - bitsRead));  			else  				currentValue |= (byte)(1 << bitsRead);  		}  		// increment number of bits read  		++bitsRead;  		// have we filled a page?  		if (bitsRead == 8) {  			// add byte to page array  			pages.Add (currentValue);  			// zero out current value  			currentValue = 0;  			// zero out bits read  			bitsRead = 0;  		}  	}  	// if we have bits left' add it as is  	if (bitsRead != 0)  		pages.Add (currentValue);  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,convertBitmapToPageArray,The following statement contains a magic number: for (int column = 0; column < bitmapToGenerate.Width; ++column) {  	// is pixel set?  	if (bitmapToGenerate.GetPixel (column' row).ToArgb () == Color.Black.ToArgb ()) {  		// set the appropriate bit in the page  		if (m_outputConfig.byteOrder == OutputConfiguration.ByteOrder.MsbFirst)  			currentValue |= (byte)(1 << (7 - bitsRead));  		else  			currentValue |= (byte)(1 << bitsRead);  	}  	// increment number of bits read  	++bitsRead;  	// have we filled a page?  	if (bitsRead == 8) {  		// add byte to page array  		pages.Add (currentValue);  		// zero out current value  		currentValue = 0;  		// zero out bits read  		bitsRead = 0;  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,convertBitmapToPageArray,The following statement contains a magic number: for (int column = 0; column < bitmapToGenerate.Width; ++column) {  	// is pixel set?  	if (bitmapToGenerate.GetPixel (column' row).ToArgb () == Color.Black.ToArgb ()) {  		// set the appropriate bit in the page  		if (m_outputConfig.byteOrder == OutputConfiguration.ByteOrder.MsbFirst)  			currentValue |= (byte)(1 << (7 - bitsRead));  		else  			currentValue |= (byte)(1 << bitsRead);  	}  	// increment number of bits read  	++bitsRead;  	// have we filled a page?  	if (bitsRead == 8) {  		// add byte to page array  		pages.Add (currentValue);  		// zero out current value  		currentValue = 0;  		// zero out bits read  		bitsRead = 0;  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,convertBitmapToPageArray,The following statement contains a magic number: if (bitmapToGenerate.GetPixel (column' row).ToArgb () == Color.Black.ToArgb ()) {  	// set the appropriate bit in the page  	if (m_outputConfig.byteOrder == OutputConfiguration.ByteOrder.MsbFirst)  		currentValue |= (byte)(1 << (7 - bitsRead));  	else  		currentValue |= (byte)(1 << bitsRead);  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,convertBitmapToPageArray,The following statement contains a magic number: if (m_outputConfig.byteOrder == OutputConfiguration.ByteOrder.MsbFirst)  	currentValue |= (byte)(1 << (7 - bitsRead));  else  	currentValue |= (byte)(1 << bitsRead);  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,convertBitmapToPageArray,The following statement contains a magic number: currentValue |= (byte)(1 << (7 - bitsRead));  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,convertBitmapToPageArray,The following statement contains a magic number: if (bitsRead == 8) {  	// add byte to page array  	pages.Add (currentValue);  	// zero out current value  	currentValue = 0;  	// zero out bits read  	bitsRead = 0;  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: for (int row = 0; row != height; ++row) {  	for (int col = 0; col != width; ++col) {  		// get the byte containing the bit we want  		int srcIdx = row * rowMajorPagesPerRow + (col / 8);  		int page = (byte)rowMajorPages [srcIdx];  		// get the bit mask for the bit we want  		int bitMask = getBitMask (7 - (col % 8));  		// set the bit in the column major data  		if ((page & bitMask) != 0) {  			int dstIdx = (row / 8) * colMajorPagesPerRow + col;  			int p = (byte)colMajorPages [dstIdx];  			colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  		}  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: for (int row = 0; row != height; ++row) {  	for (int col = 0; col != width; ++col) {  		// get the byte containing the bit we want  		int srcIdx = row * rowMajorPagesPerRow + (col / 8);  		int page = (byte)rowMajorPages [srcIdx];  		// get the bit mask for the bit we want  		int bitMask = getBitMask (7 - (col % 8));  		// set the bit in the column major data  		if ((page & bitMask) != 0) {  			int dstIdx = (row / 8) * colMajorPagesPerRow + col;  			int p = (byte)colMajorPages [dstIdx];  			colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  		}  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: for (int row = 0; row != height; ++row) {  	for (int col = 0; col != width; ++col) {  		// get the byte containing the bit we want  		int srcIdx = row * rowMajorPagesPerRow + (col / 8);  		int page = (byte)rowMajorPages [srcIdx];  		// get the bit mask for the bit we want  		int bitMask = getBitMask (7 - (col % 8));  		// set the bit in the column major data  		if ((page & bitMask) != 0) {  			int dstIdx = (row / 8) * colMajorPagesPerRow + col;  			int p = (byte)colMajorPages [dstIdx];  			colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  		}  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: for (int row = 0; row != height; ++row) {  	for (int col = 0; col != width; ++col) {  		// get the byte containing the bit we want  		int srcIdx = row * rowMajorPagesPerRow + (col / 8);  		int page = (byte)rowMajorPages [srcIdx];  		// get the bit mask for the bit we want  		int bitMask = getBitMask (7 - (col % 8));  		// set the bit in the column major data  		if ((page & bitMask) != 0) {  			int dstIdx = (row / 8) * colMajorPagesPerRow + col;  			int p = (byte)colMajorPages [dstIdx];  			colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  		}  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: for (int row = 0; row != height; ++row) {  	for (int col = 0; col != width; ++col) {  		// get the byte containing the bit we want  		int srcIdx = row * rowMajorPagesPerRow + (col / 8);  		int page = (byte)rowMajorPages [srcIdx];  		// get the bit mask for the bit we want  		int bitMask = getBitMask (7 - (col % 8));  		// set the bit in the column major data  		if ((page & bitMask) != 0) {  			int dstIdx = (row / 8) * colMajorPagesPerRow + col;  			int p = (byte)colMajorPages [dstIdx];  			colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  		}  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: for (int col = 0; col != width; ++col) {  	// get the byte containing the bit we want  	int srcIdx = row * rowMajorPagesPerRow + (col / 8);  	int page = (byte)rowMajorPages [srcIdx];  	// get the bit mask for the bit we want  	int bitMask = getBitMask (7 - (col % 8));  	// set the bit in the column major data  	if ((page & bitMask) != 0) {  		int dstIdx = (row / 8) * colMajorPagesPerRow + col;  		int p = (byte)colMajorPages [dstIdx];  		colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: for (int col = 0; col != width; ++col) {  	// get the byte containing the bit we want  	int srcIdx = row * rowMajorPagesPerRow + (col / 8);  	int page = (byte)rowMajorPages [srcIdx];  	// get the bit mask for the bit we want  	int bitMask = getBitMask (7 - (col % 8));  	// set the bit in the column major data  	if ((page & bitMask) != 0) {  		int dstIdx = (row / 8) * colMajorPagesPerRow + col;  		int p = (byte)colMajorPages [dstIdx];  		colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: for (int col = 0; col != width; ++col) {  	// get the byte containing the bit we want  	int srcIdx = row * rowMajorPagesPerRow + (col / 8);  	int page = (byte)rowMajorPages [srcIdx];  	// get the bit mask for the bit we want  	int bitMask = getBitMask (7 - (col % 8));  	// set the bit in the column major data  	if ((page & bitMask) != 0) {  		int dstIdx = (row / 8) * colMajorPagesPerRow + col;  		int p = (byte)colMajorPages [dstIdx];  		colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: for (int col = 0; col != width; ++col) {  	// get the byte containing the bit we want  	int srcIdx = row * rowMajorPagesPerRow + (col / 8);  	int page = (byte)rowMajorPages [srcIdx];  	// get the bit mask for the bit we want  	int bitMask = getBitMask (7 - (col % 8));  	// set the bit in the column major data  	if ((page & bitMask) != 0) {  		int dstIdx = (row / 8) * colMajorPagesPerRow + col;  		int p = (byte)colMajorPages [dstIdx];  		colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: for (int col = 0; col != width; ++col) {  	// get the byte containing the bit we want  	int srcIdx = row * rowMajorPagesPerRow + (col / 8);  	int page = (byte)rowMajorPages [srcIdx];  	// get the bit mask for the bit we want  	int bitMask = getBitMask (7 - (col % 8));  	// set the bit in the column major data  	if ((page & bitMask) != 0) {  		int dstIdx = (row / 8) * colMajorPagesPerRow + col;  		int p = (byte)colMajorPages [dstIdx];  		colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: if ((page & bitMask) != 0) {  	int dstIdx = (row / 8) * colMajorPagesPerRow + col;  	int p = (byte)colMajorPages [dstIdx];  	colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: if ((page & bitMask) != 0) {  	int dstIdx = (row / 8) * colMajorPagesPerRow + col;  	int p = (byte)colMajorPages [dstIdx];  	colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,transposePageArray,The following statement contains a magic number: colMajorPages [dstIdx] = (byte)(p | getBitMask (row % 8));  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The following statement contains a magic number: for (int row = 0; row != rowCount; ++row) {  	data [row] = "";  	// iterator over columns  	for (int col = 0; col != colCount; ++col) {  		// get the byte to output  		int page = (byte)pages [row * colCount + col];  		// add leading character  		data [row] += m_outputConfig.byteLeadingString;  		// check format  		if (m_outputConfig.byteFormat == OutputConfiguration.ByteFormat.Hex) {  			// convert byte to hex  			data [row] += page.ToString ("X").PadLeft (2' '0');  		}  		else {  			// convert byte to binary  			data [row] += Convert.ToString (page' 2).PadLeft (8' '0');  		}  		// add comma  		data [row] += "' ";  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The following statement contains a magic number: for (int row = 0; row != rowCount; ++row) {  	data [row] = "";  	// iterator over columns  	for (int col = 0; col != colCount; ++col) {  		// get the byte to output  		int page = (byte)pages [row * colCount + col];  		// add leading character  		data [row] += m_outputConfig.byteLeadingString;  		// check format  		if (m_outputConfig.byteFormat == OutputConfiguration.ByteFormat.Hex) {  			// convert byte to hex  			data [row] += page.ToString ("X").PadLeft (2' '0');  		}  		else {  			// convert byte to binary  			data [row] += Convert.ToString (page' 2).PadLeft (8' '0');  		}  		// add comma  		data [row] += "' ";  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The following statement contains a magic number: for (int row = 0; row != rowCount; ++row) {  	data [row] = "";  	// iterator over columns  	for (int col = 0; col != colCount; ++col) {  		// get the byte to output  		int page = (byte)pages [row * colCount + col];  		// add leading character  		data [row] += m_outputConfig.byteLeadingString;  		// check format  		if (m_outputConfig.byteFormat == OutputConfiguration.ByteFormat.Hex) {  			// convert byte to hex  			data [row] += page.ToString ("X").PadLeft (2' '0');  		}  		else {  			// convert byte to binary  			data [row] += Convert.ToString (page' 2).PadLeft (8' '0');  		}  		// add comma  		data [row] += "' ";  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The following statement contains a magic number: for (int col = 0; col != colCount; ++col) {  	// get the byte to output  	int page = (byte)pages [row * colCount + col];  	// add leading character  	data [row] += m_outputConfig.byteLeadingString;  	// check format  	if (m_outputConfig.byteFormat == OutputConfiguration.ByteFormat.Hex) {  		// convert byte to hex  		data [row] += page.ToString ("X").PadLeft (2' '0');  	}  	else {  		// convert byte to binary  		data [row] += Convert.ToString (page' 2).PadLeft (8' '0');  	}  	// add comma  	data [row] += "' ";  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The following statement contains a magic number: for (int col = 0; col != colCount; ++col) {  	// get the byte to output  	int page = (byte)pages [row * colCount + col];  	// add leading character  	data [row] += m_outputConfig.byteLeadingString;  	// check format  	if (m_outputConfig.byteFormat == OutputConfiguration.ByteFormat.Hex) {  		// convert byte to hex  		data [row] += page.ToString ("X").PadLeft (2' '0');  	}  	else {  		// convert byte to binary  		data [row] += Convert.ToString (page' 2).PadLeft (8' '0');  	}  	// add comma  	data [row] += "' ";  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The following statement contains a magic number: for (int col = 0; col != colCount; ++col) {  	// get the byte to output  	int page = (byte)pages [row * colCount + col];  	// add leading character  	data [row] += m_outputConfig.byteLeadingString;  	// check format  	if (m_outputConfig.byteFormat == OutputConfiguration.ByteFormat.Hex) {  		// convert byte to hex  		data [row] += page.ToString ("X").PadLeft (2' '0');  	}  	else {  		// convert byte to binary  		data [row] += Convert.ToString (page' 2).PadLeft (8' '0');  	}  	// add comma  	data [row] += "' ";  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The following statement contains a magic number: if (m_outputConfig.byteFormat == OutputConfiguration.ByteFormat.Hex) {  	// convert byte to hex  	data [row] += page.ToString ("X").PadLeft (2' '0');  }  else {  	// convert byte to binary  	data [row] += Convert.ToString (page' 2).PadLeft (8' '0');  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The following statement contains a magic number: if (m_outputConfig.byteFormat == OutputConfiguration.ByteFormat.Hex) {  	// convert byte to hex  	data [row] += page.ToString ("X").PadLeft (2' '0');  }  else {  	// convert byte to binary  	data [row] += Convert.ToString (page' 2).PadLeft (8' '0');  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The following statement contains a magic number: if (m_outputConfig.byteFormat == OutputConfiguration.ByteFormat.Hex) {  	// convert byte to hex  	data [row] += page.ToString ("X").PadLeft (2' '0');  }  else {  	// convert byte to binary  	data [row] += Convert.ToString (page' 2).PadLeft (8' '0');  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The following statement contains a magic number: data [row] += page.ToString ("X").PadLeft (2' '0');  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The following statement contains a magic number: data [row] += Convert.ToString (page' 2).PadLeft (8' '0');  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateData,The following statement contains a magic number: data [row] += Convert.ToString (page' 2).PadLeft (8' '0');  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateVisualizer,The following statement contains a magic number: for (int row = 0; row != height; ++row) {  	// each row is started with a line comment  	visualizer [row] = "// ";  	// iterator over columns  	for (int col = 0; col != width; ++col) {  		// get the byte containing the bit we want  		int page = (layout == OutputConfiguration.BitLayout.RowMajor) ? (byte)pages [row * colCount + (col / 8)] : (byte)pages [(row / 8) * colCount + col];  		// make a mask to extract the bit we want  		int bitMask = (layout == OutputConfiguration.BitLayout.RowMajor) ? getBitMask (7 - (col % 8)) : getBitMask (row % 8);  		// check if bit is set  		visualizer [row] += (bitMask & page) != 0 ? m_outputConfig.bmpVisualizerChar : " ";  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateVisualizer,The following statement contains a magic number: for (int row = 0; row != height; ++row) {  	// each row is started with a line comment  	visualizer [row] = "// ";  	// iterator over columns  	for (int col = 0; col != width; ++col) {  		// get the byte containing the bit we want  		int page = (layout == OutputConfiguration.BitLayout.RowMajor) ? (byte)pages [row * colCount + (col / 8)] : (byte)pages [(row / 8) * colCount + col];  		// make a mask to extract the bit we want  		int bitMask = (layout == OutputConfiguration.BitLayout.RowMajor) ? getBitMask (7 - (col % 8)) : getBitMask (row % 8);  		// check if bit is set  		visualizer [row] += (bitMask & page) != 0 ? m_outputConfig.bmpVisualizerChar : " ";  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateVisualizer,The following statement contains a magic number: for (int row = 0; row != height; ++row) {  	// each row is started with a line comment  	visualizer [row] = "// ";  	// iterator over columns  	for (int col = 0; col != width; ++col) {  		// get the byte containing the bit we want  		int page = (layout == OutputConfiguration.BitLayout.RowMajor) ? (byte)pages [row * colCount + (col / 8)] : (byte)pages [(row / 8) * colCount + col];  		// make a mask to extract the bit we want  		int bitMask = (layout == OutputConfiguration.BitLayout.RowMajor) ? getBitMask (7 - (col % 8)) : getBitMask (row % 8);  		// check if bit is set  		visualizer [row] += (bitMask & page) != 0 ? m_outputConfig.bmpVisualizerChar : " ";  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateVisualizer,The following statement contains a magic number: for (int row = 0; row != height; ++row) {  	// each row is started with a line comment  	visualizer [row] = "// ";  	// iterator over columns  	for (int col = 0; col != width; ++col) {  		// get the byte containing the bit we want  		int page = (layout == OutputConfiguration.BitLayout.RowMajor) ? (byte)pages [row * colCount + (col / 8)] : (byte)pages [(row / 8) * colCount + col];  		// make a mask to extract the bit we want  		int bitMask = (layout == OutputConfiguration.BitLayout.RowMajor) ? getBitMask (7 - (col % 8)) : getBitMask (row % 8);  		// check if bit is set  		visualizer [row] += (bitMask & page) != 0 ? m_outputConfig.bmpVisualizerChar : " ";  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateVisualizer,The following statement contains a magic number: for (int row = 0; row != height; ++row) {  	// each row is started with a line comment  	visualizer [row] = "// ";  	// iterator over columns  	for (int col = 0; col != width; ++col) {  		// get the byte containing the bit we want  		int page = (layout == OutputConfiguration.BitLayout.RowMajor) ? (byte)pages [row * colCount + (col / 8)] : (byte)pages [(row / 8) * colCount + col];  		// make a mask to extract the bit we want  		int bitMask = (layout == OutputConfiguration.BitLayout.RowMajor) ? getBitMask (7 - (col % 8)) : getBitMask (row % 8);  		// check if bit is set  		visualizer [row] += (bitMask & page) != 0 ? m_outputConfig.bmpVisualizerChar : " ";  	}  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateVisualizer,The following statement contains a magic number: for (int col = 0; col != width; ++col) {  	// get the byte containing the bit we want  	int page = (layout == OutputConfiguration.BitLayout.RowMajor) ? (byte)pages [row * colCount + (col / 8)] : (byte)pages [(row / 8) * colCount + col];  	// make a mask to extract the bit we want  	int bitMask = (layout == OutputConfiguration.BitLayout.RowMajor) ? getBitMask (7 - (col % 8)) : getBitMask (row % 8);  	// check if bit is set  	visualizer [row] += (bitMask & page) != 0 ? m_outputConfig.bmpVisualizerChar : " ";  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateVisualizer,The following statement contains a magic number: for (int col = 0; col != width; ++col) {  	// get the byte containing the bit we want  	int page = (layout == OutputConfiguration.BitLayout.RowMajor) ? (byte)pages [row * colCount + (col / 8)] : (byte)pages [(row / 8) * colCount + col];  	// make a mask to extract the bit we want  	int bitMask = (layout == OutputConfiguration.BitLayout.RowMajor) ? getBitMask (7 - (col % 8)) : getBitMask (row % 8);  	// check if bit is set  	visualizer [row] += (bitMask & page) != 0 ? m_outputConfig.bmpVisualizerChar : " ";  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateVisualizer,The following statement contains a magic number: for (int col = 0; col != width; ++col) {  	// get the byte containing the bit we want  	int page = (layout == OutputConfiguration.BitLayout.RowMajor) ? (byte)pages [row * colCount + (col / 8)] : (byte)pages [(row / 8) * colCount + col];  	// make a mask to extract the bit we want  	int bitMask = (layout == OutputConfiguration.BitLayout.RowMajor) ? getBitMask (7 - (col % 8)) : getBitMask (row % 8);  	// check if bit is set  	visualizer [row] += (bitMask & page) != 0 ? m_outputConfig.bmpVisualizerChar : " ";  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateVisualizer,The following statement contains a magic number: for (int col = 0; col != width; ++col) {  	// get the byte containing the bit we want  	int page = (layout == OutputConfiguration.BitLayout.RowMajor) ? (byte)pages [row * colCount + (col / 8)] : (byte)pages [(row / 8) * colCount + col];  	// make a mask to extract the bit we want  	int bitMask = (layout == OutputConfiguration.BitLayout.RowMajor) ? getBitMask (7 - (col % 8)) : getBitMask (row % 8);  	// check if bit is set  	visualizer [row] += (bitMask & page) != 0 ? m_outputConfig.bmpVisualizerChar : " ";  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,generateVisualizer,The following statement contains a magic number: for (int col = 0; col != width; ++col) {  	// get the byte containing the bit we want  	int page = (layout == OutputConfiguration.BitLayout.RowMajor) ? (byte)pages [row * colCount + (col / 8)] : (byte)pages [(row / 8) * colCount + col];  	// make a mask to extract the bit we want  	int bitMask = (layout == OutputConfiguration.BitLayout.RowMajor) ? getBitMask (7 - (col % 8)) : getBitMask (row % 8);  	// check if bit is set  	visualizer [row] += (bitMask & page) != 0 ? m_outputConfig.bmpVisualizerChar : " ";  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,convertValueByDescriptorFormat,The following statement contains a magic number: if (descFormat == OutputConfiguration.DescriptorFormat.DisplayInBytes) {  	// get value in bytes  	int valueInBytes = valueInBits / 8;  	if (valueInBits % 8 != 0)  		valueInBytes++;  	// set into string  	return valueInBytes;  }  else {  	// no conversion required  	return valueInBits;  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,convertValueByDescriptorFormat,The following statement contains a magic number: if (descFormat == OutputConfiguration.DescriptorFormat.DisplayInBytes) {  	// get value in bytes  	int valueInBytes = valueInBits / 8;  	if (valueInBits % 8 != 0)  		valueInBytes++;  	// set into string  	return valueInBytes;  }  else {  	// no conversion required  	return valueInBits;  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,convertValueByDescriptorFormat,The following statement contains a magic number: if (valueInBits % 8 != 0)  	valueInBytes++;  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,getCharacterDisplayString,The following statement contains a magic number: if (character < 255) {  	// as character  	return String.Format ("'{0}'"' character);  }  else {  	// display as number  	int numericValue = (int)character;  	// return string  	return numericValue.ToString ();  }  
Magic Number,TheDotFactory,MainForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\MainForm.cs,outputSyntaxColoredString,The following statement contains a magic number: if (lines.Length > 1500) {  	// just set text  	outputTextBox.Text = outputString;  	return;  }  
Magic Number,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The following statement contains a magic number: outputConfig.spaceGenerationPixels = (int)System.Convert.ToInt32 (txtSpacePixels.Text' 10);  
Magic Number,TheDotFactory,OutputConfigurationForm,C:\repos\pavius_The-Dot-Factory\TheDotFactory\OutputConfigurationForm.cs,loadFormToOutputConfiguration,The following statement contains a magic number: outputConfig.lookupBlocksNewAfterCharCount = System.Convert.ToInt32 (txtLookupBlocksNewAfterCharCount.Text' 10);  
