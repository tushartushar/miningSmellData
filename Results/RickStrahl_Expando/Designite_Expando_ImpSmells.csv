Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Westwind.Utilities.Dynamic,PropertyBag,D:\newReposJune17\RickStrahl_Expando\Expando\PropertyBag.cs,WriteXml,Cyclomatic complexity of the method is 8
Complex Method,Westwind.Utilities.Dynamic,PropertyBag,D:\newReposJune17\RickStrahl_Expando\Expando\PropertyBag.cs,ReadXml,Cyclomatic complexity of the method is 8
Complex Method,Westwind.Utilities.Dynamic,SerializationUtils,D:\newReposJune17\RickStrahl_Expando\Expando\Utilities\SerializationUtils.cs,ObjectToString,Cyclomatic complexity of the method is 7
Long Parameter List,Westwind.Utilities.Dynamic,Expando,D:\newReposJune17\RickStrahl_Expando\Expando\Expando.cs,InvokeMethod,The method has 4 parameters.
Long Parameter List,Westwind.Utilities.Dynamic,SerializationUtils,D:\newReposJune17\RickStrahl_Expando\Expando\Utilities\SerializationUtils.cs,DeSerializeObject,The method has 4 parameters.
Long Statement,Westwind.Utilities.Dynamic,SerializationUtils,D:\newReposJune17\RickStrahl_Expando\Expando\Utilities\SerializationUtils.cs,SerializeObject,The length of the statement  "		Debug.Write ("SerializeObject failed with : " + ex.GetBaseException ().Message + "\r\n" + (ex.InnerException != null ? ex.InnerException.Message : "")' "West Wind"); " is 165.
Empty Catch Block,Westwind.Utilities.Dynamic,Expando,D:\newReposJune17\RickStrahl_Expando\Expando\Expando.cs,TryGetMember,The method has an empty catch block.
Empty Catch Block,Westwind.Utilities.Dynamic,Expando,D:\newReposJune17\RickStrahl_Expando\Expando\Expando.cs,TryInvokeMember,The method has an empty catch block.
Magic Number,Westwind.Utilities.Dynamic,PropertyBag,D:\newReposJune17\RickStrahl_Expando\Expando\PropertyBag.cs,ReadXml,The following statement contains a magic number: while (reader.Read ()) {  	if (reader.NodeType == XmlNodeType.Element && reader.Name == "key") {  		string xmlType = null;  		string name = reader.ReadElementContentAsString ();  		// item element  		reader.ReadToNextSibling ("value");  		if (reader.MoveToNextAttribute ())  			xmlType = reader.Value;  		if (string.IsNullOrEmpty (xmlType))  			xmlType = "string";  		reader.MoveToContent ();  		TValue value;  		string strval = String.Empty;  		if (xmlType == "nil")  			value = default(TValue);  		// null  		// .NET types that don't map to XML we have to manually  		// deserialize  		else if (xmlType.StartsWith ("___")) {  			// skip ahead to serialized value element                                                  			while (reader.Read () && reader.NodeType != XmlNodeType.Element) {  			}  			Type type = Utilities.GetTypeFromName (xmlType.Substring (3));  			XmlSerializer ser = new XmlSerializer (type);  			value = (TValue)ser.Deserialize (reader);  		} else  			value = (TValue)reader.ReadElementContentAs (Utilities.MapXmlTypeToType (xmlType)' null);  		this.Add (name' value);  	}  }  
Magic Number,Westwind.Utilities.Dynamic,PropertyBag,D:\newReposJune17\RickStrahl_Expando\Expando\PropertyBag.cs,ReadXml,The following statement contains a magic number: if (reader.NodeType == XmlNodeType.Element && reader.Name == "key") {  	string xmlType = null;  	string name = reader.ReadElementContentAsString ();  	// item element  	reader.ReadToNextSibling ("value");  	if (reader.MoveToNextAttribute ())  		xmlType = reader.Value;  	if (string.IsNullOrEmpty (xmlType))  		xmlType = "string";  	reader.MoveToContent ();  	TValue value;  	string strval = String.Empty;  	if (xmlType == "nil")  		value = default(TValue);  	// null  	// .NET types that don't map to XML we have to manually  	// deserialize  	else if (xmlType.StartsWith ("___")) {  		// skip ahead to serialized value element                                                  		while (reader.Read () && reader.NodeType != XmlNodeType.Element) {  		}  		Type type = Utilities.GetTypeFromName (xmlType.Substring (3));  		XmlSerializer ser = new XmlSerializer (type);  		value = (TValue)ser.Deserialize (reader);  	} else  		value = (TValue)reader.ReadElementContentAs (Utilities.MapXmlTypeToType (xmlType)' null);  	this.Add (name' value);  }  
Magic Number,Westwind.Utilities.Dynamic,PropertyBag,D:\newReposJune17\RickStrahl_Expando\Expando\PropertyBag.cs,ReadXml,The following statement contains a magic number: if (xmlType == "nil")  	value = default(TValue);  // null  // .NET types that don't map to XML we have to manually  // deserialize  else if (xmlType.StartsWith ("___")) {  	// skip ahead to serialized value element                                                  	while (reader.Read () && reader.NodeType != XmlNodeType.Element) {  	}  	Type type = Utilities.GetTypeFromName (xmlType.Substring (3));  	XmlSerializer ser = new XmlSerializer (type);  	value = (TValue)ser.Deserialize (reader);  } else  	value = (TValue)reader.ReadElementContentAs (Utilities.MapXmlTypeToType (xmlType)' null);  
Magic Number,Westwind.Utilities.Dynamic,PropertyBag,D:\newReposJune17\RickStrahl_Expando\Expando\PropertyBag.cs,ReadXml,The following statement contains a magic number: if (xmlType.StartsWith ("___")) {  	// skip ahead to serialized value element                                                  	while (reader.Read () && reader.NodeType != XmlNodeType.Element) {  	}  	Type type = Utilities.GetTypeFromName (xmlType.Substring (3));  	XmlSerializer ser = new XmlSerializer (type);  	value = (TValue)ser.Deserialize (reader);  } else  	value = (TValue)reader.ReadElementContentAs (Utilities.MapXmlTypeToType (xmlType)' null);  
Magic Number,Westwind.Utilities.Dynamic,SerializationUtils,D:\newReposJune17\RickStrahl_Expando\Expando\Utilities\SerializationUtils.cs,SerializeObject,The following statement contains a magic number: if (!binarySerialization) {  	XmlTextWriter writer = null;  	try {  		XmlSerializer serializer = new XmlSerializer (instance.GetType ());  		// Create an XmlTextWriter using a FileStream.  		Stream fs = new FileStream (fileName' FileMode.Create);  		writer = new XmlTextWriter (fs' new UTF8Encoding ());  		writer.Formatting = Formatting.Indented;  		writer.IndentChar = ' ';  		writer.Indentation = 3;  		// Serialize using the XmlTextWriter.  		serializer.Serialize (writer' instance);  	} catch (Exception ex) {  		Debug.Write ("SerializeObject failed with : " + ex.Message' "West Wind");  		retVal = false;  	} finally {  		if (writer != null)  			writer.Close ();  	}  } else {  	Stream fs = null;  	try {  		BinaryFormatter serializer = new BinaryFormatter ();  		fs = new FileStream (fileName' FileMode.Create);  		serializer.Serialize (fs' instance);  	} catch {  		retVal = false;  	} finally {  		if (fs != null)  			fs.Close ();  	}  }  
Magic Number,Westwind.Utilities.Dynamic,SerializationUtils,D:\newReposJune17\RickStrahl_Expando\Expando\Utilities\SerializationUtils.cs,SerializeObject,The following statement contains a magic number: try {  	XmlSerializer serializer = new XmlSerializer (instance.GetType ());  	// Create an XmlTextWriter using a FileStream.  	Stream fs = new FileStream (fileName' FileMode.Create);  	writer = new XmlTextWriter (fs' new UTF8Encoding ());  	writer.Formatting = Formatting.Indented;  	writer.IndentChar = ' ';  	writer.Indentation = 3;  	// Serialize using the XmlTextWriter.  	serializer.Serialize (writer' instance);  } catch (Exception ex) {  	Debug.Write ("SerializeObject failed with : " + ex.Message' "West Wind");  	retVal = false;  } finally {  	if (writer != null)  		writer.Close ();  }  
Magic Number,Westwind.Utilities.Dynamic,SerializationUtils,D:\newReposJune17\RickStrahl_Expando\Expando\Utilities\SerializationUtils.cs,SerializeObject,The following statement contains a magic number: writer.Indentation = 3;  
Magic Number,Westwind.Utilities.Dynamic,SerializationUtils,D:\newReposJune17\RickStrahl_Expando\Expando\Utilities\SerializationUtils.cs,SerializeObject,The following statement contains a magic number: try {  	XmlSerializer serializer = new XmlSerializer (instance.GetType ());  	// Create an XmlTextWriter using a FileStream.  	writer.Formatting = Formatting.Indented;  	writer.IndentChar = ' ';  	writer.Indentation = 3;  	// Serialize using the XmlTextWriter.  	serializer.Serialize (writer' instance);  } catch (Exception ex) {  	Debug.Write ("SerializeObject failed with : " + ex.GetBaseException ().Message + "\r\n" + (ex.InnerException != null ? ex.InnerException.Message : "")' "West Wind");  	if (throwExceptions)  		throw;  	retVal = false;  }  
Magic Number,Westwind.Utilities.Dynamic,SerializationUtils,D:\newReposJune17\RickStrahl_Expando\Expando\Utilities\SerializationUtils.cs,SerializeObject,The following statement contains a magic number: writer.Indentation = 3;  
