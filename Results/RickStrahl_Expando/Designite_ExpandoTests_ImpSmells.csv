Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Westwind.Utilities,SerializationUtils,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\SerializationUtils.cs,SerializeObject,The length of the statement  "                Debug.Write("SerializeObject failed with : " + ex.GetBaseException().Message + "\r\n" + (ex.InnerException != null ? ex.InnerException.Message : "")' "West Wind"); " is 163.
Magic Number,Westwind.Utilities,SerializationUtils,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\SerializationUtils.cs,SerializeObject,The following statement contains a magic number: writer.Indentation = 3;
Magic Number,Westwind.Utilities,SerializationUtils,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\SerializationUtils.cs,SerializeObject,The following statement contains a magic number: writer.Indentation = 3;
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,ExandoBasicTests,The following statement contains a magic number: exd.Accesses = 10;
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,ExandoBasicTests,The following statement contains a magic number: ex["TotalOrderAmounts"] = 51233.99M;
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,AddAndReadDynamicPropertiesTest,The following statement contains a magic number: int count = 10;
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,IterateOverDynamicPropertiesTest,The following statement contains a magic number: exd.Accesses = 10;
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,IterateOverDynamicPropertiesTest,The following statement contains a magic number: ex["Count"] = 10;
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,IterateOverDynamicPropertiesTest,The following statement contains a magic number: Assert.IsTrue(ex.Properties.Count == 4);
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,TwoWayJsonSerializeExpandoTyped,The following statement contains a magic number: exd.Accesses = 10;
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,TwoWayJsonSerializeExpandoTyped,The following statement contains a magic number: ex["TotalOrderAmounts"] = 51233.99M;
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,TwoWayXmlSerializeExpandoTyped,The following statement contains a magic number: exd.Accesses = 10;
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,TwoWayXmlSerializeExpandoTyped,The following statement contains a magic number: ex["TotalOrderAmounts"] = 51233.99M;
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,ExpandoObjectJsonTest,The following statement contains a magic number: ex.Count = 10;
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,ExpandoObjectJsonTest,The following statement contains a magic number: ex.Completed = DateTime.Now.AddHours(2);
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,InvalidAssignmentErrorOnStaticProperty,The following statement contains a magic number: dynUser.Name = 100;
Magic Number,ExpandoTests,ExpandoTests,C:\research\architectureSmells\repos\RickStrahl_Expando\ExpandoTests\ExpandoTests.cs,ExpandoFromDictionary,The following statement contains a magic number: var dict = new Dictionary<string' object>()              {                  {"Name"' "Rick"}'                  {"Company"' "West Wind"}'                  {"Accesses"' 2}              };
