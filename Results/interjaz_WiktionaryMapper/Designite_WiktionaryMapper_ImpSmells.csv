Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Memoling.Tools.WiktionaryMapper.Data,BinaryExpressionOutputResult,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\BinaryExpressionOutputResult.cs,RemoveDuplicates,The method has 5 parameters.
Long Statement,Memoling.Tools.WiktionaryMapper.Data,BinaryExpressionOutputResult,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\BinaryExpressionOutputResult.cs,SqlCreateStatement,The length of the statement  "	string sql = "CREATE TABLE wiki_" + Name + " (" + "ExpressionA VARCHAR(MAX) NOT NULL'" + "ExpressionB VARCHAR(MAX) NOT NULL'" + "Language VARCHAR(MAX) NOT NULL" + ");\n"; " is 170.
Long Statement,Memoling.Tools.WiktionaryMapper.Data,BinaryExpressionOutputResult,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\BinaryExpressionOutputResult.cs,SqlInsertStatement,The length of the statement  "	return "INSERT INTO wiki_" + Name + " VALUES ('" + ExpressionA.EscapeSql () + "'''" + ExpressionB.EscapeSql () + "'''" + Language + "');\n"; " is 140.
Long Statement,Memoling.Tools.WiktionaryMapper.Data,PartOfSpeech,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\PartOfSpeech.cs,SqlCreateStatement,The length of the statement  "	string sql = "CREATE TABLE wiki_Definitions (" + "Expression VARCHAR(MAX) NOT NULL'" + "Language VARCHAR(MAX) NOT NULL' " + "PartOfSpeech VARCHAR(MAX) NOT NULL'" + "Definition VARCHAR(MAX) NOT NULL" + ")" + SqlDelimiter + "\n"; " is 227.
Long Statement,Memoling.Tools.WiktionaryMapper.Data,PartOfSpeech,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\PartOfSpeech.cs,SqlInsertStatement,The length of the statement  "	return "INSERT INTO wiki_Definitions VALUES ('" + Expression.EscapeSql () + "'''" + Language + "'''" + Part.EscapeSql () + "'''" + Definition.EscapeSql () + "')" + SqlDelimiter + "\n"; " is 184.
Long Statement,Memoling.Tools.WiktionaryMapper.Data,PartOfSpeech,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\PartOfSpeech.cs,PlainTextToString,The length of the statement  "	return string.Format ("{0}{4}{1}{4}{2}{4}{3}\n"' Expression' Language' Part' Definition.Replace ("\n"' "\\n")' PlainTextDelimiter); " is 131.
Long Statement,Memoling.Tools.WiktionaryMapper.Data,Translation,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\Translation.cs,ToString,The length of the statement  "	return (LanguageA ?? "null") + "|" + (ExpressionA ?? "null") + "|" + (LanguageB ?? "null") + "|" + (ExpressionB ?? "null"); " is 123.
Long Statement,Memoling.Tools.WiktionaryMapper.Data,TranslationsWithMeaning,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\TranslationsWithMeaning.cs,SqlCreateStatement,The length of the statement  "	sql += "CREATE TABLE wiki_TranslationMeanings (" + "MeaningId INT NOT NULL'" + "Meaning VARCHAR(MAX) NOT NULL" + ")" + SqlDelimiter + "\n"; " is 139.
Long Statement,Memoling.Tools.WiktionaryMapper.Data,TranslationsWithMeaning,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\TranslationsWithMeaning.cs,SqlCreateStatement,The length of the statement  "	sql += "CREATE TABLE wiki_Translations (" + "ExpressionA VARCHAR(MAX) NOT NULL'" + "ExpressionB VARCHAR(MAX) NOT NULL'" + "LanguageA VARCHAR(MAX) NOT NULL'" + "LanguageB VARCHAR(MAX) NOT NULL' " + "MeaningId INT NULL" + ")" + SqlDelimiter + "\n"; " is 246.
Long Statement,Memoling.Tools.WiktionaryMapper.Data,TranslationsWithMeaning,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\TranslationsWithMeaning.cs,SqlInsertStatement,The length of the statement  "		sql.Append ("INSERT INTO wiki_TranslationMeanings VALUES(" + MeaningId + "' '" + Meaning.EscapeSql () + "')" + SqlDelimiter + "\n"); " is 132.
Long Statement,Memoling.Tools.WiktionaryMapper.Data,TranslationsWithMeaning,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\TranslationsWithMeaning.cs,SqlInsertStatement,The length of the statement  "		sql.Append ("INSERT INTO wiki_Translations VALUES ('" + translation.ExpressionA.EscapeSql () + "'''" + translation.ExpressionB.EscapeSql () + "'''" + translation.LanguageA + "'''" + translation.LanguageB + "''" + (hasMeaning ? MeaningId.ToString () : "null") + ")" + SqlDelimiter + "\n"); " is 288.
Long Statement,Memoling.Tools.WiktionaryMapper.Data,TranslationsWithMeaning,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\TranslationsWithMeaning.cs,PlainTextToString,The length of the statement  "		return string.Format ("{0}{5}{1}{5}{2}{5}{3}{4}\n"' translation.ExpressionA' translation.ExpressionB' translation.LanguageA' translation.LanguageB' Meaning' PlainTextDelimiter); " is 177.
Magic Number,Memoling.Tools.WiktionaryMapper,DataProcessorConfigBuilder,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\DataProcessorConfigBuilder.cs,BuildCommonTagTransformation,The following statement contains a magic number: commonTagTransformations = new List<TagTransformation> () {  	// Remove image tags  	new TagTransformation () {  		TagPattern = TagPatterns.Image'  	}'  	// Remove audio tags  	new TagTransformation () {  		TagPattern = TagPatterns.Audio'  	}'  	// Remove cite tags  	new TagTransformation () {  		TagPattern = TagPatterns.Cite  	}'  	// Remove Category  	new TagTransformation () {  		TagPattern = TagPatterns.Category  	}'  	// Remove Quotes  	new TagTransformation () {  		TagPattern = TagPatterns.Quote  	}'  	// Remove explicit references  	new TagTransformation () {  		TagPattern = TagPatterns.ReferenceExplicit  	}'  	// Remove picture dictionaries  	new TagTransformation () {  		TagPattern = TagPatterns.PictureDictionary  	}'  	// Remove orphan lines  	new TagTransformation () {  		TagPattern = TagPatterns.OrphanLine  	}'  	// Shorten tags  	new TagTransformation () {  		TagPattern = TagPatterns.Tag'  		Transformation = (Match match) =>  {  			return match.Value.Substring (1' match.Value.Length - 2);  		}  	}'  	// --------------------------------------------- Cleaning  	// Remove empty enumerations  	new TagTransformation () {  		TagPattern = TagPatterns.EmptyEnumeration'  	}'  	// Remove 3 new lines in a row  	new TagTransformation () {  		TagPattern = TagPatterns.NL3  	}'  	// Remove reference tag (as last)  	new TagTransformation () {  		TagPattern = TagPatterns.Reference'  		Transformation = (Match match) =>  {  			return match.Value.Substring (2' match.Value.Length - 4);  		}  	}'  };  
Magic Number,Memoling.Tools.WiktionaryMapper,DataProcessorConfigBuilder,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\DataProcessorConfigBuilder.cs,BuildCommonTagTransformation,The following statement contains a magic number: commonTagTransformations = new List<TagTransformation> () {  	// Remove image tags  	new TagTransformation () {  		TagPattern = TagPatterns.Image'  	}'  	// Remove audio tags  	new TagTransformation () {  		TagPattern = TagPatterns.Audio'  	}'  	// Remove cite tags  	new TagTransformation () {  		TagPattern = TagPatterns.Cite  	}'  	// Remove Category  	new TagTransformation () {  		TagPattern = TagPatterns.Category  	}'  	// Remove Quotes  	new TagTransformation () {  		TagPattern = TagPatterns.Quote  	}'  	// Remove explicit references  	new TagTransformation () {  		TagPattern = TagPatterns.ReferenceExplicit  	}'  	// Remove picture dictionaries  	new TagTransformation () {  		TagPattern = TagPatterns.PictureDictionary  	}'  	// Remove orphan lines  	new TagTransformation () {  		TagPattern = TagPatterns.OrphanLine  	}'  	// Shorten tags  	new TagTransformation () {  		TagPattern = TagPatterns.Tag'  		Transformation = (Match match) =>  {  			return match.Value.Substring (1' match.Value.Length - 2);  		}  	}'  	// --------------------------------------------- Cleaning  	// Remove empty enumerations  	new TagTransformation () {  		TagPattern = TagPatterns.EmptyEnumeration'  	}'  	// Remove 3 new lines in a row  	new TagTransformation () {  		TagPattern = TagPatterns.NL3  	}'  	// Remove reference tag (as last)  	new TagTransformation () {  		TagPattern = TagPatterns.Reference'  		Transformation = (Match match) =>  {  			return match.Value.Substring (2' match.Value.Length - 4);  		}  	}'  };  
Magic Number,Memoling.Tools.WiktionaryMapper,DataProcessorConfigBuilder,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\DataProcessorConfigBuilder.cs,BuildCommonTagTransformation,The following statement contains a magic number: commonTagTransformations = new List<TagTransformation> () {  	// Remove image tags  	new TagTransformation () {  		TagPattern = TagPatterns.Image'  	}'  	// Remove audio tags  	new TagTransformation () {  		TagPattern = TagPatterns.Audio'  	}'  	// Remove cite tags  	new TagTransformation () {  		TagPattern = TagPatterns.Cite  	}'  	// Remove Category  	new TagTransformation () {  		TagPattern = TagPatterns.Category  	}'  	// Remove Quotes  	new TagTransformation () {  		TagPattern = TagPatterns.Quote  	}'  	// Remove explicit references  	new TagTransformation () {  		TagPattern = TagPatterns.ReferenceExplicit  	}'  	// Remove picture dictionaries  	new TagTransformation () {  		TagPattern = TagPatterns.PictureDictionary  	}'  	// Remove orphan lines  	new TagTransformation () {  		TagPattern = TagPatterns.OrphanLine  	}'  	// Shorten tags  	new TagTransformation () {  		TagPattern = TagPatterns.Tag'  		Transformation = (Match match) =>  {  			return match.Value.Substring (1' match.Value.Length - 2);  		}  	}'  	// --------------------------------------------- Cleaning  	// Remove empty enumerations  	new TagTransformation () {  		TagPattern = TagPatterns.EmptyEnumeration'  	}'  	// Remove 3 new lines in a row  	new TagTransformation () {  		TagPattern = TagPatterns.NL3  	}'  	// Remove reference tag (as last)  	new TagTransformation () {  		TagPattern = TagPatterns.Reference'  		Transformation = (Match match) =>  {  			return match.Value.Substring (2' match.Value.Length - 4);  		}  	}'  };  
Magic Number,Memoling.Tools.WiktionaryMapper,DataProcessorConfigBuilder,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\DataProcessorConfigBuilder.cs,BuildCommonTagTransformation,The following statement contains a magic number: return match.Value.Substring (1' match.Value.Length - 2);  
Magic Number,Memoling.Tools.WiktionaryMapper,DataProcessorConfigBuilder,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\DataProcessorConfigBuilder.cs,BuildCommonTagTransformation,The following statement contains a magic number: return match.Value.Substring (2' match.Value.Length - 4);  
Magic Number,Memoling.Tools.WiktionaryMapper,DataProcessorConfigBuilder,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\DataProcessorConfigBuilder.cs,BuildCommonTagTransformation,The following statement contains a magic number: return match.Value.Substring (2' match.Value.Length - 4);  
Magic Number,Memoling.Tools.WiktionaryMapper,DataProcessorConfigBuilder,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\DataProcessorConfigBuilder.cs,TranslationTransformation,The following statement contains a magic number: foreach (Match match in matches) {  	string value = match.Value;  	string[] parts = value.Split ('|');  	string language = parts [1];  	string translation = parts [2].Split ('}') [0];  	translation = TagTransformation.Transform (translation' commonTagTransformations).Trim ();  	yield return new Translation () {  		ExpressionA = context.Title'  		LanguageA = context.Config.Langauge'  		ExpressionB = translation'  		LanguageB = language  	};  }  
Magic Number,Memoling.Tools.WiktionaryMapper,Program,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Program.cs,PrintProgress,The following statement contains a magic number: if (processedEntry % 100 == 0) {  	Console.Write ("\r{0} "' processedEntry);  }  
Magic Number,Memoling.Tools.WiktionaryMapper.Data,BinaryExpressionOutputResult,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\BinaryExpressionOutputResult.cs,RemoveDuplicates,The following statement contains a magic number: if (format == OutputFormat.Sql || format == OutputFormat.PlainText) {  	List<string> data = input.ReadToEnd ().Split ('\n').ToList ();  	List<string> unique = new List<string> ();  	Regex pattern = new Regex (@"[(']");  	while (data.Count () > 0) {  		string line = data [0];  		data.RemoveAll (p => p == line);  		if (line.Trim () == string.Empty) {  			continue;  		}  		unique.Add (line);  		string[] parts = pattern.Split (line);  		string duplicateLine = parts [0] + "(" + parts [2] + "'" + parts [1] + "'" + parts [3];  		data.RemoveAll (p => p == duplicateLine);  	}  	foreach (var line in unique) {  		output.Write (line + "\n");  	}  }  
Magic Number,Memoling.Tools.WiktionaryMapper.Data,BinaryExpressionOutputResult,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\BinaryExpressionOutputResult.cs,RemoveDuplicates,The following statement contains a magic number: if (format == OutputFormat.Sql || format == OutputFormat.PlainText) {  	List<string> data = input.ReadToEnd ().Split ('\n').ToList ();  	List<string> unique = new List<string> ();  	Regex pattern = new Regex (@"[(']");  	while (data.Count () > 0) {  		string line = data [0];  		data.RemoveAll (p => p == line);  		if (line.Trim () == string.Empty) {  			continue;  		}  		unique.Add (line);  		string[] parts = pattern.Split (line);  		string duplicateLine = parts [0] + "(" + parts [2] + "'" + parts [1] + "'" + parts [3];  		data.RemoveAll (p => p == duplicateLine);  	}  	foreach (var line in unique) {  		output.Write (line + "\n");  	}  }  
Magic Number,Memoling.Tools.WiktionaryMapper.Data,BinaryExpressionOutputResult,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\BinaryExpressionOutputResult.cs,RemoveDuplicates,The following statement contains a magic number: while (data.Count () > 0) {  	string line = data [0];  	data.RemoveAll (p => p == line);  	if (line.Trim () == string.Empty) {  		continue;  	}  	unique.Add (line);  	string[] parts = pattern.Split (line);  	string duplicateLine = parts [0] + "(" + parts [2] + "'" + parts [1] + "'" + parts [3];  	data.RemoveAll (p => p == duplicateLine);  }  
Magic Number,Memoling.Tools.WiktionaryMapper.Data,BinaryExpressionOutputResult,C:\repos\interjaz_WiktionaryMapper\WiktionaryMapper\Data\BinaryExpressionOutputResult.cs,RemoveDuplicates,The following statement contains a magic number: while (data.Count () > 0) {  	string line = data [0];  	data.RemoveAll (p => p == line);  	if (line.Trim () == string.Empty) {  		continue;  	}  	unique.Add (line);  	string[] parts = pattern.Split (line);  	string duplicateLine = parts [0] + "(" + parts [2] + "'" + parts [1] + "'" + parts [3];  	data.RemoveAll (p => p == duplicateLine);  }  
