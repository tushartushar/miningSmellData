Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,Main,Cyclomatic complexity of the method is 10
Long Parameter List,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,Main,The method has 11 parameters.
Long Parameter List,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,ValidateArgs,The method has 10 parameters.
Long Parameter List,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,ProcessUser,The method has 10 parameters.
Long Parameter List,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,CreateTempUser,The method has 5 parameters.
Long Parameter List,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,ConfirmUserConvert,The method has 8 parameters.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,Main,The length of the statement  "			userCollection = ic.Client.CreateDocumentCollectionQuery (ic.Database.CollectionsLink).Where (c => c.Id == Constants.DocumentCollectionIds.UsersCollection).ToList ().FirstOrDefault (); " is 184.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,Main,The length of the statement  "						var qRoles = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.RoleName != '' "' new Microsoft.Azure.Documents.Client.FeedOptions ()); " is 176.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,Main,The length of the statement  "						var qLogins = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.LoginProvider != '' "' new Microsoft.Azure.Documents.Client.FeedOptions ()); " is 182.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,Main,The length of the statement  "						var qClaims = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.ClaimType != '' "' new Microsoft.Azure.Documents.Client.FeedOptions ()); " is 178.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,Main,The length of the statement  "						var qUser = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.id = r.UserId"' new Microsoft.Azure.Documents.Client.FeedOptions ()); " is 173.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,Main,The length of the statement  "					Task<TempUser> tempTask = CreateTempUser (user' allDataList.Where (d => d.GetPropertyValue<string> ("UserId") == user.Id).ToList ()); " is 133.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,Main,The length of the statement  "				Console.WriteLine ("Cannot find UserCollection. Check app.config appSettings for correct DocumentDB connection. If correct' no migration needed."); " is 147.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,ValidateArgs,The length of the statement  "			DisplayInvalidArgs (args.Where (a => !nonHelpTokens.Any (h => h.Equals (a' StringComparison.OrdinalIgnoreCase))).ToList ()); " is 124.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,DisplayHelp,The length of the statement  "	Console.WriteLine ("Migrates or previews the non-user documents merged into the user subdocuments to be used in the current schema of the ElCamino.AspNet.Identity.DocumentDB provider. Make sure the MigrateIdentityData.exe.config has the correct DocumentDB connection information."); " is 282.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,DisplayHelp,The length of the statement  "	Console.WriteLine ("/migrate - migrates documents to the current schema. By default' will delete the old documents unless /nodelete is specified."); " is 148.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,DisplayHelp,The length of the statement  "	Console.WriteLine ("/nodelete - must be used with /migrate. Will not delete non-user documents after they are merged into the user document."); " is 143.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,CreateTempUser,The length of the statement  "			temp.Roles = allUserList.Where (r => r.GetPropertyValue<string> ("UserId") == uDoc.Id && r.Id.StartsWith (Constants.RowKeyConstants.PreFixIdentityUserRole)).ToList (); " is 167.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,CreateTempUser,The length of the statement  "			temp.Claims = allUserList.Where (r => r.GetPropertyValue<string> ("UserId") == uDoc.Id && r.Id.StartsWith (Constants.RowKeyConstants.PreFixIdentityUserClaim)).ToList (); " is 169.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,CreateTempUser,The length of the statement  "			temp.Logins = allUserList.Where (r => r.GetPropertyValue<string> ("UserId") == uDoc.Id && r.Id.StartsWith (Constants.RowKeyConstants.PreFixIdentityUserLogin)).ToList (); " is 169.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,ConvertUser,The length of the statement  "	var response = await ic.Client.ReplaceDocumentAsync (user.User' new Microsoft.Azure.Documents.Client.RequestOptions () { " is 120.
Long Statement,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,ConfirmUserConvert,The length of the statement  "	if (userFound.Roles.Where (r => user.Roles.Any (ur => ur.Id == r.Id)).Count () == user.Roles.Count && userFound.Claims.Where (c => user.Claims.Any (uc => uc.Id == c.Id)).Count () == user.Claims.Count && userFound.Logins.Where (l => user.Logins.Any (ul => ul.Id == l.Id)).Count () == user.Logins.Count) { " is 303.
Magic Number,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,Main,The following statement contains a magic number: using (IdentityCloudContext<IdentityUser> ic = new IdentityCloudContext<IdentityUser> ()) {  	using (UserStore<IdentityUser> store = new UserStore<IdentityUser> (ic)) {  		userCollection = ic.Client.CreateDocumentCollectionQuery (ic.Database.CollectionsLink).Where (c => c.Id == Constants.DocumentCollectionIds.UsersCollection).ToList ().FirstOrDefault ();  		if (userCollection != null) {  			List<Document> lroles = null;  			List<Document> llogins = null;  			List<Document> lclaims = null;  			Dictionary<string' Document> lusers = null;  			DateTime startLoad = DateTime.UtcNow;  			var allDataList = new List<Document> (2000);  			Task[] tasks = new Task[] {  				new TaskFactory ().StartNew (() =>  {  					var qRoles = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.RoleName != '' "' new Microsoft.Azure.Documents.Client.FeedOptions ());  					lroles = qRoles.ToList ().Select (r =>  {  						Document d = ConvertDynamicToDoc (r);  						return d;  					}).ToList ();  					allDataList.AddRange (lroles);  					Console.WriteLine ("Roles to convert: {0}"' lroles.Count);  				})'  				new TaskFactory ().StartNew (() =>  {  					var qLogins = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.LoginProvider != '' "' new Microsoft.Azure.Documents.Client.FeedOptions ());  					llogins = qLogins.ToList ().Select (r =>  {  						Document d = ConvertDynamicToDoc (r);  						return d;  					}).ToList ();  					allDataList.AddRange (llogins);  					Console.WriteLine ("Logins to convert: {0}"' llogins.Count);  				})'  				new TaskFactory ().StartNew (() =>  {  					var qClaims = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.ClaimType != '' "' new Microsoft.Azure.Documents.Client.FeedOptions ());  					lclaims = qClaims.ToList ().Select (r =>  {  						Document d = ConvertDynamicToDoc (r);  						return d;  					}).ToList ();  					allDataList.AddRange (lclaims);  					Console.WriteLine ("Claims to convert: {0}"' lclaims.Count);  				})'  				new TaskFactory ().StartNew (() =>  {  					var qUser = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.id = r.UserId"' new Microsoft.Azure.Documents.Client.FeedOptions ());  					lusers = qUser.ToList ().Select (r =>  {  						Document d = ConvertDynamicToDoc (r);  						return d;  					}).ToDictionary (d => d.Id);  					Console.WriteLine ("Total Users: {0}"' lusers.Count);  				})  			};  			Task.WaitAll (tasks);  			Console.WriteLine ("Load Roles' Claims' Logins and Users: {0} seconds"' (DateTime.UtcNow - startLoad).TotalSeconds);  			List<string> userIds = allDataList.Select (dl => dl.GetPropertyValue<string> ("UserId")).Distinct ().ToList ();  			var result2 = Parallel.ForEach<string> (userIds' userId =>  {  				Document user;  				if (!lusers.TryGetValue (userId' out user)) {  					Console.WriteLine ("User document not found: {0}"' userId);  					return;  				}  				//Get all of the docs with the same UserId  				Task<TempUser> tempTask = CreateTempUser (user' allDataList.Where (d => d.GetPropertyValue<string> ("UserId") == user.Id).ToList ());  				tempTask.Wait ();  				TempUser temp = tempTask.Result;  				if (temp.Roles.Count > 0 || temp.Claims.Count > 0 || temp.Logins.Count > 0) {  					if (migrateOption) {  						ConvertUser (temp' ic' deleteOption).ContinueWith (tu =>  {  							return ConfirmUserConvert (tu.Result' store);  						}).Wait ();  					}  				}  			});  			Console.WriteLine ("");  			Console.WriteLine ("Elapsed time: {0} seconds"' (DateTime.UtcNow - startLoad).TotalSeconds);  			Console.WriteLine ("Total Users To Convert: {0}"' userIds.Count);  			Console.WriteLine ("");  			if (migrateOption) {  				Console.WriteLine ("Total Users Successfully Converted: {0}"' iUserSuccessConvert);  				Console.WriteLine ("Total Users Failed to Convert: {0}"' iUserFailureConvert);  				if (iUserFailureConvert > 0) {  					Console.WriteLine ("User Ids Failed:");  					foreach (string s in userIdFailures) {  						Console.WriteLine (s);  					}  				}  			}  		}  		else {  			Console.WriteLine ("Cannot find UserCollection. Check app.config appSettings for correct DocumentDB connection. If correct' no migration needed.");  		}  	}  }  
Magic Number,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,Main,The following statement contains a magic number: using (UserStore<IdentityUser> store = new UserStore<IdentityUser> (ic)) {  	userCollection = ic.Client.CreateDocumentCollectionQuery (ic.Database.CollectionsLink).Where (c => c.Id == Constants.DocumentCollectionIds.UsersCollection).ToList ().FirstOrDefault ();  	if (userCollection != null) {  		List<Document> lroles = null;  		List<Document> llogins = null;  		List<Document> lclaims = null;  		Dictionary<string' Document> lusers = null;  		DateTime startLoad = DateTime.UtcNow;  		var allDataList = new List<Document> (2000);  		Task[] tasks = new Task[] {  			new TaskFactory ().StartNew (() =>  {  				var qRoles = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.RoleName != '' "' new Microsoft.Azure.Documents.Client.FeedOptions ());  				lroles = qRoles.ToList ().Select (r =>  {  					Document d = ConvertDynamicToDoc (r);  					return d;  				}).ToList ();  				allDataList.AddRange (lroles);  				Console.WriteLine ("Roles to convert: {0}"' lroles.Count);  			})'  			new TaskFactory ().StartNew (() =>  {  				var qLogins = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.LoginProvider != '' "' new Microsoft.Azure.Documents.Client.FeedOptions ());  				llogins = qLogins.ToList ().Select (r =>  {  					Document d = ConvertDynamicToDoc (r);  					return d;  				}).ToList ();  				allDataList.AddRange (llogins);  				Console.WriteLine ("Logins to convert: {0}"' llogins.Count);  			})'  			new TaskFactory ().StartNew (() =>  {  				var qClaims = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.ClaimType != '' "' new Microsoft.Azure.Documents.Client.FeedOptions ());  				lclaims = qClaims.ToList ().Select (r =>  {  					Document d = ConvertDynamicToDoc (r);  					return d;  				}).ToList ();  				allDataList.AddRange (lclaims);  				Console.WriteLine ("Claims to convert: {0}"' lclaims.Count);  			})'  			new TaskFactory ().StartNew (() =>  {  				var qUser = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.id = r.UserId"' new Microsoft.Azure.Documents.Client.FeedOptions ());  				lusers = qUser.ToList ().Select (r =>  {  					Document d = ConvertDynamicToDoc (r);  					return d;  				}).ToDictionary (d => d.Id);  				Console.WriteLine ("Total Users: {0}"' lusers.Count);  			})  		};  		Task.WaitAll (tasks);  		Console.WriteLine ("Load Roles' Claims' Logins and Users: {0} seconds"' (DateTime.UtcNow - startLoad).TotalSeconds);  		List<string> userIds = allDataList.Select (dl => dl.GetPropertyValue<string> ("UserId")).Distinct ().ToList ();  		var result2 = Parallel.ForEach<string> (userIds' userId =>  {  			Document user;  			if (!lusers.TryGetValue (userId' out user)) {  				Console.WriteLine ("User document not found: {0}"' userId);  				return;  			}  			//Get all of the docs with the same UserId  			Task<TempUser> tempTask = CreateTempUser (user' allDataList.Where (d => d.GetPropertyValue<string> ("UserId") == user.Id).ToList ());  			tempTask.Wait ();  			TempUser temp = tempTask.Result;  			if (temp.Roles.Count > 0 || temp.Claims.Count > 0 || temp.Logins.Count > 0) {  				if (migrateOption) {  					ConvertUser (temp' ic' deleteOption).ContinueWith (tu =>  {  						return ConfirmUserConvert (tu.Result' store);  					}).Wait ();  				}  			}  		});  		Console.WriteLine ("");  		Console.WriteLine ("Elapsed time: {0} seconds"' (DateTime.UtcNow - startLoad).TotalSeconds);  		Console.WriteLine ("Total Users To Convert: {0}"' userIds.Count);  		Console.WriteLine ("");  		if (migrateOption) {  			Console.WriteLine ("Total Users Successfully Converted: {0}"' iUserSuccessConvert);  			Console.WriteLine ("Total Users Failed to Convert: {0}"' iUserFailureConvert);  			if (iUserFailureConvert > 0) {  				Console.WriteLine ("User Ids Failed:");  				foreach (string s in userIdFailures) {  					Console.WriteLine (s);  				}  			}  		}  	}  	else {  		Console.WriteLine ("Cannot find UserCollection. Check app.config appSettings for correct DocumentDB connection. If correct' no migration needed.");  	}  }  
Magic Number,MigrateIdentityData,Program,C:\repos\dlmelendez_identitydocumentdb\utilities\MigrateIdentityData\Program.cs,Main,The following statement contains a magic number: if (userCollection != null) {  	List<Document> lroles = null;  	List<Document> llogins = null;  	List<Document> lclaims = null;  	Dictionary<string' Document> lusers = null;  	DateTime startLoad = DateTime.UtcNow;  	var allDataList = new List<Document> (2000);  	Task[] tasks = new Task[] {  		new TaskFactory ().StartNew (() =>  {  			var qRoles = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.RoleName != '' "' new Microsoft.Azure.Documents.Client.FeedOptions ());  			lroles = qRoles.ToList ().Select (r =>  {  				Document d = ConvertDynamicToDoc (r);  				return d;  			}).ToList ();  			allDataList.AddRange (lroles);  			Console.WriteLine ("Roles to convert: {0}"' lroles.Count);  		})'  		new TaskFactory ().StartNew (() =>  {  			var qLogins = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.LoginProvider != '' "' new Microsoft.Azure.Documents.Client.FeedOptions ());  			llogins = qLogins.ToList ().Select (r =>  {  				Document d = ConvertDynamicToDoc (r);  				return d;  			}).ToList ();  			allDataList.AddRange (llogins);  			Console.WriteLine ("Logins to convert: {0}"' llogins.Count);  		})'  		new TaskFactory ().StartNew (() =>  {  			var qClaims = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.ClaimType != '' "' new Microsoft.Azure.Documents.Client.FeedOptions ());  			lclaims = qClaims.ToList ().Select (r =>  {  				Document d = ConvertDynamicToDoc (r);  				return d;  			}).ToList ();  			allDataList.AddRange (lclaims);  			Console.WriteLine ("Claims to convert: {0}"' lclaims.Count);  		})'  		new TaskFactory ().StartNew (() =>  {  			var qUser = ic.Client.CreateDocumentQuery (userCollection.SelfLink' "SELECT VALUE r FROM root r WHERE r.id = r.UserId"' new Microsoft.Azure.Documents.Client.FeedOptions ());  			lusers = qUser.ToList ().Select (r =>  {  				Document d = ConvertDynamicToDoc (r);  				return d;  			}).ToDictionary (d => d.Id);  			Console.WriteLine ("Total Users: {0}"' lusers.Count);  		})  	};  	Task.WaitAll (tasks);  	Console.WriteLine ("Load Roles' Claims' Logins and Users: {0} seconds"' (DateTime.UtcNow - startLoad).TotalSeconds);  	List<string> userIds = allDataList.Select (dl => dl.GetPropertyValue<string> ("UserId")).Distinct ().ToList ();  	var result2 = Parallel.ForEach<string> (userIds' userId =>  {  		Document user;  		if (!lusers.TryGetValue (userId' out user)) {  			Console.WriteLine ("User document not found: {0}"' userId);  			return;  		}  		//Get all of the docs with the same UserId  		Task<TempUser> tempTask = CreateTempUser (user' allDataList.Where (d => d.GetPropertyValue<string> ("UserId") == user.Id).ToList ());  		tempTask.Wait ();  		TempUser temp = tempTask.Result;  		if (temp.Roles.Count > 0 || temp.Claims.Count > 0 || temp.Logins.Count > 0) {  			if (migrateOption) {  				ConvertUser (temp' ic' deleteOption).ContinueWith (tu =>  {  					return ConfirmUserConvert (tu.Result' store);  				}).Wait ();  			}  		}  	});  	Console.WriteLine ("");  	Console.WriteLine ("Elapsed time: {0} seconds"' (DateTime.UtcNow - startLoad).TotalSeconds);  	Console.WriteLine ("Total Users To Convert: {0}"' userIds.Count);  	Console.WriteLine ("");  	if (migrateOption) {  		Console.WriteLine ("Total Users Successfully Converted: {0}"' iUserSuccessConvert);  		Console.WriteLine ("Total Users Failed to Convert: {0}"' iUserFailureConvert);  		if (iUserFailureConvert > 0) {  			Console.WriteLine ("User Ids Failed:");  			foreach (string s in userIdFailures) {  				Console.WriteLine (s);  			}  		}  	}  }  else {  	Console.WriteLine ("Cannot find UserCollection. Check app.config appSettings for correct DocumentDB connection. If correct' no migration needed.");  }  
