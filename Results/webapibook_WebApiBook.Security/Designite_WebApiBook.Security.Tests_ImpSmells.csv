Implementation smell,Namespace,Class,File,Method,Description
Long Statement,WebApiBook.Security.Tests.Utils,Tester,D:\research\architectureSmells\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Tests\Utils\Tester.cs,Run,The length of the statement  "            config.Routes.MapHttpRoute("Default"' "{controller}/{id}"' new { controller = "test"' action = "get"' id = RouteParameter.Optional }); " is 134.
Magic Number,WebApiBook.Security.Tests.AuthN,BasicAuthenticationFilterTests,D:\research\architectureSmells\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Tests\AuthN\BasicAuthenticationFilterTests.cs,All_filters_add_a_challenge,The following statement contains a magic number: await Tester.Run(                   withConfiguration: config =>                   {                       config.Filters.Add(new BasicAuthenticationFilter("myrealm1"'                           BasicAuthenticationTestBase.TestValidator));                       config.Filters.Add(new BasicAuthenticationFilter("myrealm2"'                           BasicAuthenticationTestBase.TestValidator));                   }'                   withRequest: () =>                   {                       var req = new HttpRequestMessage(HttpMethod.Get' "http://example.net");                       req.Headers.Authorization = new AuthenticationHeaderValue("basic"'                           Convert.ToBase64String(                           Encoding.UTF8.GetBytes("Alice:NotAlice")));                       return req;                   }'                   assertInAction: controller =>                   {                       Assert.False(true' "should not reach here");                       return new HttpResponseMessage();                   }'                   assertResponse: response =>                   {                       Assert.Equal(HttpStatusCode.Unauthorized' response.StatusCode);                       Assert.Equal(2' response.Headers.WwwAuthenticate.Count);                   }              );
Magic Number,WebApiBook.Security.Tests.AuthN,BasicAuthenticationOwinMiddlewareTests,D:\research\architectureSmells\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Tests\AuthN\BasicAuthenticationOwinMiddlewareTests.cs,Incorrectly_authenticated_request_returns_a_401_with_only_one_challenge,The following statement contains a magic number: await OwinTester.Run(                  useConfiguration: app =>                  {                      app.UseBasicAuthentication(Options);                  }'                  useRequest: () =>                  {                      var req = new HttpRequestMessage(HttpMethod.Get' "http://example.net");                      req.Headers.Authorization = new AuthenticationHeaderValue("basic"'                          Convert.ToBase64String(                          Encoding.ASCII.GetBytes("Alice:NotAlice")));                      return req;                  }'                  assertRequest: ctx =>                  {                      ctx.Response.StatusCode = ctx.Request.User == null || !ctx.Request.User.Identity.IsAuthenticated ? 401 : 200;                  }'                  assertResponse: response =>                  {                      Assert.Equal(HttpStatusCode.Unauthorized' response.StatusCode);                      Assert.Equal(1' response.Headers.WwwAuthenticate.Count);                  }             );
Magic Number,WebApiBook.Security.Tests.AuthN,BasicAuthenticationOwinMiddlewareTests,D:\research\architectureSmells\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Tests\AuthN\BasicAuthenticationOwinMiddlewareTests.cs,Incorrectly_authenticated_request_returns_a_401_with_only_one_challenge,The following statement contains a magic number: await OwinTester.Run(                  useConfiguration: app =>                  {                      app.UseBasicAuthentication(Options);                  }'                  useRequest: () =>                  {                      var req = new HttpRequestMessage(HttpMethod.Get' "http://example.net");                      req.Headers.Authorization = new AuthenticationHeaderValue("basic"'                          Convert.ToBase64String(                          Encoding.ASCII.GetBytes("Alice:NotAlice")));                      return req;                  }'                  assertRequest: ctx =>                  {                      ctx.Response.StatusCode = ctx.Request.User == null || !ctx.Request.User.Identity.IsAuthenticated ? 401 : 200;                  }'                  assertResponse: response =>                  {                      Assert.Equal(HttpStatusCode.Unauthorized' response.StatusCode);                      Assert.Equal(1' response.Headers.WwwAuthenticate.Count);                  }             );
Magic Number,WebApiBook.Security.Tests.AuthN,BasicAuthenticationOwinMiddlewareTests,D:\research\architectureSmells\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Tests\AuthN\BasicAuthenticationOwinMiddlewareTests.cs,Non_authenticated_request_reaches_controller_with_an_unauthenticated_user,The following statement contains a magic number: await OwinTester.Run(                  useConfiguration: app =>                  {                      app.UseBasicAuthentication(Options);                  }'                  useRequest: () =>                  {                      return new HttpRequestMessage(HttpMethod.Get' "http://example.net");                  }'                   assertRequest: ctx =>                  {                      Assert.Null(ctx.Request.User);                      ctx.Response.StatusCode = 401;                  }'                                    assertResponse: response =>                  {                      Assert.Equal(HttpStatusCode.Unauthorized' response.StatusCode);                      Assert.Equal("Basic"' response.Headers.WwwAuthenticate.First().Scheme);                      Assert.Equal("realm=webapibook"' response.Headers.WwwAuthenticate.First().Parameter);                  }             );
Magic Number,WebApiBook.Security.Tests.AuthN,JwtAuthenticationOwinMiddlewareTests,D:\research\architectureSmells\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Tests\AuthN\JwtAuthenticationOwinMiddlewareTests.cs,Incorrectly_authenticated_request_returns_a_401_with_only_one_challenge,The following statement contains a magic number: await OwinTester.Run(                  useConfiguration: app =>                  {                      app.UseJwtAuthentication(Options);                  }'                  useRequest: () =>                  {                      var req = new HttpRequestMessage(HttpMethod.Get' "http://example.net");                      req.Headers.Authorization = new AuthenticationHeaderValue("bearer"' _tokenString + "x");                      return req;                  }'                  assertRequest: ctx =>                  {                      ctx.Response.StatusCode = ctx.Request.User == null || !ctx.Request.User.Identity.IsAuthenticated ? 401 : 200;                  }'                  assertResponse: response =>                  {                      Assert.Equal(HttpStatusCode.Unauthorized' response.StatusCode);                      Assert.Equal(1' response.Headers.WwwAuthenticate.Count);                  }             );
Magic Number,WebApiBook.Security.Tests.AuthN,JwtAuthenticationOwinMiddlewareTests,D:\research\architectureSmells\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Tests\AuthN\JwtAuthenticationOwinMiddlewareTests.cs,Incorrectly_authenticated_request_returns_a_401_with_only_one_challenge,The following statement contains a magic number: await OwinTester.Run(                  useConfiguration: app =>                  {                      app.UseJwtAuthentication(Options);                  }'                  useRequest: () =>                  {                      var req = new HttpRequestMessage(HttpMethod.Get' "http://example.net");                      req.Headers.Authorization = new AuthenticationHeaderValue("bearer"' _tokenString + "x");                      return req;                  }'                  assertRequest: ctx =>                  {                      ctx.Response.StatusCode = ctx.Request.User == null || !ctx.Request.User.Identity.IsAuthenticated ? 401 : 200;                  }'                  assertResponse: response =>                  {                      Assert.Equal(HttpStatusCode.Unauthorized' response.StatusCode);                      Assert.Equal(1' response.Headers.WwwAuthenticate.Count);                  }             );
Magic Number,WebApiBook.Security.Tests.AuthN,JwtAuthenticationOwinMiddlewareTests,D:\research\architectureSmells\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Tests\AuthN\JwtAuthenticationOwinMiddlewareTests.cs,Non_authenticated_request_reaches_controller_with_an_unauthenticated_user,The following statement contains a magic number: await OwinTester.Run(                  useConfiguration: app =>                  {                      app.UseJwtAuthentication(Options);                  }'                  useRequest: () =>                  {                      return new HttpRequestMessage(HttpMethod.Get' "http://example.net");                  }'                   assertRequest: ctx =>                   {                       Assert.Null(ctx.Request.User);                       ctx.Response.StatusCode = 401;                   }'                    assertResponse: response =>                  {                      Assert.Equal(HttpStatusCode.Unauthorized' response.StatusCode);                      Assert.Equal("Bearer"' response.Headers.WwwAuthenticate.First().Scheme);                      Assert.Equal("realm=webapibook"' response.Headers.WwwAuthenticate.First().Parameter);                  }             );
