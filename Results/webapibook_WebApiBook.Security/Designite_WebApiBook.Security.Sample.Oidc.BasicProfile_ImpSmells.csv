Implementation smell,Namespace,Class,File,Method,Description
Long Method,WebApiBook.Security.Sample.Oidc.BasicProfile,OAuth2CallbackController,C:\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Sample.Oidc.BasicProfile\Program.cs,Get,The method has 118 lines of code.
Long Statement,WebApiBook.Security.Sample.Oidc.BasicProfile,OAuth2CallbackController,C:\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Sample.Oidc.BasicProfile\Program.cs,Get,The length of the statement  "                        return Error("Unfortunately' the UserInfo representation should be 'application/json' but is {0}' ending"' userInfoResp.Content.Headers.ContentType.MediaType); " is 159.
Magic Number,WebApiBook.Security.Sample.Oidc.BasicProfile,Program,C:\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Sample.Oidc.BasicProfile\Program.cs,Main,The following statement contains a magic number: var authzRequest = new AuthorizationRequest              {                  client_id = Config.Client.client_id'                  response_type = "code"'                  scope = Config.ExampleResource.Scope + " openid email"'                   redirect_uri = Config.Client.redirect_uri'                  state = 128.RandomBits()              };
Magic Number,WebApiBook.Security.Sample.Oidc.BasicProfile,Extensions,C:\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Sample.Oidc.BasicProfile\Program.cs,RandomBits,The following statement contains a magic number: using (var rg = RandomNumberGenerator.Create())              {                  var bytes = new byte[(size + 7) / 8];                  rg.GetBytes(bytes);                  return Convert.ToBase64String(bytes);              }
Magic Number,WebApiBook.Security.Sample.Oidc.BasicProfile,Extensions,C:\repos\webapibook_WebApiBook.Security\src\WebApiBook.Security.Sample.Oidc.BasicProfile\Program.cs,RandomBits,The following statement contains a magic number: using (var rg = RandomNumberGenerator.Create())              {                  var bytes = new byte[(size + 7) / 8];                  rg.GetBytes(bytes);                  return Convert.ToBase64String(bytes);              }
