Implementation smell,Namespace,Class,File,Method,Description
Long Method,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,ImageWriter,The method has 117 lines of code.
Long Method,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The method has 140 lines of code.
Complex Method,Franken_.App_Code,DataPipe,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\DataPipe.cs,LoadParams,Cyclomatic complexity of the method is 22
Complex Method,Franken_.App_Code,Font,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,IngestImages,Cyclomatic complexity of the method is 8
Complex Method,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,ImageWriter,Cyclomatic complexity of the method is 23
Complex Method,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,WriteGlyphWord,Cyclomatic complexity of the method is 9
Complex Method,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,copyFontButton_Click,Cyclomatic complexity of the method is 14
Complex Method,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,exportFontToolStripMenuItem_Click,Cyclomatic complexity of the method is 13
Complex Method,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,Cyclomatic complexity of the method is 53
Complex Method,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,RefreshCharList,Cyclomatic complexity of the method is 9
Complex Method,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,delRemovedButton_Click,Cyclomatic complexity of the method is 8
Complex Method,Franken_,Reclassify,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Reclassify.cs,okButton_Click,Cyclomatic complexity of the method is 11
Complex Method,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,backgroundWorker_DoWork,Cyclomatic complexity of the method is 12
Complex Method,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,Cyclomatic complexity of the method is 11
Complex Method,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,Cyclomatic complexity of the method is 10
Long Parameter List,Franken_.App_Code,Font,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,IngestImages,The method has 6 parameters.
Long Parameter List,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,ImageWriter,The method has 6 parameters.
Long Parameter List,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,AddBoxFileEntry,The method has 5 parameters.
Long Parameter List,Franken_.App_Code,GlyphKeeper,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,GlyphKeeper,The method has 7 parameters.
Long Parameter List,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,DoTiffXMLIngestion,The method has 5 parameters.
Long Parameter List,Franken_,PageXml,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\PageXml.cs,GetNamespace,The method has 6 parameters.
Long Statement,Franken_.App_Code,DataPipe,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\DataPipe.cs,LoadParams,The length of the statement  "	ConnString = "Server=" + Host + ";Port=" + Port + ";Uid=" + User + ";Pwd=" + Password + ";Database=" + Database + ";CharSet=utf8;"; " is 131.
Long Statement,Franken_.App_Code,DataPipe,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\DataPipe.cs,CheckConnection,The length of the statement  "		Results = "Unable to connect to the database server.  Please verify connection settings in Menu->Settings.  Error Message: " + E.Message; " is 137.
Long Statement,Franken_.App_Code,DataPipe,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\DataPipe.cs,CheckConnection,The length of the statement  "			Results = "Connected to the database server' but you probably need to reset the database by going to Menu->Settings->Reset Database.  Error message: " + E.Message; " is 163.
Long Statement,Franken_.App_Code,DataPipe,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\DataPipe.cs,ReportError,The length of the statement  "	LogOut.WriteLine ("Error at " + System.DateTime.Now.ToString () + ": " + Error + "<br><br>Last SQL: " + SQL.CommandText + "<br><br>Method: " + Method + "<br><br>Trace: " + Trace); " is 179.
Long Statement,Franken_.App_Code,Language,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,Save,The length of the statement  "		db.ExecuteCommand ("insert into languages (lang_id' lang_name) values (" + this.ID + "' '" + db.FixString (this.Name) + "')"); " is 126.
Long Statement,Franken_.App_Code,Font,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,IngestImages,The length of the statement  "				string PossibleID = GlyphFiles [x].ToLower ().Replace (PathToImages.ToLower () + "\\"' "").Replace (BaseName.ToLower () + "_"' "").Replace (".tif"' ""); " is 152.
Long Statement,Franken_.App_Code,Font,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,Save,The length of the statement  "		db.ExecuteCommand ("insert into fonts (font_id' font_lang_id' font_name' font_italic' font_bold' font_fixed' font_serif' font_fraktur' font_line_height) values (" + this.ID + "' " + this.LangID + "' '" + db.FixString (this.Name) + "'' " + this.Italic + "' " + this.Bold + "' " + this.Fixed + "' " + this.Serif + "' " + this.Fraktur + "' " + this.LineHeight + ")"); " is 364.
Long Statement,Franken_.App_Code,Font,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,Save,The length of the statement  "		db.ExecuteCommand ("update fonts set font_name = '" + db.FixString (this.Name) + "'' " + "font_lang_id = " + this.LangID + "' " + "font_italic = " + this.Italic + "' " + "font_bold = " + this.Bold + "' " + "font_fixed = " + this.Fixed + "' " + "font_serif = " + this.Serif + "' " + "font_fraktur = " + this.Fraktur + "' " + "font_line_height = " + this.LineHeight + " " + "where font_id = " + this.ID); " is 402.
Long Statement,Franken_.App_Code,Glyph,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,Save,The length of the statement  "		db.ExecuteCommand ("insert into glyphs (glyph_id' glyph_font_id' glyph_unicode' glyph_frequency' glyph_x_offset' glyph_y_offset) values (" + this.ID + "' " + this.FontID + "' '" + db.FixString (this.Unicode) + "'' " + this.Frequency + "' " + this.XOffset + "' " + this.YOffset + ")"); " is 284.
Long Statement,Franken_.App_Code,Glyph,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,Save,The length of the statement  "		db.ExecuteCommand ("update glyphs set glyph_font_id = " + this.FontID + "' " + "glyph_unicode = '" + db.FixString (this.Unicode) + "'' " + "glyph_frequency = " + this.Frequency + "' " + "glyph_x_offset = " + this.XOffset + "' " + "glyph_y_offset = " + this.YOffset + " " + "where glyph_id = " + this.ID); " is 304.
Long Statement,Franken_.App_Code,GlyphImage,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,Save,The length of the statement  "		db.ExecuteCommand ("insert into images (img_id' img_glyph_id' img_path' img_status) values (" + this.ID + "' " + this.GlyphID + "' '" + db.FixString (this.Path) + "'' '" + db.FixString (this.Status) + "')"); " is 207.
Long Statement,Franken_.App_Code,GlyphImage,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,Save,The length of the statement  "		db.ExecuteCommand ("update images set img_glyph_id = " + this.GlyphID + "' " + "img_path = '" + db.FixString (this.Path) + "'' " + "img_status = '" + db.FixString (this.Status) + "' " + "where img_id = " + this.ID); " is 215.
Long Statement,Franken_.App_Code,SubList,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,Add,The length of the statement  "	db.ExecuteCommand ("insert into character_subs (cs_character' cs_sub) values ('" + Character + "'' '" + Substitution + "')"); " is 125.
Long Statement,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,AddGlyph,The length of the statement  "				GlyphWord.Add (new GlyphKeeper (GlyphWidth' GlyphHeight' (int)G.XOffset' (int)G.YOffset' GlyphScanSize' G.Unicode' GlyphData)); " is 127.
Long Statement,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,WriteGlyphWord,The length of the statement  "	if (PlaceWord (WordWidth' WordHeight))//THIS FUNCTION CHECKS TO MAKE SURE THE WORD CAN FIT ON A PAGE' AND STARTS A NEW LINE OR DOCUMENT IF NEEDED " is 145.
Long Statement,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,WriteGlyphWord,The length of the statement  "			AddBoxFileEntry (GlyphXpos' HEIGHT - CurrentLineBottomHeight - G.GlyphYOffset' G.GlyphWidth' G.GlyphHeight' G.GlyphChar); " is 121.
Long Statement,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,AddBoxFileEntry,The length of the statement  "	System.IO.StreamWriter Fout = new System.IO.StreamWriter (OutputPath + "\\" + this.LangName + "." + myFont.Name + ".exp" + SeriesNo.ToString () + ".box"' true' utf8SansBOM); " is 173.
Long Statement,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,AddBoxFileEntry,The length of the statement  "	Fout.Write (Char + " " + Xpos + " " + Ypos + " " + (Xpos + Width).ToString () + " " + (Ypos + Height).ToString () + " 0\n"); " is 124.
Long Statement,Franken_,dbConnectionForm,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\dbConnectionForm.cs,dbResetButton_Click,The length of the statement  "	DialogResult myResult = MessageBox.Show ("Are you sure you want to clear all data?  All font information and images will be deleted."' "Reset Confirmation"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning); " is 206.
Long Statement,Franken_,dbConnectionForm,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\dbConnectionForm.cs,dbResetButton_Click,The length of the statement  "		db.ExecuteCommand ("CREATE TABLE `character_subs` ( " + "`cs_character` varchar(20) COLLATE utf8_bin DEFAULT NULL' " + "`cs_sub` varchar(20) COLLATE utf8_bin DEFAULT NULL " + ") ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin"); " is 232.
Long Statement,Franken_,dbConnectionForm,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\dbConnectionForm.cs,dbResetButton_Click,The length of the statement  "		db.ExecuteCommand ("CREATE TABLE `fonts` ( " + "`font_id` int(11) NOT NULL DEFAULT '0'' " + "`font_name` varchar(50) COLLATE utf8_bin DEFAULT NULL' " + "`font_italic` tinyint(4) DEFAULT NULL' " + "`font_bold` tinyint(4) DEFAULT NULL' " + "`font_fixed` tinyint(4) DEFAULT NULL' " + "`font_serif` tinyint(4) DEFAULT NULL' " + "`font_fraktur` tinyint(4) DEFAULT NULL' " + "`font_line_height` int(11) DEFAULT NULL' " + "`font_lang_id` int(11) DEFAULT NULL'" + "PRIMARY KEY (`font_id`) " + ") ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin"); " is 542.
Long Statement,Franken_,dbConnectionForm,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\dbConnectionForm.cs,dbResetButton_Click,The length of the statement  "		db.ExecuteCommand ("CREATE TABLE `glyphs` ( " + "`glyph_id` int(11) NOT NULL DEFAULT '0'' " + "`glyph_font_id` int(11) DEFAULT NULL' " + "`glyph_unicode` varchar(6) COLLATE utf8_bin DEFAULT NULL' " + "`glyph_frequency` int(11) DEFAULT NULL' " + "`glyph_x_offset` int(11) DEFAULT NULL' " + "`glyph_y_offset` int(11) DEFAULT NULL' " + "PRIMARY KEY (`glyph_id`) " + ") ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin"); " is 420.
Long Statement,Franken_,dbConnectionForm,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\dbConnectionForm.cs,dbResetButton_Click,The length of the statement  "		db.ExecuteCommand ("CREATE TABLE `images` ( " + "`img_id` bigint(11) NOT NULL DEFAULT '0'' " + "`img_glyph_id` int(11) DEFAULT NULL' " + "`img_path` varchar(200) DEFAULT NULL' " + "`img_status` varchar(6) DEFAULT NULL' " + "PRIMARY KEY (`img_id`) " + ") ENGINE=InnoDB DEFAULT CHARSET=utf8"); " is 291.
Long Statement,Franken_,dbConnectionForm,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\dbConnectionForm.cs,dbResetButton_Click,The length of the statement  "		db.ExecuteCommand ("CREATE TABLE `languages` ( " + "`lang_id` int(11) NOT NULL DEFAULT '0'' " + "`lang_name` varchar(50) DEFAULT NULL' " + "PRIMARY KEY (`lang_id`) " + ") ENGINE=InnoDB DEFAULT CHARSET=utf8"); " is 208.
Long Statement,Franken_,dbConnectionForm,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\dbConnectionForm.cs,dbResetButton_Click,The length of the statement  "		db.ExecuteCommand ("CREATE TABLE `keys` ( " + "`keys_table` varchar(20) NOT NULL DEFAULT ''' " + "`keys_max` bigint(11) DEFAULT NULL' " + "PRIMARY KEY (`keys_table`) " + ") ENGINE=InnoDB DEFAULT CHARSET=utf8"); " is 210.
Long Statement,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,Form1_Load,The length of the statement  "			MessageBox.Show ("Franken+ was unable to initialize properly.  If this is the first time you are running Franken+' chances are you need to select Settings->Reset Database in order to properly set up tables."); " is 209.
Long Statement,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,CheckIfInitialized,The length of the statement  "		InitializationError += "This may be the first time you are running Franken+' as it is unable to connect to the MySQL database.  It may also be the case that the server is not running' or your credentials have changed.  If this is your first time to run Franken+' go to Menu->Settings and set up your connection; after verifying your connection' click Reset Database to set up Franken+ tables."; " is 394.
Long Statement,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,DoTiffXMLIngestion,The length of the statement  "					myFont.IngestImages (LangName' myFont.Name' inputFileName.Replace (".xml"' "")' FullInputDir + "\\" + inputFileName' FullOutputDir + "\\" + inputFileName.Replace (".xml"' "")' UseSubList); " is 188.
Long Statement,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,backgroundWorker_DoWork,The length of the statement  "		ImageWriter IW = new ImageWriter (ref slave' ref ProcessStatus' LangName' FontID' MakeImagesFolder' subTransBox.Checked); " is 121.
Long Statement,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,copyFontButton_Click,The length of the statement  "										img.Path = ImageTable.Rows [y] ["img_path"].ToString ().Replace ("\\Output\\" + (fontBox.SelectedItem as App_Code.Font).ID + "\\"' "\\Output\\" + newFont.ID + "\\"); " is 165.
Long Statement,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,databaseConnectionToolStripMenuItem_Click,The length of the statement  "			MessageBox.Show ("Franken+ was unable to initialize properly.  Please address the following issues and then restart Franken+:\r\n\r\n" + InitializationError); " is 158.
Long Statement,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,exportFontToolStripMenuItem_Click,The length of the statement  "					Fout.WriteLine ("image:" + I.Path.Replace ("\\GlyphExtraction\\Output\\" + FontID' "\\GlyphExtraction\\Output\\FONTNAME") + ": " + I.Status); " is 141.
Long Statement,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The length of the statement  "						DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID + "\\" + subDirName); " is 121.
Long Statement,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The length of the statement  "										imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID); " is 127.
Long Statement,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,RefreshCharList,The length of the statement  "					using (FileStream stream = new FileStream (db.DataDirectory + myFont.Glyphs [SelectedGlyph].Images [x].Path' FileMode.Open' FileAccess.Read)) { " is 143.
Long Statement,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,imageContextEdit_Click,The length of the statement  "		DialogResult myResult = MessageBox.Show ("Launching Image Editor.  After editing' click OK to reload images."' "Edit Image"' MessageBoxButtons.OKCancel' MessageBoxIcon.None); " is 174.
Long Statement,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,imageContextShowInfo_Click,The length of the statement  "	GlyphImage GI = new GlyphImage (((sender as ToolStripMenuItem).GetCurrentParent () as ContextMenuStrip).SourceControl.Name); " is 124.
Long Statement,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,imageContextShowInfo_Click,The length of the statement  "		MessageBox.Show ("Width: " + GlyphWidth + Environment.NewLine + "Height: " + GlyphHeight + Environment.NewLine + "Scansize: " + GlyphScanSize + Environment.NewLine + "Path: " + db.DataDirectory + GI.Path); " is 205.
Long Statement,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,deleteFont_Click,The length of the statement  "	DialogResult myResult = MessageBox.Show ("Are you sure you want to delete " + myFont.Name + " and all of its data?  This process may take several minutes to complete."' "Delete Confirmation"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning); " is 241.
Long Statement,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,delGlyphButton_Click,The length of the statement  "		DialogResult myResult = MessageBox.Show ("Are you sure you want to delete the glyph \"" + myFont.Glyphs [SelectedGlyph].Unicode + "\"?"' "Delete Confirmation"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning); " is 209.
Long Statement,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,delRemovedButton_Click,The length of the statement  "			if (db.GetRows ("select * from images where img_glyph_id = " + myFont.Glyphs [SelectedGlyph].ID + " and img_status = 'REM'")) { " is 127.
Long Statement,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,delRemovedButton_Click,The length of the statement  "				db.ExecuteCommand ("delete from images where img_glyph_id = " + myFont.Glyphs [SelectedGlyph].ID + " and img_status = 'REM'"); " is 126.
Long Statement,Franken_,PageXml,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\PageXml.cs,GetGlyphs,The length of the statement  "		Unicode = REC.XPathSelectElement ("./aletheia:TextEquiv/aletheia:Unicode"' namespaceManager) != null ? REC.XPathSelectElement ("./aletheia:TextEquiv/aletheia:Unicode"' namespaceManager).Value : string.Empty " is 206.
Long Statement,Franken_,PageXml,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\PageXml.cs,GetNamespace,The length of the statement  "             */var namespaces = AletheiaDoc.Root.Attributes ().Where (a => a.IsNamespaceDeclaration).GroupBy (a => a.Name.Namespace == XNamespace.None ? String.Empty : a.Name.LocalName' a => XNamespace.Get (a.Value)).ToDictionary (g => g.Key' g => g.First ()); " is 247.
Long Statement,Franken_,PageXmlV3,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\PageXmlV3.cs,CreateImageExtractorCommandLine,The length of the statement  "	string options = string.Format (@"-extract imageSnippets -filter-by type -filter glyph -image ""{0}"" -page-content ""{1}"" -output-folder ""{2}"" -boxes"' inputImagePath' xmlInputPath' outputFolderPath); " is 204.
Long Statement,Franken_,Reclassify,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Reclassify.cs,okButton_Click,The length of the statement  "					db.ExecuteCommand ("INSERT INTO images " + "(img_id' img_glyph_id' img_path' img_status) " + "VALUES (" + gID + "' " + newGlyphID + "' '" + db.FixString (G ["img_path"].ToString ()) + "'' '" + db.FixString (G ["img_status"].ToString ()) + "')"); " is 245.
Long Statement,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,backgroundWorker_RunWorkerCompleted,The length of the statement  "		MessageBox.Show (myLang.Name + ".traineddata created successfully!  Before running Tesseract on this computer using this library' be sure to copy " + myLang.Name + ".traineddata to " + db.TessPath + "\\tessdata"); " is 213.
Long Statement,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeFontProperties,The length of the statement  "		FP.WriteLine (F.Name + " " + F.Italic + " " + F.Bold + " " + F.Fixed + " " + F.Fixed + " " + F.Serif + " " + F.Fraktur); " is 120.
Long Statement,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,ProcessWordLists,The length of the statement  "		ExecuteCommand ("wordlist2dawg.exe"' " freq-dawg " + myLang.Name + ".freq-dawg " + myLang.Name + ".unicharset "' TrainingDir); " is 126.
Long Statement,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,ProcessWordLists,The length of the statement  "		ExecuteCommand ("wordlist2dawg.exe"' " word-dawg " + myLang.Name + ".word-dawg " + myLang.Name + ".unicharset "' TrainingDir); " is 126.
Long Statement,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,TrainFont,The length of the statement  "			ExecuteCommand ("tesseract.exe"' " " + TiffFiles [x] + " " + TiffFiles [x].Replace (".tif"' "") + " nobatch box.train"' TrainingDir); " is 133.
Long Statement,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The length of the statement  "					ExecuteCommand ("mftraining.exe"' " -F font_properties -U unicharset -O " + myLang.Name + ".unicharset" + TrFilesLine' TrainingDir); " is 132.
Long Statement,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CombineTessData,The length of the statement  "		if (File.Exists (TrainingDir + "\\inttemp") && File.Exists (TrainingDir + "\\shapetable") && File.Exists (TrainingDir + "\\normproto") && File.Exists (TrainingDir + "\\pffmtable")) { " is 182.
Long Statement,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,testGoButton_Click,The length of the statement  "					ExecuteCommand ("tesseract.exe"' " -l " + myLang.Name + " " + JustFileName + " " + JustFileName.Replace (".tif"' "")' testFolderBox.Text); " is 138.
Complex Conditional,Franken_.App_Code,GlyphKeeper,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,SetBits,The conditional expression  "startBit < 0 || startBit > 7 || bitCount < 0 || bitCount > 7 || startBit + bitCount > 8"  is complex.
Complex Conditional,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CombineTessData,The conditional expression  "File.Exists (TrainingDir + "\\inttemp") && File.Exists (TrainingDir + "\\shapetable") && File.Exists (TrainingDir + "\\normproto") && File.Exists (TrainingDir + "\\pffmtable")"  is complex.
Empty Catch Block,Franken_.App_Code,GlyphImage,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,Delete,The method has an empty catch block.
Empty Catch Block,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,delRemovedButton_Click,The method has an empty catch block.
Empty Catch Block,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,backgroundWorker_DoWork,The method has an empty catch block.
Magic Number,Franken_.App_Code,DataPipe,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\DataPipe.cs,LoadParams,The following statement contains a magic number: if (File.Exists (DataDirectory + "\\db.conf")) {  	StreamReader Fin = new StreamReader (DataDirectory + "\\db.conf");  	string Line = "";  	while ((Line = Fin.ReadLine ()) != null) {  		if (!Line.StartsWith ("#")) {  			string[] Parts = Line.Split (new char[] {  				'='  			});  			if (Parts.Length == 2) {  				string Param = Parts [0].Trim ();  				string Value = Parts [1].Trim ();  				switch (Param) {  				case "Host":  					Host = Value;  					break;  				case "Port":  					Port = Value;  					break;  				case "Database":  					Database = Value;  					break;  				case "User":  					User = Value;  					break;  				case "Password":  					Password = Value;  					break;  				case "TessPath":  					TessPath = Value;  					break;  				}  			}  		}  	}  	Fin.Close ();  }  else {  	SaveParams ();  }  
Magic Number,Franken_.App_Code,DataPipe,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\DataPipe.cs,LoadParams,The following statement contains a magic number: while ((Line = Fin.ReadLine ()) != null) {  	if (!Line.StartsWith ("#")) {  		string[] Parts = Line.Split (new char[] {  			'='  		});  		if (Parts.Length == 2) {  			string Param = Parts [0].Trim ();  			string Value = Parts [1].Trim ();  			switch (Param) {  			case "Host":  				Host = Value;  				break;  			case "Port":  				Port = Value;  				break;  			case "Database":  				Database = Value;  				break;  			case "User":  				User = Value;  				break;  			case "Password":  				Password = Value;  				break;  			case "TessPath":  				TessPath = Value;  				break;  			}  		}  	}  }  
Magic Number,Franken_.App_Code,DataPipe,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\DataPipe.cs,LoadParams,The following statement contains a magic number: if (!Line.StartsWith ("#")) {  	string[] Parts = Line.Split (new char[] {  		'='  	});  	if (Parts.Length == 2) {  		string Param = Parts [0].Trim ();  		string Value = Parts [1].Trim ();  		switch (Param) {  		case "Host":  			Host = Value;  			break;  		case "Port":  			Port = Value;  			break;  		case "Database":  			Database = Value;  			break;  		case "User":  			User = Value;  			break;  		case "Password":  			Password = Value;  			break;  		case "TessPath":  			TessPath = Value;  			break;  		}  	}  }  
Magic Number,Franken_.App_Code,DataPipe,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\DataPipe.cs,LoadParams,The following statement contains a magic number: if (Parts.Length == 2) {  	string Param = Parts [0].Trim ();  	string Value = Parts [1].Trim ();  	switch (Param) {  	case "Host":  		Host = Value;  		break;  	case "Port":  		Port = Value;  		break;  	case "Database":  		Database = Value;  		break;  	case "User":  		User = Value;  		break;  	case "Password":  		Password = Value;  		break;  	case "TessPath":  		TessPath = Value;  		break;  	}  }  
Magic Number,Franken_.App_Code,Glyph,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,RefreshImages,The following statement contains a magic number: if (db.GetRows ("select img_id from images where img_glyph_id = " + this.ID)) {  	DataTable ImageTable = db.Bucket.Copy ();  	for (int x = 0; x < ImageTable.Rows.Count; x++) {  		if (x > 199) {  			HasMore = true;  			break;  		}  		GlyphImage GI = new GlyphImage (ImageTable.Rows [x] [0].ToString ());  		this.Images.Add (GI);  	}  }  
Magic Number,Franken_.App_Code,Glyph,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,RefreshImages,The following statement contains a magic number: for (int x = 0; x < ImageTable.Rows.Count; x++) {  	if (x > 199) {  		HasMore = true;  		break;  	}  	GlyphImage GI = new GlyphImage (ImageTable.Rows [x] [0].ToString ());  	this.Images.Add (GI);  }  
Magic Number,Franken_.App_Code,Glyph,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,RefreshImages,The following statement contains a magic number: if (x > 199) {  	HasMore = true;  	break;  }  
Magic Number,Franken_.App_Code,SubList,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,Delete,The following statement contains a magic number: if (Substitution.Contains (" => ")) {  	string[] SubParts = Substitution.Split (new string[] {  		" => "  	}' StringSplitOptions.None);  	if (SubParts.Length == 2) {  		Characters.Remove (SubParts [0]);  		db.ExecuteCommand ("delete from character_subs where cs_character = '" + SubParts [0] + "'");  	}  }  
Magic Number,Franken_.App_Code,SubList,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Font.cs,Delete,The following statement contains a magic number: if (SubParts.Length == 2) {  	Characters.Remove (SubParts [0]);  	db.ExecuteCommand ("delete from character_subs where cs_character = '" + SubParts [0] + "'");  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,ImageWriter,The following statement contains a magic number: if (System.IO.Directory.Exists (OutputPath)) {  	Directory.Delete (OutputPath' true);  	System.Threading.Thread.Sleep (3000);  	System.IO.Directory.CreateDirectory (OutputPath);  }  else {  	System.IO.Directory.CreateDirectory (OutputPath);  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,ImageWriter,The following statement contains a magic number: System.Threading.Thread.Sleep (3000);  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,AddGlyph,The following statement contains a magic number: if (GlyphFile != "") {  	using (Tiff input = Tiff.Open (GlyphFile' "r")) {  		GlyphWidth = input.GetField (TiffTag.IMAGEWIDTH) [0].ToInt ();  		GlyphHeight = input.GetField (TiffTag.IMAGELENGTH) [0].ToInt ();  		GlyphScanSize = input.ScanlineSize ();  		GlyphData = new byte[GlyphHeight][];  		if ((GlyphScanSize * 8) < (GlyphWidth + 8)) {  			for (int h = 0; h < GlyphHeight; h++) {  				GlyphData [h] = new byte[GlyphScanSize];  				input.ReadScanline (GlyphData [h]' h);  			}  			if (GlyphHeight > (CurrentLineBottomHeight - CurrentLineTopHeight)) {  				CurrentLineBottomHeight = CurrentLineTopHeight + GlyphHeight;  			}  			GlyphWord.Add (new GlyphKeeper (GlyphWidth' GlyphHeight' (int)G.XOffset' (int)G.YOffset' GlyphScanSize' G.Unicode' GlyphData));  		}  	}  }  else {  	UnaccountedFor.Add (G.Unicode);  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,AddGlyph,The following statement contains a magic number: if (GlyphFile != "") {  	using (Tiff input = Tiff.Open (GlyphFile' "r")) {  		GlyphWidth = input.GetField (TiffTag.IMAGEWIDTH) [0].ToInt ();  		GlyphHeight = input.GetField (TiffTag.IMAGELENGTH) [0].ToInt ();  		GlyphScanSize = input.ScanlineSize ();  		GlyphData = new byte[GlyphHeight][];  		if ((GlyphScanSize * 8) < (GlyphWidth + 8)) {  			for (int h = 0; h < GlyphHeight; h++) {  				GlyphData [h] = new byte[GlyphScanSize];  				input.ReadScanline (GlyphData [h]' h);  			}  			if (GlyphHeight > (CurrentLineBottomHeight - CurrentLineTopHeight)) {  				CurrentLineBottomHeight = CurrentLineTopHeight + GlyphHeight;  			}  			GlyphWord.Add (new GlyphKeeper (GlyphWidth' GlyphHeight' (int)G.XOffset' (int)G.YOffset' GlyphScanSize' G.Unicode' GlyphData));  		}  	}  }  else {  	UnaccountedFor.Add (G.Unicode);  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,AddGlyph,The following statement contains a magic number: using (Tiff input = Tiff.Open (GlyphFile' "r")) {  	GlyphWidth = input.GetField (TiffTag.IMAGEWIDTH) [0].ToInt ();  	GlyphHeight = input.GetField (TiffTag.IMAGELENGTH) [0].ToInt ();  	GlyphScanSize = input.ScanlineSize ();  	GlyphData = new byte[GlyphHeight][];  	if ((GlyphScanSize * 8) < (GlyphWidth + 8)) {  		for (int h = 0; h < GlyphHeight; h++) {  			GlyphData [h] = new byte[GlyphScanSize];  			input.ReadScanline (GlyphData [h]' h);  		}  		if (GlyphHeight > (CurrentLineBottomHeight - CurrentLineTopHeight)) {  			CurrentLineBottomHeight = CurrentLineTopHeight + GlyphHeight;  		}  		GlyphWord.Add (new GlyphKeeper (GlyphWidth' GlyphHeight' (int)G.XOffset' (int)G.YOffset' GlyphScanSize' G.Unicode' GlyphData));  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,AddGlyph,The following statement contains a magic number: using (Tiff input = Tiff.Open (GlyphFile' "r")) {  	GlyphWidth = input.GetField (TiffTag.IMAGEWIDTH) [0].ToInt ();  	GlyphHeight = input.GetField (TiffTag.IMAGELENGTH) [0].ToInt ();  	GlyphScanSize = input.ScanlineSize ();  	GlyphData = new byte[GlyphHeight][];  	if ((GlyphScanSize * 8) < (GlyphWidth + 8)) {  		for (int h = 0; h < GlyphHeight; h++) {  			GlyphData [h] = new byte[GlyphScanSize];  			input.ReadScanline (GlyphData [h]' h);  		}  		if (GlyphHeight > (CurrentLineBottomHeight - CurrentLineTopHeight)) {  			CurrentLineBottomHeight = CurrentLineTopHeight + GlyphHeight;  		}  		GlyphWord.Add (new GlyphKeeper (GlyphWidth' GlyphHeight' (int)G.XOffset' (int)G.YOffset' GlyphScanSize' G.Unicode' GlyphData));  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,AddGlyph,The following statement contains a magic number: if ((GlyphScanSize * 8) < (GlyphWidth + 8)) {  	for (int h = 0; h < GlyphHeight; h++) {  		GlyphData [h] = new byte[GlyphScanSize];  		input.ReadScanline (GlyphData [h]' h);  	}  	if (GlyphHeight > (CurrentLineBottomHeight - CurrentLineTopHeight)) {  		CurrentLineBottomHeight = CurrentLineTopHeight + GlyphHeight;  	}  	GlyphWord.Add (new GlyphKeeper (GlyphWidth' GlyphHeight' (int)G.XOffset' (int)G.YOffset' GlyphScanSize' G.Unicode' GlyphData));  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,AddGlyph,The following statement contains a magic number: if ((GlyphScanSize * 8) < (GlyphWidth + 8)) {  	for (int h = 0; h < GlyphHeight; h++) {  		GlyphData [h] = new byte[GlyphScanSize];  		input.ReadScanline (GlyphData [h]' h);  	}  	if (GlyphHeight > (CurrentLineBottomHeight - CurrentLineTopHeight)) {  		CurrentLineBottomHeight = CurrentLineTopHeight + GlyphHeight;  	}  	GlyphWord.Add (new GlyphKeeper (GlyphWidth' GlyphHeight' (int)G.XOffset' (int)G.YOffset' GlyphScanSize' G.Unicode' GlyphData));  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,WriteGlyphWord,The following statement contains a magic number: if (PlaceWord (WordWidth' WordHeight))//THIS FUNCTION CHECKS TO MAKE SURE THE WORD CAN FIT ON A PAGE' AND STARTS A NEW LINE OR DOCUMENT IF NEEDED   {  	foreach (GlyphKeeper G in GlyphWord) {  		int GlyphYpos = CurrentLineBottomHeight - G.GlyphHeight + G.GlyphYOffset;  		int GlyphXpos = ByteCursor * 8;  		for (int y = 0; y < G.GlyphHeight; y++) {  			for (int x = 0; x < G.GlyphScanSize; x++) {  				IMAGE [y + GlyphYpos] [x + ByteCursor] = G.GlyphData [y] [x];  			}  		}  		AddBoxFileEntry (GlyphXpos' HEIGHT - CurrentLineBottomHeight - G.GlyphYOffset' G.GlyphWidth' G.GlyphHeight' G.GlyphChar);  		ByteCursor += G.GlyphScanSize + (LETTER_SPACE / BYTESIZE);  	}  	ByteCursor += ((WORD_SPACE - LETTER_SPACE) / BYTESIZE);  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,WriteGlyphWord,The following statement contains a magic number: foreach (GlyphKeeper G in GlyphWord) {  	int GlyphYpos = CurrentLineBottomHeight - G.GlyphHeight + G.GlyphYOffset;  	int GlyphXpos = ByteCursor * 8;  	for (int y = 0; y < G.GlyphHeight; y++) {  		for (int x = 0; x < G.GlyphScanSize; x++) {  			IMAGE [y + GlyphYpos] [x + ByteCursor] = G.GlyphData [y] [x];  		}  	}  	AddBoxFileEntry (GlyphXpos' HEIGHT - CurrentLineBottomHeight - G.GlyphYOffset' G.GlyphWidth' G.GlyphHeight' G.GlyphChar);  	ByteCursor += G.GlyphScanSize + (LETTER_SPACE / BYTESIZE);  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if (((WordWidth + (MARGIN * 2)) >= WIDTH) || ((WordHeight + (MARGIN * 2)) >= HEIGHT)) {  	FitsOnPage = false;  }  else {  	if (((WordHeight + CurrentLineBottomHeight) + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  		if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  			StartNewTiff ();  			CurrentLineTopHeight = MARGIN;  			CurrentLineBottomHeight = MARGIN + WordHeight;  			ByteCursor = MARGIN / BYTESIZE;  		}  		else {  			CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  			CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  			ByteCursor = MARGIN / BYTESIZE;  		}  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if (((WordWidth + (MARGIN * 2)) >= WIDTH) || ((WordHeight + (MARGIN * 2)) >= HEIGHT)) {  	FitsOnPage = false;  }  else {  	if (((WordHeight + CurrentLineBottomHeight) + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  		if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  			StartNewTiff ();  			CurrentLineTopHeight = MARGIN;  			CurrentLineBottomHeight = MARGIN + WordHeight;  			ByteCursor = MARGIN / BYTESIZE;  		}  		else {  			CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  			CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  			ByteCursor = MARGIN / BYTESIZE;  		}  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if (((WordWidth + (MARGIN * 2)) >= WIDTH) || ((WordHeight + (MARGIN * 2)) >= HEIGHT)) {  	FitsOnPage = false;  }  else {  	if (((WordHeight + CurrentLineBottomHeight) + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  		if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  			StartNewTiff ();  			CurrentLineTopHeight = MARGIN;  			CurrentLineBottomHeight = MARGIN + WordHeight;  			ByteCursor = MARGIN / BYTESIZE;  		}  		else {  			CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  			CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  			ByteCursor = MARGIN / BYTESIZE;  		}  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if (((WordWidth + (MARGIN * 2)) >= WIDTH) || ((WordHeight + (MARGIN * 2)) >= HEIGHT)) {  	FitsOnPage = false;  }  else {  	if (((WordHeight + CurrentLineBottomHeight) + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  		if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  			StartNewTiff ();  			CurrentLineTopHeight = MARGIN;  			CurrentLineBottomHeight = MARGIN + WordHeight;  			ByteCursor = MARGIN / BYTESIZE;  		}  		else {  			CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  			CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  			ByteCursor = MARGIN / BYTESIZE;  		}  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if (((WordWidth + (MARGIN * 2)) >= WIDTH) || ((WordHeight + (MARGIN * 2)) >= HEIGHT)) {  	FitsOnPage = false;  }  else {  	if (((WordHeight + CurrentLineBottomHeight) + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  		if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  			StartNewTiff ();  			CurrentLineTopHeight = MARGIN;  			CurrentLineBottomHeight = MARGIN + WordHeight;  			ByteCursor = MARGIN / BYTESIZE;  		}  		else {  			CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  			CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  			ByteCursor = MARGIN / BYTESIZE;  		}  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if (((WordWidth + (MARGIN * 2)) >= WIDTH) || ((WordHeight + (MARGIN * 2)) >= HEIGHT)) {  	FitsOnPage = false;  }  else {  	if (((WordHeight + CurrentLineBottomHeight) + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  		if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  			StartNewTiff ();  			CurrentLineTopHeight = MARGIN;  			CurrentLineBottomHeight = MARGIN + WordHeight;  			ByteCursor = MARGIN / BYTESIZE;  		}  		else {  			CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  			CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  			ByteCursor = MARGIN / BYTESIZE;  		}  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if (((WordHeight + CurrentLineBottomHeight) + (MARGIN * 2)) >= HEIGHT) {  	StartNewTiff ();  	CurrentLineTopHeight = MARGIN;  	CurrentLineBottomHeight = MARGIN + WordHeight;  	ByteCursor = MARGIN / BYTESIZE;  }  else if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  	if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else {  		CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  		CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if (((WordHeight + CurrentLineBottomHeight) + (MARGIN * 2)) >= HEIGHT) {  	StartNewTiff ();  	CurrentLineTopHeight = MARGIN;  	CurrentLineBottomHeight = MARGIN + WordHeight;  	ByteCursor = MARGIN / BYTESIZE;  }  else if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  	if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else {  		CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  		CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if (((WordHeight + CurrentLineBottomHeight) + (MARGIN * 2)) >= HEIGHT) {  	StartNewTiff ();  	CurrentLineTopHeight = MARGIN;  	CurrentLineBottomHeight = MARGIN + WordHeight;  	ByteCursor = MARGIN / BYTESIZE;  }  else if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  	if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else {  		CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  		CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if (((WordHeight + CurrentLineBottomHeight) + (MARGIN * 2)) >= HEIGHT) {  	StartNewTiff ();  	CurrentLineTopHeight = MARGIN;  	CurrentLineBottomHeight = MARGIN + WordHeight;  	ByteCursor = MARGIN / BYTESIZE;  }  else if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  	if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else {  		CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  		CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  	if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else {  		CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  		CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  	if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else {  		CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  		CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if ((WordWidth + (ByteCursor * 8) + (MARGIN * 2)) >= WIDTH) {  	if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  		StartNewTiff ();  		CurrentLineTopHeight = MARGIN;  		CurrentLineBottomHeight = MARGIN + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  	else {  		CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  		CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  		ByteCursor = MARGIN / BYTESIZE;  	}  }  
Magic Number,Franken_.App_Code,ImageWriter,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,PlaceWord,The following statement contains a magic number: if ((CurrentLineBottomHeight + LINE_SPACE + WordHeight + (MARGIN * 2)) >= HEIGHT) {  	StartNewTiff ();  	CurrentLineTopHeight = MARGIN;  	CurrentLineBottomHeight = MARGIN + WordHeight;  	ByteCursor = MARGIN / BYTESIZE;  }  else {  	CurrentLineTopHeight = CurrentLineBottomHeight + LINE_SPACE;  	CurrentLineBottomHeight = CurrentLineTopHeight + WordHeight;  	ByteCursor = MARGIN / BYTESIZE;  }  
Magic Number,Franken_.App_Code,GlyphKeeper,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,SetBits,The following statement contains a magic number: if (startBit < 0 || startBit > 7 || bitCount < 0 || bitCount > 7 || startBit + bitCount > 8)  	throw new OverflowException ();  
Magic Number,Franken_.App_Code,GlyphKeeper,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,SetBits,The following statement contains a magic number: if (startBit < 0 || startBit > 7 || bitCount < 0 || bitCount > 7 || startBit + bitCount > 8)  	throw new OverflowException ();  
Magic Number,Franken_.App_Code,GlyphKeeper,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\ImageWriter.cs,SetBits,The following statement contains a magic number: if (startBit < 0 || startBit > 7 || bitCount < 0 || bitCount > 7 || startBit + bitCount > 8)  	throw new OverflowException ();  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,DoTiffXMLIngestion,The following statement contains a magic number: if (FontID != "" && FontID != "" && TiffXMLFolder != "") {  	App_Code.Font myFont = new App_Code.Font (FontID' true' true);  	string FullInputDir = TiffXMLFolder + "\\";  	string FullOutputDir = db.DataDirectory + "\\GlyphExtraction\\Output\\" + myFont.ID;  	string[] InputFiles = System.IO.Directory.GetFiles (FullInputDir' "*.xml"' SearchOption.TopDirectoryOnly);  	if (InputFiles.Count () > 0) {  		Increment = 50 / InputFiles.Count ();  	}  	int CurrentProgress = 0;  	foreach (string F in InputFiles) {  		if (Slave.CancellationPending) {  			break;  		}  		else {  			string inputFileName = F.Replace (FullInputDir' "");  			if (inputFileName.EndsWith (".xml") && File.Exists (F.Replace (".xml"' ".tif"))) {  				if (!System.IO.Directory.Exists (FullOutputDir + "\\" + inputFileName.Replace (".xml"' ""))) {  					System.IO.Directory.CreateDirectory (FullOutputDir + "\\" + inputFileName.Replace (".xml"' ""));  				}  				ProcessStatus = "Extracting " + inputFileName + "...";  				Slave.ReportProgress (((int)(CurrentProgress * Increment)));  				string inputImageFilePath = FullInputDir + inputFileName.Replace (".xml"' ".tif");  				string inputXmlFilePath = FullInputDir + inputFileName;  				string outputFolderPath = FullOutputDir + "\\" + inputFileName.Replace (".xml"' "");  				PageXml pageXml = PageXmlFactory.GetPageXml (F);  				string extractor = pageXml.ImageExtratorRelPath;  				string command = string.Format (@"{0}\GlyphExtraction\{1}"' db.DataDirectory' extractor);  				FileInfo extractorExec = new FileInfo (command);  				string options = pageXml.CreateImageExtractorCommandLine (inputImageFilePath' inputXmlFilePath' outputFolderPath);  				ExecuteCommand (command' options' extractorExec.DirectoryName);  				CurrentProgress++;  				ProcessStatus = "Processing extracted images...";  				Slave.ReportProgress (((int)(CurrentProgress * Increment)));  				myFont.IngestImages (LangName' myFont.Name' inputFileName.Replace (".xml"' "")' FullInputDir + "\\" + inputFileName' FullOutputDir + "\\" + inputFileName.Replace (".xml"' "")' UseSubList);  			}  		}  		CurrentProgress++;  		ProcessStatus = "Moving to next TIF/XML pair...";  		Slave.ReportProgress (((int)(CurrentProgress * Increment)));  	}  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,DoTiffXMLIngestion,The following statement contains a magic number: if (InputFiles.Count () > 0) {  	Increment = 50 / InputFiles.Count ();  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,DoTiffXMLIngestion,The following statement contains a magic number: Increment = 50 / InputFiles.Count ();  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: if (res == System.Windows.Forms.DialogResult.OK) {  	FontZipFile = fileBrowser.FileName;  	NewLanguage langForm = new NewLanguage (true);  	langForm.ShowDialog ();  	if (langForm.NewName != "") {  		FontName = langForm.NewName;  		App_Code.Font impFont = new App_Code.Font ();  		impFont.Name = FontName;  		impFont.Save (false);  		FontDir = db.DataDirectory + "\\Temp\\" + impFont.ID;  		if (!Directory.Exists (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID)) {  			Directory.CreateDirectory (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID);  		}  		if (!Directory.Exists (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID)) {  			Directory.CreateDirectory (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID);  		}  		if (!Directory.Exists (db.DataDirectory + "\\Temp")) {  			Directory.CreateDirectory (db.DataDirectory + "\\Temp");  		}  		if (Directory.Exists (FontDir)) {  			Directory.Delete (FontDir' true);  		}  		ZipFile.ExtractToDirectory (FontZipFile' FontDir);  		if (Directory.Exists (FontDir)) {  			if (Directory.Exists (FontDir + "\\GlyphExtraction\\Output\\FONTNAME")) {  				string[] subDirs = Directory.GetDirectories (FontDir + "\\GlyphExtraction\\Output\\FONTNAME");  				foreach (string subDir in subDirs) {  					string[] subDirParts = subDir.Split (new char[] {  						'\\'  					});  					string subDirName = subDirParts [subDirParts.Length - 1];  					DirectoryInfo From = new DirectoryInfo (subDir);  					DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID + "\\" + subDirName);  					CopyDir (From' To);  				}  			}  			if (Directory.Exists (FontDir + "\\TiffBoxPairs\\FONTNAME")) {  				string[] subDirs = Directory.GetDirectories (FontDir + "\\TiffBoxPairs\\FONTNAME");  				foreach (string subDir in subDirs) {  					string[] subDirParts = subDir.Split (new char[] {  						'\\'  					});  					string subDirName = subDirParts [subDirParts.Length - 1];  					DirectoryInfo From = new DirectoryInfo (subDir);  					DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID + "\\" + subDirName);  					CopyDir (From' To);  				}  			}  			//read font data  			if (File.Exists (FontDir + "\\font.txt")) {  				using (StreamReader Fin = new StreamReader (FontDir + "\\font.txt")) {  					string Line = "";  					while ((Line = Fin.ReadLine ()) != null) {  						string[] lineParts = Line.Split (new char[] {  							':'  						});  						switch (lineParts [0]) {  						case "lineheight":  							impFont.LineHeight = System.Convert.ToInt32 (lineParts [1].Trim ());  							break;  						case "bold":  							impFont.Bold = System.Convert.ToInt32 (lineParts [1].Trim ());  							break;  						case "fixed":  							impFont.Fixed = System.Convert.ToInt32 (lineParts [1].Trim ());  							break;  						case "fraktur":  							impFont.Fraktur = System.Convert.ToInt32 (lineParts [1].Trim ());  							break;  						case "italic":  							impFont.Italic = System.Convert.ToInt32 (lineParts [1].Trim ());  							break;  						case "serif":  							impFont.Serif = System.Convert.ToInt32 (lineParts [1].Trim ());  							break;  						}  					}  					Fin.Close ();  					impFont.Save (false);  				}  			}  			//read glyphs  			if (impFont.ID != "") {  				string[] glyphFiles = Directory.GetFiles (FontDir' "glyph*.txt");  				foreach (string glyphFile in glyphFiles) {  					Glyph imGlyph = new Glyph ();  					imGlyph.FontID = impFont.ID;  					using (StreamReader Fin = new StreamReader (glyphFile)) {  						string Line = "";  						while ((Line = Fin.ReadLine ()) != null) {  							string[] lineParts = Line.Split (new char[] {  								':'  							});  							switch (lineParts [0]) {  							case "unicode":  								if (Line.Trim () == "unicode::") {  									imGlyph.Unicode = ":";  								}  								else {  									imGlyph.Unicode = lineParts [1].Trim ();  								}  								break;  							case "xoffset":  								imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  								break;  							case "yoffset":  								imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  								imGlyph.Save (false);  								break;  							case "image":  								if (imGlyph.ID != "" && lineParts.Length == 3) {  									GlyphImage imImg = new GlyphImage ();  									imImg.GlyphID = imGlyph.ID;  									imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  									imImg.Status = lineParts [2].Trim ();  									imImg.Save ();  								}  								break;  							}  						}  						Fin.Close ();  					}  				}  			}  			//clean up  			if (Directory.Exists (FontDir)) {  				Directory.Delete (FontDir' true);  			}  			RefreshFontList ();  			MessageBox.Show ("Font '" + FontName + "' imported successfully.");  		}  	}  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: if (res == System.Windows.Forms.DialogResult.OK) {  	FontZipFile = fileBrowser.FileName;  	NewLanguage langForm = new NewLanguage (true);  	langForm.ShowDialog ();  	if (langForm.NewName != "") {  		FontName = langForm.NewName;  		App_Code.Font impFont = new App_Code.Font ();  		impFont.Name = FontName;  		impFont.Save (false);  		FontDir = db.DataDirectory + "\\Temp\\" + impFont.ID;  		if (!Directory.Exists (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID)) {  			Directory.CreateDirectory (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID);  		}  		if (!Directory.Exists (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID)) {  			Directory.CreateDirectory (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID);  		}  		if (!Directory.Exists (db.DataDirectory + "\\Temp")) {  			Directory.CreateDirectory (db.DataDirectory + "\\Temp");  		}  		if (Directory.Exists (FontDir)) {  			Directory.Delete (FontDir' true);  		}  		ZipFile.ExtractToDirectory (FontZipFile' FontDir);  		if (Directory.Exists (FontDir)) {  			if (Directory.Exists (FontDir + "\\GlyphExtraction\\Output\\FONTNAME")) {  				string[] subDirs = Directory.GetDirectories (FontDir + "\\GlyphExtraction\\Output\\FONTNAME");  				foreach (string subDir in subDirs) {  					string[] subDirParts = subDir.Split (new char[] {  						'\\'  					});  					string subDirName = subDirParts [subDirParts.Length - 1];  					DirectoryInfo From = new DirectoryInfo (subDir);  					DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID + "\\" + subDirName);  					CopyDir (From' To);  				}  			}  			if (Directory.Exists (FontDir + "\\TiffBoxPairs\\FONTNAME")) {  				string[] subDirs = Directory.GetDirectories (FontDir + "\\TiffBoxPairs\\FONTNAME");  				foreach (string subDir in subDirs) {  					string[] subDirParts = subDir.Split (new char[] {  						'\\'  					});  					string subDirName = subDirParts [subDirParts.Length - 1];  					DirectoryInfo From = new DirectoryInfo (subDir);  					DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID + "\\" + subDirName);  					CopyDir (From' To);  				}  			}  			//read font data  			if (File.Exists (FontDir + "\\font.txt")) {  				using (StreamReader Fin = new StreamReader (FontDir + "\\font.txt")) {  					string Line = "";  					while ((Line = Fin.ReadLine ()) != null) {  						string[] lineParts = Line.Split (new char[] {  							':'  						});  						switch (lineParts [0]) {  						case "lineheight":  							impFont.LineHeight = System.Convert.ToInt32 (lineParts [1].Trim ());  							break;  						case "bold":  							impFont.Bold = System.Convert.ToInt32 (lineParts [1].Trim ());  							break;  						case "fixed":  							impFont.Fixed = System.Convert.ToInt32 (lineParts [1].Trim ());  							break;  						case "fraktur":  							impFont.Fraktur = System.Convert.ToInt32 (lineParts [1].Trim ());  							break;  						case "italic":  							impFont.Italic = System.Convert.ToInt32 (lineParts [1].Trim ());  							break;  						case "serif":  							impFont.Serif = System.Convert.ToInt32 (lineParts [1].Trim ());  							break;  						}  					}  					Fin.Close ();  					impFont.Save (false);  				}  			}  			//read glyphs  			if (impFont.ID != "") {  				string[] glyphFiles = Directory.GetFiles (FontDir' "glyph*.txt");  				foreach (string glyphFile in glyphFiles) {  					Glyph imGlyph = new Glyph ();  					imGlyph.FontID = impFont.ID;  					using (StreamReader Fin = new StreamReader (glyphFile)) {  						string Line = "";  						while ((Line = Fin.ReadLine ()) != null) {  							string[] lineParts = Line.Split (new char[] {  								':'  							});  							switch (lineParts [0]) {  							case "unicode":  								if (Line.Trim () == "unicode::") {  									imGlyph.Unicode = ":";  								}  								else {  									imGlyph.Unicode = lineParts [1].Trim ();  								}  								break;  							case "xoffset":  								imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  								break;  							case "yoffset":  								imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  								imGlyph.Save (false);  								break;  							case "image":  								if (imGlyph.ID != "" && lineParts.Length == 3) {  									GlyphImage imImg = new GlyphImage ();  									imImg.GlyphID = imGlyph.ID;  									imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  									imImg.Status = lineParts [2].Trim ();  									imImg.Save ();  								}  								break;  							}  						}  						Fin.Close ();  					}  				}  			}  			//clean up  			if (Directory.Exists (FontDir)) {  				Directory.Delete (FontDir' true);  			}  			RefreshFontList ();  			MessageBox.Show ("Font '" + FontName + "' imported successfully.");  		}  	}  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: if (langForm.NewName != "") {  	FontName = langForm.NewName;  	App_Code.Font impFont = new App_Code.Font ();  	impFont.Name = FontName;  	impFont.Save (false);  	FontDir = db.DataDirectory + "\\Temp\\" + impFont.ID;  	if (!Directory.Exists (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID)) {  		Directory.CreateDirectory (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID);  	}  	if (!Directory.Exists (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID)) {  		Directory.CreateDirectory (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID);  	}  	if (!Directory.Exists (db.DataDirectory + "\\Temp")) {  		Directory.CreateDirectory (db.DataDirectory + "\\Temp");  	}  	if (Directory.Exists (FontDir)) {  		Directory.Delete (FontDir' true);  	}  	ZipFile.ExtractToDirectory (FontZipFile' FontDir);  	if (Directory.Exists (FontDir)) {  		if (Directory.Exists (FontDir + "\\GlyphExtraction\\Output\\FONTNAME")) {  			string[] subDirs = Directory.GetDirectories (FontDir + "\\GlyphExtraction\\Output\\FONTNAME");  			foreach (string subDir in subDirs) {  				string[] subDirParts = subDir.Split (new char[] {  					'\\'  				});  				string subDirName = subDirParts [subDirParts.Length - 1];  				DirectoryInfo From = new DirectoryInfo (subDir);  				DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID + "\\" + subDirName);  				CopyDir (From' To);  			}  		}  		if (Directory.Exists (FontDir + "\\TiffBoxPairs\\FONTNAME")) {  			string[] subDirs = Directory.GetDirectories (FontDir + "\\TiffBoxPairs\\FONTNAME");  			foreach (string subDir in subDirs) {  				string[] subDirParts = subDir.Split (new char[] {  					'\\'  				});  				string subDirName = subDirParts [subDirParts.Length - 1];  				DirectoryInfo From = new DirectoryInfo (subDir);  				DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID + "\\" + subDirName);  				CopyDir (From' To);  			}  		}  		//read font data  		if (File.Exists (FontDir + "\\font.txt")) {  			using (StreamReader Fin = new StreamReader (FontDir + "\\font.txt")) {  				string Line = "";  				while ((Line = Fin.ReadLine ()) != null) {  					string[] lineParts = Line.Split (new char[] {  						':'  					});  					switch (lineParts [0]) {  					case "lineheight":  						impFont.LineHeight = System.Convert.ToInt32 (lineParts [1].Trim ());  						break;  					case "bold":  						impFont.Bold = System.Convert.ToInt32 (lineParts [1].Trim ());  						break;  					case "fixed":  						impFont.Fixed = System.Convert.ToInt32 (lineParts [1].Trim ());  						break;  					case "fraktur":  						impFont.Fraktur = System.Convert.ToInt32 (lineParts [1].Trim ());  						break;  					case "italic":  						impFont.Italic = System.Convert.ToInt32 (lineParts [1].Trim ());  						break;  					case "serif":  						impFont.Serif = System.Convert.ToInt32 (lineParts [1].Trim ());  						break;  					}  				}  				Fin.Close ();  				impFont.Save (false);  			}  		}  		//read glyphs  		if (impFont.ID != "") {  			string[] glyphFiles = Directory.GetFiles (FontDir' "glyph*.txt");  			foreach (string glyphFile in glyphFiles) {  				Glyph imGlyph = new Glyph ();  				imGlyph.FontID = impFont.ID;  				using (StreamReader Fin = new StreamReader (glyphFile)) {  					string Line = "";  					while ((Line = Fin.ReadLine ()) != null) {  						string[] lineParts = Line.Split (new char[] {  							':'  						});  						switch (lineParts [0]) {  						case "unicode":  							if (Line.Trim () == "unicode::") {  								imGlyph.Unicode = ":";  							}  							else {  								imGlyph.Unicode = lineParts [1].Trim ();  							}  							break;  						case "xoffset":  							imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  							break;  						case "yoffset":  							imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  							imGlyph.Save (false);  							break;  						case "image":  							if (imGlyph.ID != "" && lineParts.Length == 3) {  								GlyphImage imImg = new GlyphImage ();  								imImg.GlyphID = imGlyph.ID;  								imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  								imImg.Status = lineParts [2].Trim ();  								imImg.Save ();  							}  							break;  						}  					}  					Fin.Close ();  				}  			}  		}  		//clean up  		if (Directory.Exists (FontDir)) {  			Directory.Delete (FontDir' true);  		}  		RefreshFontList ();  		MessageBox.Show ("Font '" + FontName + "' imported successfully.");  	}  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: if (langForm.NewName != "") {  	FontName = langForm.NewName;  	App_Code.Font impFont = new App_Code.Font ();  	impFont.Name = FontName;  	impFont.Save (false);  	FontDir = db.DataDirectory + "\\Temp\\" + impFont.ID;  	if (!Directory.Exists (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID)) {  		Directory.CreateDirectory (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID);  	}  	if (!Directory.Exists (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID)) {  		Directory.CreateDirectory (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID);  	}  	if (!Directory.Exists (db.DataDirectory + "\\Temp")) {  		Directory.CreateDirectory (db.DataDirectory + "\\Temp");  	}  	if (Directory.Exists (FontDir)) {  		Directory.Delete (FontDir' true);  	}  	ZipFile.ExtractToDirectory (FontZipFile' FontDir);  	if (Directory.Exists (FontDir)) {  		if (Directory.Exists (FontDir + "\\GlyphExtraction\\Output\\FONTNAME")) {  			string[] subDirs = Directory.GetDirectories (FontDir + "\\GlyphExtraction\\Output\\FONTNAME");  			foreach (string subDir in subDirs) {  				string[] subDirParts = subDir.Split (new char[] {  					'\\'  				});  				string subDirName = subDirParts [subDirParts.Length - 1];  				DirectoryInfo From = new DirectoryInfo (subDir);  				DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID + "\\" + subDirName);  				CopyDir (From' To);  			}  		}  		if (Directory.Exists (FontDir + "\\TiffBoxPairs\\FONTNAME")) {  			string[] subDirs = Directory.GetDirectories (FontDir + "\\TiffBoxPairs\\FONTNAME");  			foreach (string subDir in subDirs) {  				string[] subDirParts = subDir.Split (new char[] {  					'\\'  				});  				string subDirName = subDirParts [subDirParts.Length - 1];  				DirectoryInfo From = new DirectoryInfo (subDir);  				DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID + "\\" + subDirName);  				CopyDir (From' To);  			}  		}  		//read font data  		if (File.Exists (FontDir + "\\font.txt")) {  			using (StreamReader Fin = new StreamReader (FontDir + "\\font.txt")) {  				string Line = "";  				while ((Line = Fin.ReadLine ()) != null) {  					string[] lineParts = Line.Split (new char[] {  						':'  					});  					switch (lineParts [0]) {  					case "lineheight":  						impFont.LineHeight = System.Convert.ToInt32 (lineParts [1].Trim ());  						break;  					case "bold":  						impFont.Bold = System.Convert.ToInt32 (lineParts [1].Trim ());  						break;  					case "fixed":  						impFont.Fixed = System.Convert.ToInt32 (lineParts [1].Trim ());  						break;  					case "fraktur":  						impFont.Fraktur = System.Convert.ToInt32 (lineParts [1].Trim ());  						break;  					case "italic":  						impFont.Italic = System.Convert.ToInt32 (lineParts [1].Trim ());  						break;  					case "serif":  						impFont.Serif = System.Convert.ToInt32 (lineParts [1].Trim ());  						break;  					}  				}  				Fin.Close ();  				impFont.Save (false);  			}  		}  		//read glyphs  		if (impFont.ID != "") {  			string[] glyphFiles = Directory.GetFiles (FontDir' "glyph*.txt");  			foreach (string glyphFile in glyphFiles) {  				Glyph imGlyph = new Glyph ();  				imGlyph.FontID = impFont.ID;  				using (StreamReader Fin = new StreamReader (glyphFile)) {  					string Line = "";  					while ((Line = Fin.ReadLine ()) != null) {  						string[] lineParts = Line.Split (new char[] {  							':'  						});  						switch (lineParts [0]) {  						case "unicode":  							if (Line.Trim () == "unicode::") {  								imGlyph.Unicode = ":";  							}  							else {  								imGlyph.Unicode = lineParts [1].Trim ();  							}  							break;  						case "xoffset":  							imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  							break;  						case "yoffset":  							imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  							imGlyph.Save (false);  							break;  						case "image":  							if (imGlyph.ID != "" && lineParts.Length == 3) {  								GlyphImage imImg = new GlyphImage ();  								imImg.GlyphID = imGlyph.ID;  								imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  								imImg.Status = lineParts [2].Trim ();  								imImg.Save ();  							}  							break;  						}  					}  					Fin.Close ();  				}  			}  		}  		//clean up  		if (Directory.Exists (FontDir)) {  			Directory.Delete (FontDir' true);  		}  		RefreshFontList ();  		MessageBox.Show ("Font '" + FontName + "' imported successfully.");  	}  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: if (Directory.Exists (FontDir)) {  	if (Directory.Exists (FontDir + "\\GlyphExtraction\\Output\\FONTNAME")) {  		string[] subDirs = Directory.GetDirectories (FontDir + "\\GlyphExtraction\\Output\\FONTNAME");  		foreach (string subDir in subDirs) {  			string[] subDirParts = subDir.Split (new char[] {  				'\\'  			});  			string subDirName = subDirParts [subDirParts.Length - 1];  			DirectoryInfo From = new DirectoryInfo (subDir);  			DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID + "\\" + subDirName);  			CopyDir (From' To);  		}  	}  	if (Directory.Exists (FontDir + "\\TiffBoxPairs\\FONTNAME")) {  		string[] subDirs = Directory.GetDirectories (FontDir + "\\TiffBoxPairs\\FONTNAME");  		foreach (string subDir in subDirs) {  			string[] subDirParts = subDir.Split (new char[] {  				'\\'  			});  			string subDirName = subDirParts [subDirParts.Length - 1];  			DirectoryInfo From = new DirectoryInfo (subDir);  			DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID + "\\" + subDirName);  			CopyDir (From' To);  		}  	}  	//read font data  	if (File.Exists (FontDir + "\\font.txt")) {  		using (StreamReader Fin = new StreamReader (FontDir + "\\font.txt")) {  			string Line = "";  			while ((Line = Fin.ReadLine ()) != null) {  				string[] lineParts = Line.Split (new char[] {  					':'  				});  				switch (lineParts [0]) {  				case "lineheight":  					impFont.LineHeight = System.Convert.ToInt32 (lineParts [1].Trim ());  					break;  				case "bold":  					impFont.Bold = System.Convert.ToInt32 (lineParts [1].Trim ());  					break;  				case "fixed":  					impFont.Fixed = System.Convert.ToInt32 (lineParts [1].Trim ());  					break;  				case "fraktur":  					impFont.Fraktur = System.Convert.ToInt32 (lineParts [1].Trim ());  					break;  				case "italic":  					impFont.Italic = System.Convert.ToInt32 (lineParts [1].Trim ());  					break;  				case "serif":  					impFont.Serif = System.Convert.ToInt32 (lineParts [1].Trim ());  					break;  				}  			}  			Fin.Close ();  			impFont.Save (false);  		}  	}  	//read glyphs  	if (impFont.ID != "") {  		string[] glyphFiles = Directory.GetFiles (FontDir' "glyph*.txt");  		foreach (string glyphFile in glyphFiles) {  			Glyph imGlyph = new Glyph ();  			imGlyph.FontID = impFont.ID;  			using (StreamReader Fin = new StreamReader (glyphFile)) {  				string Line = "";  				while ((Line = Fin.ReadLine ()) != null) {  					string[] lineParts = Line.Split (new char[] {  						':'  					});  					switch (lineParts [0]) {  					case "unicode":  						if (Line.Trim () == "unicode::") {  							imGlyph.Unicode = ":";  						}  						else {  							imGlyph.Unicode = lineParts [1].Trim ();  						}  						break;  					case "xoffset":  						imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  						break;  					case "yoffset":  						imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  						imGlyph.Save (false);  						break;  					case "image":  						if (imGlyph.ID != "" && lineParts.Length == 3) {  							GlyphImage imImg = new GlyphImage ();  							imImg.GlyphID = imGlyph.ID;  							imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  							imImg.Status = lineParts [2].Trim ();  							imImg.Save ();  						}  						break;  					}  				}  				Fin.Close ();  			}  		}  	}  	//clean up  	if (Directory.Exists (FontDir)) {  		Directory.Delete (FontDir' true);  	}  	RefreshFontList ();  	MessageBox.Show ("Font '" + FontName + "' imported successfully.");  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: if (Directory.Exists (FontDir)) {  	if (Directory.Exists (FontDir + "\\GlyphExtraction\\Output\\FONTNAME")) {  		string[] subDirs = Directory.GetDirectories (FontDir + "\\GlyphExtraction\\Output\\FONTNAME");  		foreach (string subDir in subDirs) {  			string[] subDirParts = subDir.Split (new char[] {  				'\\'  			});  			string subDirName = subDirParts [subDirParts.Length - 1];  			DirectoryInfo From = new DirectoryInfo (subDir);  			DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\GlyphExtraction\\Output\\" + impFont.ID + "\\" + subDirName);  			CopyDir (From' To);  		}  	}  	if (Directory.Exists (FontDir + "\\TiffBoxPairs\\FONTNAME")) {  		string[] subDirs = Directory.GetDirectories (FontDir + "\\TiffBoxPairs\\FONTNAME");  		foreach (string subDir in subDirs) {  			string[] subDirParts = subDir.Split (new char[] {  				'\\'  			});  			string subDirName = subDirParts [subDirParts.Length - 1];  			DirectoryInfo From = new DirectoryInfo (subDir);  			DirectoryInfo To = new DirectoryInfo (db.DataDirectory + "\\TiffBoxPairs\\" + impFont.ID + "\\" + subDirName);  			CopyDir (From' To);  		}  	}  	//read font data  	if (File.Exists (FontDir + "\\font.txt")) {  		using (StreamReader Fin = new StreamReader (FontDir + "\\font.txt")) {  			string Line = "";  			while ((Line = Fin.ReadLine ()) != null) {  				string[] lineParts = Line.Split (new char[] {  					':'  				});  				switch (lineParts [0]) {  				case "lineheight":  					impFont.LineHeight = System.Convert.ToInt32 (lineParts [1].Trim ());  					break;  				case "bold":  					impFont.Bold = System.Convert.ToInt32 (lineParts [1].Trim ());  					break;  				case "fixed":  					impFont.Fixed = System.Convert.ToInt32 (lineParts [1].Trim ());  					break;  				case "fraktur":  					impFont.Fraktur = System.Convert.ToInt32 (lineParts [1].Trim ());  					break;  				case "italic":  					impFont.Italic = System.Convert.ToInt32 (lineParts [1].Trim ());  					break;  				case "serif":  					impFont.Serif = System.Convert.ToInt32 (lineParts [1].Trim ());  					break;  				}  			}  			Fin.Close ();  			impFont.Save (false);  		}  	}  	//read glyphs  	if (impFont.ID != "") {  		string[] glyphFiles = Directory.GetFiles (FontDir' "glyph*.txt");  		foreach (string glyphFile in glyphFiles) {  			Glyph imGlyph = new Glyph ();  			imGlyph.FontID = impFont.ID;  			using (StreamReader Fin = new StreamReader (glyphFile)) {  				string Line = "";  				while ((Line = Fin.ReadLine ()) != null) {  					string[] lineParts = Line.Split (new char[] {  						':'  					});  					switch (lineParts [0]) {  					case "unicode":  						if (Line.Trim () == "unicode::") {  							imGlyph.Unicode = ":";  						}  						else {  							imGlyph.Unicode = lineParts [1].Trim ();  						}  						break;  					case "xoffset":  						imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  						break;  					case "yoffset":  						imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  						imGlyph.Save (false);  						break;  					case "image":  						if (imGlyph.ID != "" && lineParts.Length == 3) {  							GlyphImage imImg = new GlyphImage ();  							imImg.GlyphID = imGlyph.ID;  							imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  							imImg.Status = lineParts [2].Trim ();  							imImg.Save ();  						}  						break;  					}  				}  				Fin.Close ();  			}  		}  	}  	//clean up  	if (Directory.Exists (FontDir)) {  		Directory.Delete (FontDir' true);  	}  	RefreshFontList ();  	MessageBox.Show ("Font '" + FontName + "' imported successfully.");  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: if (impFont.ID != "") {  	string[] glyphFiles = Directory.GetFiles (FontDir' "glyph*.txt");  	foreach (string glyphFile in glyphFiles) {  		Glyph imGlyph = new Glyph ();  		imGlyph.FontID = impFont.ID;  		using (StreamReader Fin = new StreamReader (glyphFile)) {  			string Line = "";  			while ((Line = Fin.ReadLine ()) != null) {  				string[] lineParts = Line.Split (new char[] {  					':'  				});  				switch (lineParts [0]) {  				case "unicode":  					if (Line.Trim () == "unicode::") {  						imGlyph.Unicode = ":";  					}  					else {  						imGlyph.Unicode = lineParts [1].Trim ();  					}  					break;  				case "xoffset":  					imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  					break;  				case "yoffset":  					imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  					imGlyph.Save (false);  					break;  				case "image":  					if (imGlyph.ID != "" && lineParts.Length == 3) {  						GlyphImage imImg = new GlyphImage ();  						imImg.GlyphID = imGlyph.ID;  						imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  						imImg.Status = lineParts [2].Trim ();  						imImg.Save ();  					}  					break;  				}  			}  			Fin.Close ();  		}  	}  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: if (impFont.ID != "") {  	string[] glyphFiles = Directory.GetFiles (FontDir' "glyph*.txt");  	foreach (string glyphFile in glyphFiles) {  		Glyph imGlyph = new Glyph ();  		imGlyph.FontID = impFont.ID;  		using (StreamReader Fin = new StreamReader (glyphFile)) {  			string Line = "";  			while ((Line = Fin.ReadLine ()) != null) {  				string[] lineParts = Line.Split (new char[] {  					':'  				});  				switch (lineParts [0]) {  				case "unicode":  					if (Line.Trim () == "unicode::") {  						imGlyph.Unicode = ":";  					}  					else {  						imGlyph.Unicode = lineParts [1].Trim ();  					}  					break;  				case "xoffset":  					imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  					break;  				case "yoffset":  					imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  					imGlyph.Save (false);  					break;  				case "image":  					if (imGlyph.ID != "" && lineParts.Length == 3) {  						GlyphImage imImg = new GlyphImage ();  						imImg.GlyphID = imGlyph.ID;  						imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  						imImg.Status = lineParts [2].Trim ();  						imImg.Save ();  					}  					break;  				}  			}  			Fin.Close ();  		}  	}  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: foreach (string glyphFile in glyphFiles) {  	Glyph imGlyph = new Glyph ();  	imGlyph.FontID = impFont.ID;  	using (StreamReader Fin = new StreamReader (glyphFile)) {  		string Line = "";  		while ((Line = Fin.ReadLine ()) != null) {  			string[] lineParts = Line.Split (new char[] {  				':'  			});  			switch (lineParts [0]) {  			case "unicode":  				if (Line.Trim () == "unicode::") {  					imGlyph.Unicode = ":";  				}  				else {  					imGlyph.Unicode = lineParts [1].Trim ();  				}  				break;  			case "xoffset":  				imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  				break;  			case "yoffset":  				imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  				imGlyph.Save (false);  				break;  			case "image":  				if (imGlyph.ID != "" && lineParts.Length == 3) {  					GlyphImage imImg = new GlyphImage ();  					imImg.GlyphID = imGlyph.ID;  					imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  					imImg.Status = lineParts [2].Trim ();  					imImg.Save ();  				}  				break;  			}  		}  		Fin.Close ();  	}  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: foreach (string glyphFile in glyphFiles) {  	Glyph imGlyph = new Glyph ();  	imGlyph.FontID = impFont.ID;  	using (StreamReader Fin = new StreamReader (glyphFile)) {  		string Line = "";  		while ((Line = Fin.ReadLine ()) != null) {  			string[] lineParts = Line.Split (new char[] {  				':'  			});  			switch (lineParts [0]) {  			case "unicode":  				if (Line.Trim () == "unicode::") {  					imGlyph.Unicode = ":";  				}  				else {  					imGlyph.Unicode = lineParts [1].Trim ();  				}  				break;  			case "xoffset":  				imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  				break;  			case "yoffset":  				imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  				imGlyph.Save (false);  				break;  			case "image":  				if (imGlyph.ID != "" && lineParts.Length == 3) {  					GlyphImage imImg = new GlyphImage ();  					imImg.GlyphID = imGlyph.ID;  					imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  					imImg.Status = lineParts [2].Trim ();  					imImg.Save ();  				}  				break;  			}  		}  		Fin.Close ();  	}  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: using (StreamReader Fin = new StreamReader (glyphFile)) {  	string Line = "";  	while ((Line = Fin.ReadLine ()) != null) {  		string[] lineParts = Line.Split (new char[] {  			':'  		});  		switch (lineParts [0]) {  		case "unicode":  			if (Line.Trim () == "unicode::") {  				imGlyph.Unicode = ":";  			}  			else {  				imGlyph.Unicode = lineParts [1].Trim ();  			}  			break;  		case "xoffset":  			imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  			break;  		case "yoffset":  			imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  			imGlyph.Save (false);  			break;  		case "image":  			if (imGlyph.ID != "" && lineParts.Length == 3) {  				GlyphImage imImg = new GlyphImage ();  				imImg.GlyphID = imGlyph.ID;  				imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  				imImg.Status = lineParts [2].Trim ();  				imImg.Save ();  			}  			break;  		}  	}  	Fin.Close ();  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: using (StreamReader Fin = new StreamReader (glyphFile)) {  	string Line = "";  	while ((Line = Fin.ReadLine ()) != null) {  		string[] lineParts = Line.Split (new char[] {  			':'  		});  		switch (lineParts [0]) {  		case "unicode":  			if (Line.Trim () == "unicode::") {  				imGlyph.Unicode = ":";  			}  			else {  				imGlyph.Unicode = lineParts [1].Trim ();  			}  			break;  		case "xoffset":  			imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  			break;  		case "yoffset":  			imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  			imGlyph.Save (false);  			break;  		case "image":  			if (imGlyph.ID != "" && lineParts.Length == 3) {  				GlyphImage imImg = new GlyphImage ();  				imImg.GlyphID = imGlyph.ID;  				imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  				imImg.Status = lineParts [2].Trim ();  				imImg.Save ();  			}  			break;  		}  	}  	Fin.Close ();  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: while ((Line = Fin.ReadLine ()) != null) {  	string[] lineParts = Line.Split (new char[] {  		':'  	});  	switch (lineParts [0]) {  	case "unicode":  		if (Line.Trim () == "unicode::") {  			imGlyph.Unicode = ":";  		}  		else {  			imGlyph.Unicode = lineParts [1].Trim ();  		}  		break;  	case "xoffset":  		imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  		break;  	case "yoffset":  		imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  		imGlyph.Save (false);  		break;  	case "image":  		if (imGlyph.ID != "" && lineParts.Length == 3) {  			GlyphImage imImg = new GlyphImage ();  			imImg.GlyphID = imGlyph.ID;  			imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  			imImg.Status = lineParts [2].Trim ();  			imImg.Save ();  		}  		break;  	}  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: while ((Line = Fin.ReadLine ()) != null) {  	string[] lineParts = Line.Split (new char[] {  		':'  	});  	switch (lineParts [0]) {  	case "unicode":  		if (Line.Trim () == "unicode::") {  			imGlyph.Unicode = ":";  		}  		else {  			imGlyph.Unicode = lineParts [1].Trim ();  		}  		break;  	case "xoffset":  		imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  		break;  	case "yoffset":  		imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  		imGlyph.Save (false);  		break;  	case "image":  		if (imGlyph.ID != "" && lineParts.Length == 3) {  			GlyphImage imImg = new GlyphImage ();  			imImg.GlyphID = imGlyph.ID;  			imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  			imImg.Status = lineParts [2].Trim ();  			imImg.Save ();  		}  		break;  	}  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: switch (lineParts [0]) {  case "unicode":  	if (Line.Trim () == "unicode::") {  		imGlyph.Unicode = ":";  	}  	else {  		imGlyph.Unicode = lineParts [1].Trim ();  	}  	break;  case "xoffset":  	imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  	break;  case "yoffset":  	imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  	imGlyph.Save (false);  	break;  case "image":  	if (imGlyph.ID != "" && lineParts.Length == 3) {  		GlyphImage imImg = new GlyphImage ();  		imImg.GlyphID = imGlyph.ID;  		imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  		imImg.Status = lineParts [2].Trim ();  		imImg.Save ();  	}  	break;  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: switch (lineParts [0]) {  case "unicode":  	if (Line.Trim () == "unicode::") {  		imGlyph.Unicode = ":";  	}  	else {  		imGlyph.Unicode = lineParts [1].Trim ();  	}  	break;  case "xoffset":  	imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  	break;  case "yoffset":  	imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  	imGlyph.Save (false);  	break;  case "image":  	if (imGlyph.ID != "" && lineParts.Length == 3) {  		GlyphImage imImg = new GlyphImage ();  		imImg.GlyphID = imGlyph.ID;  		imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  		imImg.Status = lineParts [2].Trim ();  		imImg.Save ();  	}  	break;  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: if (imGlyph.ID != "" && lineParts.Length == 3) {  	GlyphImage imImg = new GlyphImage ();  	imImg.GlyphID = imGlyph.ID;  	imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  	imImg.Status = lineParts [2].Trim ();  	imImg.Save ();  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: if (imGlyph.ID != "" && lineParts.Length == 3) {  	GlyphImage imImg = new GlyphImage ();  	imImg.GlyphID = imGlyph.ID;  	imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  	imImg.Status = lineParts [2].Trim ();  	imImg.Save ();  }  
Magic Number,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following statement contains a magic number: imImg.Status = lineParts [2].Trim ();  
Magic Number,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,glyphBox_SelectedIndexChanged,The following statement contains a magic number: PageStop = 100;  
Magic Number,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,prevPageButton_Click,The following statement contains a magic number: PageStart -= 100;  
Magic Number,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,prevPageButton_Click,The following statement contains a magic number: PageStop = PageStart + 100;  
Magic Number,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,nextPageButton_Click,The following statement contains a magic number: PageStart += 100;  
Magic Number,Franken_,NewFont,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\NewFont.cs,nextPageButton_Click,The following statement contains a magic number: PageStop = PageStart + 100;  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (Job == "makeLibrary") {  	if (Directory.Exists (TrainingDir) && doClearTrainingBox.Checked) {  		try {  			Directory.Delete (TrainingDir' true);  			System.Threading.Thread.Sleep (5000);  		}  		catch (Exception E) {  		}  	}  	if (!Directory.Exists (TrainingDir)) {  		Directory.CreateDirectory (TrainingDir);  	}  	if (SelectedFonts.Count > 0) {  		if (doFontPropertiesFile.Checked)  			MakeFontProperties (ref slave' ref ProcessStatus' SelectedFonts);  		if (doTiffBoxBox.Checked)  			CopyTiffBoxPairs (ref slave' ref ProcessStatus' SelectedFonts);  		if (doCreateTRFilesBox.Checked)  			TrainFont (ref slave' ref ProcessStatus);  		if (doTrainingBox.Checked)  			MakeUnicharset (ref slave' ref ProcessStatus);  		if (doProcessWordListsBox.Checked)  			ProcessWordLists (ref slave' ref ProcessStatus);  		if (doCombineBox.Checked)  			CombineTessData (ref slave' ref ProcessStatus);  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,backgroundWorker_DoWork,The following statement contains a magic number: if (Directory.Exists (TrainingDir) && doClearTrainingBox.Checked) {  	try {  		Directory.Delete (TrainingDir' true);  		System.Threading.Thread.Sleep (5000);  	}  	catch (Exception E) {  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,backgroundWorker_DoWork,The following statement contains a magic number: try {  	Directory.Delete (TrainingDir' true);  	System.Threading.Thread.Sleep (5000);  }  catch (Exception E) {  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,backgroundWorker_DoWork,The following statement contains a magic number: System.Threading.Thread.Sleep (5000);  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: foreach (App_Code.Font F in SelectedFonts) {  	if (Slave.CancellationPending) {  		break;  	}  	ProcessStatus = "Copying box/tif pairs for " + F.Name + "...";  	Progress++;  	if (Progress > 100) {  		Progress = 100;  	}  	Slave.ReportProgress (Progress);  	if (Directory.Exists (TiffBoxPairsDir + "\\" + F.ID)) {  		string[] BoxFiles = Directory.GetFiles (TiffBoxPairsDir + "\\" + F.ID' "*.box"' SearchOption.AllDirectories);  		foreach (string BoxFile in BoxFiles) {  			if (File.Exists (BoxFile.Replace (".box"' ".tif"))) {  				string[] FileParts = BoxFile.Split (new char[] {  					'\\'  				});  				string JustFileName = "";  				if (FileParts.Length > 0) {  					JustFileName = FileParts [FileParts.Length - 1];  				}  				if (JustFileName != "") {  					string FixedFileName = "";  					string[] fileNameParts = JustFileName.Split (new char[] {  						'.'  					});  					if (fileNameParts.Length == 4) {  						FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  						expNum++;  					}  					if (FixedFileName != "") {  						File.Copy (BoxFile' TrainingDir + "\\" + FixedFileName' true);  						File.Copy (BoxFile.Replace (".box"' ".tif")' TrainingDir + "\\" + FixedFileName.Replace (".box"' ".tif")' true);  					}  				}  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: foreach (App_Code.Font F in SelectedFonts) {  	if (Slave.CancellationPending) {  		break;  	}  	ProcessStatus = "Copying box/tif pairs for " + F.Name + "...";  	Progress++;  	if (Progress > 100) {  		Progress = 100;  	}  	Slave.ReportProgress (Progress);  	if (Directory.Exists (TiffBoxPairsDir + "\\" + F.ID)) {  		string[] BoxFiles = Directory.GetFiles (TiffBoxPairsDir + "\\" + F.ID' "*.box"' SearchOption.AllDirectories);  		foreach (string BoxFile in BoxFiles) {  			if (File.Exists (BoxFile.Replace (".box"' ".tif"))) {  				string[] FileParts = BoxFile.Split (new char[] {  					'\\'  				});  				string JustFileName = "";  				if (FileParts.Length > 0) {  					JustFileName = FileParts [FileParts.Length - 1];  				}  				if (JustFileName != "") {  					string FixedFileName = "";  					string[] fileNameParts = JustFileName.Split (new char[] {  						'.'  					});  					if (fileNameParts.Length == 4) {  						FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  						expNum++;  					}  					if (FixedFileName != "") {  						File.Copy (BoxFile' TrainingDir + "\\" + FixedFileName' true);  						File.Copy (BoxFile.Replace (".box"' ".tif")' TrainingDir + "\\" + FixedFileName.Replace (".box"' ".tif")' true);  					}  				}  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: foreach (App_Code.Font F in SelectedFonts) {  	if (Slave.CancellationPending) {  		break;  	}  	ProcessStatus = "Copying box/tif pairs for " + F.Name + "...";  	Progress++;  	if (Progress > 100) {  		Progress = 100;  	}  	Slave.ReportProgress (Progress);  	if (Directory.Exists (TiffBoxPairsDir + "\\" + F.ID)) {  		string[] BoxFiles = Directory.GetFiles (TiffBoxPairsDir + "\\" + F.ID' "*.box"' SearchOption.AllDirectories);  		foreach (string BoxFile in BoxFiles) {  			if (File.Exists (BoxFile.Replace (".box"' ".tif"))) {  				string[] FileParts = BoxFile.Split (new char[] {  					'\\'  				});  				string JustFileName = "";  				if (FileParts.Length > 0) {  					JustFileName = FileParts [FileParts.Length - 1];  				}  				if (JustFileName != "") {  					string FixedFileName = "";  					string[] fileNameParts = JustFileName.Split (new char[] {  						'.'  					});  					if (fileNameParts.Length == 4) {  						FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  						expNum++;  					}  					if (FixedFileName != "") {  						File.Copy (BoxFile' TrainingDir + "\\" + FixedFileName' true);  						File.Copy (BoxFile.Replace (".box"' ".tif")' TrainingDir + "\\" + FixedFileName.Replace (".box"' ".tif")' true);  					}  				}  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: foreach (App_Code.Font F in SelectedFonts) {  	if (Slave.CancellationPending) {  		break;  	}  	ProcessStatus = "Copying box/tif pairs for " + F.Name + "...";  	Progress++;  	if (Progress > 100) {  		Progress = 100;  	}  	Slave.ReportProgress (Progress);  	if (Directory.Exists (TiffBoxPairsDir + "\\" + F.ID)) {  		string[] BoxFiles = Directory.GetFiles (TiffBoxPairsDir + "\\" + F.ID' "*.box"' SearchOption.AllDirectories);  		foreach (string BoxFile in BoxFiles) {  			if (File.Exists (BoxFile.Replace (".box"' ".tif"))) {  				string[] FileParts = BoxFile.Split (new char[] {  					'\\'  				});  				string JustFileName = "";  				if (FileParts.Length > 0) {  					JustFileName = FileParts [FileParts.Length - 1];  				}  				if (JustFileName != "") {  					string FixedFileName = "";  					string[] fileNameParts = JustFileName.Split (new char[] {  						'.'  					});  					if (fileNameParts.Length == 4) {  						FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  						expNum++;  					}  					if (FixedFileName != "") {  						File.Copy (BoxFile' TrainingDir + "\\" + FixedFileName' true);  						File.Copy (BoxFile.Replace (".box"' ".tif")' TrainingDir + "\\" + FixedFileName.Replace (".box"' ".tif")' true);  					}  				}  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: if (Progress > 100) {  	Progress = 100;  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: if (Progress > 100) {  	Progress = 100;  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: Progress = 100;  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: if (Directory.Exists (TiffBoxPairsDir + "\\" + F.ID)) {  	string[] BoxFiles = Directory.GetFiles (TiffBoxPairsDir + "\\" + F.ID' "*.box"' SearchOption.AllDirectories);  	foreach (string BoxFile in BoxFiles) {  		if (File.Exists (BoxFile.Replace (".box"' ".tif"))) {  			string[] FileParts = BoxFile.Split (new char[] {  				'\\'  			});  			string JustFileName = "";  			if (FileParts.Length > 0) {  				JustFileName = FileParts [FileParts.Length - 1];  			}  			if (JustFileName != "") {  				string FixedFileName = "";  				string[] fileNameParts = JustFileName.Split (new char[] {  					'.'  				});  				if (fileNameParts.Length == 4) {  					FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  					expNum++;  				}  				if (FixedFileName != "") {  					File.Copy (BoxFile' TrainingDir + "\\" + FixedFileName' true);  					File.Copy (BoxFile.Replace (".box"' ".tif")' TrainingDir + "\\" + FixedFileName.Replace (".box"' ".tif")' true);  				}  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: if (Directory.Exists (TiffBoxPairsDir + "\\" + F.ID)) {  	string[] BoxFiles = Directory.GetFiles (TiffBoxPairsDir + "\\" + F.ID' "*.box"' SearchOption.AllDirectories);  	foreach (string BoxFile in BoxFiles) {  		if (File.Exists (BoxFile.Replace (".box"' ".tif"))) {  			string[] FileParts = BoxFile.Split (new char[] {  				'\\'  			});  			string JustFileName = "";  			if (FileParts.Length > 0) {  				JustFileName = FileParts [FileParts.Length - 1];  			}  			if (JustFileName != "") {  				string FixedFileName = "";  				string[] fileNameParts = JustFileName.Split (new char[] {  					'.'  				});  				if (fileNameParts.Length == 4) {  					FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  					expNum++;  				}  				if (FixedFileName != "") {  					File.Copy (BoxFile' TrainingDir + "\\" + FixedFileName' true);  					File.Copy (BoxFile.Replace (".box"' ".tif")' TrainingDir + "\\" + FixedFileName.Replace (".box"' ".tif")' true);  				}  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: foreach (string BoxFile in BoxFiles) {  	if (File.Exists (BoxFile.Replace (".box"' ".tif"))) {  		string[] FileParts = BoxFile.Split (new char[] {  			'\\'  		});  		string JustFileName = "";  		if (FileParts.Length > 0) {  			JustFileName = FileParts [FileParts.Length - 1];  		}  		if (JustFileName != "") {  			string FixedFileName = "";  			string[] fileNameParts = JustFileName.Split (new char[] {  				'.'  			});  			if (fileNameParts.Length == 4) {  				FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  				expNum++;  			}  			if (FixedFileName != "") {  				File.Copy (BoxFile' TrainingDir + "\\" + FixedFileName' true);  				File.Copy (BoxFile.Replace (".box"' ".tif")' TrainingDir + "\\" + FixedFileName.Replace (".box"' ".tif")' true);  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: foreach (string BoxFile in BoxFiles) {  	if (File.Exists (BoxFile.Replace (".box"' ".tif"))) {  		string[] FileParts = BoxFile.Split (new char[] {  			'\\'  		});  		string JustFileName = "";  		if (FileParts.Length > 0) {  			JustFileName = FileParts [FileParts.Length - 1];  		}  		if (JustFileName != "") {  			string FixedFileName = "";  			string[] fileNameParts = JustFileName.Split (new char[] {  				'.'  			});  			if (fileNameParts.Length == 4) {  				FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  				expNum++;  			}  			if (FixedFileName != "") {  				File.Copy (BoxFile' TrainingDir + "\\" + FixedFileName' true);  				File.Copy (BoxFile.Replace (".box"' ".tif")' TrainingDir + "\\" + FixedFileName.Replace (".box"' ".tif")' true);  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: if (File.Exists (BoxFile.Replace (".box"' ".tif"))) {  	string[] FileParts = BoxFile.Split (new char[] {  		'\\'  	});  	string JustFileName = "";  	if (FileParts.Length > 0) {  		JustFileName = FileParts [FileParts.Length - 1];  	}  	if (JustFileName != "") {  		string FixedFileName = "";  		string[] fileNameParts = JustFileName.Split (new char[] {  			'.'  		});  		if (fileNameParts.Length == 4) {  			FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  			expNum++;  		}  		if (FixedFileName != "") {  			File.Copy (BoxFile' TrainingDir + "\\" + FixedFileName' true);  			File.Copy (BoxFile.Replace (".box"' ".tif")' TrainingDir + "\\" + FixedFileName.Replace (".box"' ".tif")' true);  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: if (File.Exists (BoxFile.Replace (".box"' ".tif"))) {  	string[] FileParts = BoxFile.Split (new char[] {  		'\\'  	});  	string JustFileName = "";  	if (FileParts.Length > 0) {  		JustFileName = FileParts [FileParts.Length - 1];  	}  	if (JustFileName != "") {  		string FixedFileName = "";  		string[] fileNameParts = JustFileName.Split (new char[] {  			'.'  		});  		if (fileNameParts.Length == 4) {  			FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  			expNum++;  		}  		if (FixedFileName != "") {  			File.Copy (BoxFile' TrainingDir + "\\" + FixedFileName' true);  			File.Copy (BoxFile.Replace (".box"' ".tif")' TrainingDir + "\\" + FixedFileName.Replace (".box"' ".tif")' true);  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: if (JustFileName != "") {  	string FixedFileName = "";  	string[] fileNameParts = JustFileName.Split (new char[] {  		'.'  	});  	if (fileNameParts.Length == 4) {  		FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  		expNum++;  	}  	if (FixedFileName != "") {  		File.Copy (BoxFile' TrainingDir + "\\" + FixedFileName' true);  		File.Copy (BoxFile.Replace (".box"' ".tif")' TrainingDir + "\\" + FixedFileName.Replace (".box"' ".tif")' true);  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: if (JustFileName != "") {  	string FixedFileName = "";  	string[] fileNameParts = JustFileName.Split (new char[] {  		'.'  	});  	if (fileNameParts.Length == 4) {  		FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  		expNum++;  	}  	if (FixedFileName != "") {  		File.Copy (BoxFile' TrainingDir + "\\" + FixedFileName' true);  		File.Copy (BoxFile.Replace (".box"' ".tif")' TrainingDir + "\\" + FixedFileName.Replace (".box"' ".tif")' true);  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: if (fileNameParts.Length == 4) {  	FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  	expNum++;  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: if (fileNameParts.Length == 4) {  	FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  	expNum++;  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CopyTiffBoxPairs,The following statement contains a magic number: FixedFileName = fileNameParts [0] + "." + fileNameParts [1] + ".exp" + expNum + "." + fileNameParts [3];  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,ProcessWordLists,The following statement contains a magic number: if (wordFreqPathBox.Text != "" && !Slave.CancellationPending) {  	Progress = 10;  	ProcessStatus = "Making frequent words DAWG file...";  	Slave.ReportProgress (Progress);  	File.Copy (wordFreqPathBox.Text' TrainingDir + "\\freq-dawg"' true);  	ExecuteCommand ("wordlist2dawg.exe"' " freq-dawg " + myLang.Name + ".freq-dawg " + myLang.Name + ".unicharset "' TrainingDir);  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,ProcessWordLists,The following statement contains a magic number: Progress = 10;  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,ProcessWordLists,The following statement contains a magic number: if (wordDictPathBox.Text != "" && !Slave.CancellationPending) {  	Progress = 75;  	ProcessStatus = "Making dictionary words DAWG file...";  	Slave.ReportProgress (Progress);  	File.Copy (wordDictPathBox.Text' TrainingDir + "\\word-dawg"' true);  	ExecuteCommand ("wordlist2dawg.exe"' " word-dawg " + myLang.Name + ".word-dawg " + myLang.Name + ".unicharset "' TrainingDir);  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,ProcessWordLists,The following statement contains a magic number: Progress = 75;  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,TrainFont,The following statement contains a magic number: if (TiffFiles.Length > 0) {  	Interval = System.Convert.ToDouble (100) / System.Convert.ToDouble (TiffFiles.Length);  	for (int x = 0; x < TiffFiles.Length; x++) {  		if (Slave.CancellationPending) {  			break;  		}  		Progress = (int)(x * Interval);  		if (Progress > 100) {  			Progress = 100;  		}  		ProcessStatus = "Training with " + TiffFiles [x] + "...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("tesseract.exe"' " " + TiffFiles [x] + " " + TiffFiles [x].Replace (".tif"' "") + " nobatch box.train"' TrainingDir);  	}  }  else {  	MessageBox.Show ("There were no valid .tif files with which to train.");  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,TrainFont,The following statement contains a magic number: if (TiffFiles.Length > 0) {  	Interval = System.Convert.ToDouble (100) / System.Convert.ToDouble (TiffFiles.Length);  	for (int x = 0; x < TiffFiles.Length; x++) {  		if (Slave.CancellationPending) {  			break;  		}  		Progress = (int)(x * Interval);  		if (Progress > 100) {  			Progress = 100;  		}  		ProcessStatus = "Training with " + TiffFiles [x] + "...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("tesseract.exe"' " " + TiffFiles [x] + " " + TiffFiles [x].Replace (".tif"' "") + " nobatch box.train"' TrainingDir);  	}  }  else {  	MessageBox.Show ("There were no valid .tif files with which to train.");  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,TrainFont,The following statement contains a magic number: if (TiffFiles.Length > 0) {  	Interval = System.Convert.ToDouble (100) / System.Convert.ToDouble (TiffFiles.Length);  	for (int x = 0; x < TiffFiles.Length; x++) {  		if (Slave.CancellationPending) {  			break;  		}  		Progress = (int)(x * Interval);  		if (Progress > 100) {  			Progress = 100;  		}  		ProcessStatus = "Training with " + TiffFiles [x] + "...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("tesseract.exe"' " " + TiffFiles [x] + " " + TiffFiles [x].Replace (".tif"' "") + " nobatch box.train"' TrainingDir);  	}  }  else {  	MessageBox.Show ("There were no valid .tif files with which to train.");  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,TrainFont,The following statement contains a magic number: Interval = System.Convert.ToDouble (100) / System.Convert.ToDouble (TiffFiles.Length);  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,TrainFont,The following statement contains a magic number: for (int x = 0; x < TiffFiles.Length; x++) {  	if (Slave.CancellationPending) {  		break;  	}  	Progress = (int)(x * Interval);  	if (Progress > 100) {  		Progress = 100;  	}  	ProcessStatus = "Training with " + TiffFiles [x] + "...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("tesseract.exe"' " " + TiffFiles [x] + " " + TiffFiles [x].Replace (".tif"' "") + " nobatch box.train"' TrainingDir);  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,TrainFont,The following statement contains a magic number: for (int x = 0; x < TiffFiles.Length; x++) {  	if (Slave.CancellationPending) {  		break;  	}  	Progress = (int)(x * Interval);  	if (Progress > 100) {  		Progress = 100;  	}  	ProcessStatus = "Training with " + TiffFiles [x] + "...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("tesseract.exe"' " " + TiffFiles [x] + " " + TiffFiles [x].Replace (".tif"' "") + " nobatch box.train"' TrainingDir);  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,TrainFont,The following statement contains a magic number: if (Progress > 100) {  	Progress = 100;  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,TrainFont,The following statement contains a magic number: if (Progress > 100) {  	Progress = 100;  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,TrainFont,The following statement contains a magic number: Progress = 100;  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: if (!Slave.CancellationPending && TRFiles.Length > 0) {  	string BoxFilesLine = "";  	string TrFilesLine = "";  	foreach (string TRFile in TRFiles) {  		if (File.Exists (TrainingDir + "\\" + TRFile.Replace (".tr"' ".box"))) {  			BoxFilesLine += " " + TRFile.Replace (".tr"' ".box");  			TrFilesLine += " " + TRFile;  		}  	}  	if (!Slave.CancellationPending) {  		Progress = 0;  		ProcessStatus = "Making unicharset...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("unicharset_extractor.exe"' BoxFilesLine' TrainingDir);  		if (!Slave.CancellationPending) {  			Progress = 25;  			ProcessStatus = "Shape clustering...";  			Slave.ReportProgress (Progress);  			ExecuteCommand ("shapeclustering.exe"' " -F font_properties -U unicharset" + TrFilesLine' TrainingDir);  			if (!Slave.CancellationPending) {  				Progress = 50;  				ProcessStatus = "Performing mftraining...";  				Slave.ReportProgress (Progress);  				ExecuteCommand ("mftraining.exe"' " -F font_properties -U unicharset -O " + myLang.Name + ".unicharset" + TrFilesLine' TrainingDir);  				if (!Slave.CancellationPending) {  					Progress = 75;  					ProcessStatus = "Performing cntraining...";  					Slave.ReportProgress (Progress);  					ExecuteCommand ("cntraining.exe"' TrFilesLine' TrainingDir);  				}  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: if (!Slave.CancellationPending && TRFiles.Length > 0) {  	string BoxFilesLine = "";  	string TrFilesLine = "";  	foreach (string TRFile in TRFiles) {  		if (File.Exists (TrainingDir + "\\" + TRFile.Replace (".tr"' ".box"))) {  			BoxFilesLine += " " + TRFile.Replace (".tr"' ".box");  			TrFilesLine += " " + TRFile;  		}  	}  	if (!Slave.CancellationPending) {  		Progress = 0;  		ProcessStatus = "Making unicharset...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("unicharset_extractor.exe"' BoxFilesLine' TrainingDir);  		if (!Slave.CancellationPending) {  			Progress = 25;  			ProcessStatus = "Shape clustering...";  			Slave.ReportProgress (Progress);  			ExecuteCommand ("shapeclustering.exe"' " -F font_properties -U unicharset" + TrFilesLine' TrainingDir);  			if (!Slave.CancellationPending) {  				Progress = 50;  				ProcessStatus = "Performing mftraining...";  				Slave.ReportProgress (Progress);  				ExecuteCommand ("mftraining.exe"' " -F font_properties -U unicharset -O " + myLang.Name + ".unicharset" + TrFilesLine' TrainingDir);  				if (!Slave.CancellationPending) {  					Progress = 75;  					ProcessStatus = "Performing cntraining...";  					Slave.ReportProgress (Progress);  					ExecuteCommand ("cntraining.exe"' TrFilesLine' TrainingDir);  				}  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: if (!Slave.CancellationPending && TRFiles.Length > 0) {  	string BoxFilesLine = "";  	string TrFilesLine = "";  	foreach (string TRFile in TRFiles) {  		if (File.Exists (TrainingDir + "\\" + TRFile.Replace (".tr"' ".box"))) {  			BoxFilesLine += " " + TRFile.Replace (".tr"' ".box");  			TrFilesLine += " " + TRFile;  		}  	}  	if (!Slave.CancellationPending) {  		Progress = 0;  		ProcessStatus = "Making unicharset...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("unicharset_extractor.exe"' BoxFilesLine' TrainingDir);  		if (!Slave.CancellationPending) {  			Progress = 25;  			ProcessStatus = "Shape clustering...";  			Slave.ReportProgress (Progress);  			ExecuteCommand ("shapeclustering.exe"' " -F font_properties -U unicharset" + TrFilesLine' TrainingDir);  			if (!Slave.CancellationPending) {  				Progress = 50;  				ProcessStatus = "Performing mftraining...";  				Slave.ReportProgress (Progress);  				ExecuteCommand ("mftraining.exe"' " -F font_properties -U unicharset -O " + myLang.Name + ".unicharset" + TrFilesLine' TrainingDir);  				if (!Slave.CancellationPending) {  					Progress = 75;  					ProcessStatus = "Performing cntraining...";  					Slave.ReportProgress (Progress);  					ExecuteCommand ("cntraining.exe"' TrFilesLine' TrainingDir);  				}  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: if (!Slave.CancellationPending) {  	Progress = 0;  	ProcessStatus = "Making unicharset...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("unicharset_extractor.exe"' BoxFilesLine' TrainingDir);  	if (!Slave.CancellationPending) {  		Progress = 25;  		ProcessStatus = "Shape clustering...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("shapeclustering.exe"' " -F font_properties -U unicharset" + TrFilesLine' TrainingDir);  		if (!Slave.CancellationPending) {  			Progress = 50;  			ProcessStatus = "Performing mftraining...";  			Slave.ReportProgress (Progress);  			ExecuteCommand ("mftraining.exe"' " -F font_properties -U unicharset -O " + myLang.Name + ".unicharset" + TrFilesLine' TrainingDir);  			if (!Slave.CancellationPending) {  				Progress = 75;  				ProcessStatus = "Performing cntraining...";  				Slave.ReportProgress (Progress);  				ExecuteCommand ("cntraining.exe"' TrFilesLine' TrainingDir);  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: if (!Slave.CancellationPending) {  	Progress = 0;  	ProcessStatus = "Making unicharset...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("unicharset_extractor.exe"' BoxFilesLine' TrainingDir);  	if (!Slave.CancellationPending) {  		Progress = 25;  		ProcessStatus = "Shape clustering...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("shapeclustering.exe"' " -F font_properties -U unicharset" + TrFilesLine' TrainingDir);  		if (!Slave.CancellationPending) {  			Progress = 50;  			ProcessStatus = "Performing mftraining...";  			Slave.ReportProgress (Progress);  			ExecuteCommand ("mftraining.exe"' " -F font_properties -U unicharset -O " + myLang.Name + ".unicharset" + TrFilesLine' TrainingDir);  			if (!Slave.CancellationPending) {  				Progress = 75;  				ProcessStatus = "Performing cntraining...";  				Slave.ReportProgress (Progress);  				ExecuteCommand ("cntraining.exe"' TrFilesLine' TrainingDir);  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: if (!Slave.CancellationPending) {  	Progress = 0;  	ProcessStatus = "Making unicharset...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("unicharset_extractor.exe"' BoxFilesLine' TrainingDir);  	if (!Slave.CancellationPending) {  		Progress = 25;  		ProcessStatus = "Shape clustering...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("shapeclustering.exe"' " -F font_properties -U unicharset" + TrFilesLine' TrainingDir);  		if (!Slave.CancellationPending) {  			Progress = 50;  			ProcessStatus = "Performing mftraining...";  			Slave.ReportProgress (Progress);  			ExecuteCommand ("mftraining.exe"' " -F font_properties -U unicharset -O " + myLang.Name + ".unicharset" + TrFilesLine' TrainingDir);  			if (!Slave.CancellationPending) {  				Progress = 75;  				ProcessStatus = "Performing cntraining...";  				Slave.ReportProgress (Progress);  				ExecuteCommand ("cntraining.exe"' TrFilesLine' TrainingDir);  			}  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: if (!Slave.CancellationPending) {  	Progress = 25;  	ProcessStatus = "Shape clustering...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("shapeclustering.exe"' " -F font_properties -U unicharset" + TrFilesLine' TrainingDir);  	if (!Slave.CancellationPending) {  		Progress = 50;  		ProcessStatus = "Performing mftraining...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("mftraining.exe"' " -F font_properties -U unicharset -O " + myLang.Name + ".unicharset" + TrFilesLine' TrainingDir);  		if (!Slave.CancellationPending) {  			Progress = 75;  			ProcessStatus = "Performing cntraining...";  			Slave.ReportProgress (Progress);  			ExecuteCommand ("cntraining.exe"' TrFilesLine' TrainingDir);  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: if (!Slave.CancellationPending) {  	Progress = 25;  	ProcessStatus = "Shape clustering...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("shapeclustering.exe"' " -F font_properties -U unicharset" + TrFilesLine' TrainingDir);  	if (!Slave.CancellationPending) {  		Progress = 50;  		ProcessStatus = "Performing mftraining...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("mftraining.exe"' " -F font_properties -U unicharset -O " + myLang.Name + ".unicharset" + TrFilesLine' TrainingDir);  		if (!Slave.CancellationPending) {  			Progress = 75;  			ProcessStatus = "Performing cntraining...";  			Slave.ReportProgress (Progress);  			ExecuteCommand ("cntraining.exe"' TrFilesLine' TrainingDir);  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: if (!Slave.CancellationPending) {  	Progress = 25;  	ProcessStatus = "Shape clustering...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("shapeclustering.exe"' " -F font_properties -U unicharset" + TrFilesLine' TrainingDir);  	if (!Slave.CancellationPending) {  		Progress = 50;  		ProcessStatus = "Performing mftraining...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("mftraining.exe"' " -F font_properties -U unicharset -O " + myLang.Name + ".unicharset" + TrFilesLine' TrainingDir);  		if (!Slave.CancellationPending) {  			Progress = 75;  			ProcessStatus = "Performing cntraining...";  			Slave.ReportProgress (Progress);  			ExecuteCommand ("cntraining.exe"' TrFilesLine' TrainingDir);  		}  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: Progress = 25;  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: if (!Slave.CancellationPending) {  	Progress = 50;  	ProcessStatus = "Performing mftraining...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("mftraining.exe"' " -F font_properties -U unicharset -O " + myLang.Name + ".unicharset" + TrFilesLine' TrainingDir);  	if (!Slave.CancellationPending) {  		Progress = 75;  		ProcessStatus = "Performing cntraining...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("cntraining.exe"' TrFilesLine' TrainingDir);  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: if (!Slave.CancellationPending) {  	Progress = 50;  	ProcessStatus = "Performing mftraining...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("mftraining.exe"' " -F font_properties -U unicharset -O " + myLang.Name + ".unicharset" + TrFilesLine' TrainingDir);  	if (!Slave.CancellationPending) {  		Progress = 75;  		ProcessStatus = "Performing cntraining...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("cntraining.exe"' TrFilesLine' TrainingDir);  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: Progress = 50;  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: if (!Slave.CancellationPending) {  	Progress = 75;  	ProcessStatus = "Performing cntraining...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("cntraining.exe"' TrFilesLine' TrainingDir);  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,MakeUnicharset,The following statement contains a magic number: Progress = 75;  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CombineTessData,The following statement contains a magic number: if (!Slave.CancellationPending) {  	if (unicharUnambigsPathBox.Text != "") {  		if (File.Exists (unicharUnambigsPathBox.Text)) {  			File.Copy (unicharUnambigsPathBox.Text' TrainingDir + "\\" + myLang.Name + ".unicharambigs");  		}  	}  	if (File.Exists (TrainingDir + "\\inttemp") && File.Exists (TrainingDir + "\\shapetable") && File.Exists (TrainingDir + "\\normproto") && File.Exists (TrainingDir + "\\pffmtable")) {  		Progress = 25;  		ProcessStatus = "Renaming files...";  		Slave.ReportProgress (Progress);  		File.Copy (TrainingDir + @"\inttemp"' TrainingDir + "\\" + myLang.Name + ".inttemp"' true);  		File.Copy (TrainingDir + @"\shapetable"' TrainingDir + "\\" + myLang.Name + ".shapetable"' true);  		File.Copy (TrainingDir + @"\normproto"' TrainingDir + "\\" + myLang.Name + ".normproto"' true);  		File.Copy (TrainingDir + @"\pffmtable"' TrainingDir + "\\" + myLang.Name + ".pffmtable"' true);  		Progress = 25;  		ProcessStatus = "Making " + myLang.Name + ".traineddata...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("combine_tessdata.exe"' " " + myLang.Name + "."' TrainingDir);  	}  	else {  		MessageBox.Show ("Crucial files needed for the training process are missing.  Training failed.");  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CombineTessData,The following statement contains a magic number: if (!Slave.CancellationPending) {  	if (unicharUnambigsPathBox.Text != "") {  		if (File.Exists (unicharUnambigsPathBox.Text)) {  			File.Copy (unicharUnambigsPathBox.Text' TrainingDir + "\\" + myLang.Name + ".unicharambigs");  		}  	}  	if (File.Exists (TrainingDir + "\\inttemp") && File.Exists (TrainingDir + "\\shapetable") && File.Exists (TrainingDir + "\\normproto") && File.Exists (TrainingDir + "\\pffmtable")) {  		Progress = 25;  		ProcessStatus = "Renaming files...";  		Slave.ReportProgress (Progress);  		File.Copy (TrainingDir + @"\inttemp"' TrainingDir + "\\" + myLang.Name + ".inttemp"' true);  		File.Copy (TrainingDir + @"\shapetable"' TrainingDir + "\\" + myLang.Name + ".shapetable"' true);  		File.Copy (TrainingDir + @"\normproto"' TrainingDir + "\\" + myLang.Name + ".normproto"' true);  		File.Copy (TrainingDir + @"\pffmtable"' TrainingDir + "\\" + myLang.Name + ".pffmtable"' true);  		Progress = 25;  		ProcessStatus = "Making " + myLang.Name + ".traineddata...";  		Slave.ReportProgress (Progress);  		ExecuteCommand ("combine_tessdata.exe"' " " + myLang.Name + "."' TrainingDir);  	}  	else {  		MessageBox.Show ("Crucial files needed for the training process are missing.  Training failed.");  	}  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CombineTessData,The following statement contains a magic number: if (File.Exists (TrainingDir + "\\inttemp") && File.Exists (TrainingDir + "\\shapetable") && File.Exists (TrainingDir + "\\normproto") && File.Exists (TrainingDir + "\\pffmtable")) {  	Progress = 25;  	ProcessStatus = "Renaming files...";  	Slave.ReportProgress (Progress);  	File.Copy (TrainingDir + @"\inttemp"' TrainingDir + "\\" + myLang.Name + ".inttemp"' true);  	File.Copy (TrainingDir + @"\shapetable"' TrainingDir + "\\" + myLang.Name + ".shapetable"' true);  	File.Copy (TrainingDir + @"\normproto"' TrainingDir + "\\" + myLang.Name + ".normproto"' true);  	File.Copy (TrainingDir + @"\pffmtable"' TrainingDir + "\\" + myLang.Name + ".pffmtable"' true);  	Progress = 25;  	ProcessStatus = "Making " + myLang.Name + ".traineddata...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("combine_tessdata.exe"' " " + myLang.Name + "."' TrainingDir);  }  else {  	MessageBox.Show ("Crucial files needed for the training process are missing.  Training failed.");  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CombineTessData,The following statement contains a magic number: if (File.Exists (TrainingDir + "\\inttemp") && File.Exists (TrainingDir + "\\shapetable") && File.Exists (TrainingDir + "\\normproto") && File.Exists (TrainingDir + "\\pffmtable")) {  	Progress = 25;  	ProcessStatus = "Renaming files...";  	Slave.ReportProgress (Progress);  	File.Copy (TrainingDir + @"\inttemp"' TrainingDir + "\\" + myLang.Name + ".inttemp"' true);  	File.Copy (TrainingDir + @"\shapetable"' TrainingDir + "\\" + myLang.Name + ".shapetable"' true);  	File.Copy (TrainingDir + @"\normproto"' TrainingDir + "\\" + myLang.Name + ".normproto"' true);  	File.Copy (TrainingDir + @"\pffmtable"' TrainingDir + "\\" + myLang.Name + ".pffmtable"' true);  	Progress = 25;  	ProcessStatus = "Making " + myLang.Name + ".traineddata...";  	Slave.ReportProgress (Progress);  	ExecuteCommand ("combine_tessdata.exe"' " " + myLang.Name + "."' TrainingDir);  }  else {  	MessageBox.Show ("Crucial files needed for the training process are missing.  Training failed.");  }  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CombineTessData,The following statement contains a magic number: Progress = 25;  
Magic Number,Franken_,TrainTesseract,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\TrainTesseract.cs,CombineTessData,The following statement contains a magic number: Progress = 25;  
Missing Default,Franken_.App_Code,DataPipe,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\DataPipe.cs,LoadParams,The following switch statement is missing a default case: switch (Param) {  case "Host":  	Host = Value;  	break;  case "Port":  	Port = Value;  	break;  case "Database":  	Database = Value;  	break;  case "User":  	User = Value;  	break;  case "Password":  	Password = Value;  	break;  case "TessPath":  	TessPath = Value;  	break;  }  
Missing Default,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following switch statement is missing a default case: switch (lineParts [0]) {  case "lineheight":  	impFont.LineHeight = System.Convert.ToInt32 (lineParts [1].Trim ());  	break;  case "bold":  	impFont.Bold = System.Convert.ToInt32 (lineParts [1].Trim ());  	break;  case "fixed":  	impFont.Fixed = System.Convert.ToInt32 (lineParts [1].Trim ());  	break;  case "fraktur":  	impFont.Fraktur = System.Convert.ToInt32 (lineParts [1].Trim ());  	break;  case "italic":  	impFont.Italic = System.Convert.ToInt32 (lineParts [1].Trim ());  	break;  case "serif":  	impFont.Serif = System.Convert.ToInt32 (lineParts [1].Trim ());  	break;  }  
Missing Default,Franken_,Main,C:\repos\Early-Modern-OCR_FrankenPlus\Franken+\Main.cs,importFontToolStripMenuItem_Click,The following switch statement is missing a default case: switch (lineParts [0]) {  case "unicode":  	if (Line.Trim () == "unicode::") {  		imGlyph.Unicode = ":";  	}  	else {  		imGlyph.Unicode = lineParts [1].Trim ();  	}  	break;  case "xoffset":  	imGlyph.XOffset = float.Parse (lineParts [1].Trim ());  	break;  case "yoffset":  	imGlyph.YOffset = float.Parse (lineParts [1].Trim ());  	imGlyph.Save (false);  	break;  case "image":  	if (imGlyph.ID != "" && lineParts.Length == 3) {  		GlyphImage imImg = new GlyphImage ();  		imImg.GlyphID = imGlyph.ID;  		imImg.Path = lineParts [1].Trim ().Replace ("\\GlyphExtraction\\Output\\FONTNAME"' "\\GlyphExtraction\\Output\\" + impFont.ID);  		imImg.Status = lineParts [2].Trim ();  		imImg.Save ();  	}  	break;  }  
