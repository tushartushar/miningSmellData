Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Castle.Facilities.Remoting,RemotingInspector,C:\repos\castleproject_Castle.Windsor-READONLY\src\Castle.Facilities.Remoting\RemotingInspector.cs,RemotingInspector,The method has 6 parameters. Parameters: converter' isServer' isClient' baseUri' remoteRegistry' localRegistry
Long Statement,Castle.Facilities.Remoting,RemotingInspector,C:\repos\castleproject_Castle.Windsor-READONLY\src\Castle.Facilities.Remoting\RemotingInspector.cs,ValidateLifeStyle,The length of the statement  "					              "different than Singleton. Unfortunately Singleton is the only lifestyle supported for this of remoting component configuration"' " is 129.
Missing Default,Castle.Facilities.Remoting,RemotingInspector,C:\repos\castleproject_Castle.Windsor-READONLY\src\Castle.Facilities.Remoting\RemotingInspector.cs,ConfigureClientComponent,The following switch statement is missing a default case: switch (client)  			{  				case RemotingStrategy.Singleton:  				case RemotingStrategy.SingleCall:  				{  					if (!skipRemotingRegistration)  					{  						RemotingConfiguration.RegisterWellKnownClientType(type' uri);  					}    					model.ExtendedProperties.Add("remoting.uri"' uri);  					model.CustomComponentActivator = typeof(RemoteActivator);    					break;  				}  				case RemotingStrategy.ClientActivated:  				{  					CheckHasBaseURI();    					if (!skipRemotingRegistration)  					{  						RemotingConfiguration.RegisterActivatedClientType(type' baseUri);  					}    					model.ExtendedProperties.Add("remoting.appuri"' baseUri);  					model.CustomComponentActivator = typeof(RemoteClientActivatedActivator);    					break;  				}  				case RemotingStrategy.Component:  				{  					model.ExtendedProperties["remoting.remoteregistry"] = remoteRegistry;  					model.CustomComponentActivator = typeof(RemoteActivatorThroughRegistry);    					break;  				}  				case RemotingStrategy.RecoverableComponent:  				{  					CheckHasBaseURI();    					var remoteUri = SetUriExtensionIfNeeded(uri);    					model.ExtendedProperties.Add("remoting.uri"' remoteUri);  					model.ExtendedProperties.Add("remoting.remoteregistry"' remoteRegistry);  					model.CustomComponentActivator = typeof(RemoteActivatorThroughConnector);    					break;  				}  			}
Missing Default,Castle.Facilities.Remoting,RemotingInspector,C:\repos\castleproject_Castle.Windsor-READONLY\src\Castle.Facilities.Remoting\RemotingInspector.cs,ConfigureServerComponent,The following switch statement is missing a default case: switch (server)  			{  				case RemotingStrategy.Singleton:  				{  					CheckURIIsNotNull(uri' model.Name);    					RemotingConfiguration.RegisterWellKnownServiceType(type' uri' WellKnownObjectMode.Singleton);    					break;  				}  				case RemotingStrategy.SingleCall:  				{  					CheckURIIsNotNull(uri' model.Name);    					RemotingConfiguration.RegisterWellKnownServiceType(type' uri' WellKnownObjectMode.SingleCall);    					break;  				}  				case RemotingStrategy.ClientActivated:  				{  					RemotingConfiguration.RegisterActivatedServiceType(type);    					break;  				}  				case RemotingStrategy.Component:  				{  					localRegistry.AddComponentEntry(model);    					break;  				}  				case RemotingStrategy.RecoverableComponent:  				{  					CheckURIIsNotNull(uri' model.Name);    					ValidateLifeStyle(model);    					localRegistry.AddComponentEntry(model);    					model.ExtendedProperties.Add("remoting.uri"' uri);  					model.ExtendedProperties.Add("remoting.afinity"' true);    					model.CustomComponentActivator = typeof(RemoteMarshallerActivator);    					break;  				}  			}
