Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,StringToUInt32,Cyclomatic complexity of the method is 8
Complex Method,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,StringToUInt64,Cyclomatic complexity of the method is 8
Complex Method,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,CreateClosedDelegate,Cyclomatic complexity of the method is 15
Complex Method,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,CreateClosedDelegate,Cyclomatic complexity of the method is 12
Complex Method,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,EmitLoadParameters,Cyclomatic complexity of the method is 11
Complex Method,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,CreateClosedDelegate,Cyclomatic complexity of the method is 10
Complex Method,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,Cyclomatic complexity of the method is 9
Complex Method,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,Cyclomatic complexity of the method is 18
Complex Method,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,Cyclomatic complexity of the method is 9
Complex Method,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,Cyclomatic complexity of the method is 19
Complex Method,Cyjb,MethodSwitcher,F:\newReposMay17\CYJB_Cyjb\Cyjb\MethodSwitcher.cs,CreateSwitcher,Cyclomatic complexity of the method is 9
Complex Method,Cyjb,MethodSwitcher,F:\newReposMay17\CYJB_Cyjb\Cyjb\MethodSwitcher.cs,CheckDelegateType,Cyclomatic complexity of the method is 8
Complex Method,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Escape,Cyclomatic complexity of the method is 10
Complex Method,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,Cyclomatic complexity of the method is 19
Complex Method,Cyjb,EnumExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\EnumExt.cs,ParseToULong,Cyclomatic complexity of the method is 9
Complex Method,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,Cyclomatic complexity of the method is 20
Complex Method,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,TryUnescape,Cyclomatic complexity of the method is 22
Complex Method,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Reverse,Cyclomatic complexity of the method is 13
Complex Method,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,InsertRange,Cyclomatic complexity of the method is 8
Complex Method,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,RemoveRange,Cyclomatic complexity of the method is 12
Complex Method,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,Cyclomatic complexity of the method is 15
Complex Method,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyItems,Cyclomatic complexity of the method is 12
Complex Method,Cyjb.Collections,CharSet,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\CharSet.cs,SymmetricExceptWith,Cyclomatic complexity of the method is 8
Complex Method,Cyjb.Conversions,StringConverterProvider,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\StringConverterProvider.cs,GetConverterTo,Cyclomatic complexity of the method is 16
Complex Method,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetConversion,Cyclomatic complexity of the method is 9
Complex Method,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetPreDefinedConversionNotVoid,Cyclomatic complexity of the method is 10
Complex Method,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetBetweenValueTypeConversion,Cyclomatic complexity of the method is 9
Complex Method,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetNumericConversion,Cyclomatic complexity of the method is 34
Complex Method,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetExplicitRefConversion,Cyclomatic complexity of the method is 11
Complex Method,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetStandardConversion,Cyclomatic complexity of the method is 11
Complex Method,Cyjb.IO,SourceFileRange,F:\newReposMay17\CYJB_Cyjb\Cyjb\IO\SourceFileRange.cs,Merge,Cyclomatic complexity of the method is 9
Complex Method,Cyjb.IO,SourceLocator,F:\newReposMay17\CYJB_Cyjb\Cyjb\IO\SourceLocator.cs,Forward,Cyclomatic complexity of the method is 10
Complex Method,Cyjb.IO,SourceLocator,F:\newReposMay17\CYJB_Cyjb\Cyjb\IO\SourceLocator.cs,ForwardInternal,Cyclomatic complexity of the method is 16
Complex Method,Cyjb.IO,SourceRange,F:\newReposMay17\CYJB_Cyjb\Cyjb\IO\SourceRange.cs,Merge,Cyclomatic complexity of the method is 9
Complex Method,Cyjb.IO,SourceReader,F:\newReposMay17\CYJB_Cyjb\Cyjb\IO\SourceReader.cs,Unget,Cyclomatic complexity of the method is 8
Complex Method,Cyjb.Reflection,MethodArgumentsInfo,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\MethodArgumentsInfo.cs,CheckParamArrayType,Cyclomatic complexity of the method is 15
Complex Method,Cyjb.Reflection,MethodArgumentsInfo,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\MethodArgumentsInfo.cs,CheckParameter,Cyclomatic complexity of the method is 9
Complex Method,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitConstant,Cyclomatic complexity of the method is 10
Complex Method,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitPrimitiveConstant,Cyclomatic complexity of the method is 28
Complex Method,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitDefault,Cyclomatic complexity of the method is 37
Complex Method,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitInt,Cyclomatic complexity of the method is 33
Complex Method,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitLoadIndirect,Cyclomatic complexity of the method is 34
Complex Method,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitLoadElement,Cyclomatic complexity of the method is 35
Complex Method,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitStoreElement,Cyclomatic complexity of the method is 29
Complex Method,Cyjb.Reflection,MethodExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\MethodExt.cs,GenericArgumentsInferences,Cyclomatic complexity of the method is 15
Complex Method,Cyjb.Reflection,PowerBinder,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\PowerBinder.cs,CompareType,Cyclomatic complexity of the method is 17
Complex Method,Cyjb.Reflection,PowerBinder,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\PowerBinder.cs,CompareMethod,Cyclomatic complexity of the method is 15
Complex Method,Cyjb.Reflection,PowerBinder,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\PowerBinder.cs,BindToMethod,Cyclomatic complexity of the method is 12
Complex Method,Cyjb.Reflection,PowerBinder,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\PowerBinder.cs,UpdateArgs,Cyclomatic complexity of the method is 8
Complex Method,Cyjb.Reflection,PowerBinder,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\PowerBinder.cs,SelectProperty,Cyclomatic complexity of the method is 10
Complex Method,Cyjb.Reflection,TypeBounds,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeBounds.cs,LowerBoundInferences,Cyclomatic complexity of the method is 10
Complex Method,Cyjb.Reflection,TypeBounds,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeBounds.cs,UpperBoundInferences,Cyclomatic complexity of the method is 11
Complex Method,Cyjb.Reflection,TypeExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeExt.cs,GetEncompassingType,Cyclomatic complexity of the method is 9
Complex Method,Cyjb.Reflection,TypeExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeExt.cs,GetEncompassedType,Cyclomatic complexity of the method is 9
Complex Method,Cyjb.Reflection,TypeExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeExt.cs,CloseDefinitionFrom,Cyclomatic complexity of the method is 9
Complex Method,Cyjb.Reflection,TypeExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeExt.cs,UniqueCloseDefinitionFrom,Cyclomatic complexity of the method is 9
Complex Method,Cyjb.Utility,CacheFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\CacheFactory.cs,CreateCacheType,Cyclomatic complexity of the method is 12
Long Parameter List,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,BuildConverter,The method has 5 parameters.
Long Parameter List,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,EmitAccessField,The method has 5 parameters.
Long Parameter List,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,CreateClosedDelegate,The method has 5 parameters.
Long Parameter List,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,EmitInvokeMethod,The method has 5 parameters.
Long Parameter List,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,CreateDelegate,The method has 5 parameters.
Long Parameter List,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,CreateDelegate,The method has 5 parameters.
Long Parameter List,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,CreateDelegate,The method has 5 parameters.
Long Parameter List,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,CreateDelegate,The method has 6 parameters.
Long Parameter List,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,CreateClosedDelegate,The method has 5 parameters.
Long Parameter List,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,CreateDelegateLazy,The method has 5 parameters.
Long Parameter List,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,CreateDelegate,The method has 5 parameters.
Long Parameter List,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyItems,The method has 5 parameters.
Long Parameter List,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearch,The method has 5 parameters.
Long Parameter List,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearchInternal,The method has 5 parameters.
Long Parameter List,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearch,The method has 5 parameters.
Long Parameter List,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearch,The method has 6 parameters.
Long Parameter List,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearchInternal,The method has 6 parameters.
Long Parameter List,Cyjb.Reflection,MethodArgumentsInfo,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\MethodArgumentsInfo.cs,CheckParameter,The method has 5 parameters.
Long Parameter List,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitLoadArg,The method has 5 parameters.
Long Parameter List,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitConversion,The method has 5 parameters.
Long Parameter List,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitCall,The method has 5 parameters.
Long Parameter List,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitCallInternal,The method has 5 parameters.
Long Parameter List,Cyjb.Reflection,PowerBinder,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\PowerBinder.cs,BindToMethod,The method has 7 parameters.
Long Parameter List,Cyjb.Reflection,PowerBinder,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\PowerBinder.cs,SelectProperty,The method has 5 parameters.
Long Parameter List,Cyjb.Text,Token,F:\newReposMay17\CYJB_Cyjb\Cyjb\Text\Token`1.cs,Token,The method has 5 parameters.
Long Statement,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetConverterInternal,The length of the statement  "		if (conversion.ConversionType == ConversionType.Identity || conversion.ConversionType == ConversionType.ImplicitReference || conversion.ConversionType == ConversionType.Box || conversion.ConversionType == ConversionType.Unbox) { " is 228.
Long Statement,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,BuildConverter,The length of the statement  "	ConversionFactory.GetPreDefinedConversionNotVoid (typeof(object)' inputType).Emit (il' typeof(object)' inputType' isChecked); " is 125.
Long Statement,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetConverter,The length of the statement  "		converter.GenericConverter = BuildConverter (ConversionFactory.GetConversion (inputType' outputType)' inputType' outputType' false' true); " is 138.
Long Statement,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetConverter,The length of the statement  "	return converter.ObjectConverter ?? (converter.ObjectConverter = (Converter<object' object>)BuildConverter (ConversionFactory.GetConversion (inputType' outputType)' inputType' outputType' false' false)); " is 203.
Long Statement,Cyjb,ConversionTypeExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionType.cs,IsReference,The length of the statement  "	return conversionType == ConversionType.Identity || conversionType == ConversionType.ImplicitReference || conversionType == ConversionType.ExplicitReference; " is 157.
Long Statement,Cyjb,ConverterProviderExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\IConverterProvider.cs,IsValidConverterFrom,The length of the statement  "	return (parameters.Length == 1 && parameters [0].ParameterType == inputType) || (parameters.Length == 2 && parameters [1].ParameterType == inputType); " is 150.
Long Statement,Cyjb,ContractsForIConverterProvider,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\IConverterProvider.cs,GetConverterTo,The length of the statement  "	Contract.Ensures (Contract.Result<Delegate> () == null || this.IsValidConverterTo (Contract.Result<Delegate> ()' outputType)); " is 126.
Long Statement,Cyjb,ContractsForIConverterProvider,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\IConverterProvider.cs,GetConverterFrom,The length of the statement  "	Contract.Ensures (Contract.Result<Delegate> () == null || this.IsValidConverterFrom (Contract.Result<Delegate> ()' inputType)); " is 127.
Long Statement,Cyjb,DelegateBuilder,F:\newReposMay17\CYJB_Cyjb\Cyjb\DelegateBuilder.cs,CreateClosedDelegate,The length of the statement  "	return needLoadFirstArg ? dlgMethod.CreateDelegate (delegateType' firstArgument) : dlgMethod.CreateDelegate (delegateType); " is 123.
Long Statement,Cyjb,MethodSwitcher,F:\newReposMay17\CYJB_Cyjb\Cyjb\MethodSwitcher.cs,CreateSwitcher,The length of the statement  "	DynamicMethod method = new DynamicMethod ("MethodSwitcher"' invoke.ReturnType' paramTypes.Insert (0' closure.GetType ())' true); " is 128.
Long Statement,Cyjb,MethodSwitcher,F:\newReposMay17\CYJB_Cyjb\Cyjb\MethodSwitcher.cs,CheckDelegateType,The length of the statement  "			if (paramInfos.Where ((param' idx) => !param.ParameterType.IsExplicitFrom (dlgParamInfos [idx].ParameterType)).Any ()) { " is 120.
Long Statement,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,EscapeUnicode,The length of the statement  "	return string.Concat ("\\u"' BaseDigits [ch >> 12]' BaseDigits [(ch >> 8) & 0xF]' BaseDigits [(ch >> 4) & 0xF]' BaseDigits [ch & 0xF]); " is 135.
Long Statement,Cyjb,CommonExceptions,F:\newReposMay17\CYJB_Cyjb\Cyjb\CommonExceptions.cs,ArgumentOutOfRange,The length of the statement  "	return new ArgumentOutOfRangeException (paramName' actualValue' Format (Resources.ArgumentOutOfRangeBetween' begin' end)); " is 122.
Long Statement,Cyjb,CommonExceptions,F:\newReposMay17\CYJB_Cyjb\Cyjb\CommonExceptions.cs,InvalidCacheType,The length of the statement  "	return new ConfigurationErrorsException (message' element.ElementInformation.Source' element.ElementInformation.LineNumber); " is 124.
Long Statement,Cyjb,CommonExceptions,F:\newReposMay17\CYJB_Cyjb\Cyjb\CommonExceptions.cs,InvalidCacheType,The length of the statement  "	return new ConfigurationErrorsException (message' innerException' element.ElementInformation.Source' element.ElementInformation.LineNumber); " is 140.
Long Statement,Cyjb,CommonExceptions,F:\newReposMay17\CYJB_Cyjb\Cyjb\CommonExceptions.cs,InvalidCacheType_ICache,The length of the statement  "	return new ConfigurationErrorsException (message' element.ElementInformation.Source' element.ElementInformation.LineNumber); " is 124.
Long Statement,Cyjb,CommonExceptions,F:\newReposMay17\CYJB_Cyjb\Cyjb\CommonExceptions.cs,InvalidCacheOptions,The length of the statement  "	return new ConfigurationErrorsException (message' element.ElementInformation.Source' element.ElementInformation.LineNumber); " is 124.
Long Statement,Cyjb,CommonExceptions,F:\newReposMay17\CYJB_Cyjb\Cyjb\CommonExceptions.cs,CheckSourceLocatable,The length of the statement  "	if (range != null && ((range.Start.IsUnknown != range.End.IsUnknown) || (!range.Start.IsUnknown && range.Start > range.End))) { " is 127.
Long Statement,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearch,The length of the statement  "	Contract.Ensures ((Contract.Result<int> () >= 0 && Contract.Result<int> () <= list.Count) || (Contract.Result<int> () < 0 && ~Contract.Result<int> () <= list.Count + 1)); " is 170.
Long Statement,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearch,The length of the statement  "	Contract.Ensures ((Contract.Result<int> () >= 0 && Contract.Result<int> () <= list.Count) || (Contract.Result<int> () < 0 && ~Contract.Result<int> () <= list.Count + 1)); " is 170.
Long Statement,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearch,The length of the statement  "	Contract.Ensures ((Contract.Result<int> () >= 0 && Contract.Result<int> () <= list.Count) || (Contract.Result<int> () < 0 && ~Contract.Result<int> () <= list.Count + 1)); " is 170.
Long Statement,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearch,The length of the statement  "	Contract.Ensures ((Contract.Result<int> () >= 0 && Contract.Result<int> () <= list.Count) || (Contract.Result<int> () < 0 && ~Contract.Result<int> () <= list.Count + 1)); " is 170.
Long Statement,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearchInternal,The length of the statement  "	Contract.Ensures ((Contract.Result<int> () >= 0 && Contract.Result<int> () <= list.Count) || (Contract.Result<int> () < 0 && ~Contract.Result<int> () <= list.Count + 1)); " is 170.
Long Statement,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearch,The length of the statement  "	Contract.Ensures ((Contract.Result<int> () >= 0 && Contract.Result<int> () <= list.Count) || (Contract.Result<int> () < 0 && ~Contract.Result<int> () <= list.Count + 1)); " is 170.
Long Statement,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearch,The length of the statement  "	Contract.Ensures ((Contract.Result<int> () >= 0 && Contract.Result<int> () <= list.Count) || (Contract.Result<int> () < 0 && ~Contract.Result<int> () <= list.Count + 1)); " is 170.
Long Statement,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearch,The length of the statement  "	Contract.Ensures ((Contract.Result<int> () >= 0 && Contract.Result<int> () <= list.Count) || (Contract.Result<int> () < 0 && ~Contract.Result<int> () <= list.Count + 1)); " is 170.
Long Statement,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearch,The length of the statement  "	Contract.Ensures ((Contract.Result<int> () >= 0 && Contract.Result<int> () <= list.Count) || (Contract.Result<int> () < 0 && ~Contract.Result<int> () <= list.Count + 1)); " is 170.
Long Statement,Cyjb.Collections,ListExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\ListExt.cs,BinarySearchInternal,The length of the statement  "	Contract.Ensures ((Contract.Result<int> () >= 0 && Contract.Result<int> () <= list.Count) || (Contract.Result<int> () < 0 && ~Contract.Result<int> () <= list.Count + 1)); " is 170.
Long Statement,Cyjb.Conversions,BetweenNullableConversion,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\BetweenNullableConversion.cs,Emit,The length of the statement  "	ConversionFactory.GetConversion (inputUnderlyingType' outputUnderlyingType ?? outputType).Emit (generator' inputUnderlyingType' outputUnderlyingType ?? outputType' isChecked); " is 175.
Long Statement,Cyjb.Conversions,DecimalConversion,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\DecimalConversion.cs,Emit,The length of the statement  "	Contract.Assume ((inputType == typeof(decimal) && outputType.IsNumeric ()) || (outputType == typeof(decimal) && inputType.IsNumeric ())); " is 137.
Long Statement,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetConversion,The length of the statement  "	return converterDelegate == null ? null : userDefinedConverers.GetOrAdd (key' new DelegateConversion (converterDelegate)); " is 122.
Long Statement,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetBetweenValueTypeConversion,The length of the statement  "			Conversion conversion = GetNumericOrEnumConversion (inputUnderlyingType' inputTypeCode' outputUnderlyingType' outputTypeCode); " is 126.
Long Statement,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetBetweenValueTypeConversion,The length of the statement  "			return conversion.ConversionType.IsImplicit () ? BetweenNullableConversion.Implicit : BetweenNullableConversion.Explicit; " is 121.
Long Statement,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetNumericOrEnumConversion,The length of the statement  "		return numericConv == null ? IdentityConversion.ExplicitEnum : new NumericConversion (ConversionType.Enum' numericConv); " is 120.
Long Statement,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetExplicitRefConversion,The length of the statement  "		if (outputType.IsArray && IsIListOrBase (inputType) && CanReferenceConvert (inputType.GetGenericArguments () [0]' outputType.GetElementType ())) { " is 146.
Long Statement,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetExplicitRefConversion,The length of the statement  "		if (inputType.IsArray && IsIListOrBase (outputType) && CanReferenceConvert (inputType.GetElementType ()' outputType.GetGenericArguments () [0])) { " is 146.
Long Statement,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetExplicitRefConversion,The length of the statement  "		if (outputType.IsArray && inputType.GetArrayRank () == outputType.GetArrayRank () && CanReferenceConvert (inputType.GetElementType ()' outputType.GetElementType ())) { " is 167.
Long Statement,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetDelegateConversion,The length of the statement  "	if (!inputType.IsGenericType || !outputType.IsGenericType || !inputType.IsSubclassOf (typeof(Delegate)) || !outputType.IsSubclassOf (typeof(Delegate))) { " is 153.
Long Statement,Cyjb.Conversions,UserConversionCache,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\UserConversionCache.cs,GetUserConversions,The length of the statement  "			if (!method.Name.Equals (MethodExt.ImplicitMethodName' StringComparison.Ordinal) && !method.Name.Equals (MethodExt.ExplicitMethodName' StringComparison.Ordinal)) { " is 163.
Long Statement,Cyjb.IO,DirectoryExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IO\DirectoryExt.cs,AppendSeparator,The length of the statement  "	if (lastChar == Path.VolumeSeparatorChar || lastChar == Path.DirectorySeparatorChar || lastChar == Path.AltDirectorySeparatorChar) { " is 132.
Long Statement,Cyjb.IO,SourceFileRange,F:\newReposMay17\CYJB_Cyjb\Cyjb\IO\SourceFileRange.cs,Equals,The length of the statement  "	return this.start == other.start && this.end == other.end && string.Equals (this.fileName' other.fileName' StringComparison.Ordinal); " is 133.
Long Statement,Cyjb.IO,ContractsForISourceLocatable,F:\newReposMay17\CYJB_Cyjb\Cyjb\IO\ISourceLocatable.cs,ObjectInvariant,The length of the statement  "	Contract.Invariant ((locatable.Start.IsUnknown && locatable.End == SourcePosition.Unknown) || ((!locatable.Start.IsUnknown) && locatable.Start < locatable.End)); " is 161.
Long Statement,Cyjb.Reflection,MethodArgumentsInfo,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\MethodArgumentsInfo.cs,ClearParamArrayType,The length of the statement  "		this.fixedArguments = new ArrayAdapter<Type> (this.arguments' this.fixedArguments.Offset' this.fixedArguments.Count + 1); " is 121.
Long Statement,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitConversion,The length of the statement  "	Contract.Requires (conversionType == ConversionType.Implicit || conversionType == ConversionType.Explicit || conversionType == ConversionType.UserDefined); " is 155.
Long Statement,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitConversion,The length of the statement  "	Conversion conversion = conversionType == ConversionType.UserDefined ? ConversionFactory.GetConversion (inputType' outputType) : ConversionFactory.GetPreDefinedConversion (inputType' outputType); " is 195.
Long Statement,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,GetConversion,The length of the statement  "	Contract.Requires (conversionType == ConversionType.Implicit || conversionType == ConversionType.Explicit || conversionType == ConversionType.UserDefined); " is 155.
Long Statement,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,GetConversion,The length of the statement  "	Conversion conversion = conversionType == ConversionType.UserDefined ? ConversionFactory.GetConversion (inputType' outputType) : ConversionFactory.GetPreDefinedConversion (inputType' outputType); " is 195.
Long Statement,Cyjb.Reflection,PropertyExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\PropertyExt.cs,GetBaseDefinition,The length of the statement  "	PropertyInfo baseProperty = baseType.GetProperty (property.Name' TypeExt.AllMemberFlag | BindingFlags.ExactBinding' null' property.PropertyType' property.GetIndexParameterTypes ()' null); " is 187.
Long Statement,Cyjb.Reflection,MethodExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\MethodExt.cs,BuildGetParametersNoCopy,The length of the statement  "		return (Func<MethodBase' ParameterInfo[]>)Delegate.CreateDelegate (typeof(Func<MethodBase' ParameterInfo[]>)' methodGetParametersNoCopy); " is 137.
Long Statement,Cyjb.Reflection,PowerBinder,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\PowerBinder.cs,BindToField,The length of the statement  "			length = FilterMember (match' length' (firstField' secondField) => CompareType (firstField.FieldType' secondField.FieldType' valueType)); " is 137.
Long Statement,Cyjb.Reflection,PowerBinder,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\PowerBinder.cs,SelectProperty,The length of the statement  "	length = FilterMember (match' length' (firstProperty' secondProperty) => CompareProperty (firstProperty' secondProperty' returnType' indexes)); " is 143.
Long Statement,Cyjb.Reflection,TypeBounds,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeBounds.cs,ExactInferences,The length of the statement  "		return type.IsArray && paramType.GetArrayRank () == type.GetArrayRank () && ExactInferences (paramType.GetElementType ()' type.GetElementType ()); " is 146.
Long Statement,Cyjb.Reflection,TypeBounds,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeBounds.cs,LowerBoundInferences,The length of the statement  "		if (!GenericArgumentInferences (originArgs [i].GenericParameterAttributes' paramTypeArgs [i]' typeArgs [i]' GenericParameterAttributes.Covariant)) { " is 148.
Long Statement,Cyjb.Reflection,TypeBounds,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeBounds.cs,UpperBoundInferences,The length of the statement  "		if (!GenericArgumentInferences (originArgs [i].GenericParameterAttributes' paramTypeArgs [i]' typeArgs [i]' GenericParameterAttributes.Contravariant)) { " is 152.
Long Statement,Cyjb.Reflection,TypeExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeExt.cs,IsUnsigned,The length of the statement  "	return typeCode == TypeCode.Char || typeCode == TypeCode.Byte || typeCode == TypeCode.UInt16 || typeCode == TypeCode.UInt32 || typeCode == TypeCode.UInt64; " is 155.
Long Statement,Cyjb.Reflection,TypeExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeExt.cs,IsSigned,The length of the statement  "	return typeCode == TypeCode.SByte || typeCode == TypeCode.Int16 || typeCode == TypeCode.Int32 || typeCode == TypeCode.Int64; " is 124.
Long Statement,Cyjb.Reflection,TypeExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeExt.cs,IsConvertFrom,The length of the statement  "	return conversion != null && conversion.ConversionType != ConversionType.None && (isExplicit || conversion.ConversionType.IsImplicit ()); " is 137.
Long Statement,Cyjb.Reflection,TypeExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\TypeExt.cs,IsDelegate,The length of the statement  "	return type != null && type.IsSubclassOf (typeof(Delegate)) && type != typeof(Delegate) && type != typeof(MulticastDelegate); " is 125.
Long Statement,Cyjb.Text,Token,F:\newReposMay17\CYJB_Cyjb\Cyjb\Text\Token`1.cs,Equals,The length of the statement  "	return EqualityComparer<T>.Default.Equals (this.id' other.id) && this.text == other.text && this.start == other.start && this.end == other.end; " is 143.
Long Statement,Cyjb.Utility,CacheFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\CacheFactory.cs,CreateInternal,The length of the statement  "	Dictionary<string' string> options = new Dictionary<string' string> (element.Options.Count' StringComparer.OrdinalIgnoreCase); " is 126.
Complex Conditional,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToSByte,The conditional expression  "fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16"  is complex.
Complex Conditional,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToByte,The conditional expression  "fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16"  is complex.
Complex Conditional,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt16,The conditional expression  "fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16"  is complex.
Complex Conditional,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt16,The conditional expression  "fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16"  is complex.
Complex Conditional,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt32,The conditional expression  "fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16"  is complex.
Complex Conditional,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt32,The conditional expression  "fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16"  is complex.
Complex Conditional,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt64,The conditional expression  "fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16"  is complex.
Complex Conditional,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt64,The conditional expression  "fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16"  is complex.
Complex Conditional,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetConverterInternal,The conditional expression  "conversion.ConversionType == ConversionType.Identity || conversion.ConversionType == ConversionType.ImplicitReference || conversion.ConversionType == ConversionType.Box || conversion.ConversionType == ConversionType.Unbox"  is complex.
Complex Conditional,Cyjb,CommonExceptions,F:\newReposMay17\CYJB_Cyjb\Cyjb\CommonExceptions.cs,CheckSourceLocatable,The conditional expression  "range != null && ((range.Start.IsUnknown != range.End.IsUnknown) || (!range.Start.IsUnknown && range.Start > range.End))"  is complex.
Complex Conditional,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetDelegateConversion,The conditional expression  "!inputType.IsGenericType || !outputType.IsGenericType || !inputType.IsSubclassOf (typeof(Delegate)) || !outputType.IsSubclassOf (typeof(Delegate))"  is complex.
Empty Catch Block,Cyjb.Utility,CacheFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\CacheFactory.cs,CreateCacheType,The method has an empty catch block.
Empty Catch Block,Cyjb.Utility,CacheFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\CacheFactory.cs,CreateCacheType,The method has an empty catch block.
Empty Catch Block,Cyjb.Utility,CacheFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\CacheFactory.cs,CreateCacheType,The method has an empty catch block.
Magic Number,Cyjb,ArrayExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\ArrayExt.cs,Fill,The following statement contains a magic number: for (int i = 0; i < array.GetLength (0); i++) {  	for (int j = 0; j < array.GetLength (1); j++) {  		for (int k = 0; k < array.GetLength (2); k++) {  			array [i' j' k] = value;  		}  	}  }  
Magic Number,Cyjb,ArrayExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\ArrayExt.cs,Fill,The following statement contains a magic number: for (int j = 0; j < array.GetLength (1); j++) {  	for (int k = 0; k < array.GetLength (2); k++) {  		array [i' j' k] = value;  	}  }  
Magic Number,Cyjb,ArrayExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\ArrayExt.cs,Fill,The following statement contains a magic number: for (int k = 0; k < array.GetLength (2); k++) {  	array [i' j' k] = value;  }  
Magic Number,Cyjb,ArrayExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\ArrayExt.cs,Fill,The following statement contains a magic number: for (int i = 0; i < array.GetLength (0); i++) {  	for (int j = 0; j < array.GetLength (1); j++) {  		for (int k = 0; k < array.GetLength (2); k++) {  			array [i' j' k] = value ();  		}  	}  }  
Magic Number,Cyjb,ArrayExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\ArrayExt.cs,Fill,The following statement contains a magic number: for (int j = 0; j < array.GetLength (1); j++) {  	for (int k = 0; k < array.GetLength (2); k++) {  		array [i' j' k] = value ();  	}  }  
Magic Number,Cyjb,ArrayExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\ArrayExt.cs,Fill,The following statement contains a magic number: for (int k = 0; k < array.GetLength (2); k++) {  	array [i' j' k] = value ();  }  
Magic Number,Cyjb,ArrayExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\ArrayExt.cs,Fill,The following statement contains a magic number: for (int i = 0; i < array.GetLength (0); i++) {  	for (int j = 0; j < array.GetLength (1); j++) {  		for (int k = 0; k < array.GetLength (2); k++) {  			array [i' j' k] = value (i' j' k);  		}  	}  }  
Magic Number,Cyjb,ArrayExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\ArrayExt.cs,Fill,The following statement contains a magic number: for (int j = 0; j < array.GetLength (1); j++) {  	for (int k = 0; k < array.GetLength (2); k++) {  		array [i' j' k] = value (i' j' k);  	}  }  
Magic Number,Cyjb,ArrayExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\ArrayExt.cs,Fill,The following statement contains a magic number: for (int k = 0; k < array.GetLength (2); k++) {  	array [i' j' k] = value (i' j' k);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToSByte,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToSByte,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToSByte,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToSByte (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToSByte,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToSByte (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToSByte,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToSByte (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToSByte,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToSByte (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToByte,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToByte,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToByte,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToByte (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToByte,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToByte (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToByte,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToByte (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToByte,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToByte (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt16,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt16,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt16,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToInt16 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt16,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToInt16 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt16,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToInt16 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt16,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToInt16 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt16,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt16,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt16,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToUInt16 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt16,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToUInt16 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt16,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToUInt16 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt16,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToUInt16 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt32,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt32,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt32,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToInt32 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt32,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToInt32 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt32,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToInt32 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt32,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToInt32 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt32,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt32,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt32,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToUInt32 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt32,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToUInt32 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt32,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToUInt32 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt32,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToUInt32 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt64,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt64,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt64,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToInt64 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt64,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToInt64 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt64,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToInt64 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToInt64,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToInt64 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt64,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt64,The following statement contains a magic number: if (fromBase < 2 || fromBase > 36) {  	throw CommonExceptions.InvalidBase ("fromBase"' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt64,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToUInt64 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt64,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToUInt64 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt64,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToUInt64 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToUInt64,The following statement contains a magic number: if (fromBase == 2 || fromBase == 8 || fromBase == 10 || fromBase == 16) {  	return System.Convert.ToUInt64 (value' fromBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,StringToUInt32,The following statement contains a magic number: Contract.Requires (fromBase >= 2 && fromBase <= 36);  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,StringToUInt32,The following statement contains a magic number: Contract.Requires (fromBase >= 2 && fromBase <= 36);  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,StringToUInt64,The following statement contains a magic number: Contract.Requires (fromBase >= 2 && fromBase <= 36);  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,StringToUInt64,The following statement contains a magic number: Contract.Requires (fromBase >= 2 && fromBase <= 36);  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetBaseValue,The following statement contains a magic number: Contract.Requires (fromBase >= 2 && fromBase <= 36);  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetBaseValue,The following statement contains a magic number: Contract.Requires (fromBase >= 2 && fromBase <= 36);  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetBaseValue,The following statement contains a magic number: if (ch < 'A') {  	if (ch >= '0' && ch <= '9') {  		value = ch - '0';  	}  } else if (ch < 'a') {  	if (ch <= 'Z') {  		value = ch - 'A' + 10;  	}  } else if (ch <= 'z') {  	value = ch - 'a' + 10;  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetBaseValue,The following statement contains a magic number: if (ch < 'A') {  	if (ch >= '0' && ch <= '9') {  		value = ch - '0';  	}  } else if (ch < 'a') {  	if (ch <= 'Z') {  		value = ch - 'A' + 10;  	}  } else if (ch <= 'z') {  	value = ch - 'a' + 10;  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetBaseValue,The following statement contains a magic number: if (ch < 'a') {  	if (ch <= 'Z') {  		value = ch - 'A' + 10;  	}  } else if (ch <= 'z') {  	value = ch - 'a' + 10;  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetBaseValue,The following statement contains a magic number: if (ch < 'a') {  	if (ch <= 'Z') {  		value = ch - 'A' + 10;  	}  } else if (ch <= 'z') {  	value = ch - 'a' + 10;  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetBaseValue,The following statement contains a magic number: if (ch <= 'Z') {  	value = ch - 'A' + 10;  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetBaseValue,The following statement contains a magic number: value = ch - 'A' + 10;  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetBaseValue,The following statement contains a magic number: if (ch <= 'z') {  	value = ch - 'a' + 10;  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,GetBaseValue,The following statement contains a magic number: value = ch - 'a' + 10;  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (value < 0 && toBase == 10) {  	// 仅 10 进制支持负数。  	neg = true;  	ulValue = (ulong)-value;  } else {  	// 这里必须保证位数相同。  	ulValue = (byte)value;  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (value < 0 && toBase == 10) {  	// 仅 10 进制支持负数。  	neg = true;  	ulValue = (ulong)-value;  } else {  	// 这里必须保证位数相同。  	ulValue = (ushort)value;  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (value < 0 && toBase == 10) {  	// 仅 10 进制支持负数。  	neg = true;  	ulValue = (ulong)-value;  } else {  	// 这里必须保证位数相同。  	ulValue = (uint)value;  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (value < 0 && toBase == 10) {  	// 仅 10 进制支持负数。  	neg = true;  	ulValue = (ulong)-value;  } else {  	ulValue = (ulong)value;  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ToString,The following statement contains a magic number: if (toBase < 2 || toBase > 36) {  	throw CommonExceptions.InvalidBase ("toBase"' toBase);  }  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ConvertBase,The following statement contains a magic number: Contract.Requires (toBase >= 2 && toBase <= 36);  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ConvertBase,The following statement contains a magic number: Contract.Requires (toBase >= 2 && toBase <= 36);  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ConvertBase,The following statement contains a magic number: Contract.Requires (toBase >= 2 && toBase <= 36);  
Magic Number,Cyjb,Convert,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\Convert.Base.cs,ConvertBase,The following statement contains a magic number: Contract.Requires (toBase >= 2 && toBase <= 36);  
Magic Number,Cyjb,ConverterProviderExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\IConverterProvider.cs,IsValidConverterFrom,The following statement contains a magic number: return (parameters.Length == 1 && parameters [0].ParameterType == inputType) || (parameters.Length == 2 && parameters [1].ParameterType == inputType);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 8);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: iValue = (iValue & 0x33) + ((iValue >> 2) & 0x33);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: return (iValue + (iValue >> 4)) & 0xF;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,Parity,The following statement contains a magic number: iValue = (iValue ^ (iValue >> 4)) & 0xF;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: return (byte)(((uValue * 0x0802U & 0x22110U) | (uValue * 0x8020U & 0x88440U)) * 0x10101U >> 16);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 7);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: if (value >= 128) {  	return 7;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: if (value >= 128) {  	return 7;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: return 7;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: if (value >= 64) {  	return 6;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: if (value >= 64) {  	return 6;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: return 6;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: if (value >= 32) {  	return 5;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: if (value >= 32) {  	return 5;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: return 5;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: if (value >= 16) {  	return 4;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: if (value >= 16) {  	return 4;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: return 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: if (value >= 8) {  	return 3;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: if (value >= 8) {  	return 3;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: return 3;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: if (value >= 4) {  	return 2;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: if (value >= 4) {  	return 2;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: return 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: return value >= 2 ? 1 : 0;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 2);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100) {  	return 2;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100) {  	return 2;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return (value >= 10) ? 1 : 0;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: iValue |= iValue >> 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: iValue |= iValue >> 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: value = (value & 0x33333333) + ((value >> 2) & 0x33333333);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: value = (value + (value >> 4)) & 0x0F0F0F0F;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: value = (value * 0x01010101) >> 24;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: Contract.Assume (value >= 0 && value <= 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,Parity,The following statement contains a magic number: value ^= value >> 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,Parity,The following statement contains a magic number: return (value >> 28) & 1;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 8) & 0x00FF00FF) | ((value & 0x00FF00FF) << 8);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 8) & 0x00FF00FF) | ((value & 0x00FF00FF) << 8);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = (value >> 16) | (value << 16);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = (value >> 16) | (value << 16);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 9);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000000) {  	return 9;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000000) {  	return 9;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 9;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000000) {  	return 8;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000000) {  	return 8;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 8;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000000) {  	return 7;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000000) {  	return 7;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 7;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000) {  	return 6;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000) {  	return 6;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 6;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000) {  	return 5;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000) {  	return 5;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 5;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000) {  	return 4;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000) {  	return 4;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000) {  	return 3;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000) {  	return 3;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 3;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100) {  	return 2;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100) {  	return 2;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return (value >= 10) ? 1 : 0;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountTrailingZeroBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 31);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountTrailingZeroBits,The following statement contains a magic number: return multiplyDeBruijnBitPosition32 [((uint)((value & -value) * 0x077CB531U)) >> 27];  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountTrailingBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 8;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 16;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 64);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: value = (value & 0x3333333333333333L) + ((value >> 2) & 0x3333333333333333L);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: value = (value + (value >> 4)) & 0x0F0F0F0F0F0F0F0FL;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: return (int)((value * 0x0101010101010101L) >> 56);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,Parity,The following statement contains a magic number: value ^= value >> 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,Parity,The following statement contains a magic number: return (int)((value >> 60) & 1);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 2) & 0x3333333333333333L) | ((value & 0x3333333333333333L) << 2);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 2) & 0x3333333333333333L) | ((value & 0x3333333333333333L) << 2);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 4) & 0x0F0F0F0F0F0F0F0FL) | ((value & 0x0F0F0F0F0F0F0F0FL) << 4);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 4) & 0x0F0F0F0F0F0F0F0FL) | ((value & 0x0F0F0F0F0F0F0F0FL) << 4);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 8) & 0x00FF00FF00FF00FFL) | ((value & 0x00FF00FF00FF00FFL) << 8);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 8) & 0x00FF00FF00FF00FFL) | ((value & 0x00FF00FF00FF00FFL) << 8);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 16) & 0x0000FFFF0000FFFFL) | ((value & 0x0000FFFF0000FFFFL) << 16);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 16) & 0x0000FFFF0000FFFFL) | ((value & 0x0000FFFF0000FFFFL) << 16);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = (value >> 32) | (value << 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = (value >> 32) | (value << 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 64);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 18);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000000000000000L) {  	return 18;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 18;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000000000000000L) {  	return 17;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 17;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000000000000000L) {  	return 16;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 16;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000000000000L) {  	return 15;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 15;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000000000000L) {  	return 14;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 14;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000000000000L) {  	return 13;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 13;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000000000L) {  	return 12;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 12;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000000000L) {  	return 11;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 11;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000000000L) {  	return 10;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 10;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000000L) {  	return 9;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 9;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000000L) {  	return 8;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 8;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000000L) {  	return 7;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 7;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000L) {  	return 6;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 6;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000L) {  	return 5;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 5;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000L) {  	return 4;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000L) {  	return 3;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 3;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100L) {  	return 2;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountTrailingZeroBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 64);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountTrailingZeroBits,The following statement contains a magic number: return multiplyDeBruijnBitPosition64 [((ulong)((value & -value) * 0x26752B916FC7B0DL)) >> 58];  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountTrailingBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 64);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 8;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 16;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 32;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: value = (value & 0x33333333U) + ((value >> 2) & 0x33333333U);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: value = (value + (value >> 4)) & 0x0F0F0F0FU;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: value = (value * 0x01010101U) >> 24;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: Contract.Assume (value <= 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,Parity,The following statement contains a magic number: value ^= value >> 16;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,Parity,The following statement contains a magic number: value ^= value >> 8;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,Parity,The following statement contains a magic number: value ^= value >> 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 2) & 0x33333333U) | ((value & 0x33333333U) << 2);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 2) & 0x33333333U) | ((value & 0x33333333U) << 2);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 4) & 0x0F0F0F0FU) | ((value & 0x0F0F0F0FU) << 4);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 4) & 0x0F0F0F0FU) | ((value & 0x0F0F0F0FU) << 4);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 8) & 0x00FF00FFU) | ((value & 0x00FF00FFU) << 8);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 8) & 0x00FF00FFU) | ((value & 0x00FF00FFU) << 8);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = (value >> 16) | (value << 16);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = (value >> 16) | (value << 16);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: value |= value >> 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: value |= value >> 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: value |= value >> 8;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: value |= value >> 16;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: return logBase2_32 [(value * 0x07C4ACDDU) >> 27];  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 9);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000000U) {  	return 9;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 9;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000000U) {  	return 8;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 8;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000000U) {  	return 7;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 7;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000U) {  	return 6;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 6;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000U) {  	return 5;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 5;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000U) {  	return 4;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000U) {  	return 3;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 3;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100U) {  	return 2;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountTrailingZeroBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountTrailingBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 8;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 16;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 64);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: value = (value & 0x3333333333333333UL) + ((value >> 2) & 0x3333333333333333UL);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: value = (value + (value >> 4)) & 0x0F0F0F0F0F0F0F0FUL;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountBits,The following statement contains a magic number: return (int)((value * 0x0101010101010101UL) >> 56);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,Parity,The following statement contains a magic number: value ^= value >> 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,Parity,The following statement contains a magic number: return (int)((value >> 60) & 1);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 2) & 0x3333333333333333UL) | ((value & 0x3333333333333333UL) << 2);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 2) & 0x3333333333333333UL) | ((value & 0x3333333333333333UL) << 2);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 4) & 0x0F0F0F0F0F0F0F0FUL) | ((value & 0x0F0F0F0F0F0F0F0FUL) << 4);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 4) & 0x0F0F0F0F0F0F0F0FUL) | ((value & 0x0F0F0F0F0F0F0F0FUL) << 4);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 8) & 0x00FF00FF00FF00FFUL) | ((value & 0x00FF00FF00FF00FFUL) << 8);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 8) & 0x00FF00FF00FF00FFUL) | ((value & 0x00FF00FF00FF00FFUL) << 8);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 16) & 0x0000FFFF0000FFFFUL) | ((value & 0x0000FFFF0000FFFFUL) << 16);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = ((value >> 16) & 0x0000FFFF0000FFFFUL) | ((value & 0x0000FFFF0000FFFFUL) << 16);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = (value >> 32) | (value << 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,ReverseBits,The following statement contains a magic number: value = (value >> 32) | (value << 32);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 64);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: value |= value >> 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: value |= value >> 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: value |= value >> 8;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: value |= value >> 16;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: value |= value >> 32;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase2,The following statement contains a magic number: return logBase2_64 [((value - (value >> 1)) * 0x07EDD5E59A4E28C2UL) >> 58];  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 19);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000000000000000000UL) {  	return 19;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 19;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000000000000000UL) {  	return 18;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 18;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000000000000000UL) {  	return 17;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 17;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000000000000000UL) {  	return 16;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 16;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000000000000UL) {  	return 15;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 15;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000000000000UL) {  	return 14;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 14;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000000000000UL) {  	return 13;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 13;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000000000UL) {  	return 12;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 12;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000000000UL) {  	return 11;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 11;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000000000UL) {  	return 10;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 10;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000000UL) {  	return 9;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 9;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000000UL) {  	return 8;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 8;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000000UL) {  	return 7;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 7;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000000UL) {  	return 6;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 6;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100000UL) {  	return 5;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 5;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 10000UL) {  	return 4;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 1000UL) {  	return 3;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 3;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: if (value >= 100UL) {  	return 2;  }  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,LogBase10,The following statement contains a magic number: return 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountTrailingZeroBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 64);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CountTrailingBits,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 64);  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 2;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 4;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 8;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 16;  
Magic Number,Cyjb,IntegerExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\IntegerExt.cs,CeilingPowerOf2,The following statement contains a magic number: value |= value >> 32;  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,EscapeUnicode,The following statement contains a magic number: return string.Concat ("\\u"' BaseDigits [ch >> 12]' BaseDigits [(ch >> 8) & 0xF]' BaseDigits [(ch >> 4) & 0xF]' BaseDigits [ch & 0xF]);  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,EscapeUnicode,The following statement contains a magic number: return string.Concat ("\\u"' BaseDigits [ch >> 12]' BaseDigits [(ch >> 8) & 0xF]' BaseDigits [(ch >> 4) & 0xF]' BaseDigits [ch & 0xF]);  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,EscapeUnicode,The following statement contains a magic number: return string.Concat ("\\u"' BaseDigits [ch >> 12]' BaseDigits [(ch >> 8) & 0xF]' BaseDigits [(ch >> 4) & 0xF]' BaseDigits [ch & 0xF]);  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 2);  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 2);  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: Contract.Ensures (Contract.Result<int> () >= 0 && Contract.Result<int> () <= 2);  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: if (ch >= 0x20000) {  	return ch <= 0x2FFFD || ch >= 0x30000 ? 2 : 1;  }  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: return ch <= 0x2FFFD || ch >= 0x30000 ? 2 : 1;  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: if (ch <= 0xA4CF) {  	if (ch >= 0x2E80) {  		return ch != 0x303F ? 2 : 1;  	}  	if (ch <= 0x115F) {  		return 2;  	}  	return ch == 0x2329 || ch == 0x232A ? 2 : 1;  }  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: if (ch <= 0xA4CF) {  	if (ch >= 0x2E80) {  		return ch != 0x303F ? 2 : 1;  	}  	if (ch <= 0x115F) {  		return 2;  	}  	return ch == 0x2329 || ch == 0x232A ? 2 : 1;  }  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: if (ch <= 0xA4CF) {  	if (ch >= 0x2E80) {  		return ch != 0x303F ? 2 : 1;  	}  	if (ch <= 0x115F) {  		return 2;  	}  	return ch == 0x2329 || ch == 0x232A ? 2 : 1;  }  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: if (ch >= 0x2E80) {  	return ch != 0x303F ? 2 : 1;  }  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: return ch != 0x303F ? 2 : 1;  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: if (ch <= 0x115F) {  	return 2;  }  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: return 2;  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: return ch == 0x2329 || ch == 0x232A ? 2 : 1;  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: if (ch <= 0xD7A3) {  	return ch >= 0xAC00 ? 2 : 1;  }  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: return ch >= 0xAC00 ? 2 : 1;  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: if (ch <= 0xFAFF) {  	return 2;  }  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: return 2;  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: if (ch < 0xFF00) {  	if (ch > 0xFE6F) {  		return 1;  	}  	if (ch >= 0xFE30 || ch <= 0xFE19) {  		return 2;  	}  	return 1;  }  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: if (ch >= 0xFE30 || ch <= 0xFE19) {  	return 2;  }  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: return 2;  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: if (ch <= 0xFF60 || ch >= 0xFFE0) {  	return 2;  }  
Magic Number,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following statement contains a magic number: return 2;  
Magic Number,Cyjb,EnumExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\EnumExt.cs,ToStringValue,The following statement contains a magic number: if ((value >> 63) > 0 || enumType.IsUnsigned ()) {  	return value.ToString (CultureInfo.InvariantCulture);  }  
Magic Number,Cyjb,RandomExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\RandomExt.cs,NextUInt32,The following statement contains a magic number: return (uint)((Random.Next () << 16) | (Random.Next () & 0xFFFF));  
Magic Number,Cyjb,RandomExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\RandomExt.cs,NextInt64,The following statement contains a magic number: value <<= 31;  
Magic Number,Cyjb,RandomExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\RandomExt.cs,NextUInt64,The following statement contains a magic number: value <<= 31;  
Magic Number,Cyjb,RandomExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\RandomExt.cs,NextUInt64,The following statement contains a magic number: value <<= 31;  
Magic Number,Cyjb,RandomExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\RandomExt.cs,NextUInt64,The following statement contains a magic number: value |= ((uint)Random.Next () & 3);  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following statement contains a magic number: while (idx >= 0) {  	// 添加当前 '\' 之前的字符串。  	if (idx > start) {  		builder.Append (str' start' idx - start);  		start = idx;  	}  	// 跳过 '\' 字符。  	idx++;  	if (idx >= len) {  		break;  	}  	// Unicode 转义需要的十六进制字符的长度。  	int hexLen = 0;  	char ch = str [idx];  	switch (ch) {  	case 'x':  		// \x 后面必须是 2 位。  		hexLen = 2;  		break;  	case 'u':  		// \u 后面必须是 4 位。  		hexLen = 4;  		break;  	case 'U':  		// \U 后面必须是 8 位。  		hexLen = 8;  		break;  	}  	if (hexLen > 0) {  		// Unicode 反转义。  		if (CheckHexLength (str' idx + 1' hexLen)) {  			idx++;  			int charNum = System.Convert.ToInt32 (str.Substring (idx' hexLen)' 16);  			if (charNum < 0xFFFF) {  				// 单个字符。  				builder.Append ((char)charNum);  			} else {  				// 代理项对的字符。  				builder.Append (char.ConvertFromUtf32 (charNum & 0x1FFFFF));  			}  			idx = start = idx + hexLen;  		}  	} else if (!unicodeOnly) {  		// 其它反转义。  		char result;  		if (TryUnescape (str [idx]' customEscape' out result)) {  			builder.Append (result);  			idx = start = idx + 1;  		}  	}  	idx = str.IndexOf ('\\'' idx);  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following statement contains a magic number: while (idx >= 0) {  	// 添加当前 '\' 之前的字符串。  	if (idx > start) {  		builder.Append (str' start' idx - start);  		start = idx;  	}  	// 跳过 '\' 字符。  	idx++;  	if (idx >= len) {  		break;  	}  	// Unicode 转义需要的十六进制字符的长度。  	int hexLen = 0;  	char ch = str [idx];  	switch (ch) {  	case 'x':  		// \x 后面必须是 2 位。  		hexLen = 2;  		break;  	case 'u':  		// \u 后面必须是 4 位。  		hexLen = 4;  		break;  	case 'U':  		// \U 后面必须是 8 位。  		hexLen = 8;  		break;  	}  	if (hexLen > 0) {  		// Unicode 反转义。  		if (CheckHexLength (str' idx + 1' hexLen)) {  			idx++;  			int charNum = System.Convert.ToInt32 (str.Substring (idx' hexLen)' 16);  			if (charNum < 0xFFFF) {  				// 单个字符。  				builder.Append ((char)charNum);  			} else {  				// 代理项对的字符。  				builder.Append (char.ConvertFromUtf32 (charNum & 0x1FFFFF));  			}  			idx = start = idx + hexLen;  		}  	} else if (!unicodeOnly) {  		// 其它反转义。  		char result;  		if (TryUnescape (str [idx]' customEscape' out result)) {  			builder.Append (result);  			idx = start = idx + 1;  		}  	}  	idx = str.IndexOf ('\\'' idx);  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following statement contains a magic number: while (idx >= 0) {  	// 添加当前 '\' 之前的字符串。  	if (idx > start) {  		builder.Append (str' start' idx - start);  		start = idx;  	}  	// 跳过 '\' 字符。  	idx++;  	if (idx >= len) {  		break;  	}  	// Unicode 转义需要的十六进制字符的长度。  	int hexLen = 0;  	char ch = str [idx];  	switch (ch) {  	case 'x':  		// \x 后面必须是 2 位。  		hexLen = 2;  		break;  	case 'u':  		// \u 后面必须是 4 位。  		hexLen = 4;  		break;  	case 'U':  		// \U 后面必须是 8 位。  		hexLen = 8;  		break;  	}  	if (hexLen > 0) {  		// Unicode 反转义。  		if (CheckHexLength (str' idx + 1' hexLen)) {  			idx++;  			int charNum = System.Convert.ToInt32 (str.Substring (idx' hexLen)' 16);  			if (charNum < 0xFFFF) {  				// 单个字符。  				builder.Append ((char)charNum);  			} else {  				// 代理项对的字符。  				builder.Append (char.ConvertFromUtf32 (charNum & 0x1FFFFF));  			}  			idx = start = idx + hexLen;  		}  	} else if (!unicodeOnly) {  		// 其它反转义。  		char result;  		if (TryUnescape (str [idx]' customEscape' out result)) {  			builder.Append (result);  			idx = start = idx + 1;  		}  	}  	idx = str.IndexOf ('\\'' idx);  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following statement contains a magic number: while (idx >= 0) {  	// 添加当前 '\' 之前的字符串。  	if (idx > start) {  		builder.Append (str' start' idx - start);  		start = idx;  	}  	// 跳过 '\' 字符。  	idx++;  	if (idx >= len) {  		break;  	}  	// Unicode 转义需要的十六进制字符的长度。  	int hexLen = 0;  	char ch = str [idx];  	switch (ch) {  	case 'x':  		// \x 后面必须是 2 位。  		hexLen = 2;  		break;  	case 'u':  		// \u 后面必须是 4 位。  		hexLen = 4;  		break;  	case 'U':  		// \U 后面必须是 8 位。  		hexLen = 8;  		break;  	}  	if (hexLen > 0) {  		// Unicode 反转义。  		if (CheckHexLength (str' idx + 1' hexLen)) {  			idx++;  			int charNum = System.Convert.ToInt32 (str.Substring (idx' hexLen)' 16);  			if (charNum < 0xFFFF) {  				// 单个字符。  				builder.Append ((char)charNum);  			} else {  				// 代理项对的字符。  				builder.Append (char.ConvertFromUtf32 (charNum & 0x1FFFFF));  			}  			idx = start = idx + hexLen;  		}  	} else if (!unicodeOnly) {  		// 其它反转义。  		char result;  		if (TryUnescape (str [idx]' customEscape' out result)) {  			builder.Append (result);  			idx = start = idx + 1;  		}  	}  	idx = str.IndexOf ('\\'' idx);  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following statement contains a magic number: switch (ch) {  case 'x':  	// \x 后面必须是 2 位。  	hexLen = 2;  	break;  case 'u':  	// \u 后面必须是 4 位。  	hexLen = 4;  	break;  case 'U':  	// \U 后面必须是 8 位。  	hexLen = 8;  	break;  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following statement contains a magic number: switch (ch) {  case 'x':  	// \x 后面必须是 2 位。  	hexLen = 2;  	break;  case 'u':  	// \u 后面必须是 4 位。  	hexLen = 4;  	break;  case 'U':  	// \U 后面必须是 8 位。  	hexLen = 8;  	break;  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following statement contains a magic number: switch (ch) {  case 'x':  	// \x 后面必须是 2 位。  	hexLen = 2;  	break;  case 'u':  	// \u 后面必须是 4 位。  	hexLen = 4;  	break;  case 'U':  	// \U 后面必须是 8 位。  	hexLen = 8;  	break;  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following statement contains a magic number: hexLen = 2;  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following statement contains a magic number: hexLen = 4;  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following statement contains a magic number: hexLen = 8;  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following statement contains a magic number: if (hexLen > 0) {  	// Unicode 反转义。  	if (CheckHexLength (str' idx + 1' hexLen)) {  		idx++;  		int charNum = System.Convert.ToInt32 (str.Substring (idx' hexLen)' 16);  		if (charNum < 0xFFFF) {  			// 单个字符。  			builder.Append ((char)charNum);  		} else {  			// 代理项对的字符。  			builder.Append (char.ConvertFromUtf32 (charNum & 0x1FFFFF));  		}  		idx = start = idx + hexLen;  	}  } else if (!unicodeOnly) {  	// 其它反转义。  	char result;  	if (TryUnescape (str [idx]' customEscape' out result)) {  		builder.Append (result);  		idx = start = idx + 1;  	}  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following statement contains a magic number: if (CheckHexLength (str' idx + 1' hexLen)) {  	idx++;  	int charNum = System.Convert.ToInt32 (str.Substring (idx' hexLen)' 16);  	if (charNum < 0xFFFF) {  		// 单个字符。  		builder.Append ((char)charNum);  	} else {  		// 代理项对的字符。  		builder.Append (char.ConvertFromUtf32 (charNum & 0x1FFFFF));  	}  	idx = start = idx + hexLen;  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Combine,The following statement contains a magic number: for (int i = 0; i < text.Length; i++) {  	if (predicate (text [i])) {  		if (state == 1) {  			state = 2;  		}  	} else {  		if (state == 2) {  			builder.Append (replace);  		}  		builder.Append (text [i]);  		state = 1;  	}  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Combine,The following statement contains a magic number: for (int i = 0; i < text.Length; i++) {  	if (predicate (text [i])) {  		if (state == 1) {  			state = 2;  		}  	} else {  		if (state == 2) {  			builder.Append (replace);  		}  		builder.Append (text [i]);  		state = 1;  	}  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Combine,The following statement contains a magic number: if (predicate (text [i])) {  	if (state == 1) {  		state = 2;  	}  } else {  	if (state == 2) {  		builder.Append (replace);  	}  	builder.Append (text [i]);  	state = 1;  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Combine,The following statement contains a magic number: if (predicate (text [i])) {  	if (state == 1) {  		state = 2;  	}  } else {  	if (state == 2) {  		builder.Append (replace);  	}  	builder.Append (text [i]);  	state = 1;  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Combine,The following statement contains a magic number: if (state == 1) {  	state = 2;  }  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Combine,The following statement contains a magic number: state = 2;  
Magic Number,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Combine,The following statement contains a magic number: if (state == 2) {  	builder.Append (replace);  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,InsertRange,The following statement contains a magic number: foreach (byte b in collection) {  	value |= unchecked((uint)(b << j));  	j += 8;  	length += 8;  	if (j == UnitSize) {  		uintList.Add (value);  		value = 0U;  		j = 0;  	}  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,InsertRange,The following statement contains a magic number: foreach (byte b in collection) {  	value |= unchecked((uint)(b << j));  	j += 8;  	length += 8;  	if (j == UnitSize) {  		uintList.Add (value);  		value = 0U;  		j = 0;  	}  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,InsertRange,The following statement contains a magic number: j += 8;  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,InsertRange,The following statement contains a magic number: length += 8;  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,GetContentHashCode,The following statement contains a magic number: for (int i = 0; i < end; i++) {  	hashCode ^= unchecked((int)this.items [i] + MagicCode + (hashCode << 6) + (hashCode >> 2));  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,GetContentHashCode,The following statement contains a magic number: for (int i = 0; i < end; i++) {  	hashCode ^= unchecked((int)this.items [i] + MagicCode + (hashCode << 6) + (hashCode >> 2));  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,GetContentHashCode,The following statement contains a magic number: hashCode ^= unchecked((int)this.items [i] + MagicCode + (hashCode << 6) + (hashCode >> 2));  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,GetContentHashCode,The following statement contains a magic number: hashCode ^= unchecked((int)this.items [i] + MagicCode + (hashCode << 6) + (hashCode >> 2));  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,GetContentHashCode,The following statement contains a magic number: hashCode ^= unchecked((int)(value & GetMask (end)) + MagicCode + (hashCode << 6) + (hashCode >> 2));  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,GetContentHashCode,The following statement contains a magic number: hashCode ^= unchecked((int)(value & GetMask (end)) + MagicCode + (hashCode << 6) + (hashCode >> 2));  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,InsertItem,The following statement contains a magic number: for (int i = cnt; i > idx; i--) {  	this.items [i] <<= 1;  	this.items [i] |= this.items [i - 1] >> 31;  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,InsertItem,The following statement contains a magic number: this.items [i] |= this.items [i - 1] >> 31;  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,RemoveItem,The following statement contains a magic number: for (idx++; idx <= end; idx++) {  	this.items [idx - 1] |= this.items [idx] << 31;  	this.items [idx] >>= 1;  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,RemoveItem,The following statement contains a magic number: this.items [idx - 1] |= this.items [idx] << 31;  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,The following statement contains a magic number: if (barr != null) {  	int cnt = 1;  	if (this.count > 0) {  		cnt = ((this.count - 1) / 8) + 1;  	}  	if (array.Length - index < cnt) {  		throw CommonExceptions.ArrayTooSmall ("array");  	}  	for (int i = 0; i < cnt; i++) {  		barr [index++] = (byte)((this.items [i / 4] >> ((i % 4) * 8)) & 0xFF);  	}  	return;  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,The following statement contains a magic number: if (barr != null) {  	int cnt = 1;  	if (this.count > 0) {  		cnt = ((this.count - 1) / 8) + 1;  	}  	if (array.Length - index < cnt) {  		throw CommonExceptions.ArrayTooSmall ("array");  	}  	for (int i = 0; i < cnt; i++) {  		barr [index++] = (byte)((this.items [i / 4] >> ((i % 4) * 8)) & 0xFF);  	}  	return;  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,The following statement contains a magic number: if (barr != null) {  	int cnt = 1;  	if (this.count > 0) {  		cnt = ((this.count - 1) / 8) + 1;  	}  	if (array.Length - index < cnt) {  		throw CommonExceptions.ArrayTooSmall ("array");  	}  	for (int i = 0; i < cnt; i++) {  		barr [index++] = (byte)((this.items [i / 4] >> ((i % 4) * 8)) & 0xFF);  	}  	return;  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,The following statement contains a magic number: if (barr != null) {  	int cnt = 1;  	if (this.count > 0) {  		cnt = ((this.count - 1) / 8) + 1;  	}  	if (array.Length - index < cnt) {  		throw CommonExceptions.ArrayTooSmall ("array");  	}  	for (int i = 0; i < cnt; i++) {  		barr [index++] = (byte)((this.items [i / 4] >> ((i % 4) * 8)) & 0xFF);  	}  	return;  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,The following statement contains a magic number: if (this.count > 0) {  	cnt = ((this.count - 1) / 8) + 1;  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,The following statement contains a magic number: cnt = ((this.count - 1) / 8) + 1;  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,The following statement contains a magic number: for (int i = 0; i < cnt; i++) {  	barr [index++] = (byte)((this.items [i / 4] >> ((i % 4) * 8)) & 0xFF);  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,The following statement contains a magic number: for (int i = 0; i < cnt; i++) {  	barr [index++] = (byte)((this.items [i / 4] >> ((i % 4) * 8)) & 0xFF);  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,The following statement contains a magic number: for (int i = 0; i < cnt; i++) {  	barr [index++] = (byte)((this.items [i / 4] >> ((i % 4) * 8)) & 0xFF);  }  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,The following statement contains a magic number: barr [index++] = (byte)((this.items [i / 4] >> ((i % 4) * 8)) & 0xFF);  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,The following statement contains a magic number: barr [index++] = (byte)((this.items [i / 4] >> ((i % 4) * 8)) & 0xFF);  
Magic Number,Cyjb.Collections,BitList,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\BitList.cs,CopyTo,The following statement contains a magic number: barr [index++] = (byte)((this.items [i / 4] >> ((i % 4) * 8)) & 0xFF);  
Magic Number,Cyjb.Collections,CharSet,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\CharSet.cs,GetEnumerator,The following statement contains a magic number: for (int i = 0; i < TopLen; i++) {  	uint[] arr = this.data [i];  	if (arr == null) {  		continue;  	}  	int highPart = i << TopShift;  	for (int k = 0; k < BtmLen; k++) {  		int midPart = highPart | (k << BtmShift);  		uint value = arr [k];  		uint ignoreCaseFlags = ignoreCase ? arr [k + BtmLen] : 0U;  		for (int n = -1; value > 0U;) {  			int oneIdx = (value & 1U) == 1U ? 1 : value.CountTrailingZeroBits () + 1;  			if (oneIdx == 32) {  				// C# 中 uint 右移 32 位会不变。  				value = 0U;  			} else {  				value = value >> oneIdx;  			}  			n += oneIdx;  			char lowPart = (char)(midPart | n);  			if ((ignoreCaseFlags & (1U << n)) > 0U) {  				lowPart = char.ToLower (lowPart' culture);  			}  			yield return lowPart;  		}  	}  }  
Magic Number,Cyjb.Collections,CharSet,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\CharSet.cs,GetEnumerator,The following statement contains a magic number: for (int k = 0; k < BtmLen; k++) {  	int midPart = highPart | (k << BtmShift);  	uint value = arr [k];  	uint ignoreCaseFlags = ignoreCase ? arr [k + BtmLen] : 0U;  	for (int n = -1; value > 0U;) {  		int oneIdx = (value & 1U) == 1U ? 1 : value.CountTrailingZeroBits () + 1;  		if (oneIdx == 32) {  			// C# 中 uint 右移 32 位会不变。  			value = 0U;  		} else {  			value = value >> oneIdx;  		}  		n += oneIdx;  		char lowPart = (char)(midPart | n);  		if ((ignoreCaseFlags & (1U << n)) > 0U) {  			lowPart = char.ToLower (lowPart' culture);  		}  		yield return lowPart;  	}  }  
Magic Number,Cyjb.Collections,CharSet,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\CharSet.cs,GetEnumerator,The following statement contains a magic number: for (int n = -1; value > 0U;) {  	int oneIdx = (value & 1U) == 1U ? 1 : value.CountTrailingZeroBits () + 1;  	if (oneIdx == 32) {  		// C# 中 uint 右移 32 位会不变。  		value = 0U;  	} else {  		value = value >> oneIdx;  	}  	n += oneIdx;  	char lowPart = (char)(midPart | n);  	if ((ignoreCaseFlags & (1U << n)) > 0U) {  		lowPart = char.ToLower (lowPart' culture);  	}  	yield return lowPart;  }  
Magic Number,Cyjb.Collections,CharSet,F:\newReposMay17\CYJB_Cyjb\Cyjb\Collections\CharSet.cs,GetEnumerator,The following statement contains a magic number: if (oneIdx == 32) {  	// C# 中 uint 右移 32 位会不变。  	value = 0U;  } else {  	value = value >> oneIdx;  }  
Magic Number,Cyjb.IO,SourceLocator,F:\newReposMay17\CYJB_Cyjb\Cyjb\IO\SourceLocator.cs,ForwardInternal,The following statement contains a magic number: if (!char.IsHighSurrogate (lastChar)) {  	if (lastChar == '\n') {  		lastWidth = -1;  	} else if (lastChar == '\t') {  		lastWidth = -2;  	} else if (char.IsLowSurrogate (lastChar)) {  		if (char.IsHighSurrogate (*end)) {  			// 匹配的代理项对。  			lastWidth = CharExt.Width (char.ConvertToUtf32 (*end' lastChar));  			end--;  		}  	} else {  		lastWidth = lastChar.Width ();  	}  	lastChar = NoSurrogate;  }  
Magic Number,Cyjb.IO,SourceLocator,F:\newReposMay17\CYJB_Cyjb\Cyjb\IO\SourceLocator.cs,ForwardInternal,The following statement contains a magic number: if (lastChar == '\n') {  	lastWidth = -1;  } else if (lastChar == '\t') {  	lastWidth = -2;  } else if (char.IsLowSurrogate (lastChar)) {  	if (char.IsHighSurrogate (*end)) {  		// 匹配的代理项对。  		lastWidth = CharExt.Width (char.ConvertToUtf32 (*end' lastChar));  		end--;  	}  } else {  	lastWidth = lastChar.Width ();  }  
Magic Number,Cyjb.IO,SourceLocator,F:\newReposMay17\CYJB_Cyjb\Cyjb\IO\SourceLocator.cs,ForwardInternal,The following statement contains a magic number: if (lastChar == '\t') {  	lastWidth = -2;  } else if (char.IsLowSurrogate (lastChar)) {  	if (char.IsHighSurrogate (*end)) {  		// 匹配的代理项对。  		lastWidth = CharExt.Width (char.ConvertToUtf32 (*end' lastChar));  		end--;  	}  } else {  	lastWidth = lastChar.Width ();  }  
Magic Number,Cyjb.IO,SourceLocator,F:\newReposMay17\CYJB_Cyjb\Cyjb\IO\SourceLocator.cs,ForwardInternal,The following statement contains a magic number: lastWidth = -2;  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitConstant,The following statement contains a magic number: il.EmitConstant (bits [2]);  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitConstant,The following statement contains a magic number: il.EmitConstant ((bits [3] & 0x80000000) != 0);  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitConstant,The following statement contains a magic number: il.EmitConstant ((byte)(bits [3] >> 16));  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitConstant,The following statement contains a magic number: il.EmitConstant ((byte)(bits [3] >> 16));  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitInt,The following statement contains a magic number: switch (value) {  case -1:  	code = OpCodes.Ldc_I4_M1;  	break;  case 0:  	code = OpCodes.Ldc_I4_0;  	break;  case 1:  	code = OpCodes.Ldc_I4_1;  	break;  case 2:  	code = OpCodes.Ldc_I4_2;  	break;  case 3:  	code = OpCodes.Ldc_I4_3;  	break;  case 4:  	code = OpCodes.Ldc_I4_4;  	break;  case 5:  	code = OpCodes.Ldc_I4_5;  	break;  case 6:  	code = OpCodes.Ldc_I4_6;  	break;  case 7:  	code = OpCodes.Ldc_I4_7;  	break;  case 8:  	code = OpCodes.Ldc_I4_8;  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	return;  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitInt,The following statement contains a magic number: switch (value) {  case -1:  	code = OpCodes.Ldc_I4_M1;  	break;  case 0:  	code = OpCodes.Ldc_I4_0;  	break;  case 1:  	code = OpCodes.Ldc_I4_1;  	break;  case 2:  	code = OpCodes.Ldc_I4_2;  	break;  case 3:  	code = OpCodes.Ldc_I4_3;  	break;  case 4:  	code = OpCodes.Ldc_I4_4;  	break;  case 5:  	code = OpCodes.Ldc_I4_5;  	break;  case 6:  	code = OpCodes.Ldc_I4_6;  	break;  case 7:  	code = OpCodes.Ldc_I4_7;  	break;  case 8:  	code = OpCodes.Ldc_I4_8;  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	return;  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitInt,The following statement contains a magic number: switch (value) {  case -1:  	code = OpCodes.Ldc_I4_M1;  	break;  case 0:  	code = OpCodes.Ldc_I4_0;  	break;  case 1:  	code = OpCodes.Ldc_I4_1;  	break;  case 2:  	code = OpCodes.Ldc_I4_2;  	break;  case 3:  	code = OpCodes.Ldc_I4_3;  	break;  case 4:  	code = OpCodes.Ldc_I4_4;  	break;  case 5:  	code = OpCodes.Ldc_I4_5;  	break;  case 6:  	code = OpCodes.Ldc_I4_6;  	break;  case 7:  	code = OpCodes.Ldc_I4_7;  	break;  case 8:  	code = OpCodes.Ldc_I4_8;  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	return;  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitInt,The following statement contains a magic number: switch (value) {  case -1:  	code = OpCodes.Ldc_I4_M1;  	break;  case 0:  	code = OpCodes.Ldc_I4_0;  	break;  case 1:  	code = OpCodes.Ldc_I4_1;  	break;  case 2:  	code = OpCodes.Ldc_I4_2;  	break;  case 3:  	code = OpCodes.Ldc_I4_3;  	break;  case 4:  	code = OpCodes.Ldc_I4_4;  	break;  case 5:  	code = OpCodes.Ldc_I4_5;  	break;  case 6:  	code = OpCodes.Ldc_I4_6;  	break;  case 7:  	code = OpCodes.Ldc_I4_7;  	break;  case 8:  	code = OpCodes.Ldc_I4_8;  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	return;  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitInt,The following statement contains a magic number: switch (value) {  case -1:  	code = OpCodes.Ldc_I4_M1;  	break;  case 0:  	code = OpCodes.Ldc_I4_0;  	break;  case 1:  	code = OpCodes.Ldc_I4_1;  	break;  case 2:  	code = OpCodes.Ldc_I4_2;  	break;  case 3:  	code = OpCodes.Ldc_I4_3;  	break;  case 4:  	code = OpCodes.Ldc_I4_4;  	break;  case 5:  	code = OpCodes.Ldc_I4_5;  	break;  case 6:  	code = OpCodes.Ldc_I4_6;  	break;  case 7:  	code = OpCodes.Ldc_I4_7;  	break;  case 8:  	code = OpCodes.Ldc_I4_8;  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	return;  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitInt,The following statement contains a magic number: switch (value) {  case -1:  	code = OpCodes.Ldc_I4_M1;  	break;  case 0:  	code = OpCodes.Ldc_I4_0;  	break;  case 1:  	code = OpCodes.Ldc_I4_1;  	break;  case 2:  	code = OpCodes.Ldc_I4_2;  	break;  case 3:  	code = OpCodes.Ldc_I4_3;  	break;  case 4:  	code = OpCodes.Ldc_I4_4;  	break;  case 5:  	code = OpCodes.Ldc_I4_5;  	break;  case 6:  	code = OpCodes.Ldc_I4_6;  	break;  case 7:  	code = OpCodes.Ldc_I4_7;  	break;  case 8:  	code = OpCodes.Ldc_I4_8;  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	return;  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitInt,The following statement contains a magic number: switch (value) {  case -1:  	code = OpCodes.Ldc_I4_M1;  	break;  case 0:  	code = OpCodes.Ldc_I4_0;  	break;  case 1:  	code = OpCodes.Ldc_I4_1;  	break;  case 2:  	code = OpCodes.Ldc_I4_2;  	break;  case 3:  	code = OpCodes.Ldc_I4_3;  	break;  case 4:  	code = OpCodes.Ldc_I4_4;  	break;  case 5:  	code = OpCodes.Ldc_I4_5;  	break;  case 6:  	code = OpCodes.Ldc_I4_6;  	break;  case 7:  	code = OpCodes.Ldc_I4_7;  	break;  case 8:  	code = OpCodes.Ldc_I4_8;  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	return;  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitInt,The following statement contains a magic number: switch (value) {  case -1:  	code = OpCodes.Ldc_I4_M1;  	break;  case 0:  	code = OpCodes.Ldc_I4_0;  	break;  case 1:  	code = OpCodes.Ldc_I4_1;  	break;  case 2:  	code = OpCodes.Ldc_I4_2;  	break;  case 3:  	code = OpCodes.Ldc_I4_3;  	break;  case 4:  	code = OpCodes.Ldc_I4_4;  	break;  case 5:  	code = OpCodes.Ldc_I4_5;  	break;  case 6:  	code = OpCodes.Ldc_I4_6;  	break;  case 7:  	code = OpCodes.Ldc_I4_7;  	break;  case 8:  	code = OpCodes.Ldc_I4_8;  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	return;  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitInt,The following statement contains a magic number: switch (value) {  case -1:  	code = OpCodes.Ldc_I4_M1;  	break;  case 0:  	code = OpCodes.Ldc_I4_0;  	break;  case 1:  	code = OpCodes.Ldc_I4_1;  	break;  case 2:  	code = OpCodes.Ldc_I4_2;  	break;  case 3:  	code = OpCodes.Ldc_I4_3;  	break;  case 4:  	code = OpCodes.Ldc_I4_4;  	break;  case 5:  	code = OpCodes.Ldc_I4_5;  	break;  case 6:  	code = OpCodes.Ldc_I4_6;  	break;  case 7:  	code = OpCodes.Ldc_I4_7;  	break;  case 8:  	code = OpCodes.Ldc_I4_8;  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	return;  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitInt,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  } else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitInt,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  } else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitLoadArg,The following statement contains a magic number: if (index == 0) {  	il.Emit (OpCodes.Ldarg_0);  } else if (index == 1) {  	il.Emit (OpCodes.Ldarg_1);  } else if (index == 2) {  	il.Emit (OpCodes.Ldarg_2);  } else if (index == 3) {  	il.Emit (OpCodes.Ldarg_3);  } else if (index <= Byte.MaxValue) {  	il.Emit (OpCodes.Ldarg_S' (byte)index);  } else {  	il.Emit (OpCodes.Ldarg' index);  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitLoadArg,The following statement contains a magic number: if (index == 0) {  	il.Emit (OpCodes.Ldarg_0);  } else if (index == 1) {  	il.Emit (OpCodes.Ldarg_1);  } else if (index == 2) {  	il.Emit (OpCodes.Ldarg_2);  } else if (index == 3) {  	il.Emit (OpCodes.Ldarg_3);  } else if (index <= Byte.MaxValue) {  	il.Emit (OpCodes.Ldarg_S' (byte)index);  } else {  	il.Emit (OpCodes.Ldarg' index);  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitLoadArg,The following statement contains a magic number: if (index == 1) {  	il.Emit (OpCodes.Ldarg_1);  } else if (index == 2) {  	il.Emit (OpCodes.Ldarg_2);  } else if (index == 3) {  	il.Emit (OpCodes.Ldarg_3);  } else if (index <= Byte.MaxValue) {  	il.Emit (OpCodes.Ldarg_S' (byte)index);  } else {  	il.Emit (OpCodes.Ldarg' index);  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitLoadArg,The following statement contains a magic number: if (index == 1) {  	il.Emit (OpCodes.Ldarg_1);  } else if (index == 2) {  	il.Emit (OpCodes.Ldarg_2);  } else if (index == 3) {  	il.Emit (OpCodes.Ldarg_3);  } else if (index <= Byte.MaxValue) {  	il.Emit (OpCodes.Ldarg_S' (byte)index);  } else {  	il.Emit (OpCodes.Ldarg' index);  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitLoadArg,The following statement contains a magic number: if (index == 2) {  	il.Emit (OpCodes.Ldarg_2);  } else if (index == 3) {  	il.Emit (OpCodes.Ldarg_3);  } else if (index <= Byte.MaxValue) {  	il.Emit (OpCodes.Ldarg_S' (byte)index);  } else {  	il.Emit (OpCodes.Ldarg' index);  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitLoadArg,The following statement contains a magic number: if (index == 2) {  	il.Emit (OpCodes.Ldarg_2);  } else if (index == 3) {  	il.Emit (OpCodes.Ldarg_3);  } else if (index <= Byte.MaxValue) {  	il.Emit (OpCodes.Ldarg_S' (byte)index);  } else {  	il.Emit (OpCodes.Ldarg' index);  }  
Magic Number,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitLoadArg,The following statement contains a magic number: if (index == 3) {  	il.Emit (OpCodes.Ldarg_3);  } else if (index <= Byte.MaxValue) {  	il.Emit (OpCodes.Ldarg_S' (byte)index);  } else {  	il.Emit (OpCodes.Ldarg' index);  }  
Magic Number,Cyjb.Reflection,ILManager,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILManager.cs,FreeLocal,The following statement contains a magic number: if (!locals.TryGetValue (local.LocalType' out localStack)) {  	localStack = new Stack<LocalBuilder> (2);  	locals.Add (local.LocalType' localStack);  }  
Magic Number,Cyjb.Reflection,ILManager,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILManager.cs,FreeLocal,The following statement contains a magic number: localStack = new Stack<LocalBuilder> (2);  
Magic Number,Cyjb.Utility,Hash,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\Hash.cs,Combine,The following statement contains a magic number: return seed ^ (hash + GoldenRatio + (seed << 6) + (seed >> 2));  
Magic Number,Cyjb.Utility,Hash,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\Hash.cs,Combine,The following statement contains a magic number: return seed ^ (hash + GoldenRatio + (seed << 6) + (seed >> 2));  
Magic Number,Cyjb.Utility,LruCache,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\LruCache`2.cs,LruCache,The following statement contains a magic number: if (maxSize < 2) {  	throw CommonExceptions.ArgumentOutOfRange ("maxSize"' maxSize);  }  
Magic Number,Cyjb.Utility,LruCache,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\LruCache`2.cs,AddInternal,The following statement contains a magic number: lock (cacheLock) {  	if (node.VisitCount != -1) {  		if (count < maxSize) {  			// 将新节点添加到热端的头。  			AddHotFirst (newNode);  			count++;  			if (count == hotSize + 1) {  				codeHead = head.Prev;  			}  		} else {  			// 从冷端末尾尝试淘汰旧节点，将访问次数大于 1 的移动到热端的头。  			// 由于双向链表是环形存储的，就相当于将 head 前移。  			while (head.Prev.VisitCount >= 2) {  				// 清零访问计数。  				head.Prev.VisitCount = 0;  				head = head.Prev;  				codeHead = codeHead.Prev;  			}  			// 将旧 node 移除。  			if (!comparer.Equals (head.Prev.Key' key)) {  				this.cacheDict.TryRemove (head.Prev.Key' out node);  			}  			this.Remove (head.Prev);  			// 将新节点添加到冷端的头。  			this.AddCodeFirst (newNode);  		}  	}  	return newNode;  }  
Magic Number,Cyjb.Utility,LruCache,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\LruCache`2.cs,AddInternal,The following statement contains a magic number: if (node.VisitCount != -1) {  	if (count < maxSize) {  		// 将新节点添加到热端的头。  		AddHotFirst (newNode);  		count++;  		if (count == hotSize + 1) {  			codeHead = head.Prev;  		}  	} else {  		// 从冷端末尾尝试淘汰旧节点，将访问次数大于 1 的移动到热端的头。  		// 由于双向链表是环形存储的，就相当于将 head 前移。  		while (head.Prev.VisitCount >= 2) {  			// 清零访问计数。  			head.Prev.VisitCount = 0;  			head = head.Prev;  			codeHead = codeHead.Prev;  		}  		// 将旧 node 移除。  		if (!comparer.Equals (head.Prev.Key' key)) {  			this.cacheDict.TryRemove (head.Prev.Key' out node);  		}  		this.Remove (head.Prev);  		// 将新节点添加到冷端的头。  		this.AddCodeFirst (newNode);  	}  }  
Magic Number,Cyjb.Utility,LruCache,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\LruCache`2.cs,AddInternal,The following statement contains a magic number: if (count < maxSize) {  	// 将新节点添加到热端的头。  	AddHotFirst (newNode);  	count++;  	if (count == hotSize + 1) {  		codeHead = head.Prev;  	}  } else {  	// 从冷端末尾尝试淘汰旧节点，将访问次数大于 1 的移动到热端的头。  	// 由于双向链表是环形存储的，就相当于将 head 前移。  	while (head.Prev.VisitCount >= 2) {  		// 清零访问计数。  		head.Prev.VisitCount = 0;  		head = head.Prev;  		codeHead = codeHead.Prev;  	}  	// 将旧 node 移除。  	if (!comparer.Equals (head.Prev.Key' key)) {  		this.cacheDict.TryRemove (head.Prev.Key' out node);  	}  	this.Remove (head.Prev);  	// 将新节点添加到冷端的头。  	this.AddCodeFirst (newNode);  }  
Magic Number,Cyjb.Utility,LruCache,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\LruCache`2.cs,AddInternal,The following statement contains a magic number: while (head.Prev.VisitCount >= 2) {  	// 清零访问计数。  	head.Prev.VisitCount = 0;  	head = head.Prev;  	codeHead = codeHead.Prev;  }  
Magic Number,Cyjb.Utility,LruCacheNoSync,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\LruCacheNoSync`2.cs,LruCacheNoSync,The following statement contains a magic number: if (maxSize < 2) {  	throw CommonExceptions.ArgumentOutOfRange ("maxSize"' maxSize);  }  
Magic Number,Cyjb.Utility,LruCacheNoSync,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\LruCacheNoSync`2.cs,AddInternal,The following statement contains a magic number: if (count < maxSize) {  	// 将节点添加到热端的头。  	node = new LruNodeNoSync<TKey' TValue> (key' value);  	AddHotFirst (node);  	count++;  	if (count == hotSize + 1) {  		codeHead = head.Prev;  	}  } else {  	// 从冷端末尾尝试淘汰旧节点，将访问次数大于 1 的移动到热端的头。  	// 由于双向链表是环形存储的，就相当于将 head 前移。  	while (head.Prev.VisitCount >= 2) {  		// 清零访问计数。  		head.Prev.VisitCount = 0;  		head = head.Prev;  		codeHead = codeHead.Prev;  	}  	// 将 node 移除，并添加到冷端的头。  	node = head.Prev;  	this.cacheDict.Remove (node.Key);  	this.Remove (node);  	// 这里直接重用旧节点。  	node.Key = key;  	node.Value = value;  	node.VisitCount = 1;  	this.AddCodeFirst (node);  }  
Magic Number,Cyjb.Utility,LruCacheNoSync,F:\newReposMay17\CYJB_Cyjb\Cyjb\Utility\LruCacheNoSync`2.cs,AddInternal,The following statement contains a magic number: while (head.Prev.VisitCount >= 2) {  	// 清零访问计数。  	head.Prev.VisitCount = 0;  	head = head.Prev;  	codeHead = codeHead.Prev;  }  
Missing Default,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Escape,The following switch statement is missing a default case: switch (ch) {  case '\0':  	return "\\0";  case '\\':  	return "\\\\";  case '\a':  	return "\\a";  case '\b':  	return "\\b";  case '\f':  	return "\\f";  case '\n':  	return "\\n";  case '\r':  	return "\\r";  case '\t':  	return "\\t";  case '\v':  	return "\\v";  }  
Missing Default,Cyjb,CharExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\CharExt.cs,Width,The following switch statement is missing a default case: switch (category) {  case UnicodeCategory.Control:  case UnicodeCategory.NonSpacingMark:  case UnicodeCategory.EnclosingMark:  case UnicodeCategory.Format:  	return 0;  }  
Missing Default,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Unescape,The following switch statement is missing a default case: switch (ch) {  case 'x':  	// \x 后面必须是 2 位。  	hexLen = 2;  	break;  case 'u':  	// \u 后面必须是 4 位。  	hexLen = 4;  	break;  case 'U':  	// \U 后面必须是 8 位。  	hexLen = 8;  	break;  }  
Missing Default,Cyjb,StringExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\StringExt.cs,Reverse,The following switch statement is missing a default case: switch (CharUnicodeInfo.GetUnicodeCategory (str [i])) {  case UnicodeCategory.Surrogate:  case UnicodeCategory.NonSpacingMark:  case UnicodeCategory.SpacingCombiningMark:  case UnicodeCategory.EnclosingMark:  	// 字符串中包含组合字符，翻转时需要保证组合字符的顺序。  	// 为了能够包含基字符，回退一位。  	if (i > 0) {  		i--;  		end++;  	}  	TextElementEnumerator textElementEnumerator = StringInfo.GetTextElementEnumerator (str' i);  	textElementEnumerator.MoveNext ();  	int idx = textElementEnumerator.ElementIndex;  	while (end >= 0) {  		i = idx;  		idx = textElementEnumerator.MoveNext () ? textElementEnumerator.ElementIndex : len;  		for (int j = idx - 1; j >= i; strArr [end--] = str [j--])  			;  	}  	goto EndReverse;  }  
Missing Default,Cyjb.Conversions,StringConverterProvider,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\StringConverterProvider.cs,GetConverterTo,The following switch statement is missing a default case: switch (Type.GetTypeCode (outputType)) {  case TypeCode.Boolean:  	return new Converter<string' bool> (bool.Parse);  case TypeCode.Char:  	return new Converter<string' char> (char.Parse);  case TypeCode.SByte:  	return new Converter<string' sbyte> (sbyte.Parse);  case TypeCode.Byte:  	return new Converter<string' byte> (byte.Parse);  case TypeCode.Int16:  	return new Converter<string' short> (short.Parse);  case TypeCode.UInt16:  	return new Converter<string' ushort> (ushort.Parse);  case TypeCode.Int32:  	return new Converter<string' int> (int.Parse);  case TypeCode.UInt32:  	return new Converter<string' uint> (uint.Parse);  case TypeCode.Int64:  	return new Converter<string' long> (long.Parse);  case TypeCode.UInt64:  	return new Converter<string' ulong> (ulong.Parse);  case TypeCode.Single:  	return new Converter<string' float> (float.Parse);  case TypeCode.Double:  	return new Converter<string' double> (double.Parse);  case TypeCode.Decimal:  	return new Converter<string' decimal> (decimal.Parse);  case TypeCode.DateTime:  	return new Converter<string' DateTime> (DateTime.Parse);  case TypeCode.DBNull:  	return null;  }  
Missing Default,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetNumericConversion,The following switch statement is missing a default case: switch (outputTypeCode) {  case TypeCode.Char:  	if (inputTypeCode == TypeCode.Byte || inputTypeCode == TypeCode.UInt16) {  		return IdentityConversion.ExplicitNumeric;  	}  	return fromUnsigned ? NumericConversion.UInt16Un : NumericConversion.UInt16;  case TypeCode.SByte:  	return fromUnsigned ? NumericConversion.SByteUn : NumericConversion.SByte;  case TypeCode.Byte:  	return fromUnsigned ? NumericConversion.ByteUn : NumericConversion.Byte;  case TypeCode.Int16:  	if (inputTypeCode == TypeCode.SByte || inputTypeCode == TypeCode.Byte) {  		return IdentityConversion.ImplicitNumeric;  	}  	return fromUnsigned ? NumericConversion.Int16Un : NumericConversion.Int16;  case TypeCode.UInt16:  	if (inputTypeCode == TypeCode.Byte || inputTypeCode == TypeCode.Char) {  		return IdentityConversion.ImplicitNumeric;  	}  	return fromUnsigned ? NumericConversion.UInt16Un : NumericConversion.UInt16;  case TypeCode.Int32:  	if (inputTypeCode < outputTypeCode || inputTypeCode == TypeCode.Char) {  		return IdentityConversion.ImplicitNumeric;  	}  	return fromUnsigned ? NumericConversion.Int32Un : NumericConversion.Int32;  case TypeCode.UInt32:  	if (fromUnsigned) {  		if (inputTypeCode == TypeCode.UInt64) {  			return NumericConversion.UInt32Un;  		}  		return IdentityConversion.ImplicitNumeric;  	}  	return inputTypeCode < outputTypeCode ? NumericConversion.UInt32Empty : NumericConversion.UInt32;  case TypeCode.Int64:  	if (inputTypeCode < outputTypeCode || inputTypeCode == TypeCode.Char) {  		return fromUnsigned ? NumericConversion.UInt64Implicit : NumericConversion.Int64Implicit;  	}  	return fromUnsigned ? NumericConversion.Int64UnExplicit : NumericConversion.Int64Explicit;  case TypeCode.UInt64:  	if (fromUnsigned) {  		return NumericConversion.UInt64Implicit;  	}  	if (inputTypeCode < outputTypeCode) {  		return NumericConversion.UInt64Explicit;  	}  	return NumericConversion.UInt64UnExplicit;  case TypeCode.Single:  	if (inputTypeCode == TypeCode.Double) {  		return NumericConversion.SingleExplicit;  	}  	if (inputTypeCode == TypeCode.UInt32 || inputTypeCode == TypeCode.UInt64) {  		return NumericConversion.SingleUnImplicit;  	}  	return NumericConversion.SingleImplicit;  case TypeCode.Double:  	if (inputTypeCode == TypeCode.UInt32 || inputTypeCode == TypeCode.UInt64) {  		return NumericConversion.DoubleUn;  	}  	return NumericConversion.Double;  }  
Missing Default,Cyjb.Conversions,ConversionFactory,F:\newReposMay17\CYJB_Cyjb\Cyjb\Conversions\ConversionFactory.cs,GetStandardConversion,The following switch statement is missing a default case: switch (conversion.ConversionType) {  case ConversionType.Enum:  	// 不包含显式枚举转换。  	return ConversionType.None;  case ConversionType.Unbox:  	// 完整包含拆箱转换。  	return ConversionType.None;  case ConversionType.ExplicitNumeric:  case ConversionType.ExplicitNullable:  	// 包含部分转换，需要判断是否存在反向隐式转换。  	// 此时 inputType 和 outputType 一定都是值类型。  	Conversion reversedConversion = GetBetweenValueTypeConversion (outputType' inputType);  	Contract.Assume (reversedConversion != null);  	return reversedConversion.ConversionType.IsImplicit () ? conversion.ConversionType : ConversionType.None;  case ConversionType.ExplicitReference:  	// 包含部分转换，需要判断是否存在反向转换。  	if (inputType.IsAssignableFrom (outputType)) {  		return ConversionType.ExplicitReference;  	}  	return ConversionType.None;  }  
Missing Default,Cyjb.Reflection,ILExt,F:\newReposMay17\CYJB_Cyjb\Cyjb\Reflection\ILExt.Constant.cs,EmitPrimitiveConstant,The following switch statement is missing a default case: switch (Type.GetTypeCode (type)) {  case TypeCode.Boolean:  	il.EmitConstant ((bool)value);  	return true;  case TypeCode.Char:  	il.EmitConstant ((char)value);  	return true;  case TypeCode.SByte:  	il.EmitConstant ((sbyte)value);  	return true;  case TypeCode.Byte:  	il.EmitConstant ((byte)value);  	return true;  case TypeCode.Int16:  	il.EmitConstant ((short)value);  	return true;  case TypeCode.UInt16:  	il.EmitConstant ((ushort)value);  	return true;  case TypeCode.Int32:  	il.EmitInt ((int)value);  	return true;  case TypeCode.UInt32:  	il.EmitConstant ((uint)value);  	return true;  case TypeCode.Int64:  	il.EmitConstant ((long)value);  	return true;  case TypeCode.UInt64:  	il.EmitConstant ((ulong)value);  	return true;  case TypeCode.Single:  	il.EmitConstant ((float)value);  	return true;  case TypeCode.Double:  	il.EmitConstant ((double)value);  	return true;  case TypeCode.Decimal:  	il.EmitConstant ((decimal)value);  	return true;  case TypeCode.String:  	il.EmitConstant ((string)value);  	return true;  }  
