Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,Time,The length of the statement  "            Console.WriteLine("\r{0'-35}: {1'10:#'#} ms {2'10:#'#} ops / sec"' name' sp.ElapsedMilliseconds' Transactions * ItemsPerTransaction / sp.Elapsed.TotalSeconds); " is 159.
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,Main,The following statement contains a magic number: Time("read parallel 2"' sw => ReadOneTransaction_Parallel(sw' 2)' delete: false);
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,Main,The following statement contains a magic number: Time("read parallel 4"' sw => ReadOneTransaction_Parallel(sw' 4)' delete: false);
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,Main,The following statement contains a magic number: Time("read parallel 8"' sw => ReadOneTransaction_Parallel(sw' 8)' delete: false);
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,Main,The following statement contains a magic number: Time("read parallel 16"' sw => ReadOneTransaction_Parallel(sw' 16)' delete: false);
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,Main,The following statement contains a magic number: Time("fill batch read batch"' sw => FillBatchReadBatchOneTransaction(sw' 1000 * ItemsPerTransaction));
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,Main,The following statement contains a magic number: Time("fill seq non then read parallel 4"' stopwatch => ReadAndWriteOneTransaction(stopwatch' 4));
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,InitRandomNumbers,The following statement contains a magic number: var random = new Random(1337 ^ 13);
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,InitRandomNumbers,The following statement contains a magic number: var random = new Random(1337 ^ 13);
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,DeleteDirectory,The following statement contains a magic number: for (int i = 0; i < 10; i++)  			{  				try  				{  					Directory.Delete(dir' true);  					return;  				}  				catch (DirectoryNotFoundException)  				{  					return;  				}  				catch (Exception)  				{  					Thread.Sleep(13);  				}  			}
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,DeleteDirectory,The following statement contains a magic number: for (int i = 0; i < 10; i++)  			{  				try  				{  					Directory.Delete(dir' true);  					return;  				}  				catch (DirectoryNotFoundException)  				{  					return;  				}  				catch (Exception)  				{  					Thread.Sleep(13);  				}  			}
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillRandomOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    sw.Start();                  using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      foreach (var l in _randomNumbers)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' l.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillRandomOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    sw.Start();                  using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      foreach (var l in _randomNumbers)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' l.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillRandomOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    sw.Start();                  using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      foreach (var l in _randomNumbers)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' l.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillRandomOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    sw.Start();                  using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      foreach (var l in _randomNumbers)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' l.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillSeqOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                      sw.Start();                  using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      for (long i = 0; i < Transactions * ItemsPerTransaction; i++)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' i.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillSeqOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                      sw.Start();                  using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      for (long i = 0; i < Transactions * ItemsPerTransaction; i++)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' i.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillSeqOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                      sw.Start();                  using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      for (long i = 0; i < Transactions * ItemsPerTransaction; i++)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' i.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillSeqOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                      sw.Start();                  using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      for (long i = 0; i < Transactions * ItemsPerTransaction; i++)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' i.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillRandomMultipleTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    sw.Start();                  var enumerator = _randomNumbers.GetEnumerator();                  for (int x = 0; x < Transactions; x++)                  {                      using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                      {                          for (long i = 0; i < ItemsPerTransaction; i++)                          {                              ms.Position = 0;                              enumerator.MoveNext();                              tx.State.Root.Add(tx' (enumerator.Current).ToString("0000000000000000")' ms);                          }                          tx.Commit();                      }                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillRandomMultipleTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    sw.Start();                  var enumerator = _randomNumbers.GetEnumerator();                  for (int x = 0; x < Transactions; x++)                  {                      using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                      {                          for (long i = 0; i < ItemsPerTransaction; i++)                          {                              ms.Position = 0;                              enumerator.MoveNext();                              tx.State.Root.Add(tx' (enumerator.Current).ToString("0000000000000000")' ms);                          }                          tx.Commit();                      }                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillRandomMultipleTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    sw.Start();                  var enumerator = _randomNumbers.GetEnumerator();                  for (int x = 0; x < Transactions; x++)                  {                      using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                      {                          for (long i = 0; i < ItemsPerTransaction; i++)                          {                              ms.Position = 0;                              enumerator.MoveNext();                              tx.State.Root.Add(tx' (enumerator.Current).ToString("0000000000000000")' ms);                          }                          tx.Commit();                      }                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillRandomMultipleTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    sw.Start();                  var enumerator = _randomNumbers.GetEnumerator();                  for (int x = 0; x < Transactions; x++)                  {                      using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                      {                          for (long i = 0; i < ItemsPerTransaction; i++)                          {                              ms.Position = 0;                              enumerator.MoveNext();                              tx.State.Root.Add(tx' (enumerator.Current).ToString("0000000000000000")' ms);                          }                          tx.Commit();                      }                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillSeqMultipleTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    sw.Start();                  int counter = 0;                  for (int x = 0; x < Transactions; x++)                  {                      using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                      {                          for (long i = 0; i < ItemsPerTransaction; i++)                          {                              ms.Position = 0;                              tx.State.Root.Add(tx' (counter++).ToString("0000000000000000")' ms);                          }                            tx.Commit();                      }                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillSeqMultipleTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    sw.Start();                  int counter = 0;                  for (int x = 0; x < Transactions; x++)                  {                      using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                      {                          for (long i = 0; i < ItemsPerTransaction; i++)                          {                              ms.Position = 0;                              tx.State.Root.Add(tx' (counter++).ToString("0000000000000000")' ms);                          }                            tx.Commit();                      }                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillSeqMultipleTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    sw.Start();                  int counter = 0;                  for (int x = 0; x < Transactions; x++)                  {                      using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                      {                          for (long i = 0; i < ItemsPerTransaction; i++)                          {                              ms.Position = 0;                              tx.State.Root.Add(tx' (counter++).ToString("0000000000000000")' ms);                          }                            tx.Commit();                      }                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillSeqMultipleTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                  var ms = new MemoryStream(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    sw.Start();                  int counter = 0;                  for (int x = 0; x < Transactions; x++)                  {                      using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                      {                          for (long i = 0; i < ItemsPerTransaction; i++)                          {                              ms.Position = 0;                              tx.State.Root.Add(tx' (counter++).ToString("0000000000000000")' ms);                          }                            tx.Commit();                      }                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,ReadOneTransaction_Parallel,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var countdownEvent = new CountdownEvent(concurrency);                    sw.Start();                  for (int i = 0; i < concurrency; i++)                  {                      var currentBase = i;                      ThreadPool.QueueUserWorkItem(state =>                      {                          using (var tx = env.NewTransaction(TransactionFlags.Read))                          {                              var ms = new byte[100];                              for (int j = 0; j < ((ItemsPerTransaction * Transactions) / concurrency); j++)                              {                                  var current = j*currentBase;                                  var key = current.ToString("0000000000000000");                                  var stream = tx.State.Root.Read(tx' key).Reader;                                  while (stream.Read(ms' 0' ms.Length) != 0)                                  {                                  }                              }                                tx.Commit();                          }                            countdownEvent.Signal();                      });                  }                  countdownEvent.Wait();                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,FillBatchReadBatchOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))  			{  				sw.Start();  				using (var tx = env.NewTransaction(TransactionFlags.Read))  				{  					var ms = new byte[100];    					var batch = new WriteBatch();  					for (int i = 0; i < iterations; i++)  					{  						var key = i.ToString("0000000000000000");  						batch.Add(key' new MemoryStream()' null);  					}    					using (var snapshot = env.CreateSnapshot())  					{  						for (int i = 0; i < iterations; i++)  						{  							var key = i.ToString("0000000000000000");    							var read = snapshot.Read(null' key' batch).Reader;  							{  								while (read.Read(ms' 0' ms.Length) != 0)  								{  								}  							}  						}  					}    					tx.Commit();  				}  				sw.Stop();  			}
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,ReadOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  sw.Start();                  using (var tx = env.NewTransaction(TransactionFlags.Read))                  {                      var ms = new byte[100];                      for (int i = 0; i < Transactions * ItemsPerTransaction; i++)                      {                          var key = i.ToString("0000000000000000");                          var stream = tx.State.Root.Read(tx' key).Reader;                          {                              while (stream.Read(ms' 0' ms.Length) != 0)                              {                              }                          }                      }                        tx.Commit();                  }                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,ReadAndWriteOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      var ms = new MemoryStream(value);                      for (long i = 0; i < Transactions * ItemsPerTransaction; i++)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' i.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                    var countdownEvent = new CountdownEvent(concurrency);                    sw.Start();                  for (int i = 0; i < concurrency; i++)                  {                      var currentBase = i;                      ThreadPool.QueueUserWorkItem(state =>                      {                          using (var tx = env.NewTransaction(TransactionFlags.Read))                          {                              var ms = new byte[100];                              for (int j = 0; j < ((ItemsPerTransaction*Transactions)/concurrency); j++)                              {                                  var current = j * currentBase;                                  var key = current.ToString("0000000000000000");                                  var stream = tx.State.Root.Read(tx' key).Reader;                                  {                                      while (stream.Read(ms' 0' ms.Length) != 0)                                      {                                      }                                  }                              }                                tx.Commit();                          }                            countdownEvent.Signal();                      });                  }                  countdownEvent.Wait();                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,ReadAndWriteOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      var ms = new MemoryStream(value);                      for (long i = 0; i < Transactions * ItemsPerTransaction; i++)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' i.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                    var countdownEvent = new CountdownEvent(concurrency);                    sw.Start();                  for (int i = 0; i < concurrency; i++)                  {                      var currentBase = i;                      ThreadPool.QueueUserWorkItem(state =>                      {                          using (var tx = env.NewTransaction(TransactionFlags.Read))                          {                              var ms = new byte[100];                              for (int j = 0; j < ((ItemsPerTransaction*Transactions)/concurrency); j++)                              {                                  var current = j * currentBase;                                  var key = current.ToString("0000000000000000");                                  var stream = tx.State.Root.Read(tx' key).Reader;                                  {                                      while (stream.Read(ms' 0' ms.Length) != 0)                                      {                                      }                                  }                              }                                tx.Commit();                          }                            countdownEvent.Signal();                      });                  }                  countdownEvent.Wait();                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,ReadAndWriteOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      var ms = new MemoryStream(value);                      for (long i = 0; i < Transactions * ItemsPerTransaction; i++)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' i.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                    var countdownEvent = new CountdownEvent(concurrency);                    sw.Start();                  for (int i = 0; i < concurrency; i++)                  {                      var currentBase = i;                      ThreadPool.QueueUserWorkItem(state =>                      {                          using (var tx = env.NewTransaction(TransactionFlags.Read))                          {                              var ms = new byte[100];                              for (int j = 0; j < ((ItemsPerTransaction*Transactions)/concurrency); j++)                              {                                  var current = j * currentBase;                                  var key = current.ToString("0000000000000000");                                  var stream = tx.State.Root.Read(tx' key).Reader;                                  {                                      while (stream.Read(ms' 0' ms.Length) != 0)                                      {                                      }                                  }                              }                                tx.Commit();                          }                            countdownEvent.Signal();                      });                  }                  countdownEvent.Wait();                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,ReadAndWriteOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      var ms = new MemoryStream(value);                      for (long i = 0; i < Transactions * ItemsPerTransaction; i++)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' i.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                    var countdownEvent = new CountdownEvent(concurrency);                    sw.Start();                  for (int i = 0; i < concurrency; i++)                  {                      var currentBase = i;                      ThreadPool.QueueUserWorkItem(state =>                      {                          using (var tx = env.NewTransaction(TransactionFlags.Read))                          {                              var ms = new byte[100];                              for (int j = 0; j < ((ItemsPerTransaction*Transactions)/concurrency); j++)                              {                                  var current = j * currentBase;                                  var key = current.ToString("0000000000000000");                                  var stream = tx.State.Root.Read(tx' key).Reader;                                  {                                      while (stream.Read(ms' 0' ms.Length) != 0)                                      {                                      }                                  }                              }                                tx.Commit();                          }                            countdownEvent.Signal();                      });                  }                  countdownEvent.Wait();                  sw.Stop();              }
Magic Number,Voron.Benchmark,Program,C:\repos\ayende_raven.voron\Voron.Benchmark\Program.cs,ReadAndWriteOneTransaction,The following statement contains a magic number: using (var env = new StorageEnvironment(StorageEnvironmentOptions.ForPath(Path)))              {                  var value = new byte[100];                  new Random().NextBytes(value);                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      env.Options.DataPager.AllocateMorePages(tx' 1024 * 1024 * 768);                      tx.Commit();                  }                    using (var tx = env.NewTransaction(TransactionFlags.ReadWrite))                  {                      var ms = new MemoryStream(value);                      for (long i = 0; i < Transactions * ItemsPerTransaction; i++)                      {                          ms.Position = 0;                          tx.State.Root.Add(tx' i.ToString("0000000000000000")' ms);                      }                        tx.Commit();                  }                    var countdownEvent = new CountdownEvent(concurrency);                    sw.Start();                  for (int i = 0; i < concurrency; i++)                  {                      var currentBase = i;                      ThreadPool.QueueUserWorkItem(state =>                      {                          using (var tx = env.NewTransaction(TransactionFlags.Read))                          {                              var ms = new byte[100];                              for (int j = 0; j < ((ItemsPerTransaction*Transactions)/concurrency); j++)                              {                                  var current = j * currentBase;                                  var key = current.ToString("0000000000000000");                                  var stream = tx.State.Root.Read(tx' key).Reader;                                  {                                      while (stream.Read(ms' 0' ms.Length) != 0)                                      {                                      }                                  }                              }                                tx.Commit();                          }                            countdownEvent.Signal();                      });                  }                  countdownEvent.Wait();                  sw.Stop();              }
