Implementation smell,Namespace,Class,File,Method,Description
Long Method,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The method has 174 lines of code.
Long Parameter List,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,OutputResults,The method has 5 parameters. Parameters: name' itemsCount' duration' bytes' perfTracker
Long Parameter List,Performance.Comparison,StoragePerformanceTestBase,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\StoragePerformanceTestBase.cs,ExecuteWriteWithParallel,The method has 6 parameters. Parameters: data' numberOfTransactions' itemsPerTransaction' numberOfThreads' writeFunction' elapsedMilliseconds
Long Parameter List,Performance.Comparison.Esent,EsentTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\EsentTest.cs,Write,The method has 5 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker
Long Parameter List,Performance.Comparison.Esent,EsentTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\EsentTest.cs,WriteParallel,The method has 7 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker' numberOfThreads' elapsedMilliseconds
Long Parameter List,Performance.Comparison.Esent,EsentTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\EsentTest.cs,WriteInternal,The method has 6 parameters. Parameters: operation' enumerator' itemsPerTransaction' numberOfTransactions' perfTracker' instance
Long Parameter List,Performance.Comparison.FoundationDB,FdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\FoundationDB\FdbTest.cs,Write,The method has 5 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker
Long Parameter List,Performance.Comparison.FoundationDB,FdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\FoundationDB\FdbTest.cs,WriteAsync,The method has 5 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker
Long Parameter List,Performance.Comparison.FoundationDB,FdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\FoundationDB\FdbTest.cs,WriteParallel,The method has 7 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker' numberOfThreads' elapsedMilliseconds
Long Parameter List,Performance.Comparison.FoundationDB,FdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\FoundationDB\FdbTest.cs,WriteParallelAsync,The method has 6 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker' numberOfThreads
Long Parameter List,Performance.Comparison.FoundationDB,FdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\FoundationDB\FdbTest.cs,WriteInternalAsync,The method has 6 parameters. Parameters: operation' enumerator' itemsPerTransaction' numberOfTransactions' perfTracker' db
Long Parameter List,Performance.Comparison.FoundationDB,FdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\FoundationDB\FdbTest.cs,WriteInternal,The method has 6 parameters. Parameters: operation' enumerator' itemsPerTransaction' numberOfTransactions' perfTracker' db
Long Parameter List,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,Write,The method has 6 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker' Rflag
Long Parameter List,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,WriteParallel,The method has 8 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker' Rflag' numberOfThreads' elapsedMilliseconds
Long Parameter List,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,WriteInternal,The method has 8 parameters. Parameters: operation' enumerator' itemsPerTransaction' numberOfTransactions' perfTracker' Rflag' env' db
Long Parameter List,Performance.Comparison.SQLCE,SqlCeTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLCE\SqlCeTest.cs,Write,The method has 5 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker
Long Parameter List,Performance.Comparison.SQLCE,SqlCeTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLCE\SqlCeTest.cs,WriteParallel,The method has 7 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker' numberOfThreads' elapsedMilliseconds
Long Parameter List,Performance.Comparison.SQLCE,SqlCeTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLCE\SqlCeTest.cs,WriteInternal,The method has 5 parameters. Parameters: operation' enumerator' itemsPerTransaction' numberOfTransactions' perfTracker
Long Parameter List,Performance.Comparison.SQLite,SqlLiteTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLite\SqlLiteTest.cs,Write,The method has 5 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker
Long Parameter List,Performance.Comparison.SQLite,SqlLiteTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLite\SqlLiteTest.cs,WriteParallel,The method has 7 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker' numberOfThreads' elapsedMilliseconds
Long Parameter List,Performance.Comparison.SQLite,SqlLiteTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLite\SqlLiteTest.cs,WriteInternal,The method has 5 parameters. Parameters: operation' enumerator' itemsPerTransaction' numberOfTransactions' perfTracker
Long Parameter List,Performance.Comparison.SQLServer,SqlServerTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLServer\SqlServerTest.cs,Write,The method has 5 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker
Long Parameter List,Performance.Comparison.SQLServer,SqlServerTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLServer\SqlServerTest.cs,WriteParallel,The method has 7 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker' numberOfThreads' elapsedMilliseconds
Long Parameter List,Performance.Comparison.SQLServer,SqlServerTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLServer\SqlServerTest.cs,WriteInternal,The method has 5 parameters. Parameters: operation' enumerator' itemsPerTransaction' numberOfTransactions' perfTracker
Long Parameter List,Performance.Comparison.Voron,VoronTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Voron\VoronTest.cs,Write,The method has 5 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker
Long Parameter List,Performance.Comparison.Voron,VoronTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Voron\VoronTest.cs,WriteParallel,The method has 7 parameters. Parameters: operation' data' itemsPerTransaction' numberOfTransactions' perfTracker' numberOfThreads' elapsedMilliseconds
Long Parameter List,Performance.Comparison.Voron,VoronTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Voron\VoronTest.cs,WriteInternalBatch,The method has 6 parameters. Parameters: operation' enumerator' itemsPerBatch' numberOfBatches' perfTracker' env
Long Parameter List,Performance.Comparison.Voron,VoronTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Voron\VoronTest.cs,WriteInternal,The method has 6 parameters. Parameters: operation' itemsPerTransaction' numberOfTransactions' perfTracker' env' enumerator
Long Identifier,Performance.Comparison,StoragePerformanceTestBase,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\StoragePerformanceTestBase.cs,SplitData,The length of the parameter currentNumberOfItemsPerTransaction is 34.
Long Identifier,Performance.Comparison,StoragePerformanceTestBase,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\StoragePerformanceTestBase.cs,SplitData,The length of the parameter actualNumberOfTransactionsPerThread is 35.
Long Statement,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The length of the statement  "            var sequentialIds = InitSequentialNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 128' maxValueSize: 128); " is 141.
Long Statement,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The length of the statement  "            var randomIds = InitRandomNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 128' maxValueSize: 128); " is 133.
Long Statement,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The length of the statement  "            var sequentialIdsLarge = InitSequentialNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 512' maxValueSize: 87 * 1024); " is 152.
Long Statement,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The length of the statement  "            var randomIdsLarge = InitRandomNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 512' maxValueSize: 87 * 1024); " is 144.
Long Statement,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,OutputResults,The length of the statement  "                w.WriteLine("{0}:\t{1'10:#'#;;0} items & {4'10:#'#} mb' {2'10:#'#} ops/s {3'10:#'#} mb/sec."' name' itemsCount' itemsCount / (duration / 1000)' " is 143.
Long Statement,Performance.Comparison.Esent,EsentTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\EsentTest.cs,WriteParallelSequential,The length of the statement  "            return WriteParallel(string.Format("[Esent] parallel sequential write ({0} items)"' Constants.ItemsPerTransaction)' data' " is 121.
Long Statement,Performance.Comparison.Esent,EsentTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\EsentTest.cs,ReadParallelSequential,The length of the statement  "            return ReadParallel(string.Format("[Esent] parallel sequential read ({0} items)"' Constants.ReadItems)' sequentialIds' perfTracker' numberOfThreads); " is 149.
Long Statement,Performance.Comparison.Esent,EsentTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\EsentTest.cs,ReadParallelRandom,The length of the statement  "            return ReadParallel(string.Format("[Esent] parallel random read ({0} items)"' Constants.ReadItems)' randomIds' perfTracker' numberOfThreads); " is 141.
Long Statement,Performance.Comparison.Esent,EsentTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\EsentTest.cs,WriteParallel,The length of the statement  "                (enumerator' itmsPerTransaction' nmbrOfTransactions) => WriteInternal(operation' enumerator' itmsPerTransaction' nmbrOfTransactions' perfTracker' instance)' " is 156.
Long Statement,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,WriteParallelSequential,The length of the statement  "            return WriteParallel(string.Format("[LMDB] parallel sequential write ({0} items)"' Constants.ItemsPerTransaction)' data' " is 120.
Long Statement,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,WriteParallelSequential,The length of the statement  "                         Constants.ItemsPerTransaction' Constants.WriteTransactions' perfTracker' rndseq.RND' numberOfThreads' out elapsedMilliseconds); " is 127.
Long Statement,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,WriteParallelRandom,The length of the statement  "                         Constants.ItemsPerTransaction' Constants.WriteTransactions' perfTracker' rndseq.RND' numberOfThreads' out elapsedMilliseconds); " is 127.
Long Statement,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,ReadParallelSequential,The length of the statement  "            return ReadParallel(string.Format("[LMDB] parallel sequential read ({0} items)"' Constants.ReadItems)' sequentialIds' perfTracker' numberOfThreads); " is 148.
Long Statement,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,ReadParallelRandom,The length of the statement  "            return ReadParallel(string.Format("[LMDB] parallel random read ({0} items)"' Constants.ReadItems)' randomIds' perfTracker' numberOfThreads); " is 140.
Long Statement,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,WriteParallel,The length of the statement  "                (enumerator' itmsPerTransaction' nmbrOfTransactions) => WriteInternal(operation' enumerator' itmsPerTransaction' nmbrOfTransactions' perfTracker' Rflag' env' db)' " is 162.
Long Statement,Performance.Comparison.SQLCE,SqlCeTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLCE\SqlCeTest.cs,WriteParallelSequential,The length of the statement  "            return WriteParallel(string.Format("[SQL CE] parallel sequential write ({0} items)"' Constants.ItemsPerTransaction)' data' " is 122.
Long Statement,Performance.Comparison.SQLCE,SqlCeTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLCE\SqlCeTest.cs,ReadParallelSequential,The length of the statement  "            return ReadParallel(string.Format("[SQL CE] parallel sequential read ({0} items)"' Constants.ReadItems)' sequentialIds' perfTracker' numberOfThreads); " is 150.
Long Statement,Performance.Comparison.SQLCE,SqlCeTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLCE\SqlCeTest.cs,ReadParallelRandom,The length of the statement  "            return ReadParallel(string.Format("[SQL CE] parallel random read ({0} items)"' Constants.ReadItems)' randomIds' perfTracker' numberOfThreads); " is 142.
Long Statement,Performance.Comparison.SQLCE,SqlCeTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLCE\SqlCeTest.cs,WriteParallel,The length of the statement  "                (enumerator' itmsPerTransaction' nmbrOfTransactions) => WriteInternal(operation' enumerator' itmsPerTransaction' nmbrOfTransactions' perfTracker)' " is 146.
Long Statement,Performance.Comparison.SQLCE,SqlCeTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLCE\SqlCeTest.cs,ReadParallel,The length of the statement  "            return ExecuteReadWithParallel(operation' ids' numberOfThreads' () => ReadInternal(ids' perfTracker' connectionString)); " is 120.
Long Statement,Performance.Comparison.SQLite,SqlLiteTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLite\SqlLiteTest.cs,WriteParallelSequential,The length of the statement  "            return WriteParallel(string.Format("[SQLite] parallel sequential write ({0} items)"' Constants.ItemsPerTransaction)' data' " is 122.
Long Statement,Performance.Comparison.SQLite,SqlLiteTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLite\SqlLiteTest.cs,ReadParallelSequential,The length of the statement  "            return ReadParallel(string.Format("[SQLite] parallel sequential read ({0} items)"' Constants.ReadItems)' sequentialIds' perfTracker' numberOfThreads); " is 150.
Long Statement,Performance.Comparison.SQLite,SqlLiteTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLite\SqlLiteTest.cs,ReadParallelRandom,The length of the statement  "            return ReadParallel(string.Format("[SQLite] parallel random read ({0} items)"' Constants.ReadItems)' randomIds' perfTracker' numberOfThreads); " is 142.
Long Statement,Performance.Comparison.SQLite,SqlLiteTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLite\SqlLiteTest.cs,WriteParallel,The length of the statement  "                (enumerator' itmsPerTransaction' nmbrOfTransactions) => WriteInternal(operation' enumerator' itmsPerTransaction' nmbrOfTransactions' perfTracker)' " is 146.
Long Statement,Performance.Comparison.SQLServer,SqlServerTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLServer\SqlServerTest.cs,WriteParallelSequential,The length of the statement  "            return WriteParallel(string.Format("[SQL Server] parallel sequential write ({0} items)"' Constants.ItemsPerTransaction)' data' " is 126.
Long Statement,Performance.Comparison.SQLServer,SqlServerTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLServer\SqlServerTest.cs,WriteParallelRandom,The length of the statement  "            return WriteParallel(string.Format("[SQL Server] parallel random write ({0} items)"' Constants.ItemsPerTransaction)' data' " is 122.
Long Statement,Performance.Comparison.SQLServer,SqlServerTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLServer\SqlServerTest.cs,ReadSequential,The length of the statement  "            return Read(string.Format("[SQL Server] sequential read ({0} items)"' Constants.ReadItems)' sequentialIds' perfTracker); " is 120.
Long Statement,Performance.Comparison.SQLServer,SqlServerTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLServer\SqlServerTest.cs,ReadParallelSequential,The length of the statement  "            return ReadParallel(string.Format("[SQL Server] parallel sequential read ({0} items)"' Constants.ReadItems)' sequentialIds' perfTracker' numberOfThreads); " is 154.
Long Statement,Performance.Comparison.SQLServer,SqlServerTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLServer\SqlServerTest.cs,ReadParallelRandom,The length of the statement  "            return ReadParallel(string.Format("[SQL Server] parallel random read ({0} items)"' Constants.ReadItems)' randomIds' perfTracker' numberOfThreads); " is 146.
Long Statement,Performance.Comparison.SQLServer,SqlServerTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLServer\SqlServerTest.cs,WriteParallel,The length of the statement  "                (enumerator' itmsPerTransaction' nmbrOfTransactions) => WriteInternal(operation' enumerator' itmsPerTransaction' nmbrOfTransactions' perfTracker)' " is 146.
Long Statement,Performance.Comparison.SQLServer,SqlServerTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLServer\SqlServerTest.cs,ReadParallel,The length of the statement  "            return ExecuteReadWithParallel(operation' ids' numberOfThreads' () => ReadInternal(ids' perfTracker' connectionString)); " is 120.
Long Statement,Performance.Comparison.Voron,VoronTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Voron\VoronTest.cs,WriteParallelSequential,The length of the statement  "            return WriteParallel(string.Format("[Voron] parallel sequential write ({0} items)"' Constants.ItemsPerTransaction)' data' " is 121.
Long Statement,Performance.Comparison.Voron,VoronTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Voron\VoronTest.cs,ReadParallelSequential,The length of the statement  "            return ReadParallel(string.Format("[Voron] parallel sequential read ({0} items)"' Constants.ReadItems)' sequentialIds' perfTracker' numberOfThreads); " is 149.
Long Statement,Performance.Comparison.Voron,VoronTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Voron\VoronTest.cs,ReadParallelRandom,The length of the statement  "            return ReadParallel(string.Format("[Voron] parallel random read ({0} items)"' Constants.ReadItems)' randomIds' perfTracker' numberOfThreads); " is 141.
Long Statement,Performance.Comparison.Voron,VoronTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Voron\VoronTest.cs,WriteParallel,The length of the statement  "                (enumerator' itmsPerTransaction' nmbrOfTransactions) => WriteInternalBatch(operation' enumerator' itmsPerTransaction' nmbrOfTransactions' perfTracker' env)' " is 156.
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: var buffer = new byte[87 * 1024];
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: var buffer = new byte[87 * 1024];
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: var sequentialIds = InitSequentialNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 128' maxValueSize: 128);
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: var sequentialIds = InitSequentialNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 128' maxValueSize: 128);
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: var randomIds = InitRandomNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 128' maxValueSize: 128);
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: var randomIds = InitRandomNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 128' maxValueSize: 128);
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: var sequentialIdsLarge = InitSequentialNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 512' maxValueSize: 87 * 1024);
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: var sequentialIdsLarge = InitSequentialNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 512' maxValueSize: 87 * 1024);
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: var sequentialIdsLarge = InitSequentialNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 512' maxValueSize: 87 * 1024);
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: var randomIdsLarge = InitRandomNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 512' maxValueSize: 87 * 1024);
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: var randomIdsLarge = InitRandomNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 512' maxValueSize: 87 * 1024);
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: var randomIdsLarge = InitRandomNumbers(Constants.WriteTransactions * Constants.ItemsPerTransaction' minValueSize: 512' maxValueSize: 87 * 1024);
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < performanceTests.Count; i++)              {                  var test = performanceTests[i];                    Console.WriteLine("Testing: " + test.StorageName);                    PerformanceRecord performanceRecord;                  List<PerformanceRecord> performanceRecords;                  long totalDuration;                  long bytes;                  long items;                    performanceRecords = test.WriteSequential(sequentialIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_2"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_4"' test' performanceRecords);                      performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelSequential(sequentialIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteSeq_Parallel_16"' test' performanceRecords);                      performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelSequential(perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Seq [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadSeq_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIds' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 2' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_2"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 4' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_4"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 8' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_8"' test' performanceRecords);                    performanceRecords = test.WriteParallelRandom(randomIds' perfTracker' 16' out totalDuration);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteRnd_Parallel_16"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIds.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 2);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [2]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_2"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 4);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [4]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_4"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 8);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [8]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_8"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecord = test.ReadParallelRandom(randomIds.Select(x => x.Id)' perfTracker' 16);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Rnd [16]"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadRnd_Parallel_16"' test' new List<PerformanceRecord> { performanceRecord });                    if (test.CanHandleBigData == false)                      continue;                    performanceRecords = test.WriteSequential(sequentialIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgSeq"' test' performanceRecords);                    performanceRecord = test.ReadSequential(perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Seq"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });                    performanceRecords = test.WriteRandom(randomIdsLarge' perfTracker);                  items = performanceRecords.Sum(x => x.ProcessedItems);                  totalDuration = performanceRecords.Sum(x => x.Duration);                  bytes = performanceRecords.Sum(x => x.Bytes);                  OutputResults("Write Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("WriteLrgRnd"' test' performanceRecords);                    performanceRecord = test.ReadRandom(randomIdsLarge.Select(x => x.Id)' perfTracker);                  items = performanceRecord.ProcessedItems;                  totalDuration = performanceRecord.Duration;                  bytes = performanceRecord.Bytes;                  OutputResults("Read Lrg Rnd"' items' totalDuration' bytes' perfTracker);                  WritePerfData("ReadLrgSeq"' test' new List<PerformanceRecord> { performanceRecord });              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,OutputResults,The following statement contains a magic number: foreach (var w in new[]{Console.Out' writer})              {                  w.WriteLine("{0}:\t{1'10:#'#;;0} items & {4'10:#'#} mb' {2'10:#'#} ops/s {3'10:#'#} mb/sec."' name' itemsCount' itemsCount / (duration / 1000)'                      Math.Round(((double)bytes / (duration / 1000)) / 1024 / 1024' 2)'                      Math.Round((double)bytes / 1024 / 1024' 2));              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,OutputResults,The following statement contains a magic number: foreach (var w in new[]{Console.Out' writer})              {                  w.WriteLine("{0}:\t{1'10:#'#;;0} items & {4'10:#'#} mb' {2'10:#'#} ops/s {3'10:#'#} mb/sec."' name' itemsCount' itemsCount / (duration / 1000)'                      Math.Round(((double)bytes / (duration / 1000)) / 1024 / 1024' 2)'                      Math.Round((double)bytes / 1024 / 1024' 2));              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,OutputResults,The following statement contains a magic number: foreach (var w in new[]{Console.Out' writer})              {                  w.WriteLine("{0}:\t{1'10:#'#;;0} items & {4'10:#'#} mb' {2'10:#'#} ops/s {3'10:#'#} mb/sec."' name' itemsCount' itemsCount / (duration / 1000)'                      Math.Round(((double)bytes / (duration / 1000)) / 1024 / 1024' 2)'                      Math.Round((double)bytes / 1024 / 1024' 2));              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,OutputResults,The following statement contains a magic number: foreach (var w in new[]{Console.Out' writer})              {                  w.WriteLine("{0}:\t{1'10:#'#;;0} items & {4'10:#'#} mb' {2'10:#'#} ops/s {3'10:#'#} mb/sec."' name' itemsCount' itemsCount / (duration / 1000)'                      Math.Round(((double)bytes / (duration / 1000)) / 1024 / 1024' 2)'                      Math.Round((double)bytes / 1024 / 1024' 2));              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,OutputResults,The following statement contains a magic number: foreach (var w in new[]{Console.Out' writer})              {                  w.WriteLine("{0}:\t{1'10:#'#;;0} items & {4'10:#'#} mb' {2'10:#'#} ops/s {3'10:#'#} mb/sec."' name' itemsCount' itemsCount / (duration / 1000)'                      Math.Round(((double)bytes / (duration / 1000)) / 1024 / 1024' 2)'                      Math.Round((double)bytes / 1024 / 1024' 2));              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,OutputResults,The following statement contains a magic number: foreach (var w in new[]{Console.Out' writer})              {                  w.WriteLine("{0}:\t{1'10:#'#;;0} items & {4'10:#'#} mb' {2'10:#'#} ops/s {3'10:#'#} mb/sec."' name' itemsCount' itemsCount / (duration / 1000)'                      Math.Round(((double)bytes / (duration / 1000)) / 1024 / 1024' 2)'                      Math.Round((double)bytes / 1024 / 1024' 2));              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,OutputResults,The following statement contains a magic number: foreach (var w in new[]{Console.Out' writer})              {                  w.WriteLine("{0}:\t{1'10:#'#;;0} items & {4'10:#'#} mb' {2'10:#'#} ops/s {3'10:#'#} mb/sec."' name' itemsCount' itemsCount / (duration / 1000)'                      Math.Round(((double)bytes / (duration / 1000)) / 1024 / 1024' 2)'                      Math.Round((double)bytes / 1024 / 1024' 2));              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,OutputResults,The following statement contains a magic number: foreach (var w in new[]{Console.Out' writer})              {                  w.WriteLine("{0}:\t{1'10:#'#;;0} items & {4'10:#'#} mb' {2'10:#'#} ops/s {3'10:#'#} mb/sec."' name' itemsCount' itemsCount / (duration / 1000)'                      Math.Round(((double)bytes / (duration / 1000)) / 1024 / 1024' 2)'                      Math.Round((double)bytes / 1024 / 1024' 2));              }
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,InitRandomNumbers,The following statement contains a magic number: var random = new RandomSequenceOfUnique(32);
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,InitValue,The following statement contains a magic number: var random = new Random(1337 ^ 13);
Magic Number,Performance.Comparison,Program,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,InitValue,The following statement contains a magic number: var random = new Random(1337 ^ 13);
Magic Number,Performance.Comparison,RandomSequenceOfUnique,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Program.cs,PermuteQPR,The following statement contains a magic number: return (x <= Prime / 2) ? residue : Prime - residue;
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var logFileSizeInMb = 64;
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: logFileSizeInMb = Math.Max(1' logFileSizeInMb / 4);
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var maxVerPages = 512;
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var maxVerPagesResult = TranslateToSizeInVersionPages(maxVerPages' 1024 * 1024);
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var maxVerPagesResult = TranslateToSizeInVersionPages(maxVerPages' 1024 * 1024);
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var instanceParameters = new InstanceParameters(jetInstance)              {                  CircularLog = circularLog'                  Recovery = true'                  NoInformationEvent = false'                  CreatePathIfNotExist = true'                  EnableIndexChecking = true'                  TempDirectory = Path.Combine(logsPath' "temp")'                  SystemDirectory = Path.Combine(logsPath' "system")'                  LogFileDirectory = Path.Combine(logsPath' "logs")'                  MaxVerPages = maxVerPagesResult'                  PreferredVerPages = TranslateToSizeInVersionPages((int)(maxVerPagesResult * 0.85)' 1024 * 1024)'                  BaseName = "RVN"'                  EventSource = "EsentTest"'                  LogBuffers = TranslateToSizeInDatabasePages(8192' 1024)'                  LogFileSize = (logFileSizeInMb * 1024)'                  MaxSessions = MaxSessions'                  MaxCursors = 2048'                  DbExtensionSize = TranslateToSizeInDatabasePages(8' 1024 * 1024)'                  AlternateDatabaseRecoveryDirectory = path              };
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var instanceParameters = new InstanceParameters(jetInstance)              {                  CircularLog = circularLog'                  Recovery = true'                  NoInformationEvent = false'                  CreatePathIfNotExist = true'                  EnableIndexChecking = true'                  TempDirectory = Path.Combine(logsPath' "temp")'                  SystemDirectory = Path.Combine(logsPath' "system")'                  LogFileDirectory = Path.Combine(logsPath' "logs")'                  MaxVerPages = maxVerPagesResult'                  PreferredVerPages = TranslateToSizeInVersionPages((int)(maxVerPagesResult * 0.85)' 1024 * 1024)'                  BaseName = "RVN"'                  EventSource = "EsentTest"'                  LogBuffers = TranslateToSizeInDatabasePages(8192' 1024)'                  LogFileSize = (logFileSizeInMb * 1024)'                  MaxSessions = MaxSessions'                  MaxCursors = 2048'                  DbExtensionSize = TranslateToSizeInDatabasePages(8' 1024 * 1024)'                  AlternateDatabaseRecoveryDirectory = path              };
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var instanceParameters = new InstanceParameters(jetInstance)              {                  CircularLog = circularLog'                  Recovery = true'                  NoInformationEvent = false'                  CreatePathIfNotExist = true'                  EnableIndexChecking = true'                  TempDirectory = Path.Combine(logsPath' "temp")'                  SystemDirectory = Path.Combine(logsPath' "system")'                  LogFileDirectory = Path.Combine(logsPath' "logs")'                  MaxVerPages = maxVerPagesResult'                  PreferredVerPages = TranslateToSizeInVersionPages((int)(maxVerPagesResult * 0.85)' 1024 * 1024)'                  BaseName = "RVN"'                  EventSource = "EsentTest"'                  LogBuffers = TranslateToSizeInDatabasePages(8192' 1024)'                  LogFileSize = (logFileSizeInMb * 1024)'                  MaxSessions = MaxSessions'                  MaxCursors = 2048'                  DbExtensionSize = TranslateToSizeInDatabasePages(8' 1024 * 1024)'                  AlternateDatabaseRecoveryDirectory = path              };
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var instanceParameters = new InstanceParameters(jetInstance)              {                  CircularLog = circularLog'                  Recovery = true'                  NoInformationEvent = false'                  CreatePathIfNotExist = true'                  EnableIndexChecking = true'                  TempDirectory = Path.Combine(logsPath' "temp")'                  SystemDirectory = Path.Combine(logsPath' "system")'                  LogFileDirectory = Path.Combine(logsPath' "logs")'                  MaxVerPages = maxVerPagesResult'                  PreferredVerPages = TranslateToSizeInVersionPages((int)(maxVerPagesResult * 0.85)' 1024 * 1024)'                  BaseName = "RVN"'                  EventSource = "EsentTest"'                  LogBuffers = TranslateToSizeInDatabasePages(8192' 1024)'                  LogFileSize = (logFileSizeInMb * 1024)'                  MaxSessions = MaxSessions'                  MaxCursors = 2048'                  DbExtensionSize = TranslateToSizeInDatabasePages(8' 1024 * 1024)'                  AlternateDatabaseRecoveryDirectory = path              };
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var instanceParameters = new InstanceParameters(jetInstance)              {                  CircularLog = circularLog'                  Recovery = true'                  NoInformationEvent = false'                  CreatePathIfNotExist = true'                  EnableIndexChecking = true'                  TempDirectory = Path.Combine(logsPath' "temp")'                  SystemDirectory = Path.Combine(logsPath' "system")'                  LogFileDirectory = Path.Combine(logsPath' "logs")'                  MaxVerPages = maxVerPagesResult'                  PreferredVerPages = TranslateToSizeInVersionPages((int)(maxVerPagesResult * 0.85)' 1024 * 1024)'                  BaseName = "RVN"'                  EventSource = "EsentTest"'                  LogBuffers = TranslateToSizeInDatabasePages(8192' 1024)'                  LogFileSize = (logFileSizeInMb * 1024)'                  MaxSessions = MaxSessions'                  MaxCursors = 2048'                  DbExtensionSize = TranslateToSizeInDatabasePages(8' 1024 * 1024)'                  AlternateDatabaseRecoveryDirectory = path              };
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var instanceParameters = new InstanceParameters(jetInstance)              {                  CircularLog = circularLog'                  Recovery = true'                  NoInformationEvent = false'                  CreatePathIfNotExist = true'                  EnableIndexChecking = true'                  TempDirectory = Path.Combine(logsPath' "temp")'                  SystemDirectory = Path.Combine(logsPath' "system")'                  LogFileDirectory = Path.Combine(logsPath' "logs")'                  MaxVerPages = maxVerPagesResult'                  PreferredVerPages = TranslateToSizeInVersionPages((int)(maxVerPagesResult * 0.85)' 1024 * 1024)'                  BaseName = "RVN"'                  EventSource = "EsentTest"'                  LogBuffers = TranslateToSizeInDatabasePages(8192' 1024)'                  LogFileSize = (logFileSizeInMb * 1024)'                  MaxSessions = MaxSessions'                  MaxCursors = 2048'                  DbExtensionSize = TranslateToSizeInDatabasePages(8' 1024 * 1024)'                  AlternateDatabaseRecoveryDirectory = path              };
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var instanceParameters = new InstanceParameters(jetInstance)              {                  CircularLog = circularLog'                  Recovery = true'                  NoInformationEvent = false'                  CreatePathIfNotExist = true'                  EnableIndexChecking = true'                  TempDirectory = Path.Combine(logsPath' "temp")'                  SystemDirectory = Path.Combine(logsPath' "system")'                  LogFileDirectory = Path.Combine(logsPath' "logs")'                  MaxVerPages = maxVerPagesResult'                  PreferredVerPages = TranslateToSizeInVersionPages((int)(maxVerPagesResult * 0.85)' 1024 * 1024)'                  BaseName = "RVN"'                  EventSource = "EsentTest"'                  LogBuffers = TranslateToSizeInDatabasePages(8192' 1024)'                  LogFileSize = (logFileSizeInMb * 1024)'                  MaxSessions = MaxSessions'                  MaxCursors = 2048'                  DbExtensionSize = TranslateToSizeInDatabasePages(8' 1024 * 1024)'                  AlternateDatabaseRecoveryDirectory = path              };
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var instanceParameters = new InstanceParameters(jetInstance)              {                  CircularLog = circularLog'                  Recovery = true'                  NoInformationEvent = false'                  CreatePathIfNotExist = true'                  EnableIndexChecking = true'                  TempDirectory = Path.Combine(logsPath' "temp")'                  SystemDirectory = Path.Combine(logsPath' "system")'                  LogFileDirectory = Path.Combine(logsPath' "logs")'                  MaxVerPages = maxVerPagesResult'                  PreferredVerPages = TranslateToSizeInVersionPages((int)(maxVerPagesResult * 0.85)' 1024 * 1024)'                  BaseName = "RVN"'                  EventSource = "EsentTest"'                  LogBuffers = TranslateToSizeInDatabasePages(8192' 1024)'                  LogFileSize = (logFileSizeInMb * 1024)'                  MaxSessions = MaxSessions'                  MaxCursors = 2048'                  DbExtensionSize = TranslateToSizeInDatabasePages(8' 1024 * 1024)'                  AlternateDatabaseRecoveryDirectory = path              };
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var instanceParameters = new InstanceParameters(jetInstance)              {                  CircularLog = circularLog'                  Recovery = true'                  NoInformationEvent = false'                  CreatePathIfNotExist = true'                  EnableIndexChecking = true'                  TempDirectory = Path.Combine(logsPath' "temp")'                  SystemDirectory = Path.Combine(logsPath' "system")'                  LogFileDirectory = Path.Combine(logsPath' "logs")'                  MaxVerPages = maxVerPagesResult'                  PreferredVerPages = TranslateToSizeInVersionPages((int)(maxVerPagesResult * 0.85)' 1024 * 1024)'                  BaseName = "RVN"'                  EventSource = "EsentTest"'                  LogBuffers = TranslateToSizeInDatabasePages(8192' 1024)'                  LogFileSize = (logFileSizeInMb * 1024)'                  MaxSessions = MaxSessions'                  MaxCursors = 2048'                  DbExtensionSize = TranslateToSizeInDatabasePages(8' 1024 * 1024)'                  AlternateDatabaseRecoveryDirectory = path              };
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: var instanceParameters = new InstanceParameters(jetInstance)              {                  CircularLog = circularLog'                  Recovery = true'                  NoInformationEvent = false'                  CreatePathIfNotExist = true'                  EnableIndexChecking = true'                  TempDirectory = Path.Combine(logsPath' "temp")'                  SystemDirectory = Path.Combine(logsPath' "system")'                  LogFileDirectory = Path.Combine(logsPath' "logs")'                  MaxVerPages = maxVerPagesResult'                  PreferredVerPages = TranslateToSizeInVersionPages((int)(maxVerPagesResult * 0.85)' 1024 * 1024)'                  BaseName = "RVN"'                  EventSource = "EsentTest"'                  LogBuffers = TranslateToSizeInDatabasePages(8192' 1024)'                  LogFileSize = (logFileSizeInMb * 1024)'                  MaxSessions = MaxSessions'                  MaxCursors = 2048'                  DbExtensionSize = TranslateToSizeInDatabasePages(8' 1024 * 1024)'                  AlternateDatabaseRecoveryDirectory = path              };
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: if (Environment.OSVersion.Version >= new Version(5' 2))              {                  // JET_paramEnableIndexCleanup is not supported on WindowsXP                  const int JET_paramEnableIndexCleanup = 54;                  Api.JetSetSystemParameter(jetInstance' JET_SESID.Nil' (JET_param)JET_paramEnableIndexCleanup' 1' null);              }
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: if (Environment.OSVersion.Version >= new Version(5' 2))              {                  // JET_paramEnableIndexCleanup is not supported on WindowsXP                  const int JET_paramEnableIndexCleanup = 54;                  Api.JetSetSystemParameter(jetInstance' JET_SESID.Nil' (JET_param)JET_paramEnableIndexCleanup' 1' null);              }
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,ConfigureInstance,The following statement contains a magic number: if (Environment.OSVersion.Version >= new Version(5' 2))              {                  // JET_paramEnableIndexCleanup is not supported on WindowsXP                  const int JET_paramEnableIndexCleanup = 54;                  Api.JetSetSystemParameter(jetInstance' JET_SESID.Nil' (JET_param)JET_paramEnableIndexCleanup' 1' null);              }
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,LimitSystemCache,The following statement contains a magic number: var defaultCacheSize = Environment.Is64BitProcess ? Math.Min(1024' (1024 / 4)) : 256;
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,LimitSystemCache,The following statement contains a magic number: var defaultCacheSize = Environment.Is64BitProcess ? Math.Min(1024' (1024 / 4)) : 256;
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,LimitSystemCache,The following statement contains a magic number: var defaultCacheSize = Environment.Is64BitProcess ? Math.Min(1024' (1024 / 4)) : 256;
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,LimitSystemCache,The following statement contains a magic number: var defaultCacheSize = Environment.Is64BitProcess ? Math.Min(1024' (1024 / 4)) : 256;
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,LimitSystemCache,The following statement contains a magic number: int cacheSizeMax = TranslateToSizeInDatabasePages(cacheSizeMaxInMegabytes' 1024 * 1024);
Magic Number,Performance.Comparison.Esent,Configurator,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\Configurator.cs,LimitSystemCache,The following statement contains a magic number: int cacheSizeMax = TranslateToSizeInDatabasePages(cacheSizeMaxInMegabytes' 1024 * 1024);
Magic Number,Performance.Comparison.Esent,EsentTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\EsentTest.cs,CreateSchema,The following statement contains a magic number: using (var session = new Session(instance))              {                  JET_DBID dbid;                  Api.JetCreateDatabase(session' _database' null' out dbid' CreateDatabaseGrbit.OverwriteExisting);                    using (var tx = new Transaction(session))                  {                      JET_TABLEID tableid;                      Api.JetCreateTable(session' dbid' "table"' 0' 100' out tableid);                      var primaryColumn = new JET_COLUMNDEF                      {                          coltyp = JET_coltyp.Long                      };                        var secondaryColumn = new JET_COLUMNDEF                      {                          coltyp = JET_coltyp.LongBinary'                      };                        JET_COLUMNID primaryColumnId;                      Api.JetAddColumn(session' tableid' "key"' primaryColumn' null' 0' out primaryColumnId);                      JET_COLUMNID secondaryColumnId;                      Api.JetAddColumn(session' tableid' "data"' secondaryColumn' null' 0' out secondaryColumnId);                        var index = new JET_INDEXCREATE                      {                          szKey = "+key\0\0"'                          szIndexName = "by_key"'                          grbit = CreateIndexGrbit.IndexPrimary'                          ulDensity = 90                      };                        Api.JetCreateIndex(session' tableid' index.szIndexName' index.grbit' index.szKey' index.szKey.Length' index.ulDensity);                        tx.Commit(CommitTransactionGrbit.None);                  }              }
Magic Number,Performance.Comparison.Esent,EsentTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Esent\EsentTest.cs,CreateSchema,The following statement contains a magic number: using (var session = new Session(instance))              {                  JET_DBID dbid;                  Api.JetCreateDatabase(session' _database' null' out dbid' CreateDatabaseGrbit.OverwriteExisting);                    using (var tx = new Transaction(session))                  {                      JET_TABLEID tableid;                      Api.JetCreateTable(session' dbid' "table"' 0' 100' out tableid);                      var primaryColumn = new JET_COLUMNDEF                      {                          coltyp = JET_coltyp.Long                      };                        var secondaryColumn = new JET_COLUMNDEF                      {                          coltyp = JET_coltyp.LongBinary'                      };                        JET_COLUMNID primaryColumnId;                      Api.JetAddColumn(session' tableid' "key"' primaryColumn' null' 0' out primaryColumnId);                      JET_COLUMNID secondaryColumnId;                      Api.JetAddColumn(session' tableid' "data"' secondaryColumn' null' 0' out secondaryColumnId);                        var index = new JET_INDEXCREATE                      {                          szKey = "+key\0\0"'                          szIndexName = "by_key"'                          grbit = CreateIndexGrbit.IndexPrimary'                          ulDensity = 90                      };                        Api.JetCreateIndex(session' tableid' index.szIndexName' index.grbit' index.szKey' index.szKey.Length' index.ulDensity);                        tx.Commit(CommitTransactionGrbit.None);                  }              }
Magic Number,Performance.Comparison.FoundationDB,FdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\FoundationDB\FdbTest.cs,ReadInternalAsync,The following statement contains a magic number: const int BATCH_SIZE = 1000;
Magic Number,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,NewEnvironment,The following statement contains a magic number: var env = new LightningEnvironment(_path' EnvironmentOpenFlags.None)                            {                                MapSize = 1024 * 1024 * 1024 * (long)10                            };
Magic Number,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,NewEnvironment,The following statement contains a magic number: var env = new LightningEnvironment(_path' EnvironmentOpenFlags.None)                            {                                MapSize = 1024 * 1024 * 1024 * (long)10                            };
Magic Number,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,NewEnvironment,The following statement contains a magic number: var env = new LightningEnvironment(_path' EnvironmentOpenFlags.None)                            {                                MapSize = 1024 * 1024 * 1024 * (long)10                            };
Magic Number,Performance.Comparison.LMDB,LmdbTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\LMDB\LmdbTest.cs,NewEnvironment,The following statement contains a magic number: var env = new LightningEnvironment(_path' EnvironmentOpenFlags.None)                            {                                MapSize = 1024 * 1024 * 1024 * (long)10                            };
Magic Number,Performance.Comparison.SQLCE,SqlCeTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLCE\SqlCeTest.cs,WriteInternal,The following statement contains a magic number: using (var connection = new SqlCeConnection(connectionString))              {                  connection.Open();                    sw.Restart();                  for (var transactions = 0; transactions < numberOfTransactions; transactions++)                  {                      sw.Restart();                      using (var tx = connection.BeginTransaction())                      {                          for (var i = 0; i < itemsPerTransaction; i++)                          {                              enumerator.MoveNext();                                valueToWrite = GetValueToWrite(valueToWrite' enumerator.Current.ValueSize);                                using (var command = new SqlCeCommand("INSERT INTO Items (Id' Value) VALUES (@id' @value)"' connection))                              {                                  command.Parameters.Add("@id"' SqlDbType.Int' 4).Value = enumerator.Current.Id;                                  command.Parameters.Add("@value"' SqlDbType.Binary' valueToWrite.Length).Value = valueToWrite;                                    var affectedRows = command.ExecuteNonQuery();                                  Debug.Assert(affectedRows == 1);                              }                          }                            tx.Commit();                      }                      sw.Stop();                      perfTracker.Record(sw.ElapsedMilliseconds);                        records.Add(new PerformanceRecord                              {                                  Operation = operation'                                   Time = DateTime.Now'                                   Duration = sw.ElapsedMilliseconds'                                   ProcessedItems = itemsPerTransaction                              });                  }                    sw.Stop();              }
Magic Number,Performance.Comparison.SQLCE,SqlCeTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLCE\SqlCeTest.cs,ReadInternal,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,Performance.Comparison.SQLite,SqlLiteTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLite\SqlLiteTest.cs,WriteInternal,The following statement contains a magic number: using (var connection = new SQLiteConnection(connectionString))              {                  connection.Open();                    sw.Restart();                  for (var transactions = 0; transactions < numberOfTransactions; transactions++)                  {                      sw.Restart();                      using (var tx = connection.BeginTransaction())                      {                          for (var i = 0; i < itemsPerTransaction; i++)                          {                              enumerator.MoveNext();                                valueToWrite = GetValueToWrite(valueToWrite' enumerator.Current.ValueSize);                                using (var command = new SQLiteCommand("INSERT INTO Items (Id' Value) VALUES (@id' @value)"' connection))                              {                                  command.Parameters.Add("@id"' DbType.Int32' 4).Value = enumerator.Current.Id;                                  command.Parameters.Add("@value"' DbType.Binary' valueToWrite.Length).Value = valueToWrite;                                    var affectedRows = command.ExecuteNonQuery();                                  Debug.Assert(affectedRows == 1);                              }                          }                            tx.Commit();                      }                        sw.Stop();                      perfTracker.Record(sw.ElapsedMilliseconds);                        records.Add(new PerformanceRecord                              {                                  Operation = operation'                                  Time = DateTime.Now'                                  Duration = sw.ElapsedMilliseconds'                                  ProcessedItems = itemsPerTransaction                              });                  }                    sw.Stop();              }
Magic Number,Performance.Comparison.SQLite,SqlLiteTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLite\SqlLiteTest.cs,ReadInternal,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,Performance.Comparison.SQLServer,SqlServerTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLServer\SqlServerTest.cs,WriteInternal,The following statement contains a magic number: using (var connection = new SqlConnection(connectionString))              {                  connection.Open();                    sw.Restart();                  for (var transactions = 0; transactions < numberOfTransactions; transactions++)                  {                      sw.Restart();                      using (var tx = connection.BeginTransaction())                      {                          for (var i = 0; i < itemsPerTransaction; i++)                          {                              enumerator.MoveNext();                                valueToWrite = GetValueToWrite(valueToWrite' enumerator.Current.ValueSize);                                using (var command = new SqlCommand("INSERT INTO Items (Id' Value) VALUES (@id' @value)"' connection))                              {                                  command.Transaction = tx;                                  command.Parameters.Add("@id"' SqlDbType.Int' 4).Value = enumerator.Current.Id;                                  command.Parameters.Add("@value"' SqlDbType.Binary' valueToWrite.Length).Value = valueToWrite;                                    var affectedRows = command.ExecuteNonQuery();                                  Debug.Assert(affectedRows == 1);                              }                          }                            tx.Commit();                          perfTracker.Record(sw.ElapsedMilliseconds);                      }                        sw.Stop();                        records.Add(new PerformanceRecord                                      {                                          Operation = operation'                                          Time = DateTime.Now'                                          Duration = sw.ElapsedMilliseconds'                                          ProcessedItems = itemsPerTransaction                                      });                  }                    sw.Stop();              }
Magic Number,Performance.Comparison.SQLServer,SqlServerTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\SQLServer\SqlServerTest.cs,ReadInternal,The following statement contains a magic number: using (var connection = new SqlConnection(connectionString))              {                  connection.Open();                    var buffer = new byte[4096];                    using (var tx = connection.BeginTransaction())                  {                      long v = 0;                      var sw = Stopwatch.StartNew();                      foreach (var id in ids)                      {                          using (var command = new SqlCommand("SELECT Value FROM Items WHERE ID = " + id' connection))                          {                              command.Transaction = tx;                              using (var reader = command.ExecuteReader())                              {                                  while (reader.Read())                                  {                                      long bytesRead;                                      long fieldOffset = 0;                                        while ((bytesRead = reader.GetBytes(0' fieldOffset' buffer' 0' buffer.Length)) > 0)                                      {                                          fieldOffset += bytesRead;                                          v += bytesRead;                                      }                                  }                              }                          }                      }                      perfTracker.Record(sw.ElapsedMilliseconds);                      return v;                  }              }
Magic Number,Performance.Comparison.Voron,VoronTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Voron\VoronTest.cs,NewStorage,The following statement contains a magic number: while (Directory.Exists(dataPath))              {                  try                  {                      Directory.Delete(dataPath' true);                  }                  catch (Exception e)                  {                      Thread.Sleep(100);                  }              }
Magic Number,Performance.Comparison.Voron,VoronTest,C:\repos\ayende_raven.voron\Performance.Comparison\Performance.Comparison\Voron\VoronTest.cs,ReadInternal,The following statement contains a magic number: var ms = new byte[4096];
