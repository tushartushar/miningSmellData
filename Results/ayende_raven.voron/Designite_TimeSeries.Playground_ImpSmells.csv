Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TimeSeries.Playground,DateTimeSeries,C:\repos\ayende_raven.voron\Performance.Comparison\TimeSeries.Playground\DateTimeSeries.cs,ScanRanges,Cyclomatic complexity of the method is 8
Long Statement,TimeSeries.Playground,Program,C:\repos\ayende_raven.voron\Performance.Comparison\TimeSeries.Playground\Program.cs,Main,The length of the statement  "            //        dts.Add(fields[1]' DateTime.ParseExact(fields[2]' "o"' CultureInfo.InvariantCulture)' double.Parse(fields[3])); " is 121.
Magic Number,TimeSeries.Playground,DateTimeSeries,C:\repos\ayende_raven.voron\Performance.Comparison\TimeSeries.Playground\DateTimeSeries.cs,Add,The following statement contains a magic number: if (_bufferSize > 1000)                  Flush();
Magic Number,TimeSeries.Playground,DateTimeSeries,C:\repos\ayende_raven.voron\Performance.Comparison\TimeSeries.Playground\DateTimeSeries.cs,Flush,The following statement contains a magic number: using (var tx = _storageEnvironment.NewTransaction(TransactionFlags.ReadWrite))              {                  foreach (var kvp in _buffer)                  {                      var data = _storageEnvironment.CreateTree(tx' "channel:" + kvp.Key);                      var buffer = new byte[16];                      var key = new Slice(buffer);                      var ms = new MemoryStream();                      var bw = new BinaryWriter(ms);                      foreach (var item in kvp.Value)                      {                          var date = item.Timestamp;                          EndianBitConverter.Big.CopyBytes(date.Ticks' buffer' 0);                          EndianBitConverter.Big.CopyBytes(_last++' buffer' 8);                          ms.SetLength(0);                          bw.Write(item.Value);                          ms.Position = 0;                            data.Add(tx' key' ms);                      }                  }                    tx.State.Root.Add(tx' _lastKey' new MemoryStream(BitConverter.GetBytes(_last)));                  tx.Commit();              }
Magic Number,TimeSeries.Playground,DateTimeSeries,C:\repos\ayende_raven.voron\Performance.Comparison\TimeSeries.Playground\DateTimeSeries.cs,Flush,The following statement contains a magic number: using (var tx = _storageEnvironment.NewTransaction(TransactionFlags.ReadWrite))              {                  foreach (var kvp in _buffer)                  {                      var data = _storageEnvironment.CreateTree(tx' "channel:" + kvp.Key);                      var buffer = new byte[16];                      var key = new Slice(buffer);                      var ms = new MemoryStream();                      var bw = new BinaryWriter(ms);                      foreach (var item in kvp.Value)                      {                          var date = item.Timestamp;                          EndianBitConverter.Big.CopyBytes(date.Ticks' buffer' 0);                          EndianBitConverter.Big.CopyBytes(_last++' buffer' 8);                          ms.SetLength(0);                          bw.Write(item.Value);                          ms.Position = 0;                            data.Add(tx' key' ms);                      }                  }                    tx.State.Root.Add(tx' _lastKey' new MemoryStream(BitConverter.GetBytes(_last)));                  tx.Commit();              }
Magic Number,TimeSeries.Playground,DateTimeSeries,C:\repos\ayende_raven.voron\Performance.Comparison\TimeSeries.Playground\DateTimeSeries.cs,ScanRange,The following statement contains a magic number: using (var tx = _storageEnvironment.NewTransaction(TransactionFlags.Read))              {                    var tree = _storageEnvironment.State.GetTree(tx' "channel:" + id);                  var startBuffer = new byte[16];                  EndianBitConverter.Big.CopyBytes(start.Ticks' startBuffer' 0);                  var startKey = new Slice(startBuffer);                    using (var it = tree.Iterate(tx))                  {                      var endBuffer = new byte[16];                      EndianBitConverter.Big.CopyBytes(end.Ticks' endBuffer' 0);                      EndianBitConverter.Big.CopyBytes(long.MaxValue' endBuffer' 8);                        it.MaxKey = new Slice(endBuffer);                      if (it.Seek(startKey) == false)                          yield break;                      var valueBuffer = new byte[sizeof(double)];                      var keyBuffer = new byte[16];                      do                      {                          var reader = it.CreateReaderForCurrent();                          var n = reader.Read(valueBuffer' 0' sizeof(double));                          Debug.Assert(n == sizeof(double));                          it.CurrentKey.CopyTo(keyBuffer);                          var dt = new DateTime(EndianBitConverter.Big.ToInt64(keyBuffer' 0));                          var value = BitConverter.ToDouble(valueBuffer' 0);                          yield return new Entry(dt' value);                      } while (it.MoveNext());                  }              }
Magic Number,TimeSeries.Playground,DateTimeSeries,C:\repos\ayende_raven.voron\Performance.Comparison\TimeSeries.Playground\DateTimeSeries.cs,ScanRange,The following statement contains a magic number: using (var tx = _storageEnvironment.NewTransaction(TransactionFlags.Read))              {                    var tree = _storageEnvironment.State.GetTree(tx' "channel:" + id);                  var startBuffer = new byte[16];                  EndianBitConverter.Big.CopyBytes(start.Ticks' startBuffer' 0);                  var startKey = new Slice(startBuffer);                    using (var it = tree.Iterate(tx))                  {                      var endBuffer = new byte[16];                      EndianBitConverter.Big.CopyBytes(end.Ticks' endBuffer' 0);                      EndianBitConverter.Big.CopyBytes(long.MaxValue' endBuffer' 8);                        it.MaxKey = new Slice(endBuffer);                      if (it.Seek(startKey) == false)                          yield break;                      var valueBuffer = new byte[sizeof(double)];                      var keyBuffer = new byte[16];                      do                      {                          var reader = it.CreateReaderForCurrent();                          var n = reader.Read(valueBuffer' 0' sizeof(double));                          Debug.Assert(n == sizeof(double));                          it.CurrentKey.CopyTo(keyBuffer);                          var dt = new DateTime(EndianBitConverter.Big.ToInt64(keyBuffer' 0));                          var value = BitConverter.ToDouble(valueBuffer' 0);                          yield return new Entry(dt' value);                      } while (it.MoveNext());                  }              }
Magic Number,TimeSeries.Playground,DateTimeSeries,C:\repos\ayende_raven.voron\Performance.Comparison\TimeSeries.Playground\DateTimeSeries.cs,ScanRange,The following statement contains a magic number: using (var tx = _storageEnvironment.NewTransaction(TransactionFlags.Read))              {                    var tree = _storageEnvironment.State.GetTree(tx' "channel:" + id);                  var startBuffer = new byte[16];                  EndianBitConverter.Big.CopyBytes(start.Ticks' startBuffer' 0);                  var startKey = new Slice(startBuffer);                    using (var it = tree.Iterate(tx))                  {                      var endBuffer = new byte[16];                      EndianBitConverter.Big.CopyBytes(end.Ticks' endBuffer' 0);                      EndianBitConverter.Big.CopyBytes(long.MaxValue' endBuffer' 8);                        it.MaxKey = new Slice(endBuffer);                      if (it.Seek(startKey) == false)                          yield break;                      var valueBuffer = new byte[sizeof(double)];                      var keyBuffer = new byte[16];                      do                      {                          var reader = it.CreateReaderForCurrent();                          var n = reader.Read(valueBuffer' 0' sizeof(double));                          Debug.Assert(n == sizeof(double));                          it.CurrentKey.CopyTo(keyBuffer);                          var dt = new DateTime(EndianBitConverter.Big.ToInt64(keyBuffer' 0));                          var value = BitConverter.ToDouble(valueBuffer' 0);                          yield return new Entry(dt' value);                      } while (it.MoveNext());                  }              }
Magic Number,TimeSeries.Playground,DateTimeSeries,C:\repos\ayende_raven.voron\Performance.Comparison\TimeSeries.Playground\DateTimeSeries.cs,ScanRange,The following statement contains a magic number: using (var tx = _storageEnvironment.NewTransaction(TransactionFlags.Read))              {                    var tree = _storageEnvironment.State.GetTree(tx' "channel:" + id);                  var startBuffer = new byte[16];                  EndianBitConverter.Big.CopyBytes(start.Ticks' startBuffer' 0);                  var startKey = new Slice(startBuffer);                    using (var it = tree.Iterate(tx))                  {                      var endBuffer = new byte[16];                      EndianBitConverter.Big.CopyBytes(end.Ticks' endBuffer' 0);                      EndianBitConverter.Big.CopyBytes(long.MaxValue' endBuffer' 8);                        it.MaxKey = new Slice(endBuffer);                      if (it.Seek(startKey) == false)                          yield break;                      var valueBuffer = new byte[sizeof(double)];                      var keyBuffer = new byte[16];                      do                      {                          var reader = it.CreateReaderForCurrent();                          var n = reader.Read(valueBuffer' 0' sizeof(double));                          Debug.Assert(n == sizeof(double));                          it.CurrentKey.CopyTo(keyBuffer);                          var dt = new DateTime(EndianBitConverter.Big.ToInt64(keyBuffer' 0));                          var value = BitConverter.ToDouble(valueBuffer' 0);                          yield return new Entry(dt' value);                      } while (it.MoveNext());                  }              }
Magic Number,TimeSeries.Playground,Program,C:\repos\ayende_raven.voron\Performance.Comparison\TimeSeries.Playground\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  var sp = Stopwatch.StartNew();                    Console.WriteLine(dts.ScanRanges(DateTime.MinValue' DateTime.MaxValue' new[]                  {                      "6febe146-e893-4f64-89f8-527f2dbaae9b"'                      "707dcb42-c551-4f1a-9203-e4b0852516cf"'                      "74d5bee8-9a7b-4d4e-bd85-5f92dfc22edb"'                      "7ae29feb-6178-4930-bc38-a90adf99cfd3"'                  }).SelectMany(x => x.Values).Count(x => x != null));                    Console.WriteLine(sp.Elapsed);              }
