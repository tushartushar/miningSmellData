Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Pickles.UserInterface,MainWindowViewModel,C:\repos\x97mdr_pickles\src\Pickles\Pickles.UserInterface\MainWindowViewModel.cs,TestResultsFormatsOnCollectionChanged,The length of the parameter notifyCollectionChangedEventArgs is 32.
Long Identifier,Pickles.UserInterface,MainWindowViewModel,C:\repos\x97mdr_pickles\src\Pickles\Pickles.UserInterface\MainWindowViewModel.cs,DocumentationFormatsOnCollectionChanged,The length of the parameter notifyCollectionChangedEventArgs is 32.
Long Identifier,Pickles.UserInterface,MainWindowViewModel,C:\repos\x97mdr_pickles\src\Pickles\Pickles.UserInterface\MainWindowViewModel.cs,,The length of the parameter browseForTestResultsFileCommand is 31.
Long Statement,Pickles.UserInterface,MainWindowViewModel,C:\repos\x97mdr_pickles\src\Pickles\Pickles.UserInterface\MainWindowViewModel.cs,DoWork,The length of the statement  "            configuration.Language = selectedLanguage != null ? selectedLanguage.TwoLetterISOLanguageName : CultureInfo.CurrentUICulture.TwoLetterISOLanguageName; " is 150.
Missing Default,Pickles.UserInterface.Mvvm,NotifySelectionChangedCollection<T>,C:\repos\x97mdr_pickles\src\Pickles\Pickles.UserInterface\Mvvm\NotifySelectionChangedCollection.cs,ItemOnPropertyChanged,The following switch statement is missing a default case: switch (propertyChangedEventArgs.PropertyName)              {                  case "IsSelected":                      {                          this.SelectionChanged.Raise(this' EventArgs.Empty);                          break;                      }              }
Missing Default,Pickles.UserInterface,MainWindowViewModel,C:\repos\x97mdr_pickles\src\Pickles\Pickles.UserInterface\MainWindowViewModel.cs,MainWindowViewModel_PropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName)              {                  case "FeatureFolder":                      {                          if (Directory.Exists(this.featureFolder))                          {                              this.IsFeatureDirectoryValid = true;                          }                          else                          {                              this.IsFeatureDirectoryValid = false;                          }                            break;                      }                    case "OutputFolder":                      {                          if (Directory.Exists(this.outputFolder))                          {                              this.IsOutputDirectoryValid = true;                          }                          else                          {                              this.IsOutputDirectoryValid = false;                          }                            this.openOutputDirectory.RaiseCanExecuteChanged();                            break;                      }                    case "TestResultsFile":                      {                          if (File.Exists(this.testResultsFile))                          {                              this.IsTestResultsFileValid = true;                          }                          else                          {                              this.IsTestResultsFileValid = false;                          }                            break;                      }                    case "ProjectName":                      {                          this.IsProjectNameValid = !string.IsNullOrWhiteSpace(this.projectName);                          break;                      }                    case "ProjectVersion":                      {                          this.IsProjectVersionValid = !string.IsNullOrWhiteSpace(this.projectVersion);                          break;                      }                    case "IsRunning":                  case "IsFeatureDirectoryValid":                  case "IsOutputDirectoryValid":                  case "IsProjectNameValid":                  case "IsProjectVersionValid":                  case "IsTestResultsFileValid":                  case "IsTestResultsFormatValid":                  case "IsLanguageValid":                  case "IncludeTests":                  case "IsDocumentationFormatValid":                      {                          this.generateCommand.RaiseCanExecuteChanged();                          break;                      }              }
