Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Pickles.Example,Steps,D:\research\architectureSmells\repos\x97mdr_pickles\src\Pickles\Pickles.Example\Steps.cs,WhenIPressAdd,Cyclomatic complexity of the method is 8
Long Identifier,Specs.TagsAndHooks,HooksDemoSteps,D:\research\architectureSmells\repos\x97mdr_pickles\src\Pickles\Pickles.Example\Features\02TagsAndHooks\HooksDemoSteps.cs,,The length of the parameter _afterScenarioBlockHookExecuted is 31.
Long Identifier,Specs.TagsAndHooks,HooksDemoSteps,D:\research\architectureSmells\repos\x97mdr_pickles\src\Pickles\Pickles.Example\Features\02TagsAndHooks\HooksDemoSteps.cs,,The length of the parameter _beforeScenarioBlockHookExecuted is 32.
Magic Number,Specs.AttributeOverloading,AttributeOverloadingSteps,D:\research\architectureSmells\repos\x97mdr_pickles\src\Pickles\Pickles.Example\Features\08AttributeOverloading\AttributeOverloadingSteps.cs,ValidateOddOrEven,The following statement contains a magic number: int result = numbeToValidate%2;
Magic Number,Specs.CallingStepsFromSteps,CallingStepsFromStepDefinitionSteps,D:\research\architectureSmells\repos\x97mdr_pickles\src\Pickles\Pickles.Example\Features\09CallingStepsFromSteps\CallingStepsFromStepDefinitionSteps.cs,ThenTheWelcomePageShouldBeDisplayed,The following statement contains a magic number: Assert.AreEqual(3' i);
Magic Number,Specs.CallingStepsFromSteps,CallingStepsFromStepDefinitionSteps,D:\research\architectureSmells\repos\x97mdr_pickles\src\Pickles\Pickles.Example\Features\09CallingStepsFromSteps\CallingStepsFromStepDefinitionSteps.cs,ThenIShouldbeRewarded,The following statement contains a magic number: Assert.AreEqual(5' i);
Missing Default,Pickles.Example,Steps,D:\research\architectureSmells\repos\x97mdr_pickles\src\Pickles\Pickles.Example\Steps.cs,WhenIPressAdd,The following switch statement is missing a default case: switch (button.ToLowerInvariant())              {                  case "add":                      result = value1.Value + value2.Value;                      break;                  case "subtract":                      result = value1.Value - value2.Value;                      break;                  case "multiply":                      result = value1.Value*value2.Value;                      break;                  case "divide":                      result = value1.Value/value2.Value;                      break;                  case "sin":                      result = Convert.ToInt32(Math.Sin(Convert.ToDouble(value1.Value)));                      break;                  case "cos":                      result = Convert.ToInt32(Math.Cos(Convert.ToDouble(value1.Value)));                      break;                  case "tan":                      result = Convert.ToInt32(Math.Floor(Math.Tan(Convert.ToDouble(value1.Value))));                      break;                  case "C":                      result = null;                      break;              }
