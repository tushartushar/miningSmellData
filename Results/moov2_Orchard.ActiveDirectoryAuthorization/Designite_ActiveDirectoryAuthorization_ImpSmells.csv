Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ActiveDirectoryAuthorization.Services,ActiveDirectoryAuthorizationService,C:\repos\moov2_Orchard.ActiveDirectoryAuthorization\Services\ActiveDirectoryAuthorizationService.cs,TryCheckAccess,Cyclomatic complexity of the method is 12
Long Parameter List,ActiveDirectoryAuthorization.Core,Authorizer,C:\repos\moov2_Orchard.ActiveDirectoryAuthorization\Core\Authorizer.cs,Authorizer,The method has 5 parameters. Parameters: authorizationService' notifier' contentManager' roleService' userRolesRepository
Long Identifier,ActiveDirectoryAuthorization.Services,ActiveDirectoryAuthorizationService,C:\repos\moov2_Orchard.ActiveDirectoryAuthorization\Services\ActiveDirectoryAuthorizationService.cs,ActiveDirectoryAuthorizationService,The length of the parameter authorizationServiceEventHandler is 32.
Long Identifier,ActiveDirectoryAuthorization.Services,ActiveDirectoryAuthorizationService,C:\repos\moov2_Orchard.ActiveDirectoryAuthorization\Services\ActiveDirectoryAuthorizationService.cs,,The length of the parameter _authorizationServiceEventHandler is 33.
Long Statement,ActiveDirectoryAuthorization.Core,Authorizer,C:\repos\moov2_Orchard.ActiveDirectoryAuthorization\Core\Authorizer.cs,CreateUserForActiveDirectoryUserIfNotExists,The length of the statement  "                user = CreateUser(new CreateUserParams(activeDirectoryUser.UserName' "password"' GetEmail(activeDirectoryUser)' String.Empty' String.Empty' true)); " is 147.
Long Statement,ActiveDirectoryAuthorization.Core,Authorizer,C:\repos\moov2_Orchard.ActiveDirectoryAuthorization\Core\Authorizer.cs,GetUser,The length of the statement  "            return _contentManager.Query<UserPart' UserPartRecord>().Where(u => u.NormalizedUserName == lowerName).List().FirstOrDefault(); " is 127.
Long Statement,ActiveDirectoryAuthorization.Services,ActiveDirectoryAuthenticationService,C:\repos\moov2_Orchard.ActiveDirectoryAuthorization\Services\ActiveDirectoryAuthenticationService.cs,GetAuthenticatedUser,The length of the statement  "            if (HttpContext.Current == null || HttpContext.Current.User == null || !HttpContext.Current.User.Identity.IsAuthenticated) " is 122.
Long Statement,ActiveDirectoryAuthorization.Services,ActiveDirectoryAuthorizationService,C:\repos\moov2_Orchard.ActiveDirectoryAuthorization\Services\ActiveDirectoryAuthorizationService.cs,TryCheckAccess,The length of the statement  "                           String.Equals(context.User.UserName' _workContextAccessor.GetContext().CurrentSite.SuperUser' StringComparison.Ordinal)) " is 120.
Empty Catch Block,ActiveDirectoryAuthorization.Core,Authorizer,C:\repos\moov2_Orchard.ActiveDirectoryAuthorization\Core\Authorizer.cs,GetEmail,The method has an empty catch block.
Magic Number,ActiveDirectoryAuthorization.Core,Authorizer,C:\repos\moov2_Orchard.ActiveDirectoryAuthorization\Core\Authorizer.cs,GetEmail,The following statement contains a magic number: if (domainAndUserName.Length == 2)              {                  try                  {                      var ctx = new PrincipalContext(ContextType.Domain' domainAndUserName[0]);                      var up = UserPrincipal.FindByIdentity(ctx' activeDirectoryUser.UserName);                        if (up != null && up.EmailAddress != null)                          email = up.EmailAddress.ToLowerInvariant();                  }                  catch { }              }
Magic Number,ActiveDirectoryAuthorization.Services,ActiveDirectoryAuthorizationService,C:\repos\moov2_Orchard.ActiveDirectoryAuthorization\Services\ActiveDirectoryAuthorizationService.cs,TryCheckAccess,The following statement contains a magic number: for (var adjustmentLimiter = 0; adjustmentLimiter != 3; ++adjustmentLimiter)              {                  if (!context.Granted && context.User != null)                  {                      if (!String.IsNullOrEmpty(_workContextAccessor.GetContext().CurrentSite.SuperUser) &&                             String.Equals(context.User.UserName' _workContextAccessor.GetContext().CurrentSite.SuperUser' StringComparison.Ordinal))                      {                          context.Granted = true;                      }                  }                    if (!context.Granted)                  {                        // determine which set of permissions would satisfy the access check                      var grantingNames = PermissionNames(context.Permission' Enumerable.Empty<string>()).Distinct().ToArray();                        // determine what set of roles should be examined by the access check                      IEnumerable<string> rolesToExamine;                      if (context.User == null)                      {                          rolesToExamine = AnonymousRole;                      }                      else if (context.User.Has<IUserRoles>())                      {                          // the current user is not null' so get his roles and add "Authenticated" to it                          rolesToExamine = context.User.As<IUserRoles>().Roles.Union(new ActiveDirectoryUser().Roles).ToList();                            // when it is a simulated anonymous user in the admin                          if (!rolesToExamine.Contains(AnonymousRole[0]))                          {                              rolesToExamine = rolesToExamine.Concat(AuthenticatedRole);                          }                      }                      else                      {                          // the user is not null and has no specific role' then it's just "Authenticated"                          rolesToExamine = AuthenticatedRole;                      }                        foreach (var role in rolesToExamine)                      {                          foreach (var permissionName in _roleService.GetPermissionsForRoleByName(role))                          {                              string possessedName = permissionName;                              if (grantingNames.Any(grantingName => String.Equals(possessedName' grantingName' StringComparison.OrdinalIgnoreCase)))                              {                                  context.Granted = true;                              }                                if (context.Granted)                                  break;                          }                            if (context.Granted)                              break;                      }                  }                    context.Adjusted = false;                  _authorizationServiceEventHandler.Adjust(context);                  if (!context.Adjusted)                      break;              }
