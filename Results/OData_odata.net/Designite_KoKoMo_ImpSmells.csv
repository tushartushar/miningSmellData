Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Test.KoKoMo,ModelEngine,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelEngine.cs,GetPossibleActions,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Test.KoKoMo,ModelEngine,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelEngine.cs,MeetsRequirements,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Test.KoKoMo,ModelEngine,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelEngine.cs,DetermineParameterValue,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.Test.KoKoMo,ModelEngine,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelEngine.cs,Execute,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.KoKoMo,ModelEngine,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelEngine.cs,ExecuteActionInfo,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Test.KoKoMo,ModelEngineOptions,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelEngineOptions.cs,Load,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Test.KoKoMo,ModelItems<T>,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelItems.cs,Choose,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.KoKoMo,ModelRange,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelRange.cs,DetermineVariable,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Test.KoKoMo,ModelTrace,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelTrace.cs,FormatMethod,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.KoKoMo,ModelTrace,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelTrace.cs,FormatValue,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Test.KoKoMo,ModelValue,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelValue.cs,Evaluate,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Test.KoKoMo,ModelVariable,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelVariable.cs,ModelVariable,The method has 5 parameters. Parameters: model' instance' info' name' attr
Long Statement,Microsoft.Test.KoKoMo,Model,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\Model.cs,OnException,The length of the statement  "			throw new ModelException(this' "ExceptionId was specified and not verified.  Override Model.VerifyException' and verify the ExceptionId as was specified in the model"' e); " is 171.
Long Statement,Microsoft.Test.KoKoMo,ModelAction,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelAction.cs,Execute,The length of the statement  "				throw new ModelException(this' "Requirements were not met' and was expected to throw Exception: '" + this.Exception + "'" + " ID: '" + this.ExceptionId + "''"); " is 160.
Long Statement,Microsoft.Test.KoKoMo,ModelEngine,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelEngine.cs,DetermineParameterValue,The length of the statement  "			foreach(ModelValue value in values.FindOperator(ModelValueOperator.Equal' false).FindOperator(ModelValueOperator.NotEqual' false)) " is 130.
Long Statement,Microsoft.Test.KoKoMo,ModelEngine,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelEngine.cs,DetermineParameterValue,The length of the statement  "					throw new ModelException(parameter' "Generated value range must be specified in terms of integers' not '" + value.Type + "'"); " is 126.
Long Statement,Microsoft.Test.KoKoMo,ModelRange,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelRange.cs,DetermineVariable,The length of the statement  "				    MemberInfo[] members = instance.GetType().GetMember(part' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static); " is 150.
Virtual Method Call from Constructor,Microsoft.Test.KoKoMo,ModelEngine,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelEngine.cs,ModelEngine,The constructor "ModelEngine" calls a virtual method "Clone".
Virtual Method Call from Constructor,Microsoft.Test.KoKoMo,ModelEngine,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelEngine.cs,ModelEngine,The constructor "ModelEngine" calls a virtual method "Clone".
Virtual Method Call from Constructor,Microsoft.Test.KoKoMo,ModelEngine,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelEngine.cs,ModelEngine,The constructor "ModelEngine" calls a virtual method "Clone".
Virtual Method Call from Constructor,Microsoft.Test.KoKoMo,ModelItem,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelItem.cs,ModelItem,The constructor "ModelItem" calls a virtual method "SetAttributeValues".
Virtual Method Call from Constructor,Microsoft.Test.KoKoMo,ModelParameter,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelParameter.cs,ModelParameter,The constructor "ModelParameter" calls a virtual method "AddValuesFromType".
Virtual Method Call from Constructor,Microsoft.Test.KoKoMo,ModelParameter,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelParameter.cs,ModelParameter,The constructor "ModelParameter" calls a virtual method "AddBitCombinations".
Virtual Method Call from Constructor,Microsoft.Test.KoKoMo,ModelParameter,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelParameter.cs,ModelParameter,The constructor "ModelParameter" calls a virtual method "InferDynamicVariables".
Virtual Method Call from Constructor,Microsoft.Test.KoKoMo,ModelRange,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelRange.cs,ModelRange,The constructor "ModelRange" calls a virtual method "SetAttributeValues".
Virtual Method Call from Constructor,Microsoft.Test.KoKoMo,ModelRequirement,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelRequirement.cs,ModelRequirement,The constructor "ModelRequirement" calls a virtual method "AddBitCombinations".
Virtual Method Call from Constructor,Microsoft.Test.KoKoMo,ModelRequirement,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelRequirement.cs,ModelRequirement,The constructor "ModelRequirement" calls a virtual method "InferDynamicVariables".
Virtual Method Call from Constructor,Microsoft.Test.KoKoMo,ModelVariable,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelVariable.cs,ModelVariable,The constructor "ModelVariable" calls a virtual method "AddValuesFromType".
Virtual Method Call from Constructor,Microsoft.Test.KoKoMo,ModelVariable,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelVariable.cs,ModelVariable,The constructor "ModelVariable" calls a virtual method "AddBitCombinations".
Magic Number,Microsoft.Test.KoKoMo,ModelItems<T>,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelItems.cs,Choose,The following statement contains a magic number: switch (weightscheme)              {                  case WeightScheme.Equal:                      return this[r.Next(this.Count)];                    case WeightScheme.Geometric:                      {                          int weight = (int)Math.Pow(2' this.Count) - 1;                          int index = r.Next(1' weight + 1);                          int level = (int)Math.Round(Math.Log(index + 1) / Math.Log(2));                          level = this.Count - level;                          return this[level];                      }                    case WeightScheme.AdaptiveEqual:                  case WeightScheme.Custom:                      {                          int weight = this.Weight;                          int index = r.Next(weight);                          /// Implementation Note: All internal enumeration should be performed on this instead of _list                          /// to ensure that any overriden GetEnumerator() can dictate how enumeration is performed                          /// over the list items.                          foreach (T item in this)                          {                              if (index < item.Weight)                              {                                  //Note: Adaptive never turns off the action complete' just reduces frequency                                  if (weightscheme == WeightScheme.AdaptiveEqual && item.Weight > 1)                                      item.Weight--;                                  return item;                              }                                index -= item.Weight;                          }                          return null;                      }                    default:                      throw new ModelException(null' "Unhandled WeightScheme: " + weightscheme);              }
Magic Number,Microsoft.Test.KoKoMo,ModelItems<T>,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelItems.cs,Choose,The following statement contains a magic number: switch (weightscheme)              {                  case WeightScheme.Equal:                      return this[r.Next(this.Count)];                    case WeightScheme.Geometric:                      {                          int weight = (int)Math.Pow(2' this.Count) - 1;                          int index = r.Next(1' weight + 1);                          int level = (int)Math.Round(Math.Log(index + 1) / Math.Log(2));                          level = this.Count - level;                          return this[level];                      }                    case WeightScheme.AdaptiveEqual:                  case WeightScheme.Custom:                      {                          int weight = this.Weight;                          int index = r.Next(weight);                          /// Implementation Note: All internal enumeration should be performed on this instead of _list                          /// to ensure that any overriden GetEnumerator() can dictate how enumeration is performed                          /// over the list items.                          foreach (T item in this)                          {                              if (index < item.Weight)                              {                                  //Note: Adaptive never turns off the action complete' just reduces frequency                                  if (weightscheme == WeightScheme.AdaptiveEqual && item.Weight > 1)                                      item.Weight--;                                  return item;                              }                                index -= item.Weight;                          }                          return null;                      }                    default:                      throw new ModelException(null' "Unhandled WeightScheme: " + weightscheme);              }
Magic Number,Microsoft.Test.KoKoMo,ModelRange,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelRange.cs,AddBitCombinations,The following statement contains a magic number: int total	= (int)Math.Pow(2' bits);
Magic Number,Microsoft.Test.KoKoMo,ModelTrace,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelTrace.cs,FormatMethod,The following statement contains a magic number: StringBuilder buffer = new StringBuilder(100);
Missing Default,Microsoft.Test.KoKoMo,ModelEngine,C:\research\architectureSmells\repos\OData_odata.net\tools\KoKoMo\ModelEngine.cs,DetermineParameterValue,The following switch statement is missing a default case: switch(value.Operator)  				{  					case ModelValueOperator.LessThanOrEqual:  						if(v < max)  							max = v;  						break;  				  					case ModelValueOperator.GreaterThanOrEqual:  						if(v > min)  							min = v;  						break;    					case ModelValueOperator.LessThan:  						if(v-1 < max && v > Int32.MinValue/*prevent underflow*/)  							max = v-1;  						break;  				  					case ModelValueOperator.GreaterThan:  						if(v+1 > min && v < Int32.MaxValue/*prevent overflow*/)  							min = v+1;  						break;  				}
