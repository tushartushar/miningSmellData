Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,GetPrimitiveTypeReference,The method has 153 lines of code.
Long Method,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,GetPrimitiveTypeReference,The method has 106 lines of code.
Long Method,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The method has 109 lines of code.
Long Method,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The method has 121 lines of code.
Long Method,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The method has 143 lines of code.
Long Method,Microsoft.Test.OData.Utils.ODataLibTest,TestFeeds,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestFeeds.cs,GetFeeds,The method has 112 lines of code.
Complex Method,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareActionsAndFunctions,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,FillStockContentsForEntityContainer,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,ToTypeReference,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,GetPrimitiveTypeReference,Cyclomatic complexity of the method is 33
Complex Method,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,GetPrimitiveTypeReference,Cyclomatic complexity of the method is 32
Complex Method,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,Clone,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,FindIEnumerable,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GeneratePayloads,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,Cyclomatic complexity of the method is 32
Long Parameter List,Microsoft.Test.OData.Utils.CombinatorialEngine,CombinatorialEngineExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\CombinatorialEngine\CombinatorialEngineExtensionMethods.cs,RunCombinations,The method has 5 parameters. Parameters: provider' dimension1' dimension2' action' skipTo
Long Parameter List,Microsoft.Test.OData.Utils.CombinatorialEngine,CombinatorialEngineExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\CombinatorialEngine\CombinatorialEngineExtensionMethods.cs,RunCombinations,The method has 6 parameters. Parameters: provider' dimension1' dimension2' dimension3' action' skipTo
Long Parameter List,Microsoft.Test.OData.Utils.CombinatorialEngine,CombinatorialEngineExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\CombinatorialEngine\CombinatorialEngineExtensionMethods.cs,RunCombinations,The method has 7 parameters. Parameters: provider' dimension1' dimension2' dimension3' dimension4' action' skipTo
Long Parameter List,Microsoft.Test.OData.Utils.CombinatorialEngine,CombinatorialEngineExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\CombinatorialEngine\CombinatorialEngineExtensionMethods.cs,RunCombinations,The method has 8 parameters. Parameters: provider' dimension1' dimension2' dimension3' dimension4' dimension5' action' skipTo
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,ConstructableMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\ConstructableMetadata.cs,AddEntityType,The method has 6 parameters. Parameters: name' instanceType' baseType' isAbstract' nameSpace' isOpen
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,ConstructableMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\ConstructableMetadata.cs,AddComplexType,The method has 5 parameters. Parameters: name' instanceType' baseType' isAbstract' nameSpace
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,ConstructableMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\ConstructableMetadata.cs,AddNavigationProperty,The method has 5 parameters. Parameters: entityType' name' deleteAction' propertyTypeReference' containsTarget
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,ConstructableMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\ConstructableMetadata.cs,AddReferenceProperty,The method has 6 parameters. Parameters: entityType' name' targetEntitySet' targetEntityType' resourceSetReference' containsTarget
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,ConstructableMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\ConstructableMetadata.cs,AddFunctionAndFunctionImport,The method has 5 parameters. Parameters: name' bindingType' resultType' resultSet' isBindable
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,ConstructableMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\ConstructableMetadata.cs,AddFunction,The method has 6 parameters. Parameters: name' boundType' returnType' isBound' entitySetPathExpression' isComposable
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,ConstructableMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\ConstructableMetadata.cs,AddAction,The method has 6 parameters. Parameters: name' boundType' resultType' isBound' entitySetPathExpression' parameters
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareAttribute,The method has 6 parameters. Parameters: element' attributeName' parser' comparer' modelValue' defaultValue
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,MetadataExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataExtensionMethods.cs,GetPropertyValue,The method has 5 parameters. Parameters: model' context' term' property' expressionEvaluator
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,MetadataExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataExtensionMethods.cs,GetPropertyValue,The method has 6 parameters. Parameters: model' context' term' property' qualifier' expressionEvaluator
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,MetadataExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataExtensionMethods.cs,GetPropertyValue,The method has 5 parameters. Parameters: model' context' term' property' evaluator
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,MetadataExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataExtensionMethods.cs,GetPropertyValue,The method has 6 parameters. Parameters: model' context' term' property' qualifier' evaluator
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,MetadataExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataExtensionMethods.cs,GetPropertyValue,The method has 7 parameters. Parameters: model' context' contextType' term' property' qualifier' evaluator
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,AddFunctionAndFunctionImport,The method has 7 parameters. Parameters: container' model' name' returnType' entitySet' isComposable' isBound
Long Parameter List,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,AddActionAndActionImport,The method has 6 parameters. Parameters: container' model' name' returnType' entitySet' isBound
Long Parameter List,Microsoft.Test.OData.Utils.ODataLibTest,ModelBuilder,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\ModelBuilder.cs,EntityType,The method has 6 parameters. Parameters: model' localName' namespaceName' baseType' isAbstract' isOpen
Long Parameter List,Microsoft.Test.OData.Utils.ODataLibTest,ModelBuilder,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\ModelBuilder.cs,EnumType,The method has 5 parameters. Parameters: model' localName' namespaceName' underlyingType' isFlags
Long Parameter List,Microsoft.Test.OData.Utils.ODataLibTest,TestStream,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.Test.OData.Utils.ODataLibTest,TestStream,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter XmlPreserveSpaceAttributeValue is 30.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter ODataCollectionItemElementName is 30.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter ODataInnerErrorMessageElementName is 33.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter ODataInnerErrorTypeElementName is 30.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter ODataInnerErrorStackTraceElementName is 36.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter ODataInnerErrorInnerErrorElementName is 36.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomGeneratorVersionAttributeName is 33.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomCategorySchemeAttributeName is 31.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomCategoryLabelAttributeName is 30.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomEditRelationAttributeValue is 30.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomSelfRelationAttributeValue is 30.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter MediaLinkEntryContentSourceAttributeName is 40.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomEditMediaRelationAttributeValue is 35.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomNextRelationAttributeValue is 30.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomDeltaRelationAttributeValue is 31.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomPublishingServiceElementName is 32.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomPublishingWorkspaceElementName is 34.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomPublishingCollectionElementName is 35.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomPublishingCategoriesElementName is 35.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomPublishingAcceptAttributeName is 33.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomPublishingControlElementName is 32.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomPublishingDraftElementName is 30.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomPublishingEditedElementName is 31.
Long Identifier,Microsoft.Test.OData.Utils.Common,TestAtomConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\TestAtomConstants.cs,,The length of the parameter AtomPublishingFixedAttributeName is 32.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntitySets,The length of the parameter navigationPropertyBindingElements is 33.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareTypeValue,The length of the parameter expectedTypeNameContainsNamespace is 33.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,EdmConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmConstants.cs,,The length of the parameter EdmGeometryMultiPolygonTypeName is 31.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,EdmConstants,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmConstants.cs,,The length of the parameter EdmGeometryMultiLineStringTypeName is 34.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreateEntityReference,The length of the parameter edmEntityReferenceTypeReference is 31.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,CreateModels,The length of the parameter containerForModelWithNamedStream is 32.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the parameter functionImport_PrimitiveTwoParameters is 37.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the parameter function_PrimitiveTwoParameters is 31.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the parameter functionImport_MultipleNullableParameters is 41.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the parameter function_MultipleNullableParameters is 35.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the parameter singlePrimitivePropertyEntityType is 33.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the parameter allPrimitivePropertiesEntityType is 32.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the parameter singleComplexPropertyEntityType is 31.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the parameter singlePrimitiveCollectionPropertyEntityType is 43.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the parameter singleComplexCollectionPropertyEntityType is 41.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the parameter differentPropertyKindsEntityType is 32.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the parameter singlePrimitivePropertyComplexType is 34.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the parameter allPrimitivePropertiesComplexType is 33.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the parameter singleComplexPropertyComplexType is 32.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the parameter singlePrimitiveCollectionPropertyComplexType is 44.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the parameter singleComplexCollectionPropertyComplexType is 42.
Long Identifier,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the parameter differentPropertyKindsComplexType is 33.
Long Identifier,Microsoft.Test.OData.Utils.ODataLibTest,TestFeeds,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestFeeds.cs,GetFeeds,The length of the parameter singleEntityWithNextLinkAndCount is 32.
Long Identifier,Microsoft.Test.OData.Utils.ODataLibTest,TestFeeds,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestFeeds.cs,GetFeeds,The length of the parameter multipleEntityWithNextLinkAndCount is 34.
Long Statement,Microsoft.Test.OData.Utils.CombinatorialEngine,CombinatorialEngineExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\CombinatorialEngine\CombinatorialEngineExtensionMethods.cs,RunCombinations,The length of the statement  "                throw new ArgumentException("The skipTo parameter was used in RunCombinations and the code is not running under debugger. " + " is 125.
Long Statement,Microsoft.Test.OData.Utils.Common,ExceptionUtilities,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\ExceptionUtilities.cs,CheckValidRange,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Invalid range specified - '{0}' must be greater than or equal to '{1}'."' rightParameterName' leftParameterName)); " is 187.
Long Statement,Microsoft.Test.OData.Utils.Common,ExceptionUtilities,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\ExceptionUtilities.cs,CheckStringNotNullOrEmpty,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' exceptionMessageFormatText' messageArguments)); " is 127.
Long Statement,Microsoft.Test.OData.Utils.Common,ExceptionUtilities,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Common\ExceptionUtilities.cs,CheckCollectionNotEmpty,The length of the statement  "                    string.Format(CultureInfo.InvariantCulture' "Collection argument '{0}' must have at least one element."' argumentName)); " is 120.
Long Statement,Microsoft.Test.OData.Utils.Metadata,ConstructableMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\ConstructableMetadata.cs,AddComplexProperty,The length of the statement  "                isCollection ? ((EdmComplexTypeReference)complexType.ToTypeReference(true)).ToCollectionTypeReference() : complexType.ToTypeReference(true)); " is 141.
Long Statement,Microsoft.Test.OData.Utils.Metadata,ConstructableMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\ConstructableMetadata.cs,AddMultiValueProperty,The length of the statement  "            AddMultiValueProperty(structuredType' name' MetadataUtils.GetPrimitiveTypeReference(multiValueItemType).ToCollectionTypeReference()); " is 133.
Long Statement,Microsoft.Test.OData.Utils.Metadata,ConstructableMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\ConstructableMetadata.cs,AddFunctionImport,The length of the statement  "            var functionImport = new EdmFunctionImport(this' name' function' new EdmPathExpression(resultSet.Name)' includeInServiceDocument); " is 130.
Long Statement,Microsoft.Test.OData.Utils.Metadata,ConstructableMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\ConstructableMetadata.cs,FindDeclaredBoundOperations,The length of the statement  "                foreach (var operation in operationList.Where(o => o.IsBound && o.Parameters.Any() && o.Parameters.First().Type.Definition.IsOrInheritsFrom(bindingType))) " is 154.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEnumTypes,The length of the statement  "                ExceptionUtilities.Assert(enumMemberElements.Count() == modelType.Members.Count()' "Unexpected number of enum members"); " is 120.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareComplexTypes,The length of the statement  "                var navigationPropertyElements = RecurseBaseTypes(complexTypeElement' typeIndex' (e) => e.EdmElements("NavigationProperty")); " is 125.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntityTypeProperties,The length of the statement  "                    return keyElement == null ? Enumerable.Empty<string>() : keyElement.EdmElements("PropertyRef").Select(e => e.GetAttributeValue("Name")); " is 136.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntityTypeProperties,The length of the statement  "            ExceptionUtilities.Assert(keyPropertyNames.Count() == keyPropertiesOnModel.Count()' "Unexpected number of key properties on type " + fullTypeName); " is 147.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntityTypeProperties,The length of the statement  "            ExceptionUtilities.Assert(!missingKeyProperties.Any()' "Failed to find the key properties " + string.Join("'"' missingKeyProperties) + " on type " + fullTypeName); " is 163.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareStructuralProperties,The length of the statement  "            ExceptionUtilities.Assert(propertyElements.Count() == modelType.StructuralProperties().Count()' "Unexpected number of properties on type " + modelType.TestFullName()); " is 167.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareStructuralProperties,The length of the statement  "                ExceptionUtilities.Assert(propertyOnModel != null' "Failed to find structural property " + propertyName + " on type " + modelType.TestFullName()); " is 146.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareStructuralProperties,The length of the statement  "                    ExceptionUtilities.Assert(string.Compare(defaultValueString' propertyOnModel.DefaultValueString) == 0' "Unexpected value for DefaultValue");  " is 140.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareStructuralProperties,The length of the statement  "                    ExceptionUtilities.Assert(string.IsNullOrEmpty(propertyOnModel.DefaultValueString)' "Did not expect a value for DefaultValue property"); " is 136.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareNavigationProperties,The length of the statement  "            ExceptionUtilities.Assert(navigationPropertyElements.Count() == navigationProperties.Count()' "Unexpected number of navigation properties on type " + structuredTypeName); " is 170.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareNavigationProperties,The length of the statement  "                ExceptionUtilities.Assert(navigationProperty != null' "Failed to find navigation property " + propertyName + " on type " + structuredTypeName); " is 143.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareNavigationProperties,The length of the statement  "                    ExceptionUtilities.Assert(navigationProperty.Partner == null' "Did not expect a Partner value for navigation property " + propertyName + " on type " + structuredTypeName); " is 171.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareNavigationProperties,The length of the statement  "                    ExceptionUtilities.Assert(navigationProperty.Partner != null' "Expected a Partner value for navigation property " + propertyName + " on type " + structuredTypeName); " is 165.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareNavigationProperties,The length of the statement  "                    ExceptionUtilities.Assert(partner.Value == navigationProperty.Partner.Name' "Unexpected value for navigation property partner"); " is 128.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareNavigationProperties,The length of the statement  "                    ExceptionUtilities.Assert(navigationProperty.ReferentialConstraint != null' "Expected a referential constraint to be present"); " is 127.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareNavigationProperties,The length of the statement  "                    ExceptionUtilities.Assert(referentialConstraintElements.Count() == navigationProperty.ReferentialConstraint.PropertyPairs.Count()' "Unexpected number of referential constraint pairs"); " is 184.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareNavigationProperties,The length of the statement  "                        ExceptionUtilities.Assert(constraintPair != null' "Failed to find constraint pair (" + principalProperty + "' " + referencedProperty + ")"); " is 140.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareNavigationProperties,The length of the statement  "                    ExceptionUtilities.Assert(navigationProperty.ReferentialConstraint == null' "Did not expect any referential constraints"); " is 122.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntityContainers,The length of the statement  "                    ExceptionUtilities.Assert(containerIndex.ContainsKey(extendsContainer)' "Failed to find extended entity container " + extendsContainer); " is 136.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntitySets,The length of the statement  "                ExceptionUtilities.Assert(entitySetElement.GetAttributeValue("EntityType") == entitySet.EntityType().FullName()' "Unexpected type for entity set " + entitySetName); " is 164.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntitySets,The length of the statement  "                ExceptionUtilities.Assert(navigationPropertyBindingElements.Count() == entitySet.NavigationPropertyBindings.Count()' "Unexpected number of navigation targets"); " is 160.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntitySets,The length of the statement  "                        ExceptionUtilities.Assert(2 == splitPath.Count()' "More than two forward slash characters in nav property binding path"); " is 121.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntitySets,The length of the statement  "                        ExceptionUtilities.Assert(derivedType != null' "Failed to find entity type " + derivedTypeName + " described in navigation property binding path"); " is 147.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntitySets,The length of the statement  "                        ExceptionUtilities.Assert(derivedType.DeclaredNavigationProperties().SingleOrDefault(p => p.Name == propertyName) != null' "Failed to find nav property on derived type"); " is 170.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntitySets,The length of the statement  "                    var navigationTarget = entitySet.NavigationPropertyBindings.SingleOrDefault(nt => nt.NavigationProperty.Name == propertyName && nt.Target.Name == targetValue); " is 159.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntitySets,The length of the statement  "                    ExceptionUtilities.Assert(navigationTarget != null' "Failed to find navigation target for element " + navigationPropertyBindingElement); " is 136.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareActionAndFunctionImports,The length of the statement  "            ExceptionUtilities.Assert(operationImportElements.Count() == operationImports.Count()' "Unexpected number of action and function imports"); " is 139.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareActionAndFunctionImports,The length of the statement  "                    // CompareBooleanAttribute(operationImportElement' "IncludeInServiceDocument"' functionImport.IncludeInServiceDocument' false); " is 127.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareActionAndFunctionImports,The length of the statement  "                string operationName = isActionImport ? operationImportElement.GetAttributeValue("Action") : operationImportElement.GetAttributeValue("Function"); " is 146.
Long Statement,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntitySetPaths,The length of the statement  "            ExceptionUtilities.Assert(entitySetPathValue == string.Join("/"' modelPath.PathSegments)' "Unexpected value for path expression"); " is 130.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmModelUtils.cs,AssertEntityTypeIsDerivedFrom,The length of the statement  "            ExceptionUtilities.Assert(false' "Expected entity type " + derivedType.FullName() + " to be derived from " + baseType.FullName()); " is 130.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,AddStockVocabularies,The length of the statement  "                var stockValueTerm = new EdmTerm(valueTypeTerm.Namespace' valueTypeTerm.Name' this.ConvertToStockTypeReference(valueTypeTerm.Type' stockModel)); " is 144.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,ConstructStockEntityTypeInModel,The length of the statement  "                    entityType.BaseType != null ? this.ConstructStockEntityTypeInModel((IEdmEntityType)entityType.BaseType' stockModel' stockEntityTypes) : null' " is 141.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,ConstructStockComplexTypeInModel,The length of the statement  "                    complexType.BaseType != null ? this.ConstructStockComplexTypeInModel((IEdmComplexType)complexType.BaseType' stockModel' stockComplexTypes) : null' " is 146.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreateAndFillStockContentsForOperations,The length of the statement  "                        edmAction.ReturnType == null ? edmOperation.ReturnType : ConvertToStockTypeReference(edmOperation.ReturnType' stockModel)' " is 122.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreateAndFillStockContentsForOperations,The length of the statement  "                    edmFunction.ReturnType == null ? edmFunction.ReturnType : ConvertToStockTypeReference(edmFunction.ReturnType' stockModel)' " is 122.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreateAndFillStockContentsForOperations,The length of the statement  "                    stockOperation.AddParameter(new EdmOperationParameter(edmOperation' edmParameter.Name' ConvertToStockTypeReference(edmParameter.Type' stockModel))); " is 148.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreateNavigationPropertiesForStockEntity,The length of the statement  "                    Func<IEnumerable<IEdmStructuralProperty>' IEnumerable<IEdmStructuralProperty>> createDependentProperties = (dependentProps) => " is 126.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreateNavigationPropertiesForStockEntity,The length of the statement  "                            var stockDepProp = edmNavigation.DependentProperties() != null ? stockType.FindProperty(dependentProperty.Name) : stockToRoleType.FindProperty(dependentProperty.Name); " is 167.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreateNavigationPropertiesForStockEntity,The length of the statement  "                    Func<IEdmReferentialConstraint' IEdmEntityType' IEnumerable<IEdmStructuralProperty>> createPrincipalProperties = (refConstraint' principalType) => " is 146.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreateNavigationPropertiesForStockEntity,The length of the statement  "                        return refConstraint.PropertyPairs.Select(p => (IEdmStructuralProperty)principalType.FindProperty(p.PrincipalProperty.Name)); " is 125.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreateNavigationPropertiesForStockEntity,The length of the statement  "                    bool bidirectional = edmNavigation.Partner != null && edmNavigation.ToEntityType().FindProperty(edmNavigation.Partner.Name) != null; " is 132.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,FillStockContentsForEntityContainer,The length of the statement  "                    var edmNavigationProperty = edmNavigationSource.NavigationPropertyBindings.Select(n => n.NavigationProperty).SingleOrDefault(n => n.Name == stockNavigationProperty.Name); " is 170.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,FillStockContentsForEntityContainer,The length of the statement  "                                        GetBaseTypesAndSelf(((IEdmNavigationProperty)stockNavigationProperty).ToEntityType()).Select(m => GetFullName(m)).Contains(n.EntityType().FullName()) && n.Name == targetEdmEntitySet.Name " is 186.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,FillStockContentsForEntityContainer,The length of the statement  "                                        GetAllDerivedTypesAndSelf(((IEdmNavigationProperty)stockNavigationProperty).ToEntityType()' stockModel).Select(m => GetFullName(m)).Contains(n.EntityType().FullName()) && n.Name == targetEdmEntitySet.Name " is 204.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,FillStockContentsForEntityContainer,The length of the statement  "                    var newEdmAction = stockModel.FindDeclaredOperations(edmActionImport.Action.FullName()).OfType<IEdmAction>().FirstOrDefault() as EdmAction; " is 139.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,FillStockContentsForEntityContainer,The length of the statement  "                    stockEdmOperationImport = stockContainer.AddActionImport(edmOperationImport.Name' newEdmAction' edmActionImport.EntitySet); " is 123.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,FillStockContentsForEntityContainer,The length of the statement  "                    var newEdmFunction = edmModel.FindDeclaredOperations(edmFunctionImport.Function.FullName()).OfType<IEdmFunction>().FirstOrDefault(); " is 132.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,FillStockContentsForEntityContainer,The length of the statement  "                    ExceptionUtilities.CheckObjectNotNull(newEdmFunction' "Expected to find an function: " + edmFunctionImport.Function.FullName()); " is 128.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,FillStockContentsForEntityContainer,The length of the statement  "                    stockEdmOperationImport = stockContainer.AddFunctionImport(edmFunctionImport.Name' newEdmFunction' edmFunctionImport.EntitySet' edmFunctionImport.IncludeInServiceDocument); " is 172.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,GetDirectlyDerivedTypes,The length of the statement  "            return model.SchemaElements.OfType<IEdmEntityType>().Where(n => n.BaseType != null && n.BaseType.Equals(baseType)).ToList(); " is 124.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreateEntityReference,The length of the statement  "            var stockEntityReference = new EdmEntityReferenceType((IEdmEntityType)stockModel.FindType(edmEntityReferenceTypeReference.EntityType().FullName())); " is 148.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreatePrimitveStockTypeReference,The length of the statement  "                    stockTypeReference = EdmCoreModel.Instance.GetBinary(binaryTypeReference.IsUnbounded' binaryTypeReference.MaxLength' binaryTypeReference.IsNullable); " is 149.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreatePrimitveStockTypeReference,The length of the statement  "                    stockTypeReference = EdmCoreModel.Instance.GetString(stringTypeReference.IsUnbounded' stringTypeReference.MaxLength' stringTypeReference.IsUnicode ?? true' stringTypeReference.IsNullable); " is 188.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreatePrimitveStockTypeReference,The length of the statement  "                    stockTypeReference = EdmCoreModel.Instance.GetTemporal(temporalTypeReference.PrimitiveKind()' temporalTypeReference.Precision ?? 0' temporalTypeReference.IsNullable); " is 166.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,CreatePrimitveStockTypeReference,The length of the statement  "                    stockTypeReference = EdmCoreModel.Instance.GetDecimal(decimalTypeReference.Precision' decimalTypeReference.Scale' decimalTypeReference.IsNullable); " is 147.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,ConvertToStockExpression,The length of the statement  "                    result = new EdmStringConstant(tempString.Type != null ? this.ConvertToStockTypeReference(tempString.Type' stockModel).AsString() : null' tempString.Value); " is 156.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,ConvertToStockExpression,The length of the statement  "                    result = new EdmIntegerConstant(tempInteger.Type != null ? this.ConvertToStockTypeReference(tempInteger.Type' stockModel).AsPrimitive() : null' tempInteger.Value); " is 163.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,ConvertToStockExpression,The length of the statement  "                        tempRecord.DeclaredType == null ? null : this.ConvertToStockTypeReference(tempRecord.DeclaredType' stockModel).AsStructured()' " is 126.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,ConvertToStockExpression,The length of the statement  "                            (IEdmPropertyConstructor)new EdmPropertyConstructor(edmProperty.Name' this.ConvertToStockExpression(edmProperty.Value' stockModel)))); " is 134.
Long Statement,Microsoft.Test.OData.Utils.Metadata,EdmToStockModelConverter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\EdmToStockModelConverter.cs,ConvertToStockExpression,The length of the statement  "                    result = new EdmCollectionExpression(tempCollection.Elements.Select(element => this.ConvertToStockExpression(element' stockModel))); " is 132.
Long Statement,Microsoft.Test.OData.Utils.Metadata,MetadataExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataExtensionMethods.cs,GetPropertyValue,The length of the statement  "            return GetPropertyValue<IEdmValue>(model' context' context.Type.AsEntity().EntityDefinition()' term' property' null' expressionEvaluator.Evaluate); " is 147.
Long Statement,Microsoft.Test.OData.Utils.Metadata,MetadataExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataExtensionMethods.cs,GetPropertyValue,The length of the statement  "            return GetPropertyValue<IEdmValue>(model' context' context.Type.AsEntity().EntityDefinition()' term' property' qualifier' expressionEvaluator.Evaluate); " is 152.
Long Statement,Microsoft.Test.OData.Utils.Metadata,MetadataExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataExtensionMethods.cs,GetPropertyValue,The length of the statement  "            return GetPropertyValue<T>(model' context' context.Type.AsEntity().EntityDefinition()' term' property' null' evaluator.EvaluateToClrValue<T>); " is 142.
Long Statement,Microsoft.Test.OData.Utils.Metadata,MetadataExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataExtensionMethods.cs,GetPropertyValue,The length of the statement  "            return GetPropertyValue<T>(model' context' context.Type.AsEntity().EntityDefinition()' term' property' qualifier' evaluator.EvaluateToClrValue<T>); " is 147.
Long Statement,Microsoft.Test.OData.Utils.Metadata,MetadataExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataExtensionMethods.cs,GetPropertyValue,The length of the statement  "            IEnumerable<IEdmVocabularyAnnotation> annotations = model.FindVocabularyAnnotations<IEdmVocabularyAnnotation>(contextType' term' qualifier); " is 140.
Long Statement,Microsoft.Test.OData.Utils.Metadata,MetadataExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataExtensionMethods.cs,GetPropertyValue,The length of the statement  "                throw new InvalidOperationException("Type " + contextType.ToTraceString() + " must have a single annotation with term " + term.ToTraceString()); " is 144.
Long Statement,Microsoft.Test.OData.Utils.Metadata,MetadataExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataExtensionMethods.cs,GetPropertyValue,The length of the statement  "                throw new InvalidOperationException("Type " + contextType.ToTraceString() + " must have a single annotation containing a record expression with term " + term.ToTraceString()); " is 175.
Long Statement,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,ResolveProperty,The length of the statement  "            ExceptionUtilities.CheckObjectNotNull(property' "Can't find property '" + name + "' on type '" + structuredType.TestFullName() + "'."); " is 135.
Long Statement,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,Clone,The length of the statement  "                            return new EdmDecimalTypeReference(primitiveType' nullable' decimalTypeReference.Precision' decimalTypeReference.Scale); " is 120.
Long Statement,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,GetAttributeValue,The length of the statement  "            ExceptionUtilities.CheckObjectNotNull(attribute' "Failed to find attribute '" + attributeName + "' on element " + element); " is 123.
Long Statement,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,AddFunctionAndFunctionImport,The length of the statement  "            EdmFunction function = new EdmFunction(container.Namespace' name' returnType' false /*isBound*/' null' false /*isComposable*/); " is 127.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateJsonPayloads,The length of the statement  "                    EntityInstance payload = this.AddIDAndLink(this.CreateEntityInstance(set.EntityType())).WithTypeAnnotation(set.EntityType()); " is 125.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GeneratePayloads,The length of the statement  "                    result.SkipTestConfiguration = tc => (p.SkipTestConfiguration == null ? false : p.SkipTestConfiguration(tc)) || ODataPayloadElementConfigurationValidator.GetSkipTestConfiguration(p.PayloadElement' validators)(tc); " is 213.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateFeedPayloads,The length of the statement  "            // return the feed as content of an expanded link of the second entry in a top-level feed with three entries and a negative inline count " is 136.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateFeedPayloads,The length of the statement  "            // return the feed as content of an expanded link of an entry that itself is the content of an expanded link of a top-level entry " is 129.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateFeedPayloads,The length of the statement  "            // return the feed as content of an expanded link within a 7 level hierachy of feeds within expanded links of a top level entry " is 127.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GeneratePropertyPayloads,The length of the statement  "            yield return propertyPayload.InComplexValue().InCollection(1' 1).InProperty("InnerProperty").InComplexValue().InCollection(3' 3).InProperty(); " is 142.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The length of the statement  "            // return the entry in a feed with various combinations of nextLink' inlineCount and position of the entry w.r.t other entries " is 126.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The length of the statement  "            yield return entryPayload.InFeed(inlineCount: -2' nextLink: PayloadGenerator.NextLink' elementsBefore: 1).FilterTopLevelFeed(); " is 127.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The length of the statement  "            yield return entryPayload.InFeed(inlineCount: 2' nextLink: PayloadGenerator.NextLink' elementsAfter: 1).FilterTopLevelFeed(); " is 125.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The length of the statement  "            yield return entryPayload.InFeed(inlineCount: 2' nextLink: PayloadGenerator.NextLink' elementsBefore: 1' elementsAfter: 1).FilterTopLevelFeed(); " is 144.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The length of the statement  "            // return the entry in an expanded link of another entry that is inside a feed which in turn is inside an expanded link of a top-level entry " is 140.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,BuildProperty,The length of the statement  "            return new PrimitiveProperty((property.Name)' this.GetValue((IEdmPrimitiveTypeReference)property.Type)).WithTypeAnnotation(property.Type); " is 138.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference); " is 159.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference); " is 122.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference); " is 134.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference); " is 145.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference); " is 141.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference); " is 129.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference); " is 173.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference); " is 153.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference); " is 156.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference); " is 162.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference); " is 128.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference); " is 167.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference); " is 155.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference); " is 154.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference); " is 143.
Long Statement,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The length of the statement  "                    return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference); " is 125.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            cityType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "CityHall"' Target = officeType' TargetMultiplicity = EdmMultiplicity.Many }); " is 154.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            cityType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "DOL"' Target = officeType' TargetMultiplicity = EdmMultiplicity.Many }); " is 149.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            cityType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "PoliceStation"' Target = officeType' TargetMultiplicity = EdmMultiplicity.One }); " is 158.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            metropolitanCityType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "ContainedOffice"' Target = officeType' TargetMultiplicity = EdmMultiplicity.Many' ContainsTarget = true }); " is 196.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            officeType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "ContainedCity"' Target = metropolitanCityType' TargetMultiplicity = EdmMultiplicity.One' ContainsTarget = true }); " is 193.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            personType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "Friend"' Target = personType' TargetMultiplicity = EdmMultiplicity.Many }); " is 154.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            var serviceOp = container.AddFunctionAndFunctionImport(model' "ServiceOperation1"' Int32NullableTypeRef' null' false /*isComposable*/' false /*isBound*/); " is 154.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "PrimitiveResultOperation"' Int32NullableTypeRef' null' false /*isComposable*/' false /*isBound*/); " is 145.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "ComplexResultOperation"' new EdmComplexTypeReference(addressType' isNullable: true)' null' false /*isComposable*/' false /*isBound*/); " is 181.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "PrimitiveCollectionResultOperation"' EdmCoreModel.GetCollection(Int32NullableTypeRef)' null' false /*isComposable*/' false /*isBound*/); " is 183.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "ComplexCollectionResultOperation"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(addressType' isNullable: true))' null' false /*isComposable*/' false /*isBound*/); " is 219.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "FunctionImportWithOverload"' Int32NullableTypeRef' null' false /*isComposable*/' false /*isBound*/); " is 147.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            var overloadWithOneParam = container.AddFunctionAndFunctionImport(model' "FunctionImportWithOverload"' Int32NullableTypeRef' null' false /*isComposable*/' false /*isBound*/); " is 174.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            overloadWithOneParam.Function.AsEdmFunction().AddParameter("p1"' new EdmEntityTypeReference(cityWithMapType' isNullable: true)); " is 128.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            var overloadWithTwoParams = container.AddFunctionAndFunctionImport(model' "FunctionImportWithOverload"' Int32NullableTypeRef' null' false /*isComposable*/' false /*isBound*/); " is 175.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            overloadWithTwoParams.Function.AsEdmFunction().AddParameter("p1"' new EdmEntityTypeReference(cityType' isNullable: true)); " is 122.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            var overloadWithFiveParams = container.AddFunctionAndFunctionImport(model' "FunctionImportWithOverload"' Int32NullableTypeRef' null' false /*isComposable*/' false /*isBound*/); " is 176.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            overloadWithFiveParams.Function.AsEdmFunction().AddParameter("p1"' EdmCoreModel.GetCollection(new EdmEntityTypeReference(cityType' isNullable: true))); " is 151.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            overloadWithFiveParams.Function.AsEdmFunction().AddParameter("p4"' new EdmComplexTypeReference(addressType' isNullable: true)); " is 127.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildTestModel,The length of the statement  "            overloadWithFiveParams.Function.AsEdmFunction().AddParameter("p5"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(addressType' isNullable: true))); " is 155.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,CreateModels,The length of the statement  "            var openType = new EdmEntityType(DefaultNamespaceName' "OpenEntityType"' baseType: null' isAbstract: false' isOpen: true); " is 122.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            entityType.AddKeys(new IEdmStructuralProperty[] { new EdmStructuralProperty(entityType' "ID"' coreModel.GetInt32(false)) }); " is 124.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "FunctionImport_Primitive"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' false /*bindable*/).Function.AsEdmFunction().AddParameter("primitive"' coreModel.GetString(false)); " is 258.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "FunctionImport_NullablePrimitive"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' false /*bindable*/).Function.AsEdmFunction().AddParameter("nullablePrimitive"' coreModel.GetString(true)); " is 273.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "FunctionImport_PrimitiveCollection"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' false /*bindable*/).Function.AsEdmFunction().AddParameter("primitiveCollection"' stringCollectionType.ToTypeReference(false)); " is 295.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "FunctionImport_Complex"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' false /*bindable*/).Function.AsEdmFunction().AddParameter("complex"' complexType.ToTypeReference(true)); " is 261.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "FunctionImport_ComplexCollection"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' false /*bindable*/).Function.AsEdmFunction().AddParameter("complexCollection"' complexCollectionType.ToTypeReference()); " is 287.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "FunctionImport_Entry"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' true /*bindable*/).Function.AsEdmFunction().AddParameter("entry"' entityType.ToTypeReference()); " is 251.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "FunctionImport_Feed"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' true /*bindable*/).Function.AsEdmFunction().AddParameter("feed"' entityCollectionType.ToTypeReference()); " is 259.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "FunctionImport_Stream"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' false /*bindable*/).Function.AsEdmFunction().AddParameter("stream"' coreModel.GetStream(false)); " is 252.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "FunctionImport_Enum"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' false /*bindable*/).Function.AsEdmFunction().AddParameter("enum"' enumType.ToTypeReference()); " is 248.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            var functionImport_PrimitiveTwoParameters = container.AddFunctionAndFunctionImport(model' "FunctionImport_PrimitiveTwoParameters"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' false /*bindable*/); " is 236.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "FunctionImport_Int"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' false /*bindable*/).Function.AsEdmFunction().AddParameter("p1"' coreModel.GetInt32(false)); " is 244.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            container.AddFunctionAndFunctionImport(model' "FunctionImport_Double"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' false /*bindable*/).Function.AsEdmFunction().AddParameter("p1"' coreModel.GetDouble(false)); " is 248.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            container.AddActionAndActionImport(model' "FunctionImport_NonNullablePrimitiveCollection"' null /*returnType*/' null /*entitySet*/' false /*bindable*/).Action.AsEdmAction().AddParameter("p1"' int32CollectionType.ToTypeReference(false)); " is 236.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            var functionImport_MultipleNullableParameters = container.AddFunctionAndFunctionImport(model' "FunctionImport_MultipleNullableParameters"' coreModel.GetString(false) /*returnType*/' null /*entitySet*/' false /*composable*/' false /*bindable*/); " is 244.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The length of the statement  "            function_MultipleNullableParameters.AddParameter("p14"' coreModel.GetSpatial(EdmPrimitiveTypeKind.GeographyPoint' true /*isNullable*/)); " is 136.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,LoadModelFromEdmx,The length of the statement  "                    throw new Exception("Model loading failed: " + string.Join("\r\n"' errors.Select(e => e.ErrorLocation.ToString() + ": " + e.ErrorMessage))); " is 140.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            allPrimitivePropertiesEntityType.AddStructuralProperty("DateTimeOffsetProp"' EdmPrimitiveTypeKind.DateTimeOffset' isNullable: false); " is 133.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            singleComplexPropertyEntityType.AddStructuralProperty("ComplexProp"' new EdmComplexTypeReference(complexType' isNullable: true)); " is 129.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            var singlePrimitiveCollectionPropertyEntityType = new EdmEntityType(DefaultNamespaceName' "SinglePrimitiveCollectionPropertyEntityType"); " is 137.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            singlePrimitiveCollectionPropertyEntityType.AddKeys(singlePrimitiveCollectionPropertyEntityType.AddStructuralProperty("ID"' Int32TypeRef)); " is 139.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            singlePrimitiveCollectionPropertyEntityType.AddStructuralProperty("PrimitiveCollectionProp"' EdmCoreModel.GetCollection(Int32TypeRef)); " is 135.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            entityContainer.AddEntitySet("SinglePrimitiveCollectionPropertyEntityType"' singlePrimitiveCollectionPropertyEntityType); " is 121.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            var singleComplexCollectionPropertyEntityType = new EdmEntityType(DefaultNamespaceName' "SingleComplexCollectionPropertyEntityType"); " is 133.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            singleComplexCollectionPropertyEntityType.AddKeys(singleComplexCollectionPropertyEntityType.AddStructuralProperty("ID"' Int32TypeRef)); " is 135.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            singleComplexCollectionPropertyEntityType.AddStructuralProperty("ComplexCollectionProp"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(complexType' isNullable: true))); " is 177.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            differentPropertyKindsEntityType.AddStructuralProperty("ComplexProp"' new EdmComplexTypeReference(complexType' isNullable: true)); " is 130.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            differentPropertyKindsEntityType.AddStructuralProperty("PrimitiveCollectionProp"' EdmCoreModel.GetCollection(Int32TypeRef)); " is 124.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            differentPropertyKindsEntityType.AddStructuralProperty("ComplexCollectionProp"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(complexType' isNullable: true))); " is 168.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            var singlePrimitivePropertyComplexType = new EdmComplexType(DefaultNamespaceName' "SinglePrimitivePropertyComplexType"); " is 120.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            allPrimitivePropertiesComplexType.AddStructuralProperty("DecimalProp"' EdmPrimitiveTypeKind.Decimal' isNullable: false); " is 120.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            allPrimitivePropertiesComplexType.AddStructuralProperty("DateTimeOffsetProp"' EdmPrimitiveTypeKind.DateTimeOffset' isNullable: false); " is 134.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            singleComplexPropertyComplexType.AddStructuralProperty("ComplexProp"' new EdmComplexTypeReference(complexType' isNullable: true)); " is 130.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            var singlePrimitiveCollectionPropertyComplexType = new EdmComplexType(DefaultNamespaceName' "SinglePrimitiveCollectionPropertyComplexType"); " is 140.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            singlePrimitiveCollectionPropertyComplexType.AddStructuralProperty("PrimitiveCollectionProp"' EdmCoreModel.GetCollection(Int32TypeRef)); " is 136.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            var singleComplexCollectionPropertyComplexType = new EdmComplexType(DefaultNamespaceName' "SingleComplexCollectionPropertyComplexType"); " is 136.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            singleComplexCollectionPropertyComplexType.AddStructuralProperty("ComplexCollectionProp"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(complexType' isNullable: true))); " is 178.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            differentPropertyKindsComplexType.AddStructuralProperty("ComplexProp"' new EdmComplexTypeReference(complexType' isNullable: true)); " is 131.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            differentPropertyKindsComplexType.AddStructuralProperty("PrimitiveCollectionProp"' EdmCoreModel.GetCollection(Int32TypeRef)); " is 125.
Long Statement,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildEdmValueModel,The length of the statement  "            differentPropertyKindsComplexType.AddStructuralProperty("ComplexCollectionProp"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(complexType' isNullable: true))); " is 169.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                ConstructableMetadata metadata = new ConstructableMetadata("InMemoryEntities"' "Microsoft.Test.Taupo.OData.WCFService"); " is 120.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                IEdmEntityType personType = metadata.AddEntityType("Person"' typeof(Person)' null' false' "Microsoft.Test.Taupo.OData.WCFService"); " is 131.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                IEdmEntityType customerType = metadata.AddEntityType("Customer"' typeof(Customer)' personType' false' "Microsoft.Test.Taupo.OData.WCFService"); " is 143.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                IEdmEntityType employeeType = metadata.AddEntityType("Employee"' typeof(Employee)' personType' false' "Microsoft.Test.Taupo.OData.WCFService"' true); " is 149.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                IEdmEntityType productType = metadata.AddEntityType("Product"' typeof(Product)' null' false' "Microsoft.Test.Taupo.OData.WCFService"); " is 134.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                IEdmEntityType orderType = metadata.AddEntityType("Order"' typeof(Order)' null' false' "Microsoft.Test.Taupo.OData.WCFService"); " is 128.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                IEdmEntityType orderDetailType = metadata.AddEntityType("OrderDetail"' typeof(OrderDetail)' null' false' "Microsoft.Test.Taupo.OData.WCFService"); " is 146.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                var productOrderedNavigation = metadata.AddResourceReferenceProperty(orderDetailType' "ProductOrdered"' productset' null); " is 122.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                var associatedOrderNavigation = metadata.AddResourceReferenceProperty(orderDetailType' "AssociatedOrder"' orderset' null); " is 122.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                IEdmEntityType durationInKeyType = metadata.AddEntityType("DurationInKey"' typeof(DurationInKey)' null' false' "Microsoft.Test.Taupo.OData.WCFService"); " is 152.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                metadata.AddFunctionAndFunctionImport("GetOrderRate"' orderType.ToTypeReference()' MetadataUtils.GetPrimitiveTypeReference(typeof (Int32))' null' true); " is 152.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                metadata.AddFunction("GetNextOrder"' orderType.ToTypeReference()' orderType.ToTypeReference()' true' new EdmPathExpression("bindingparameter")' true); " is 150.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                metadata.AddFunction("OrdersWithMoreThanTwoItems"' collectionOrders' collectionOrders' true' new EdmPathExpression("bindingparameter")' true /*iscomposable*/); " is 159.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                var overload1Function = metadata.AddFunction("OrdersWithMoreThanTwoItems"' collectionOrders' collectionOrders' true' new EdmPathExpression("bindingparameter")' true /*iscomposable*/); " is 183.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                var overload2Function = metadata.AddFunction("OrdersWithMoreThanTwoItems"' collectionOrders' collectionOrders' true' new EdmPathExpression("bindingparameter")' true /*iscomposable*/); " is 183.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                var customersInCityFunction = metadata.AddFunction("InCity"' collectionCustomers' collectionCustomers' true' new EdmPathExpression("bindingparameter")' true /*iscomposable*/); " is 175.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                var customersWithinFunction = metadata.AddFunction("Within"' collectionCustomers' collectionCustomers' true' new EdmPathExpression("bindingparameter")' true /*iscomposable*/); " is 175.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                customersWithinFunction.AddParameter("DateTimeOffset"' MetadataUtils.GetPrimitiveTypeReference(typeof(DateTimeOffset?))); " is 121.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                customersWithinFunction.AddParameter("LineString"' MetadataUtils.GetPrimitiveTypeReference(typeof(GeometryLineString))); " is 120.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                var withinFunction = metadata.AddFunction("Within"' customerType.ToTypeReference()' MetadataUtils.GetPrimitiveTypeReference(typeof(bool))' true' null' true /*iscomposable*/); " is 174.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                var withinFunction2 = metadata.AddFunction("Within"' customerType.ToTypeReference()' MetadataUtils.GetPrimitiveTypeReference(typeof(bool))' true' null' true /*iscomposable*/); " is 175.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                metadata.AddFunction("GetChild"' personType.ToTypeReference()' personType.ToTypeReference()' true' new EdmPathExpression("bindingparameter/Child")' true /*iscomposable*/); " is 171.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                metadata.AddAction("GetBrothers"' personType.ToTypeReference()' new EdmCollectionTypeReference(new EdmCollectionType(personType.ToTypeReference()))' true' new EdmPathExpression("bindingparameter/Child")); " is 204.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                metadata.AddFunctionAndFunctionImport("HowManyPotatoesEaten"' null' MetadataUtils.GetPrimitiveTypeReference(typeof(Int32))' null' false); " is 137.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                metadata.AddFunctionAndFunctionImport("QuoteOfTheDay"' null' MetadataUtils.GetPrimitiveTypeReference(typeof(string))' null' false); " is 131.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                var action1 = metadata.AddAction("ChangeAddress"' personType.ToTypeReference()' null /*returnType*/' true /*isbound*/' null /*entitySetPathExpression*/); " is 153.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                action1.AddParameter(new EdmOperationParameter(action1' "Street"' MetadataUtils.GetPrimitiveTypeReference(typeof(string)))); " is 124.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                action1.AddParameter(new EdmOperationParameter(action1' "City"' MetadataUtils.GetPrimitiveTypeReference(typeof(string)))); " is 122.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                action1.AddParameter(new EdmOperationParameter(action1' "PostalCode"' MetadataUtils.GetPrimitiveTypeReference(typeof(string)))); " is 128.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                var getRecentCustomersAction = metadata.AddAction("GetRecentCustomers"' null /*boundType*/' new EdmCollectionTypeReference(new EdmCollectionType(orderType.ToTypeReference()))' false /*isbound*/' null /*entitySetPathExpression*/); " is 229.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                //Since the OrderDetailSet can contain a AssociatedOrder we need to include the target for that navigation in the orderdetail set. " is 130.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryModel,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryModel.cs,GetModel,The length of the statement  "                //Since the OrderDetailSet can contain a ProductOrdered we need to include the target for that navigation in the orderdetail set. " is 129.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,ModelBuilder,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\ModelBuilder.cs,Property,The length of the statement  "                entityType.AddStructuralProperty(propertyName' MetadataUtils.GetPrimitiveTypeReference(primitiveValue.Value.GetType())); " is 120.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,ModelBuilder,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\ModelBuilder.cs,AddDefaultContainerFixup,The length of the statement  "            foreach (EdmEntityType entityType in model.SchemaElements.OfType<IEdmEntityType>().Where(e => e.BaseType == null && container.EntitySets().All(set => set.EntityType() != e))) " is 174.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,ModelBuilder,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\ModelBuilder.cs,AddDefaultContainerFixup,The length of the statement  "            foreach (EdmNavigationProperty property in model.SchemaElements.OfType<IEdmEntityType>().SelectMany(entityType => entityType.DeclaredNavigationProperties()).Where(p=>!p.ContainsTarget)) " is 185.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,TestFeeds,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestFeeds.cs,GetFeeds,The length of the statement  "            EdmEntityType baseType = model.EntityType("MyBaseType").KeyProperty("Id"' (EdmPrimitiveTypeReference) EdmCoreModel.Instance.GetGuid(false)); " is 140.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,TestFeeds,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestFeeds.cs,GetFeeds,The length of the statement  "            EntityInstance instance = PayloadBuilder.Entity(withTypeNames ? "TestModel." + baseType.Name : null).Property("Id"' PayloadBuilder.PrimitiveValue(Guid.NewGuid())); " is 163.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,TestFeeds,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestFeeds.cs,GetFeeds,The length of the statement  "            EntitySetInstance multipleEntity = PayloadBuilder.EntitySet().Append(instance.GenerateSimilarEntries(3)).WithTypeAnnotation(baseType); " is 134.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,TestMessage,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestMessage.cs,SetHeader,The length of the statement  "                throw new InvalidOperationException("Cannot set a header once the stream has been retrieved using GetStream or GetStreamAsync."); " is 129.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,TestMessage,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestMessage.cs,GetStream,The length of the statement  "                throw new InvalidOperationException("TestMessage.GetStream() called on message which does not support synchronous operations."); " is 128.
Long Statement,Microsoft.Test.OData.Utils.ODataLibTest,TestMessage,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestMessage.cs,GetStreamAsync,The length of the statement  "                throw new InvalidOperationException("TestMessage.GetStreamAsync() called on message which does not support asynchronous operations."); " is 134.
Empty Catch Block,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareActionsAndFunctions,The method has an empty catch block.
Magic Number,Microsoft.Test.OData.Utils.Metadata,CsdlToEdmModelComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\CsdlToEdmModelComparer.cs,CompareEntitySets,The following statement contains a magic number: ExceptionUtilities.Assert(2 == splitPath.Count()' "More than two forward slash characters in nav property binding path");
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateAtomPayloads,The following statement contains a magic number: this.Assert.IsTrue(payload.Annotations.Count >= 2' "There should be a minimum of two annotations");
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateJsonPayloads,The following statement contains a magic number: this.Assert.IsTrue(payload.Annotations.Count == 2' "There should only be two annotations");
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateFeedPayloads,The following statement contains a magic number: yield return feedPayload.InEntryWithExpandedLink().InFeed(3' PayloadGenerator.NextLink' 1' 1).FilterTopLevelFeed();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateFeedPayloads,The following statement contains a magic number: yield return feedPayload.InEntryWithExpandedLink().InFeed(-3' PayloadGenerator.NextLink' 1' 1).FilterTopLevelFeed();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateFeedPayloads,The following statement contains a magic number: yield return feedPayload.InEntryWithExpandedLink().InEntryWithNestedExpandedFeeds(nestingLevel: 7);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GeneratePropertyPayloads,The following statement contains a magic number: yield return propertyPayload.InComplexValue(5' 5).InProperty();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GeneratePropertyPayloads,The following statement contains a magic number: yield return propertyPayload.InComplexValue(5' 5).InProperty();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GeneratePropertyPayloads,The following statement contains a magic number: yield return propertyPayload.InEntity(15' 15);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GeneratePropertyPayloads,The following statement contains a magic number: yield return propertyPayload.InEntity(15' 15);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GeneratePropertyPayloads,The following statement contains a magic number: yield return propertyPayload.InComplexValue().InCollection(3' 3).InProperty();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GeneratePropertyPayloads,The following statement contains a magic number: yield return propertyPayload.InComplexValue().InCollection(3' 3).InProperty();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GeneratePropertyPayloads,The following statement contains a magic number: yield return propertyPayload.InComplexValue().InCollection(1' 1).InProperty("InnerProperty").InComplexValue().InCollection(3' 3).InProperty();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GeneratePropertyPayloads,The following statement contains a magic number: yield return propertyPayload.InComplexValue().InCollection(1' 1).InProperty("InnerProperty").InComplexValue().InCollection(3' 3).InProperty();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The following statement contains a magic number: yield return entryPayload.InFeed(inlineCount: -2' elementsBefore: 1).FilterTopLevelFeed();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The following statement contains a magic number: yield return entryPayload.InFeed(inlineCount: 2' elementsAfter: 1).FilterTopLevelFeed();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The following statement contains a magic number: yield return entryPayload.InFeed(inlineCount: -3' elementsBefore: 1' elementsAfter: 1).FilterTopLevelFeed();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The following statement contains a magic number: yield return entryPayload.InFeed(inlineCount: 3' elementsBefore: 1' elementsAfter: 1).FilterTopLevelFeed();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The following statement contains a magic number: yield return entryPayload.InFeed(inlineCount: -2' nextLink: PayloadGenerator.NextLink' elementsBefore: 1).FilterTopLevelFeed();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The following statement contains a magic number: yield return entryPayload.InFeed(inlineCount: 2' nextLink: PayloadGenerator.NextLink' elementsAfter: 1).FilterTopLevelFeed();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The following statement contains a magic number: yield return entryPayload.InFeed(inlineCount: 2' nextLink: PayloadGenerator.NextLink' elementsBefore: 1' elementsAfter: 1).FilterTopLevelFeed();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The following statement contains a magic number: yield return entryPayload.InFeed(null' null' 2' 1).InEntryWithExpandedLink();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateEntryPayloads,The following statement contains a magic number: yield return entryPayload.InEntryWithNestedExpandedFeeds(nestingLevel: 7);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.InEntity(2' 2);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.InEntity(2' 2);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(true).InEntity(2' 2);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(true).InEntity(2' 2);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(true).InEntity(15' 15);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(true).InEntity(15' 15);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(false' 3).InEntity();
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(false' 3).InEntity(2' 2);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(false' 3).InEntity(2' 2);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(false' 3).InEntity(2' 2);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(false' 3).InEntity(15' 15);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(false' 3).InEntity(15' 15);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(false' 3).InEntity(15' 15);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(false' 3' "http://odata.org/nextlink").InEntity(2' 2);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(false' 3' "http://odata.org/nextlink").InEntity(2' 2);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNavigationPropertyPayloads,The following statement contains a magic number: yield return navPropertyPayload.ExpandNavigationProperty(false' 3' "http://odata.org/nextlink").InEntity(2' 2);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNamedStreamPayloads,The following statement contains a magic number: yield return streamReferencePayload.InEntity(2' 2);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNamedStreamPayloads,The following statement contains a magic number: yield return streamReferencePayload.InEntity(2' 2);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNamedStreamPayloads,The following statement contains a magic number: yield return streamReferencePayload.InEntity(15' 15);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GenerateNamedStreamPayloads,The following statement contains a magic number: yield return streamReferencePayload.InEntity(15' 15);
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,PayloadGenerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\PayloadGenerator.cs,GetValue,The following statement contains a magic number: switch (edmTypeReference.PrimitiveDefinition().PrimitiveKind)              {                  case EdmPrimitiveTypeKind.Binary:                      return new PrimitiveValue("Edm.Binary"' 45).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Boolean:                      return new PrimitiveValue("Edm.Boolean"' false).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Byte:                      return new PrimitiveValue("Edm.Byte"' (byte)1).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.DateTimeOffset:                      return new PrimitiveValue("Edm.DateTimeOffset"' new DateTimeOffset(new DateTime(2013' 10' 17)' new TimeSpan(0' 0' 3' 0))).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Decimal:                      return new PrimitiveValue("Edm.Decimal"' (decimal)4.3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Double:                      return new PrimitiveValue("Edm.Double"' (double)54.3333333333333).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Duration:                      return new PrimitiveValue("Edm.Duration"' new TimeSpan(1' 3' 0' 0)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geography:                      return new PrimitiveValue("Edm.Geography"' GeographyFactory.Point(5.3' 3.5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPoint:                      return new PrimitiveValue("Edm.GeographyPoint"' GeographyFactory.Point(3.5' 3.55555555).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyPolygon:                      return new PrimitiveValue("Edm.GeographyPolygon"' GeographyFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyCollection:                      return new PrimitiveValue("Edm.GeographyCollection"' GeographyFactory.Collection().Point(2' 3).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyLineString:                      return new PrimitiveValue("Edm.GeographyLineString"' GeographyFactory.LineString(5.3' 3.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiLineString:                      return new PrimitiveValue("Edm.GeographyMultiLineString"' GeographyFactory.MultiLineString().LineString(3' 4).LineString(5' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPoint:                      return new PrimitiveValue("Edm.GeographyMultiPoint"' GeographyFactory.MultiPoint().Point(3' 2).Point(6' 4).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeographyMultiPolygon:                      return new PrimitiveValue("Edm.GeographyMultiPolygon"' GeographyFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Geometry:                      return new PrimitiveValue("Edm.Geometry"' GeometryFactory.Point(-3' 4' 5' 6)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryCollection:                      return new PrimitiveValue("Edm.GeometryCollection"' GeometryFactory.Collection().Point(3' 2' 3' null).Point(3' 2' 10' null)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryLineString:                      return new PrimitiveValue("Edm.GeometryLineString"' GeometryFactory.LineString(4.2' 12.3)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiLineString:                      return new PrimitiveValue("Edm.GeometryMultiLineString"' GeometryFactory.MultiLineString().LineString(3' 2).LineTo(3' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPoint:                      return new PrimitiveValue("Edm.GeometryMultiPoint"' GeometryFactory.MultiPoint().Point(3' 2).Point(4.3' 3.9).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryMultiPolygon:                      return new PrimitiveValue("Edm.GeometryMultiPolygon"' GeometryFactory.MultiPolygon().Polygon().Ring(65' 23).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPoint:                      return new PrimitiveValue("Edm.GeometryPoint"' GeometryFactory.Point(-2.3' 3.9)).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.GeometryPolygon:                      return new PrimitiveValue("Edm.GeometryPolygon"' GeometryFactory.Polygon().Ring(3' 4).Ring(4' 5).Build()).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Guid:                      return new PrimitiveValue("Edm.Guid"' new Guid("00005259-2341-5431-5432-234234234234")).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int16:                      return new PrimitiveValue("Edm.Int16"' (Int16)6).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int32:                      return new PrimitiveValue("Edm.Int32"' 12).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Int64:                      return new PrimitiveValue("Edm.Int64"' (Int64)18).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.SByte:                      return new PrimitiveValue("Edm.SByte"' (sbyte)-3).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Single:                      return new PrimitiveValue("Edm.Single"' (Single)5.4).WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.Stream:                      return new PrimitiveValue("Edm.Stream"' "232312").WithTypeAnnotation(edmTypeReference);                  case EdmPrimitiveTypeKind.String:                      return new PrimitiveValue("Edm.String"' "Hello").WithTypeAnnotation(edmTypeReference);                  default:                      throw new NotSupportedException("Primitive type kind not supported' please add new type kind.");              }
Magic Number,Microsoft.Test.OData.Utils.Metadata,TestModels,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\TestModels.cs,BuildModelWithFunctionImport,The following statement contains a magic number: enumType1.AddMember(new EdmEnumMember(enumType1' "enumType1_value1"' new EdmEnumMemberValue(6)));
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: people = new List<Person>()                  {                      new Customer()                      {                           FirstName = "Bob"'                           LastName = "Cat"'                           Numbers = new Collection<string>{"111-111-1111"}'                           PersonID = 1'                           Birthday = new DateTime(1957' 4' 3)'                           City = "London"'                           Home = GeographyPoint.Create(32.1' 23.1)                      }'                      new Customer()                      {                           FirstName = "Jill"'                           LastName = "Jones"'                           Numbers = new Collection<string>{}'                           PersonID = 2'                           Birthday = new DateTime(1983' 1' 15)'                           City = "Sydney"'                           Home = GeographyPoint.Create(15.0' 161.8)                      }'                      new Employee()                      {                           FirstName = "Jacob"'                           LastName = "Zip"'                           Numbers = new Collection<string>{"333-333-3333"}'                           PersonID = 3'                           DateHired = new DateTime(2010' 12' 13)'                           Home = GeographyPoint.Create(15.0' 161.8)'                           Office = GeographyPoint.Create(15.0' 162)                      }'                      new Employee()                      {                           FirstName = "Elmo"'                           LastName = "Rogers"'                           Numbers = new Collection<string>{"444-444-4444"' "555-555-5555"' "666-666-6666"}'                           PersonID = 4'                           DateHired = new DateTime(2008' 3' 27)'                           Home = GeographyPoint.Create(-15.0' -61.8)'                           Office = GeographyPoint.Create(-15.0' -62)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: products = new List<Product>()                  {                      new Product()                      {                           Name = "Cheetos"'                           ProductID = 5'                           QuantityInStock = 100'                           QuantityPerUnit = "100g Bag"'                           UnitPrice = 3.24f'                            Discontinued = true                      }'                      new Product()                      {                           Name = "Mushrooms"'                           ProductID = 6'                           QuantityInStock = 100'                           QuantityPerUnit = "Pound"'                           UnitPrice = 3.24f'                           Discontinued = false                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: products = new List<Product>()                  {                      new Product()                      {                           Name = "Cheetos"'                           ProductID = 5'                           QuantityInStock = 100'                           QuantityPerUnit = "100g Bag"'                           UnitPrice = 3.24f'                            Discontinued = true                      }'                      new Product()                      {                           Name = "Mushrooms"'                           ProductID = 6'                           QuantityInStock = 100'                           QuantityPerUnit = "Pound"'                           UnitPrice = 3.24f'                           Discontinued = false                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: products = new List<Product>()                  {                      new Product()                      {                           Name = "Cheetos"'                           ProductID = 5'                           QuantityInStock = 100'                           QuantityPerUnit = "100g Bag"'                           UnitPrice = 3.24f'                            Discontinued = true                      }'                      new Product()                      {                           Name = "Mushrooms"'                           ProductID = 6'                           QuantityInStock = 100'                           QuantityPerUnit = "Pound"'                           UnitPrice = 3.24f'                           Discontinued = false                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: products = new List<Product>()                  {                      new Product()                      {                           Name = "Cheetos"'                           ProductID = 5'                           QuantityInStock = 100'                           QuantityPerUnit = "100g Bag"'                           UnitPrice = 3.24f'                            Discontinued = true                      }'                      new Product()                      {                           Name = "Mushrooms"'                           ProductID = 6'                           QuantityInStock = 100'                           QuantityPerUnit = "Pound"'                           UnitPrice = 3.24f'                           Discontinued = false                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: products = new List<Product>()                  {                      new Product()                      {                           Name = "Cheetos"'                           ProductID = 5'                           QuantityInStock = 100'                           QuantityPerUnit = "100g Bag"'                           UnitPrice = 3.24f'                            Discontinued = true                      }'                      new Product()                      {                           Name = "Mushrooms"'                           ProductID = 6'                           QuantityInStock = 100'                           QuantityPerUnit = "Pound"'                           UnitPrice = 3.24f'                           Discontinued = false                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: products = new List<Product>()                  {                      new Product()                      {                           Name = "Cheetos"'                           ProductID = 5'                           QuantityInStock = 100'                           QuantityPerUnit = "100g Bag"'                           UnitPrice = 3.24f'                            Discontinued = true                      }'                      new Product()                      {                           Name = "Mushrooms"'                           ProductID = 6'                           QuantityInStock = 100'                           QuantityPerUnit = "Pound"'                           UnitPrice = 3.24f'                           Discontinued = false                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orders = new List<Order>()                  {                      new Order()                      {                          OrderID = 7'                          CustomerForOrder = people.OfType<Customer>().ElementAt(1)'                          CustomerID = people.OfType<Customer>().ElementAt(1).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(0)'                          EmployeeID = people.OfType<Employee>().ElementAt(0).PersonID'                          OrderDate = new DateTime(2011' 5' 29' 14' 21' 12)                      }'                      new Order()                      {                          OrderID = 8'                          CustomerForOrder = people.OfType<Customer>().ElementAt(0)'                          CustomerID = people.OfType<Customer>().ElementAt(0).PersonID'                          LoggedInEmployee = people.OfType<Employee>().ElementAt(1)'                          EmployeeID = people.OfType<Employee>().ElementAt(1).PersonID'                          OrderDate = new DateTime(2011' 3' 4' 16' 3' 57)                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orderdetails = new List<OrderDetail>()                  {                      new OrderDetail()                      {                          OrderID = orders[0].OrderID'                          AssociatedOrder = orders[0]'                          ProductID = products[0].ProductID'                          ProductOrdered = products[0]'                          Quantity = 50'                          UnitPrice = products[0].UnitPrice                      }'                      new OrderDetail()                      {                          OrderID = orders[0].OrderID'                          AssociatedOrder = orders[0]'                          ProductID = products[1].ProductID'                          ProductOrdered = products[1]'                          Quantity = 2'                          UnitPrice = products[1].UnitPrice                      }'                      new OrderDetail()                      {                          OrderID = orders[1].OrderID'                          AssociatedOrder = orders[1]'                          ProductID = products[1].ProductID'                          ProductOrdered = products[1]'                          Quantity = 5'                          UnitPrice = products[1].UnitPrice                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orderdetails = new List<OrderDetail>()                  {                      new OrderDetail()                      {                          OrderID = orders[0].OrderID'                          AssociatedOrder = orders[0]'                          ProductID = products[0].ProductID'                          ProductOrdered = products[0]'                          Quantity = 50'                          UnitPrice = products[0].UnitPrice                      }'                      new OrderDetail()                      {                          OrderID = orders[0].OrderID'                          AssociatedOrder = orders[0]'                          ProductID = products[1].ProductID'                          ProductOrdered = products[1]'                          Quantity = 2'                          UnitPrice = products[1].UnitPrice                      }'                      new OrderDetail()                      {                          OrderID = orders[1].OrderID'                          AssociatedOrder = orders[1]'                          ProductID = products[1].ProductID'                          ProductOrdered = products[1]'                          Quantity = 5'                          UnitPrice = products[1].UnitPrice                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,InMemoryDataSource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\InMemoryDataSource.cs,EnsureDataSource,The following statement contains a magic number: orderdetails = new List<OrderDetail>()                  {                      new OrderDetail()                      {                          OrderID = orders[0].OrderID'                          AssociatedOrder = orders[0]'                          ProductID = products[0].ProductID'                          ProductOrdered = products[0]'                          Quantity = 50'                          UnitPrice = products[0].UnitPrice                      }'                      new OrderDetail()                      {                          OrderID = orders[0].OrderID'                          AssociatedOrder = orders[0]'                          ProductID = products[1].ProductID'                          ProductOrdered = products[1]'                          Quantity = 2'                          UnitPrice = products[1].UnitPrice                      }'                      new OrderDetail()                      {                          OrderID = orders[1].OrderID'                          AssociatedOrder = orders[1]'                          ProductID = products[1].ProductID'                          ProductOrdered = products[1]'                          Quantity = 5'                          UnitPrice = products[1].UnitPrice                      }                  };
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,TestFeeds,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestFeeds.cs,GetFeeds,The following statement contains a magic number: EntitySetInstance multipleEntity = PayloadBuilder.EntitySet().Append(instance.GenerateSimilarEntries(3)).WithTypeAnnotation(baseType);
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,TestFeeds,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestFeeds.cs,GetFeeds,The following statement contains a magic number: multipleEntityWithInlineCount.InlineCount = 3;
Magic Number,Microsoft.Test.OData.Utils.ODataLibTest,TestFeeds,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\ODataLibTest\TestFeeds.cs,GetFeeds,The following statement contains a magic number: multipleEntityWithNextLinkAndCount.InlineCount = 3;
Missing Default,Microsoft.Test.OData.Utils.Metadata,MetadataUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\TestUtils\Common\Microsoft.Test.OData.Utils\Metadata\MetadataUtils.cs,GetPrimitiveTypeReference,The following switch statement is missing a default case: switch (edmtypename)              {                  case EdmConstants.EdmBooleanTypeName:                      primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Boolean);                      break;                  case EdmConstants.EdmByteTypeName:                      primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Byte);                      break;                  case EdmConstants.EdmDecimalTypeName:                      primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Decimal);                      break;                  case EdmConstants.EdmDoubleTypeName:                      primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Double);                      break;                  case EdmConstants.EdmInt16TypeName:                      primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Int16);                      break;                  case EdmConstants.EdmInt32TypeName:                      primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Int32);                      break;                  case EdmConstants.EdmInt64TypeName:                      primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Int64);                      break;                  case EdmConstants.EdmSByteTypeName:                      primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.SByte);                      break;                  case EdmConstants.EdmStringTypeName:                      primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.String);                      break;                  case EdmConstants.EdmSingleTypeName:                      primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Single);                      break;                  case EdmConstants.EdmBinaryTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Binary);                          break;                  case EdmConstants.EdmStreamTypeName:                          nullable = false;                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Stream);                          break;                  case EdmConstants.EdmDateTimeOffsetTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.DateTimeOffset);                          break;                  case EdmConstants.EdmGuidTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Guid);                          break;                  case EdmConstants.EdmDurationTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Duration);                          break;                  case EdmConstants.EdmPointTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeographyPoint);                          break;                  case EdmConstants.EdmLineStringTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeographyLineString);                          break;                  case EdmConstants.EdmPolygonTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeographyPolygon);                          break;                  case EdmConstants.EdmMultiPointTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeographyMultiPoint);                          break;                  case EdmConstants.EdmMultiLineStringTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeographyMultiLineString);                          break;                  case EdmConstants.EdmMultiPolygonTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeographyMultiPolygon);                          break;                  case EdmConstants.EdmCollectionTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeographyCollection);                          break;                  case EdmConstants.EdmGeographyTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Geography);                          break;                  case EdmConstants.EdmGeometryPointTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeometryPoint);                          break;                  case EdmConstants.EdmGeometryLineStringTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeometryLineString);                          break;                  case EdmConstants.EdmGeometryPolygonTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeometryPolygon);                          break;                  case EdmConstants.EdmGeometryMultiPointTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeometryMultiPoint);                          break;                  case EdmConstants.EdmGeometryMultiLineStringTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeometryMultiLineString);                          break;                  case EdmConstants.EdmGeometryMultiPolygonTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeometryMultiPolygon);                          break;                  case EdmConstants.EdmGeometryCollectionTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.GeometryCollection);                          break;                  case EdmConstants.EdmGeometryTypeName:                          primitiveType = EdmCoreModel.Instance.GetPrimitiveType(EdmPrimitiveTypeKind.Geometry);                          break;              }
