Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Firewall,INetFwMgr,C:\repos\OData_odata.net\test\FunctionalTests\Tools\Commander.Common\Firewall.cs,IsPortAllowed,The method has 7 parameters. Parameters: imageFileName' ipVersion' portNumber' localAddress' ipProtocol' allowed' restricted
Long Parameter List,Firewall,INetFwMgr,C:\repos\OData_odata.net\test\FunctionalTests\Tools\Commander.Common\Firewall.cs,IsIcmpTypeAllowed,The method has 5 parameters. Parameters: ipVersion' localAddress' type' allowed' restricted
Magic Number,Commander,RemoteServer,C:\repos\OData_odata.net\test\FunctionalTests\Tools\Commander.Common\Common.cs,ExecuteFileASync,The following statement contains a magic number: if (started)              {                  p.WaitForInputIdle(2000);                  return p.Id;              }              else                  return -1;
Magic Number,Commander,ExecutableFile,C:\repos\OData_odata.net\test\FunctionalTests\Tools\Commander.Common\ExecuteFile.cs,Run,The following statement contains a magic number: using (Process process = new Process())              {                  process.StartInfo.FileName = _executablePath;                  process.StartInfo.Arguments = arguments;                  process.StartInfo.WorkingDirectory = this.WorkingDirectory;                  process.StartInfo.CreateNoWindow = true;                  process.StartInfo.UseShellExecute = false;                  process.StartInfo.RedirectStandardOutput = true;                  process.Start();                    ReadToEndDelegate readToEnd = new ReadToEndDelegate(process.StandardOutput.ReadToEnd);                  IAsyncResult readToEndResult = readToEnd.BeginInvoke(null' null);                    try                  {                      process.WaitForExit(_millisecondsToWait);                  }                  catch (System.ComponentModel.Win32Exception win32Exception)                  {                      throw new TimeoutException(                          String.Format("Process {0} failed to finish in less than {1} seconds.{2}Exception information:{2}{3}"'                              _executablePath'                              _millisecondsToWait / 1000'                              System.Environment.NewLine'                              win32Exception.Message));                  }                  catch (System.SystemException systemException)                  {                      throw new TimeoutException(                          String.Format("Process {0} failed to finish in less than {1} seconds.{2}Exception information:{2}{3}"'                              _executablePath'                              _millisecondsToWait / 1000'                              System.Environment.NewLine'                              systemException.Message));                  }                  string output = readToEnd.EndInvoke(readToEndResult);                  RemoteExecutableResults result = new RemoteExecutableResults();                  result.ExitCode = process.ExitCode;                  result.Output = output;                  return result;              }
Magic Number,Commander,ExecutableFile,C:\repos\OData_odata.net\test\FunctionalTests\Tools\Commander.Common\ExecuteFile.cs,Run,The following statement contains a magic number: using (Process process = new Process())              {                  process.StartInfo.FileName = _executablePath;                  process.StartInfo.Arguments = arguments;                  process.StartInfo.WorkingDirectory = this.WorkingDirectory;                  process.StartInfo.CreateNoWindow = true;                  process.StartInfo.UseShellExecute = false;                  process.StartInfo.RedirectStandardOutput = true;                  process.Start();                    ReadToEndDelegate readToEnd = new ReadToEndDelegate(process.StandardOutput.ReadToEnd);                  IAsyncResult readToEndResult = readToEnd.BeginInvoke(null' null);                    try                  {                      process.WaitForExit(_millisecondsToWait);                  }                  catch (System.ComponentModel.Win32Exception win32Exception)                  {                      throw new TimeoutException(                          String.Format("Process {0} failed to finish in less than {1} seconds.{2}Exception information:{2}{3}"'                              _executablePath'                              _millisecondsToWait / 1000'                              System.Environment.NewLine'                              win32Exception.Message));                  }                  catch (System.SystemException systemException)                  {                      throw new TimeoutException(                          String.Format("Process {0} failed to finish in less than {1} seconds.{2}Exception information:{2}{3}"'                              _executablePath'                              _millisecondsToWait / 1000'                              System.Environment.NewLine'                              systemException.Message));                  }                  string output = readToEnd.EndInvoke(readToEndResult);                  RemoteExecutableResults result = new RemoteExecutableResults();                  result.ExitCode = process.ExitCode;                  result.Output = output;                  return result;              }
