Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.OData.Service,DataServiceStaticConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceStaticConfiguration.cs,RegisterCallbacks,The method has 101 lines of code.
Long Method,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleDeleteOperation,The method has 102 lines of code.
Long Method,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The method has 131 lines of code.
Long Method,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The method has 218 lines of code.
Long Method,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchOperation,The method has 114 lines of code.
Long Method,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The method has 167 lines of code.
Long Method,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The method has 113 lines of code.
Long Method,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateComparison,The method has 105 lines of code.
Long Method,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,IsCompatibleWith,The method has 105 lines of code.
Long Method,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,PromoteExpression,The method has 114 lines of code.
Long Method,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,NextTokenImplementation,The method has 175 lines of code.
Long Method,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The method has 145 lines of code.
Long Method,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyProjections,The method has 138 lines of code.
Long Method,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The method has 133 lines of code.
Long Method,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The method has 199 lines of code.
Long Method,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,The method has 114 lines of code.
Long Method,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The method has 114 lines of code.
Complex Method,Microsoft.OData.Service,DataServiceStaticConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceStaticConfiguration.cs,RegisterCallbacks,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateFirstSegment,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateNextSegment,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service,LiteralFormatter,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Evaluation\LiteralFormatter.cs,FormatRawLiteral,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.OData.Service,DefaultLiteralFormatter,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Evaluation\LiteralFormatter.cs,FormatLiteralWithTypePrefix,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,SerializeResponseBody,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CheckConfigurationConsistency,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service,HttpContextServiceHost,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\HttpContextServiceHost.cs,VerifyQueryParameters,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,SelectRequiredMimeType,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadQuotedParameterValue,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Service,MediaType,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,SelectEncoding,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,DetermineResponsePayloadKind,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ApplyProjectionsToExpandTree,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForServiceOperation,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForSegments,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateComparison,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateFunctionCall,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateLambda,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,CompareConversions,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,PromoteExpression,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,MakeBestGuessOnNoSuffixStr,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Service.Providers,ServiceOperationProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceOperationProvider.cs,GetServiceOperationForMethod,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service.Providers,MetadataProviderEdmEntitySet,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntitySet.cs,FindNavigationTarget,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,ConvertAttributeAnnotationValue,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service.Providers,ExpandedProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpandedProjectionNode.cs,ApplyWildcardsAndSort,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleOperations,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyProjections,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AssignTypeForExpected,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,PrepareProjectionBindingForResourceType,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetResourceAssociationSet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMetadata,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,GetResourceAssociationSet,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,PopulateMetadata,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildHierarchyForEntityType,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,PopulateMetadataForDerivedTypes,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.OData.Service.Providers,ResourceProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceProperty.cs,ValidatePropertyParameters,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,SetReadOnly,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,ValidateConstructorArguments,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,ShouldExpandSegment,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetNextPageQueryParametersForRootContainer,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,GetExpandedPropertyValue,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10;TProperty11>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,Cyclomatic complexity of the method is 13
Long Parameter List,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,GetMethod,The method has 5 parameters. Parameters: type' name' types' isPublic' isStatic
Long Parameter List,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,MessageWriterBuilder,The method has 5 parameters. Parameters: serviceUri' responseVersion' dataService' responseMessage' model
Long Parameter List,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,ForError,The method has 6 parameters. Parameters: serviceUri' dataService' responseVersion' responseMessage' acceptHeaderValue' acceptCharSetHeaderValue
Long Parameter List,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,ApplyCommonSettings,The method has 5 parameters. Parameters: writerSettings' serviceUri' responseVersion' dataService' responseMessage
Long Parameter List,Microsoft.OData.Service,BatchServiceHost,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\BatchServiceHost.cs,BatchServiceHost,The method has 5 parameters. Parameters: absoluteServiceUri' operationMessage' contentId' writer' odataMaxVersion
Long Parameter List,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateMessage,The method has 5 parameters. Parameters: version' action' contentType' writer' service
Long Parameter List,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteSingleElementResponse,The method has 6 parameters. Parameters: description' queryResults' parentResourceIndex' etagValue' dataService' responseMessage
Long Parameter List,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,BatchDataService,The method has 5 parameters. Parameters: dataService' messageReader' batchReader' batchResponseMessage' messageWriter
Long Parameter List,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchOperation,The method has 5 parameters. Parameters: operationRequestMessage' batchWriter' ignoreCUDOperations' changesetStarted' serviceOperationRequests
Long Parameter List,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleChangesetException,The method has 5 parameters. Parameters: exception' changesetOperationContexts' batchWriter' responseStream' defaultResponseVersion
Long Parameter List,Microsoft.OData.Service,DataServiceException,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceException.cs,DataServiceException,The method has 5 parameters. Parameters: statusCode' errorCode' message' messageXmlLang' innerException
Long Parameter List,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,ErrorHandler,The method has 5 parameters. Parameters: exception' verbose' responseVersion' acceptableContentTypes' requestAcceptCharsetHeader
Long Parameter List,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleBatchOperationError,The method has 7 parameters. Parameters: service' requestMessage' responseMessage' exception' batchWriter' responseStream' defaultResponseVersion
Long Parameter List,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleExceptionWhileWriting,The method has 7 parameters. Parameters: service' exception' responseMessage' messageWriter' encoding' responseStream' messageWriterBuilder
Long Parameter List,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The method has 6 parameters. Parameters: messageWriter' encoding' responseStream' args' error' messageWriterBuilder
Long Parameter List,Microsoft.OData.Service,ExpandSegment,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ExpandSegment.cs,ExpandSegment,The method has 7 parameters. Parameters: name' filter' maxResultsExpected' container' targetResourceType' expandedProperty' orderingInfo
Long Parameter List,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForProperty,The method has 5 parameters. Parameters: segment' previous' service' lastSegment' checkRights
Long Parameter List,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,GetETagValue,The method has 5 parameters. Parameters: resource' resourceType' etagProperties' service' getMethod
Long Parameter List,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,CompareAndGetETag,The method has 5 parameters. Parameters: parentEntityResource' parentEntityToken' container' service' writeResponseForGetMethods
Long Parameter List,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,GetPropertyValue,The method has 5 parameters. Parameters: provider' resource' resourceType' resourceProperty' propertyName
Long Parameter List,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_AuthorizationParameterNotAssignable,The method has 5 parameters. Parameters: p0' p1' p2' p3' p4
Long Parameter List,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,NodeToExpressionTranslator,The method has 7 parameters. Parameters: functionExpressionBinder' dataServiceBehavior' serviceInstance' nullPropagationRequired' implicitParameterExpression' verifyProtocolVersion' verifyRequestVersion
Long Parameter List,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,CreateForTests,The method has 7 parameters. Parameters: functionExpressionBinder' dataServiceBehavior' serviceInstance' nullPropagationRequired' implicitParameterExpression' verifyProtocolVersion' verifyRequestVersion
Long Parameter List,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctionDescription,The method has 5 parameters. Parameters: targetType' instance' method' name' parameterTypes
Long Parameter List,Microsoft.OData,ErrorUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\ErrorUtils.cs,WriteXmlError,The method has 5 parameters. Parameters: writer' code' message' innerError' maxInnerErrorDepth
Long Parameter List,Microsoft.OData,ErrorUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\ErrorUtils.cs,WriteXmlInnerError,The method has 5 parameters. Parameters: writer' innerError' innerErrorElementName' recursionDepth' maxInnerErrorDepth
Long Parameter List,Microsoft.OData.Service.Providers,EdmComplexTypeWithDelayLoadedProperties,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Metadata\EdmComplexTypeWithDelayLoadedProperties.cs,EdmComplexTypeWithDelayLoadedProperties,The method has 6 parameters. Parameters: namespaceName' name' baseType' isAbstract' isOpen' propertyLoadAction
Long Parameter List,Microsoft.OData.Service.Providers,EdmEntityTypeWithDelayLoadedProperties,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Metadata\EdmEntityTypeWithDelayLoadedProperties.cs,EdmEntityTypeWithDelayLoadedProperties,The method has 7 parameters. Parameters: namespaceName' name' baseType' isAbstract' isOpen' hasStream' propertyLoadAction
Long Parameter List,Microsoft.OData.Service.Providers,EdmEnumTypeWithDelayLoadedMembers,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Metadata\EdmEnumTypeWithDelayLoadedMembers.cs,EdmEnumTypeWithDelayLoadedMembers,The method has 5 parameters. Parameters: namespaceName' name' underlyingType' isFlags' memberLoadAction
Long Parameter List,Microsoft.OData.Service.Providers,ServiceOperation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceOperation.cs,ServiceOperation,The method has 6 parameters. Parameters: name' resultKind' resultType' resultSet' method' parameters
Long Parameter List,Microsoft.OData.Service.Providers,IDataServiceActionProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\IDataServiceActionProvider.cs,AdvertiseServiceAction,The method has 5 parameters. Parameters: operationContext' serviceAction' resourceInstance' resourceInstanceInFeed' actionToSerialize
Long Parameter List,Microsoft.OData.Service.Providers,MetadataProviderEdmComplexType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmComplexType.cs,MetadataProviderEdmComplexType,The method has 6 parameters. Parameters: namespaceName' resourceType' baseType' isAbstract' isOpen' propertyLoadAction
Long Parameter List,Microsoft.OData.Service.Providers,MetadataProviderEdmEntityType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntityType.cs,MetadataProviderEdmEntityType,The method has 7 parameters. Parameters: namespaceName' resourceType' baseType' isAbstract' isOpen' hasStream' propertyLoadAction
Long Parameter List,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,FixUpNavigationPropertyWithAssociationSetData,The method has 6 parameters. Parameters: navigationProperty' partner' isPrinciple' dependentProperties' deleteAction' opposingMultiplicity
Long Parameter List,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetStreamDescription,The method has 6 parameters. Parameters: entity' streamProperty' operationContext' etag' readStreamUri' contentType
Long Parameter List,Microsoft.OData.Service.Providers,ExpandedProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpandedProjectionNode.cs,ExpandedProjectionNode,The method has 10 parameters. Parameters: propertyName' property' targetResourceType' resourceSetWrapper' orderingInfo' filter' skipCount' takeCount' maxResultsExpected' selectExpandClause
Long Parameter List,Microsoft.OData.Service.Providers,IDataServiceStreamProvider2,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\IDataServiceStreamProvider2.cs,GetReadStream,The method has 5 parameters. Parameters: entity' streamProperty' etag' checkETagForEquality' operationContext
Long Parameter List,Microsoft.OData.Service.Providers,IDataServiceStreamProvider2,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\IDataServiceStreamProvider2.cs,GetWriteStream,The method has 5 parameters. Parameters: entity' streamProperty' etag' checkETagForEquality' operationContext
Long Parameter List,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,DataServiceProviderWrapper,The method has 5 parameters. Parameters: cacheItem' metadataProvider' queryProvider' dataService' isInternallyCreatedProvider
Long Parameter List,Microsoft.OData.Service.Providers,ResourceAssociationTypeEnd,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceAssociationTypeEnd.cs,ResourceAssociationTypeEnd,The method has 5 parameters. Parameters: name' resourceType' resourceProperty' multiplicity' deleteBehavior
Long Parameter List,Microsoft.OData.Service.Providers,RootProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\RootProjectionNode.cs,RootProjectionNode,The method has 9 parameters. Parameters: resourceSetWrapper' orderingInfo' filter' skipCount' takeCount' maxResultsExpected' expandPaths' baseResourceType' selectExpandClause
Long Parameter List,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,ResourceType,The method has 6 parameters. Parameters: instanceType' resourceTypeKind' baseType' namespaceName' name' isAbstract
Long Parameter List,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,ResourceType,The method has 5 parameters. Parameters: type' baseType' namespaceName' name' isAbstract
Long Parameter List,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,Operation,The method has 9 parameters. Parameters: name' resultKind' returnType' resultSet' resultSetPathExpression' method' parameters' operationParameterBindingKind' kind
Long Parameter List,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,ValidateConstructorArguments,The method has 7 parameters. Parameters: operationName' returnType' resultSet' resultSetPathExpression' method' operationParameterBindingKind' kind
Long Parameter List,Microsoft.OData.Service.Providers,ServiceAction,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceAction.cs,ServiceAction,The method has 5 parameters. Parameters: name' returnType' resultSet' operationParameterBindingKind' parameters
Long Parameter List,Microsoft.OData.Service.Providers,ServiceAction,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceAction.cs,ServiceAction,The method has 5 parameters. Parameters: name' returnType' operationParameterBindingKind' parameters' resultSetPathExpression
Long Parameter List,Microsoft.OData.Service.Providers,ServiceAction,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceAction.cs,ServiceAction,The method has 6 parameters. Parameters: name' returnType' resultSet' resultSetPathExpression' parameters' operationParameterBindingKind
Long Parameter List,Microsoft.OData.Service.Serializers,EntityToSerialize,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityToSerialize.cs,Create,The method has 5 parameters. Parameters: entity' resourceType' resourceSetWrapper' provider' absoluteServiceUri
Long Parameter List,Microsoft.OData.Service.Serializers,EntityToSerialize,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityToSerialize.cs,Create,The method has 7 parameters. Parameters: entity' resourceType' resourceSetName' includeTypeSegment' getPropertyValue' keySerializer' absoluteServiceUri
Long Parameter List,Microsoft.OData.Service.Serializers,LazySerializedEntityKey,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\LazySerializedEntityKey.cs,Create,The method has 6 parameters. Parameters: keySerializer' absoluteServiceUri' entitySetName' keyProperties' getPropertyValue' editLinkSuffix
Long Parameter List,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,OperationSerializer,The method has 6 parameters. Parameters: payloadMetadataParameterInterpreter' metadataPropertyManager' advertiseServiceAction' namespaceName' format' metadataUri
Long Parameter List,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,TrySerializeOperation,The method has 5 parameters. Parameters: entityToSerialize' resourceInstanceInFeed' entityHasMultipleActionsWithSameName' serviceOperationWrapper' odataAction
Long Parameter List,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,AskProviderIfActionShouldBeAdvertised,The method has 6 parameters. Parameters: entityToSerialize' resourceInstanceInFeed' serviceOperationWrapper' lazyActionTargetUri' entityHasMultipleActionsWithSameName' odataAction
Long Parameter List,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyNavigationProperty,The method has 5 parameters. Parameters: navigationLink' entityResourceSet' entityResourceType' navigationProperty' entityResource
Long Parameter List,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,ODataMessageReaderDeserializer,The method has 5 parameters. Parameters: update' dataService' tracker' requestDescription' enableODataServerBehavior
Long Parameter List,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetResourceToModify,The method has 6 parameters. Parameters: description' service' allowCrossReferencing' entityResource' entityContainer' checkETag
Long Parameter List,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,CreateMediaLinkEntry,The method has 5 parameters. Parameters: fullTypeName' requestStream' service' description' tracker
Long Parameter List,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetObjectFromSegmentInfo,The method has 5 parameters. Parameters: resourceType' segmentInfo' verifyETag' checkForNull' replaceResource
Long Parameter List,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetEntityResourceToModify,The method has 5 parameters. Parameters: description' service' allowCrossReferencing' entityContainer' entityResourceIndex
Long Parameter List,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,EntitySerializer,The method has 6 parameters. Parameters: requestDescription' absoluteServiceUri' service' httpETagHeaderValue' messageWriter' contentFormat
Long Parameter List,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteFeedElements,The method has 7 parameters. Parameters: expanded' elements' expectedType' title' getRelativeUri' getAbsoluteUri' topLevel
Long Identifier,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,,The length of the parameter PotentialDateTimeOffsetValidator is 32.
Long Identifier,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CheckConfigurationConsistency,The length of the parameter previouslyFoundContainerRights is 30.
Long Identifier,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The length of the parameter exceptionEncounteredInChangeset is 31.
Long Identifier,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,,The length of the parameter contentIdsToSegmentInfoMapping is 30.
Long Identifier,Microsoft.OData.Service,DataServiceConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceConfiguration.cs,,The length of the parameter rightsForUnspecifiedResourceContainer is 37.
Long Identifier,Microsoft.OData.Service,DataServiceConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceConfiguration.cs,,The length of the parameter rightsForUnspecifiedServiceOperation is 36.
Long Identifier,Microsoft.OData.Service,DataServiceConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceConfiguration.cs,,The length of the parameter rightsForUnspecifiedServiceAction is 33.
Long Identifier,Microsoft.OData.Service,DataServiceConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceConfiguration.cs,,The length of the parameter disableValidationOnMetadataWrite is 32.
Long Identifier,Microsoft.OData.Service,DataServiceConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceConfiguration.cs,,The length of the parameter accessEnabledForAllResourceTypes is 32.
Long Identifier,Microsoft.OData.Service,DataServiceProcessingPipeline,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceProcessingPipeline.cs,,The length of the parameter OnStartProcessingRequestInvokeCount is 35.
Long Identifier,Microsoft.OData.Service,DataServiceProcessingPipeline,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceProcessingPipeline.cs,,The length of the parameter ProcessingChangesetInvokeCount is 30.
Long Identifier,Microsoft.OData.Service,AstoriaRequestMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaRequestMessage.cs,,The length of the parameter requestAndServiceUrisAreReadOnly is 32.
Long Identifier,Microsoft.OData.Service,AstoriaRequestMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaRequestMessage.cs,,The length of the parameter requestVersionHeadersInitialized is 32.
Long Identifier,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,,The length of the parameter responseBodyOrETagShouldBeWritten is 33.
Long Identifier,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ApplySelectionForOperations,The length of the parameter metadataProviderEdmFunctionImport is 33.
Long Identifier,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,CheckAndApplyCustomPaging,The length of the parameter setContinuationTokenMethodInfo is 30.
Long Identifier,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,ResponseBodyWriter,The length of the parameter actualResponseMessageWhoseHeadersMayBeOverridden is 48.
Long Identifier,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,,The length of the parameter actualResponseMessageWhoseHeadersMayBeOverridden is 48.
Long Identifier,Microsoft.OData.Service,VersionUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\VersionUtil.cs,,The length of the parameter DataServiceDefaultResponseVersion is 33.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter ClrServiceInitializationMethodName is 34.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter HttpMultipartBoundaryBatchResponse is 34.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter HttpMultipartBoundaryChangesetResponse is 38.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter MimeApplicationJsonODataMinimalMetadata is 39.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter MimeApplicationJsonODataFullMetadata is 36.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter MimeApplicationJsonODataNoMetadata is 34.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter BatchRequestContentTransferEncoding is 35.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter AtomPublishingCollectionElementName is 35.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter AtomPublishingServiceElementName is 32.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter AtomPublishingWorkspaceDefaultValue is 35.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter AtomPublishingWorkspaceElementName is 34.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter AtomSelfRelationAttributeValue is 30.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter AtomEditRelationAttributeValue is 30.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter AtomEditMediaRelationAttributeValue is 35.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter AtomAlternateRelationAttributeValue is 35.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter AtomRelatedRelationAttributeValue is 33.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter AtomEnclosureRelationAttributeValue is 35.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter AtomDescribedByRelationAttributeValue is 37.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter AtomServiceRelationAttributeValue is 33.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter XmlErrorInternalExceptionElementName is 36.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter XmlBaseAttributeNameWithPrefix is 30.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter DataWebMediaResourceEditNamespace is 33.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter DataWebMetadataNamespacePrefix is 30.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter CsdlMaxLengthAttributeMaxValue is 30.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter DataWebAccessHasStreamAttribute is 31.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter DataWebAccessDefaultStreamPropertyValue is 39.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter ServiceOperationHttpMethodName is 30.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter EdmGeographyCollectionTypeName is 30.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter EdmGeometryMultiPolygonTypeName is 31.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter EdmGeometryMultiLineStringTypeName is 34.
Long Identifier,Microsoft.OData.Service,XmlConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Client\XmlConstants.cs,,The length of the parameter MicrosoftDataServicesRequestUri is 31.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter OpenNavigationPropertiesNotSupportedOnOpenTypes is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BaseServiceProvider_IEnumerableAlwaysMultiple is 45.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BaseServiceProvider_OverloadingNotSupported is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BaseServiceProvider_ParameterNotIn is 34.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BaseServiceProvider_ParameterTypeNotSupported is 45.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BaseServiceProvider_ServiceOperationMissingSingleEntitySet is 58.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BaseServiceProvider_UnsupportedReturnType is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BaseServiceProvider_UnknownResourceTypeInstance is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BasicExpandProvider_ExpandedPropertiesNotInitialized is 52.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BasicExpandProvider_ProjectedPropertiesNotInitialized is 53.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BasicExpandProvider_UnsupportedExpandBreadth is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BasicExpandProvider_SDP_UnsupportedOrderingExpressionBreadth is 60.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BasicExpandProvider_ExpandNotSupportedForOpenProperties is 55.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter CallbackQueryOptionHandler_UnsupportedContentType is 49.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter CallbackQueryOptionHandler_GetRequestsOnly is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceActionProviderWrapper_ServiceActionBindingParameterNull is 66.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceActionProviderWrapper_ResourceTypeMustBeAssignableToBindingParameterResourceType is 91.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceActionProviderWrapper_AdvertiseServiceActionCannotReturnNullActionToSerialize is 88.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_ResourceContainerNotReadonly is 55.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_ResourceTypeNotReadonly is 50.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_ServiceOperationNotReadonly is 54.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_ContainerNamespaceMustNotBeNullOrEmpty is 65.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_ContainerNameMustNotBeNullOrEmpty is 60.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_DataSourceTypeMustBeAssignableToContextType is 70.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_MultipleEntitySetsWithSameName is 57.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_MultipleResourceTypesWithSameName is 60.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_MultipleServiceOperationsWithSameName is 64.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_CollectionOfComplexTypeWithDerivedTypes is 66.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_InvalidQueryRootType is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_AnnotationsBuilderCannotReturnNullModels is 67.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_ActionHasNoBindableSet is 49.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderWrapper_ActionHasNoVisibleSetReachableFromPathExpression is 75.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceActionProviderWrapper_DuplicateAction is 48.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceProviderBehavior_ProviderBehaviorMustBeNonNull is 57.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ErrorHandler_ErrorWhileWritingError is 35.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ETagAttribute_MustSpecifyAtleastOnePropertyName is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ExpandSegment_FilterShouldBeLambda is 34.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ExpandSegment_FilterBodyShouldReturnBool is 40.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ExpandSegment_FilterBodyShouldTakeOneParameter is 46.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpContextServiceHost_AmbiguousItemName is 40.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpContextServiceHost_WebOperationContextCurrentMissing is 56.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpContextServiceHost_IncomingTemplateMatchFragment is 52.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpContextServiceHost_IncomingTemplateMatchQuery is 49.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpContextServiceHost_MalformedHeaderValue is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpContextServiceHost_XMethodIncorrectCount is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpContextServiceHost_XMethodIncorrectValue is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpContextServiceHost_XMethodNotUsingPost is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpContextServiceHost_QueryParameterMustBeSpecifiedOnce is 56.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpContextServiceHost_UnknownQueryParameter is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpContextServiceHost_IncomingMessagePropertyMustBeValidUriInstance is 68.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpProcessUtility_ContentTypeMissing is 37.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpProcessUtility_MediaTypeMissingValue is 40.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpProcessUtility_MediaTypeRequiresSemicolonBeforeParameter is 60.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpProcessUtility_MediaTypeRequiresSlash is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpProcessUtility_MediaTypeRequiresSubType is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpProcessUtility_MediaTypeUnspecified is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpProcessUtility_EncodingNotSupported is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpProcessUtility_EscapeCharWithoutQuotes is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpProcessUtility_EscapeCharAtEnd is 34.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter HttpProcessUtility_ClosingQuoteNotFound is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter IgnorePropertiesAttribute_PropertyNameCannotBeNullOrEmpty is 57.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter IgnorePropertiesAttribute_InvalidPropertyName is 45.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_DigitExpected is 32.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_DisallowMemberAccessForResourceSetReference is 62.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_ExpressionTypeMismatch is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_IdentifierExpected is 37.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_IncompatibleOperand is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_IncompatibleOperands is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_InvalidCharacter is 35.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_NoApplicableFunction is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_NotDoesNotSupportType is 40.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_NullOperatorUnsupported is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_OrderByDoesNotSupportType is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_SyntaxError is 30.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_UnknownFunction is 34.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_UnrecognizedLiteral is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_UnterminatedLiteral is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_UnterminatedStringLiteral is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequsetQueryParser_ExpectingLiteralInSkipToken is 46.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_AllWithoutAPredicateIsNotSupported is 53.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_SpatialNotSupported is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryParser_InvalidNumericString is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_IncorrectArgumentFormat is 45.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_QueryExpandOptionNotApplicable is 52.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_QueryFilterOptionNotApplicable is 52.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_FormatNotApplicable is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_QueryNoOptionsApplicable is 46.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_QuerySetOptionsNotApplicable is 50.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_QuerySelectOptionNotApplicable is 52.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_InvalidCountOptionError is 45.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_RequestVerbCannotCountError is 49.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_QueryCountWithSegmentCount is 48.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_PrimitivePropertyUsedAsNavigationProperty is 63.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_ComplexPropertyAsInnerSelectSegment is 57.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_CollectionPropertyAsInnerSelectSegment is 60.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_ProjectedPropertyWithoutMatchingExpand is 60.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_SkipTokenSupportedOnPagedSets is 51.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_SkipTokenNotAllowed is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_NamedStreamMustBeLastSegmentInSelect is 58.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_ServiceActionMustBeLastSegmentInSelect is 60.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_SelectAndExpandCannotBeSpecifiedTogether is 62.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_CannotSpecifyOpenPropertyAndDeclaredPropertyAtTheSameTime is 79.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier is 66.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_AbsoluteRequestUriCannotBeNull is 50.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_AbsoluteRequestUriMustBeAbsolute is 52.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_AbsoluteServiceUriCannotBeNull is 50.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_AbsoluteServiceUriMustBeAbsolute is 52.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_KeysMustBeNamed is 35.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_MethodNotAllowed is 36.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_PropertyNotFound is 36.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_ResourceNotFound is 36.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_SyntaxError is 31.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_EmptySegmentInRequestUrl is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_ValueSegmentAfterScalarPropertySegment is 58.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed is 71.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_CannotQueryCollections is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_MustBeLeafSegment is 37.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_LinkSegmentMustBeFollowedByEntitySegment is 60.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_CannotSpecifyAfterPostLinkSegment is 53.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_CountOnRoot is 31.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_CountNotSupported is 37.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_InvalidHttpMethodForNamedStream is 51.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_SegmentDoesNotSupportKeyPredicates is 54.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_InvalidTypeIdentifier_MustBeASubType is 56.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_InvalidTypeIdentifier_UnrelatedType is 55.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_TypeIdentifierCannotBeSpecifiedAfterTypeIdentifier is 70.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_UnbindableOperationsMustBeCalledAtRootLevel is 63.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_MissingBindingParameter is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_BindingParameterNotAssignableFromPreviousSegment is 68.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_BatchedActionOnEntityCreatedInSameChangeset is 63.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter RequestUriProcessor_ActionComposedWithWebInvokeServiceOperationNotAllowed is 73.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter PathParser_EntityReferenceNotSupported is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter PathParser_ServiceOperationsWithSameName is 40.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceContainer_ContainerMustBeAssociatedWithEntityType is 57.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceSetPathExpression_PathExpressionMustStartWithBindingParameterName is 73.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceSetPathExpression_PropertyNotFound is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceSetPathExpression_PropertyMustBeEntityType is 50.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceSetPathExpression_PathCannotEndWithTypeIdentifier is 57.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceSetPathExpression_EmptySegment is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_NoKeysInDerivedTypes is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_KeyPropertiesOnlyOnEntityTypes is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_ETagPropertiesOnlyOnEntityTypes is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_InvalidValueForResourceTypeKind is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_TypeCannotBeValueType is 34.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_MissingKeyPropertiesForEntity is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_NamedStreamsOnlyApplyToEntityType is 46.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_PropertyWithSameNameAlreadyExists is 46.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_ComplexTypeCannotBeOpen is 36.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_CollectionItemCanBeOnlyPrimitiveOrComplex is 54.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_CollectionItemCanBeOnlyEntity is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_InvalidResourceTypeKindInheritance is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceType_CollectionItemCannotBeStream is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceProperty_MimeTypeAttributeEmpty is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceProperty_MimeTypeAttributeOnNonPrimitive is 48.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceProperty_MimeTypeNotValid is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceProperty_PropertyKindAndResourceTypeKindMismatch is 56.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceProperty_KeyPropertiesCannotBeNullable is 46.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceProperty_NamedStreamCannotReflect is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceProperty_NamedStreamKindMustBeUsedAlone is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter Serializer_NullKeysAreNotSupported is 34.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter Serializer_UnsupportedTopLevelType is 34.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter Serializer_ETagValueDoesNotMatch is 32.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter Serializer_NoETagPropertiesForType is 34.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter Serializer_CollectionCanNotBeNull is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter Serializer_CollectionPropertyValueMustImplementIEnumerable is 58.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter Serializer_LoopsNotAllowedInComplexTypes is 40.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_MimeTypeNotValid is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_MimeTypeCannotBeEmpty is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_ResultTypeAndKindMustMatch is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_ResultSetMustBeNullForGivenResultType is 54.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_ResultSetMustBeNullForGivenReturnType is 54.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_ResultTypeAndResultSetMustMatch is 48.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_ReturnTypeAndResultSetMustMatch is 48.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_NotSupportedProtocolMethod is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_DuplicateParameterName is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_InvalidResultType is 34.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_InvalidReturnType is 34.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_ActionBindingMustBeEntityOrEntityCollection is 60.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_BindableOperationMustHaveAtLeastOneParameter is 61.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_MustBeBindableToUsePathExpression is 50.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_BindingParameterMustBeEntityToUsePathExpression is 64.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperation_NonBindingParametersCannotBeEntityorEntityCollection is 69.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter Opereration_BoundOperationsMustNotSpecifyEntitySetOnlyEntitySetPath is 67.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperationParameter_TypeNotSupported is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter Syndication_InvalidOpenPropertyType is 35.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter Syndication_InvalidOpenPropertyName is 35.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_MissingExtendedAttributeType is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_ResourceTypeNameNotExist is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_EntityTypeExpected is 32.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_ComplexTypeExpected is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_UnknownResourceTypeForClrType is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_PropertyNotDefinedOnType is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_PublicPropertyNotDefinedOnType is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_PropertyMustBeNavigationProperty is 46.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_IfNoneMatchHeaderNotSupportedInUpdateAndDelete is 60.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter OperationWrapper_OperationResourceSetNotVisible is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter OperationWrapper_TargetSetFromPathExpressionNotNotVisible is 57.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter OperationWrapper_PathExpressionRequiresBindingSet is 49.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ServiceOperationProvider_TypeIsAbstract is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_BatchExceedMaxBatchCount is 36.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_BatchExceedMaxChangeSetCount is 40.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_BatchResourceOnlySupportsPost is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_ChangeInterceptorIncorrectParameterCount is 52.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_ContextTypeIsAbstract is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_CreateDataSourceNull is 32.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_ExpandCountExceeded is 31.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_QueryInterceptorIncorrectParameterCount is 51.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_AttributeEntitySetNotFound is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_AuthorizationMethodNotVoid is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_AuthorizationMethodVoid is 35.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_AuthorizationParameterNotAssignable is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_AuthorizationParameterNotResourceAction is 51.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_AuthorizationReturnedNullQuery is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_AuthorizationReturnTypeNotAssignable is 48.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_NotImplementedException is 35.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_BothIfMatchAndIfNoneMatchHeaderSpecified is 52.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_ETagCannotBeSpecified is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_ETagSpecifiedForPost is 32.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_ETagSpecifiedForServiceAction is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_IfNoneMatchHeaderNotSupportedInDelete is 49.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_IfNoneMatchHeaderNotSupportedInPut is 46.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_ETagNotSupportedInUnbind is 36.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_CannotPerformOperationWithoutETag is 45.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_ContentIdMustBeAnInteger is 36.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_ContentIdMustBeUniqueInBatch is 40.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_OnlyGetOperationSupportedOnServiceUrl is 49.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_VersionCannotBeParsed is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_InvalidRequestVersion is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_RequestVersionMustBeLessThanMPV is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_CannotUpdateKeyProperties is 37.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_SDP_PageSizeWithMaxResultsPerCollection is 51.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_SDP_PageSizeMustbeNonNegative is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_SDP_SkipTokenNotMatchingOrdering is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_SDP_TopLevelPagedResultWithOldExpandProvider is 56.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_RegisterKnownTypeNotAllowedForIDSP is 46.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_Projections_ProjectionsWithOldExpandProvider is 56.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_IDataServiceQueryProviderNull is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_CannotUpdateSetReferenceLinks is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_DerivedExpansions_OldExpandProvider is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceAssociationSetEnd_ResourcePropertyMustBeNavigationPropertyOnResourceType is 80.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceAssociationSetEnd_ResourceTypeMustBeAssignableToResourceSet is 67.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceAssociationSetEnd_ResourceTypeMustBeTheDeclaringType is 60.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceAssociationSet_ResourcePropertyCannotBeBothNull is 55.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceAssociationSet_BidirectionalAssociationMustReturnSameResourceAssociationSetFromBothEnd is 94.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceAssociationSet_SelfReferencingAssociationCannotBeBiDirectional is 70.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ResourceAssociationSet_MultipleAssociationSetsForTheSameAssociationTypeMustNotReferToSameEndSets is 96.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter MetadataSerializer_NoResourceAssociationSetForNavigationProperty is 64.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter MetadataSerializer_AccessEnabledTypeNoLongerExists is 50.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter MetadataSerializer_ModelValidationErrors is 40.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceHost_EmptyHttpMethod is 31.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceHost_RequestHeadersCannotBeNull is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceHost_ResponseHeadersCannotBeNull is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceHost_FeatureRequiresIDataServiceHost2 is 48.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_InvalidStreamFromGetWriteStream is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataService_InvalidStreamFromGetReadStream is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceConfiguration_NoChangesAllowed is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceConfiguration_ResourceSetNameNotFound is 48.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceConfiguration_ResourceTypeNameNotFound is 49.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceConfiguration_ServiceNameNotFound is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceConfiguration_NotComplexType is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceConfiguration_CountNotAccepted is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceConfiguration_ProjectionsNotAccepted is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceConfiguration_ResponseVersionIsBiggerThanProtocolVersion is 67.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceException_GeneralError is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceException_UnsupportedMediaType is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceHost_MoreThanOneQueryParameterSpecifiedWithTheGivenName is 66.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_InvalidUriForPostOperation is 37.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_InvalidUriForPutOperation is 36.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_InvalidUriForPatchOperation is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_InvalidUriForDeleteOperation is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_InvalidUriForMediaResource is 37.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_CannotNullifyValueTypeProperty is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_QueryOptionsShouldNotBeSpecifiedForDeletingSingleEntityReference is 75.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_IdMustBeSpecifiedForDeletingCollectionOfEntityReference is 66.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter UpdatableWrapper_MissingIUpdatableForV1Provider is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter UpdatableWrapper_MissingUpdateProviderInterface is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter UpdatableWrapper_MustImplementDataServiceUpdateProvider2ToSupportServiceActions is 79.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter InvalidUri_OpenPropertiesCannotBeCollection is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter PropertyRequiresNonNegativeNumber is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceStreamProviderWrapper_MustImplementIDataServiceStreamProviderToSupportStreaming is 90.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceStreamProviderWrapper_MustImplementDataServiceStreamProvider2ToSupportNamedStreams is 93.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceStreamProviderWrapper_MustNotSetContentTypeAndEtag is 61.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceStreamProviderWrapper_GetStreamContentTypeReturnsEmptyOrNull is 71.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceStreamProviderWrapper_GetReadStreamUriMustReturnAbsoluteUriOrNull is 76.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceStreamProviderWrapper_GetStreamETagReturnedInvalidETagFormat is 71.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceStreamProviderWrapper_ResolveTypeMustReturnValidResourceTypeName is 75.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_DeepRecursion_General is 32.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_RequestUriDoesNotHaveTheRightBaseUri is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_RequestUriCannotBeBasedOnBaseUri is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter NoEmptyConstructorFoundForType is 30.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter CannotCreateInstancesOfAbstractType is 35.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_InvalidPropertyNameSpecified is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_DereferencingNullPropertyValue is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_CannotSetCollectionsToNull is 37.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_ValuesCanBeReturnedForPrimitiveTypesOnly is 51.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_InvalidUriSpecified is 30.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_DeepUpdateNotSupported is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_TypeInformationMustBeSpecifiedForInhertiance is 55.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_ResourceCanBeCrossReferencedOnlyForBindOperation is 59.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_CannotSetTopLevelResourceToNull is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_MissingUriForLinkOperation is 37.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_ErrorInSettingPropertyValue is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_PropertyValueCannotBeSet is 35.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_CannotUpdateRelatedEntitiesInPut is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_ExceedsMaxObjectCountOnInsert is 40.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_CollectionOfCollectionNotSupported is 45.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_CollectionTypeExpected is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_OpenCollectionProperty is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter CollectionCanOnlyBeEnumeratedOnce is 33.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequestStream_InvalidContent is 31.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_InvalidTypeSpecified is 31.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequestStream_MissingArrayMemberSeperator is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequestStream_InvalidKeyword is 31.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequestStream_MissingMemberName is 34.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequestStream_MissingMemberSeperator is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequestStream_MissingNameValueSeperator is 42.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequestStream_InvalidJsonNameSpecifiedOrExtraComma is 53.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequestStream_InvalidJsonUnrecognizedEscapeSequence is 54.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_CannotSpecifyValueOrChildElementsForNullElement is 58.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadRequest_LinkHrefMustReferToSingleResource is 44.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_DifferentContainerRights is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_HasStreamAttributeEmpty is 37.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_NavigationPropertyUnbound is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_UnableToLoadMetadataForType is 41.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_UnsupportedStreamProperty is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContext_PrimitiveTypeNotSupported is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ReflectionProvider_MultipleEntitySetsForSameType is 48.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ReflectionProvider_InvalidProperty is 34.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ReflectionProvider_EntityTypeHasKeyButNoEntitySet is 49.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ReflectionProvider_InvalidEntitySetProperty is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ReflectionProvider_EntityPropertyWithNoEntitySet is 48.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ReflectionProvider_KeyPropertiesCannotBeIgnored is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ReflectionProvider_ETagPropertyNameNotValid is 43.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ReflectionProvider_HasStreamAttributeOnlyAppliesToEntityType is 60.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ReflectionProvider_ComplexTypeWithNavigationProperty is 52.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ReflectionProvider_CollectionOfCollectionProperty is 49.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ReflectionProvider_CollectionOfUnsupportedTypeProperty is 54.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ReflectionProvider_ResourceTypeHasNoPublicallyVisibleProperties is 63.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter TargetElementTypeOfTheUriSpecifiedDoesNotMatchWithTheExpectedType is 65.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter ObjectContextServiceProvider_OSpaceTypeNotFound is 47.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadProvider_ResolveResourceReturnedNull is 39.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadProvider_CreateResourceReturnedNull is 38.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadProvider_ResetResourceReturnedNull is 37.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadProvider_InvalidTypeSpecified is 32.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadProvider_UnableToGetPropertyInfo is 35.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadProvider_UnsupportedAncestorType is 35.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadProvider_UnsupportedPropertyType is 35.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadProvider_InconsistentEntityOrComplexTypeUsage is 48.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadProvider_UnknownResourceSet is 30.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadProvider_UnknownResourceType is 31.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadProvider_ResourceTypeMustBeDeclaringTypeForProperty is 54.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter BadProvider_PropertyMustBeNavigationPropertyOnType is 50.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter AstoriaRequestMessage_CannotModifyRequestOrServiceUriAfterReadOnly is 66.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter AstoriaRequestMessage_CannotChangeQueryString is 45.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter DataServiceOperationContext_CannotModifyServiceUriInsideBatch is 61.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter MetadataProviderUtils_UnsupportedPrimitiveTypeKind is 50.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter MetadataProviderUtils_ConversionError is 37.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter MetadataProviderUtils_PropertiesMustNotContainReservedChars is 59.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter MetadataProviderEdmModel_UnsupportedSchemaTypeKind is 50.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter MetadataProviderEdmModel_UnsupportedResourceTypeKind is 52.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter MetadataProviderEdmModel_UnsupportedCollectionItemType_PrimitiveOrComplex is 73.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter MetadataProviderEdmModel_UnsupportedCollectionItemType_EntityPrimitiveOrComplex is 79.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter MetadataProviderEdmModel_UnsupportedResourcePropertyKind is 56.
Long Identifier,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,,The length of the parameter PlatformHelper_DateTimeOffsetMustContainTimeZone is 48.
Long Identifier,Microsoft.OData.Service.Parsing,ExpressionGenerator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionGenerator.cs,,The length of the parameter AreByteArraysNotEqualMethodInfo is 31.
Long Identifier,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,,The length of the parameter queryableOrderByDescendingMethodInfo is 36.
Long Identifier,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,,The length of the parameter queryableThenByDescendingMethodInfo is 35.
Long Identifier,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,,The length of the parameter enumerableSelectManyMethodInfo is 30.
Long Identifier,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,,The length of the parameter enumerableOrderByDescendingMethodInfo is 37.
Long Identifier,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,,The length of the parameter enumerableThenByDescendingMethodInfo is 36.
Long Identifier,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,,The length of the parameter enumerableAnyWithNoPredicateMethodInfo is 38.
Long Identifier,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,,The length of the parameter enumerableAnyWithPredicateMethodInfo is 36.
Long Identifier,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,,The length of the parameter AdditionalUnicodeCategoriesForIdentifier is 40.
Long Identifier,Microsoft.OData.Metadata,ODataMetadataConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\ODataMetadataConstants.cs,,The length of the parameter ODataInnerErrorMessageElementName is 33.
Long Identifier,Microsoft.OData.Metadata,ODataMetadataConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\ODataMetadataConstants.cs,,The length of the parameter ODataInnerErrorTypeElementName is 30.
Long Identifier,Microsoft.OData.Metadata,ODataMetadataConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\ODataMetadataConstants.cs,,The length of the parameter ODataInnerErrorStackTraceElementName is 36.
Long Identifier,Microsoft.OData.Metadata,ODataMetadataConstants,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\ODataMetadataConstants.cs,,The length of the parameter ODataInnerErrorInnerErrorElementName is 36.
Long Identifier,Microsoft.OData.Metadata,EdmLibraryExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\EdmLibraryExtensions.cs,ResolveOperationImports,The length of the parameter functionImportNameWithoutParameterTypes is 39.
Long Identifier,Microsoft.OData.Metadata,EdmLibraryExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\EdmLibraryExtensions.cs,ResolveOperationImports,The length of the parameter operationNameWithoutContainerOrNamespace is 40.
Long Identifier,Microsoft.OData,ErrorUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\ErrorUtils.cs,,The length of the parameter ODataErrorMessageDefaultLanguage is 32.
Long Identifier,Microsoft.OData.Service.Providers,SelectedOperationsCache,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\SelectedOperationsCache.cs,GetSelectedOperations,The length of the parameter selectedOperationsForPayloadType is 32.
Long Identifier,Microsoft.OData.Service.Providers,SelectedOperationsCache,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\SelectedOperationsCache.cs,,The length of the parameter selectedOperationsByPayloadType is 31.
Long Identifier,Microsoft.OData.Service.Providers,OpenTypeMethods,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\OpenTypes\OpenTypeMethods.cs,,The length of the parameter GetValueOpenPropertyMethodInfo is 30.
Long Identifier,Microsoft.OData.Service.Providers,OpenTypeMethods,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\OpenTypes\OpenTypeMethods.cs,,The length of the parameter GetCollectionValueOpenPropertyMethodInfo is 40.
Long Identifier,Microsoft.OData.Service.Providers,ServiceActionParameter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceActionParameter.cs,,The length of the parameter EmptyServiceActionParameterCollection is 37.
Long Identifier,Microsoft.OData.Service.Providers,OperationParameter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\OperationParameter.cs,,The length of the parameter EmptyOperationParameterCollection is 33.
Long Identifier,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,GetActionsBoundToAnyTypeInHierarchy,The length of the parameter allServiceActionsBoundToHierarchy is 33.
Long Identifier,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,,The length of the parameter EmptyServiceOperationWrapperEnumeration is 39.
Long Identifier,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,,The length of the parameter EmptyServiceOperationWrapperList is 32.
Long Identifier,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,,The length of the parameter serviceActionByResourceTypeCache is 32.
Long Identifier,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,,The length of the parameter serviceActionByResourceTypeHierarchyCache is 41.
Long Identifier,Microsoft.OData.Service.Providers,DataServiceExecutionProviderMethods,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceExecutionProviderMethods.cs,,The length of the parameter SetContinuationTokenMethodInfo is 30.
Long Identifier,Microsoft.OData.Service.Providers,DataServiceExecutionProviderMethods,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceExecutionProviderMethods.cs,,The length of the parameter CreateServiceActionInvokableMethodInfo is 38.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmEntityContainer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntityContainer.cs,MetadataProviderEdmEntityContainer,The length of the parameter entityContainerSchemaNamespace is 30.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmEntityContainer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntityContainer.cs,LazyLoadEntitySet,The length of the parameter resourceSetWithContainerQualifiedName is 37.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,FixUpNavigationPropertyWithAssociationSetData,The length of the parameter metadataProviderNavigationProperty is 34.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateSpatialTypeReference,The length of the parameter spatialReferenceIdentifierAnnotationValue is 41.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,,The length of the parameter PropertyNameIncludesReservedODataCharacters is 43.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,,The length of the parameter xmlWriterSettingsForElementAnnotations is 38.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,,The length of the parameter InvalidCharactersInPropertyNames is 32.
Long Identifier,Microsoft.OData.Service.Providers,DataServicePagingProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServicePagingProviderWrapper.cs,,The length of the parameter checkedForIDataServicePagingProvider is 36.
Long Identifier,Microsoft.OData.Service.Providers,DbEntityValidationExceptionAccessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DbContextHelper.cs,,The length of the parameter DbEntityValidationExceptionTypeName is 35.
Long Identifier,Microsoft.OData.Service.Providers,ExpandedProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpandedProjectionNode.cs,,The length of the parameter hasExpandedPropertyOnDerivedType is 32.
Long Identifier,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,,The length of the parameter IsResourceSetsCacheInitialized is 30.
Long Identifier,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,,The length of the parameter fullyQualifiedContainerNamePrefix is 33.
Long Identifier,Microsoft.OData.Service.Providers,ResourceSetWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetWrapper.cs,CheckHierarchy,The length of the parameter hasNavigationPropertyOrNamedStreamOnDerivedType is 47.
Long Identifier,Microsoft.OData.Service.Providers,ResourceSetWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetWrapper.cs,CheckHierarchy,The length of the parameter hasNavigationPropertyOnDerivedType is 34.
Long Identifier,Microsoft.OData.Service.Providers,ResourceSetWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetWrapper.cs,,The length of the parameter UseMetadataKeyOrderDictionaryKey is 32.
Long Identifier,Microsoft.OData.Service.Providers,ResourceSetWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetWrapper.cs,,The length of the parameter hasAccessibleNavigationProperty is 31.
Long Identifier,Microsoft.OData.Service.Providers,OperationWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\OperationWrapper.cs,,The length of the parameter actionTargetSegmentByResourceType is 33.
Long Identifier,Microsoft.OData.Service.Providers,BaseServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BaseServiceProvider.cs,,The length of the parameter metadataRequiresInitialization is 30.
Long Identifier,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyProjections,The length of the parameter foundMediaLinkEntryInHierarchy is 30.
Long Identifier,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetEntitySetName,The length of the parameter containedInDefaultEntityContainer is 33.
Long Identifier,Microsoft.OData.Service.Providers,ResourceProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceProperty.cs,,The length of the parameter canReflectOnInstanceTypeProperty is 32.
Long Identifier,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,,The length of the parameter propertyInfosDeclaredOnThisType is 31.
Long Identifier,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,,The length of the parameter propertiesDeclaredOnThisTypeLoadingHitPreviously is 48.
Long Identifier,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,,The length of the parameter propertiesLoadingHitPreviously is 30.
Long Identifier,Microsoft.OData.Service.Providers,ServiceOperationParameter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceOperationParameter.cs,,The length of the parameter EmptyServiceOperationParameterCollection is 40.
Long Identifier,Microsoft.OData.Service.Providers,PrimitiveResourceTypeMap,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\PrimitiveResourceTypeMap.cs,,The length of the parameter inheritablePrimitiveResourceTypes is 33.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,FindDeclaredBoundOperations,The length of the parameter getOperationWrappersBoundToType is 31.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,FindOperationByBindingParameterType,The length of the parameter nonBindingParameterNamesFromUri is 31.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,The length of the parameter navigationProperty1Multiplicity is 31.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,The length of the parameter navigationProperty2Multiplicity is 31.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,,The length of the parameter PrimitiveOrComplexCollectionTypeDefaultNullability is 50.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,,The length of the parameter PrimitiveOrComplexCollectionItemTypeDefaultNullability is 54.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,,The length of the parameter EntityPrimitiveOrComplexCollectionTypeDefaultNullability is 56.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,,The length of the parameter resourceTypesPerNamespaceCache is 30.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,,The length of the parameter primitiveOrComplexCollectionTypeCache is 37.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,,The length of the parameter entityPrimitiveOrComplexCollectionTypeCache is 43.
Long Identifier,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,,The length of the parameter operationWrapperOperationLookUp is 31.
Long Identifier,Microsoft.OData.Service.Serializers,OperationLinkBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationLinkBuilder.cs,BuildMetadataLink,The length of the parameter entityHasMultipleActionsWithSameName is 36.
Long Identifier,Microsoft.OData.Service.Serializers,OperationLinkBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationLinkBuilder.cs,BuildTargetLink,The length of the parameter entityHasMultipleActionsWithSameName is 36.
Long Identifier,Microsoft.OData.Service.Serializers,LazySerializedEntityKey,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\LazySerializedEntityKey.cs,,The length of the parameter lazyAbsoluteEditLinkWithoutSuffix is 33.
Long Identifier,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,,The length of the parameter metadataParameterValueForTypeNames is 34.
Long Identifier,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,OperationSerializer,The length of the parameter payloadMetadataParameterInterpreter is 35.
Long Identifier,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,TrySerializeOperation,The length of the parameter entityHasMultipleActionsWithSameName is 36.
Long Identifier,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,AskProviderIfActionShouldBeAdvertised,The length of the parameter entityHasMultipleActionsWithSameName is 36.
Long Identifier,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,,The length of the parameter payloadMetadataParameterInterpreter is 35.
Long Identifier,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the parameter parentNavigationLinkAnnotation is 30.
Long Identifier,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the parameter parentNavigationLinkAnnotation is 30.
Long Identifier,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the parameter parentNavigationLinkAnnotation is 30.
Long Identifier,Microsoft.OData.Service.Serializers,MetadataSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\MetadataSerializer.cs,,The length of the parameter additionalSchemaValidationRules is 31.
Long Identifier,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,,The length of the parameter payloadMetadataParameterInterpreter is 35.
Long Identifier,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,,The length of the parameter payloadMetadataPropertyManager is 30.
Long Identifier,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,,The length of the parameter currentSkipTokenForCustomPaging is 31.
Long Identifier,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetEntityProperties,The length of the parameter projectionNodesForCurrentResourceType is 37.
Long Identifier,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetProjectedEntityProperties,The length of the parameter projectionNodesForCurrentResourceType is 37.
Long Identifier,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteAllNestedComplexProperties,The length of the parameter projectionNodesForCurrentResourceType is 37.
Long Identifier,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteNavigationProperties,The length of the parameter projectionNodesForCurrentResourceType is 37.
Long Identifier,Microsoft.OData.Service.Configuration,DataServicesConfigurationConstants,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Configuration\DataServicesConfigurationConstants.cs,,The length of the parameter ReplaceFunctionFeatureElementName is 33.
Long Identifier,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,,The length of the parameter precreatedProjectedWrapperTypes is 31.
Long Identifier,Microsoft.OData.Service.Caching,ProviderMetadataCacheItem,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Caching\ProviderMetadataCacheItem.cs,,The length of the parameter targetResourcePropertiesCacheItems is 34.
Long Statement,Microsoft.OData.Service,EdmValueWriter,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueWriter.cs,DateTimeOffsetAsXml,The length of the statement  "            Debug.Assert(EdmValueParser.DayTimeDurationValidator.IsMatch(value)' "Edm.Duration values should not have year or month part"); " is 127.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,ConvertStringToDate,The length of the statement  "                throw new FormatException(string.Format(CultureInfo.InvariantCulture' "String '{0}' was not recognized as a valid Edm.Date."' text)); " is 133.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,ConvertStringToTimeOfDay,The length of the statement  "                throw new FormatException(string.Format(CultureInfo.InvariantCulture' "String '{0}' was not recognized as a valid Edm.TimeOfDay."' text)); " is 138.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,ValidateTimeZoneInformationInDateTimeOffsetString,The length of the statement  "            // If timezone is specified' the indicator will always be at the same place from the end of the string' so we can look there for the Z or +/-. " is 142.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,ValidateTimeZoneInformationInDateTimeOffsetString,The length of the statement  "            if (text.Length > timeZoneSignOffset && (text[text.Length - timeZoneSignOffset] == '-' || text[text.Length - timeZoneSignOffset] == '+')) " is 137.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,AddSecondsPaddingIfMissing,The length of the statement  "                (text.Length == indexOfColonBeforeSeconds || text.Length > indexOfColonBeforeSeconds && text[indexOfColonBeforeSeconds] != ':')) " is 128.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,GetPublicProperties,The length of the statement  "            // PORTABLELIB: The BindingFlags enum and all related reflection method overloads have been removed from PORTABLELIB. Instead of trying to provide " is 146.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,GetPublicProperties,The length of the statement  "            // a general purpose flags enum and methods that can take any combination of the flags' we provide more restrictive methods that " is 128.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,GetPublicProperties,The length of the statement  "            // TypeInfo.DeclaredProperties and Type.GetRuntimeProperties return both public and private properties' so need to filter out only public ones. " is 143.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,GetPublicProperties,The length of the statement  "            IEnumerable<PropertyInfo> properties = declaredOnly ? type.GetTypeInfo().DeclaredProperties : type.GetRuntimeProperties(); " is 122.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,GetNonPublicProperties,The length of the statement  "            // PORTABLELIB: The BindingFlags enum and all related reflection method overloads have been removed from PORTABLELIB. Instead of trying to provide " is 146.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,GetNonPublicProperties,The length of the statement  "            // a general purpose flags enum and methods that can take any combination of the flags' we provide more restrictive methods that " is 128.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,GetNonPublicProperties,The length of the statement  "            // TypeInfo.DeclaredProperties and Type.GetRuntimeProperties return both public and private properties' so need to filter out only public ones. " is 143.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,GetNonPublicProperties,The length of the statement  "            IEnumerable<PropertyInfo> properties = declaredOnly ? type.GetTypeInfo().DeclaredProperties : type.GetRuntimeProperties(); " is 122.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,GetMethod,The length of the statement  "            // WIN8: The BindingFlags enum and all related reflection method overloads have been removed from Win8. Instead of trying to provide " is 132.
Long Statement,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,GetMethod,The length of the statement  "            // a general purpose flags enum and methods that can take any combination of the flags' we provide more restrictive methods that " is 128.
Long Statement,Microsoft.OData.Service,ALinqExpressionVisitor,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ALinq\ALinqExpressionVisitor.cs,VisitConditional,The length of the statement  "                return Expression.Condition(test' iftrue' iffalse' iftrue.Type.IsAssignableFrom(iffalse.Type) ? iftrue.Type : iffalse.Type); " is 124.
Long Statement,Microsoft.OData.Service,ALinqExpressionVisitor,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ALinq\ALinqExpressionVisitor.cs,VisitNewArray,The length of the statement  "                return na.NodeType == ExpressionType.NewArrayInit ? Expression.NewArrayInit(na.Type.GetElementType()' exprs) : Expression.NewArrayBounds(na.Type.GetElementType()' exprs); " is 170.
Long Statement,Microsoft.OData.Service,CommonUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Common.cs,IsUnsupportedType,The length of the statement  "            Debug.Assert(!type.FullName.StartsWith("System.Tuple"' StringComparison.Ordinal)' "System.Tuple is not blocked by unsupported type check"); " is 139.
Long Statement,Microsoft.OData.Service,CommonUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Common.cs,GetCollectionItemTypeName,The length of the statement  "            // to be recognized as a collection wireTypeName must not be null' has to start with "Collection(" and end with ")" and must not be "Collection()" " is 146.
Long Statement,Microsoft.OData.Service,CommonUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Common.cs,GetCollectionItemTypeName,The length of the statement  "            if (typeName != null && typeName.StartsWith(XmlConstants.CollectionTypeQualifier + "("' StringComparison.Ordinal) && typeName[typeName.Length - 1] == ')' && typeName.Length != (XmlConstants.CollectionTypeQualifier + "()").Length) " is 229.
Long Statement,Microsoft.OData.Service,CommonUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Common.cs,GetCollectionItemTypeName,The length of the statement  "                string innerTypeName = typeName.Substring((XmlConstants.CollectionTypeQualifier + "(").Length' typeName.Length - (XmlConstants.CollectionTypeQualifier + "()").Length); " is 167.
Long Statement,Microsoft.OData.Service,CommonUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Common.cs,ConvertToODataVersion,The length of the statement  "            Debug.Assert(version.Major == 4 && (version.Minor == 0 || version.Minor == 1)' "Major version should be 4 and minor version should be 0 or 1"); " is 143.
Long Statement,Microsoft.OData.Service,CommonUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Common.cs,ParseJsonToPrimitiveValue,The length of the statement  "                Microsoft.OData.ODataUriUtils.ConvertFromUriLiteral(string.Format(CultureInfo.InvariantCulture' "[{0}]"' rawValue)' ODataVersion.V4); " is 133.
Long Statement,Microsoft.OData.Service,DataServiceStaticConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceStaticConfiguration.cs,CheckQueryInterceptorSignature,The length of the statement  "                throw new InvalidOperationException(Strings.DataService_QueryInterceptorIncorrectParameterCount(method.Name' dataServiceType.FullName' parameters.Length)); " is 155.
Long Statement,Microsoft.OData.Service,DataServiceStaticConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceStaticConfiguration.cs,CheckQueryInterceptorSignature,The length of the statement  "                throw new InvalidOperationException(Strings.DataService_AuthorizationMethodVoid(method.Name' dataServiceType.FullName' expectedReturnType)); " is 140.
Long Statement,Microsoft.OData.Service,DataServiceStaticConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceStaticConfiguration.cs,CheckQueryInterceptorSignature,The length of the statement  "                        Strings.DataService_AuthorizationReturnTypeNotAssignable(method.Name' dataServiceType.FullName' returnType.FullName' expectedReturnType.FullName)); " is 147.
Long Statement,Microsoft.OData.Service,DataServiceStaticConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceStaticConfiguration.cs,CheckParameterIsNotOut,The length of the statement  "                throw new InvalidOperationException(Strings.DataService_ParameterIsOut(method.DeclaringType.FullName' method.Name' parameter.Name)); " is 132.
Long Statement,Microsoft.OData.Service,DataServiceStaticConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceStaticConfiguration.cs,LoadConfigurationSettings,The length of the statement  "            this.DataServicesFeaturesSection = (DataServicesFeaturesSection)ConfigurationManager.GetSection("wcfDataServices/features"); " is 124.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,ConvertPath,The length of the statement  "                            throw DataServiceException.CreateBadRequestError(Strings.RequestUriProcessor_SegmentDoesNotSupportKeyPredicates(previous.Identifier)); " is 134.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,ConvertPath,The length of the statement  "                // we need to copy the segment over (even if it was an escape marker) as decisions will be made about it the next time through the loop. " is 136.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateSegmentForServiceOperation,The length of the statement  "                segment.SingleResult = (serviceOperation.ResultKind == ServiceOperationResultKind.QueryWithSingleResult || serviceOperation.ResultKind == ServiceOperationResultKind.DirectValue); " is 178.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,ThrowIfMustBeLeafSegment,The length of the statement  "            if (previous.TargetKind == RequestTargetKind.Batch || previous.TargetKind == RequestTargetKind.Metadata || previous.TargetKind == RequestTargetKind.PrimitiveValue || previous.TargetKind == RequestTargetKind.VoidOperation || previous.TargetKind == RequestTargetKind.OpenPropertyValue || previous.TargetKind == RequestTargetKind.MediaResource || previous.TargetKind == RequestTargetKind.Collection) " is 396.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CheckSegmentIsComposable,The length of the statement  "                // Enumerable and DirectValue results cannot be composed at all' and we don't allow we can't access properties in a single queryable complex either " is 147.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateCountSegment,The length of the statement  "            if ((previous.TargetKind != RequestTargetKind.Resource || previous.SingleResult) && previous.TargetKind != RequestTargetKind.Collection) " is 136.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateOpenPropertySegment,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.OpenNavigationPropertiesNotSupportedOnOpenTypes(segment.Identifier)); " is 126.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateNamedStreamSegment,The length of the statement  "            Debug.Assert(streamProperty.IsOfKind(ResourcePropertyKind.Stream)' "streamProperty.IsOfKind(ResourcePropertyKind.Stream)"); " is 123.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateFirstSegment,The length of the statement  "                Debug.Assert(serviceOperation.OperationImports.Count() == 1' "Operation import segment should only ever have exactly one operation. Was a change made to how MetadataProviderEdmModel finds actions/service operations"); " is 217.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateFirstSegment,The length of the statement  "                Debug.Assert(referencedSegmentInfo != null' "Could not find SegmentInfo for content-id: " + batchReferenceSegment.ContentId); " is 125.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateSegmentForServiceAction,The length of the statement  "            Debug.Assert(serviceAction != null && serviceAction.Kind == OperationKind.Action' "serviceAction != null && serviceAction.Kind == OperationKind.Action"); " is 153.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateSegmentForServiceAction,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.RequestUriProcessor_LinkSegmentMustBeFollowedByEntitySegment(serviceAction.Name' XmlConstants.UriLinkSegment)); " is 168.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateSegmentForServiceAction,The length of the statement  "                segment.TargetResourceSet = serviceAction.GetResultSet(this.providerWrapper' previousSegment == null ? null : previousSegment.TargetResourceSet); " is 145.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateSegmentForServiceAction,The length of the statement  "                Debug.Assert(serviceAction.ResultKind != ServiceOperationResultKind.QueryWithSingleResult' "QueryWithSingleResult is not applicable for Actions."); " is 147.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateNextSegment,The length of the statement  "                Debug.Assert(segmentInfo.TargetSource == RequestTargetSource.Property' "segment.TargetSource == RequestTargetSource.Property"); " is 127.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateNextSegment,The length of the statement  "                    Debug.Assert(segmentInfo.TargetSource == RequestTargetSource.Property' "segment.TargetSource == RequestTargetSource.Property"); " is 127.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateNextSegment,The length of the statement  "                Debug.Assert(segmentInfo.TargetSource == RequestTargetSource.Property' "segment.TargetSource == RequestTargetSource.Property"); " is 127.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateNextSegment,The length of the statement  "                Debug.Assert(actionSegment.Operations.Count() == 1' "Operation segment should only ever have exactly one operation. Was a change made to how MetadataProviderEdmModel finds actions/service operations"); " is 201.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateNextSegment,The length of the statement  "                Debug.Assert(segmentInfo.TargetSource == RequestTargetSource.ServiceOperation' "segment.TargetSource == RequestTargetSource.ServiceOperation"); " is 143.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreateNextSegment,The length of the statement  "            Debug.Assert(segmentInfo.TargetSource == RequestTargetSource.Property' "segment.TargetSource == RequestTargetSource.Property"); " is 127.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,TryCreateTypeNameSegment,The length of the statement  "            if (!targetResourceType.IsAssignableFrom(previousResourceType) && !previousResourceType.IsAssignableFrom(targetResourceType)) " is 125.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,TryCreateTypeNameSegment,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.RequestUriProcessor_InvalidTypeIdentifier_UnrelatedType(targetResourceType.FullName' previousResourceType.FullName)); " is 174.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,TryCreateTypeNameSegment,The length of the statement  "            // Since we allow derived navigation properties or named streams in V1/V2' the server will generate edit links and navigation links with type segment in it. " is 156.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,TryCreateTypeNameSegment,The length of the statement  "            // Hence we need to be able to process type segment in the request even when the server MPV is set to V1/V2. But we do not want to expose new functionality " is 155.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,TryCreateTypeNameSegment,The length of the statement  "            // like filtering collections based on type' etc on V1/V2 servers. Hence only checking for MPV to be v3 or greater if the previous segment is a collection " is 154.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreatePropertySegment,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.RequestUriProcessor_LinkSegmentMustBeFollowedByEntitySegment(segment.Identifier' XmlConstants.UriLinkSegment)); " is 168.
Long Statement,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,CreatePropertySegment,The length of the statement  "                    segment.TargetResourceSet = this.providerWrapper.GetResourceSet(previous.TargetResourceSet' previous.TargetResourceType' property); " is 131.
Long Statement,Microsoft.OData.Service,CallbackQueryOptionHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\CallbackQueryOptionHandler.cs,HandleCallbackQueryOption,The length of the statement  "                    throw new DataServiceException(400' Strings.CallbackQueryOptionHandler_UnsupportedContentType(format.Format.ToString())); " is 121.
Long Statement,Microsoft.OData.Service,ClientPreference,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ClientPreference.cs,InterpretClientPreference,The length of the statement  "            // If no responseBodyPreference given' we have default behavior of producing content for POST and not producing it for PUT/PATCH. " is 129.
Long Statement,Microsoft.OData.Service,ClientPreference,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ClientPreference.cs,InterpretClientPreference,The length of the statement  "            // If responseBodyPreference is given we honor the responseBodyPreference only if the request was for an entity and following conditions are true: " is 146.
Long Statement,Microsoft.OData.Service,ClientPreference,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ClientPreference.cs,InterpretClientPreference,The length of the statement  "            if (requestDescription.LinkUri || requestDescription.SegmentInfos[0].TargetSource == RequestTargetSource.ServiceOperation || requestDescription.RequestVersion < VersionUtil.Version4Dot0) " is 186.
Long Statement,Microsoft.OData.Service,ClientPreference,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ClientPreference.cs,InterpretClientPreference,The length of the statement  "            if ((verb.IsInsert()) || ((verb.IsUpdate()) && (requestDescription.TargetKind == RequestTargetKind.Resource || requestDescription.IsRequestForNonEntityProperty))) " is 162.
Long Statement,Microsoft.OData.Service,ClientPreference,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ClientPreference.cs,InterpretClientPreference,The length of the statement  "                    return requestMessage.PreferHeader().ReturnContent.Value ? ResponseBodyPreference.Content : ResponseBodyPreference.NoContent; " is 125.
Long Statement,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,ForNormalRequest,The length of the statement  "            Debug.Assert(dataService.OperationContext.RequestMessage != null' "dataService.OperationContext.RequestMessage != null"); " is 121.
Long Statement,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,ForNormalRequest,The length of the statement  "            MessageWriterBuilder messageWriterBuilder = new MessageWriterBuilder(serviceUri' responseVersion' dataService' responseMessage' model); " is 135.
Long Statement,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,ForNormalRequest,The length of the statement  "            // ODataLib doesn't allow custom MIME types on raw values (must be text/plain for non-binary' and application/octet for binary values). " is 135.
Long Statement,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,ForNormalRequest,The length of the statement  "            // To maintain existing V1/V2 behavior' work around this by setting the format as RawValue (we handle conneg ourself for this' so don't make ODL do its own)' " is 157.
Long Statement,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,ForNormalRequest,The length of the statement  "            // and then later manually override the content type header. Conneg is done by Astoria in DataService.CreateResponseBodyWriter. " is 127.
Long Statement,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,ForNormalRequest,The length of the statement  "            if (requestDescription.ResponsePayloadKind == ODataPayloadKind.Value && !string.IsNullOrEmpty(requestDescription.MimeType)) " is 123.
Long Statement,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,ForNormalRequest,The length of the statement  "                // ODataMessageWriter uses a different default in some cases depending on the media type' so we need to override that here. " is 123.
Long Statement,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,ForBatch,The length of the statement  "            Version responseVersion = VersionUtil.GetEffectiveMaxResponseVersion(dataService.OperationContext.RequestMessage.RequestMaxVersion' dataService.Configuration.DataServiceBehavior.MaxProtocolVersion.ToVersion()); " is 210.
Long Statement,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,ForBatch,The length of the statement  "            MessageWriterBuilder messageWriterBuilder = new MessageWriterBuilder(serviceUri' responseVersion' dataService' dataService.OperationContext.ResponseMessage' null /*model*/); " is 173.
Long Statement,Microsoft.OData.Service,MessageWriterBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\MessageWriterBuilder.cs,ForError,The length of the statement  "            MessageWriterBuilder messageWriterBuilder = new MessageWriterBuilder(serviceUri' responseVersion' dataService' responseMessage' null /*model*/); " is 144.
Long Statement,Microsoft.OData.Service,ODataMessageExtensionMethods,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataMessageExtensionMethods.cs,SetStream,The length of the statement  "                Debug.Assert(stream == null' "When we call SetStream' if we are in a batch operation' then the stream should be null."); " is 120.
Long Statement,Microsoft.OData.Service,QueryResultInfo,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\QueryResultInfo.cs,GetContinuationTokenFromPagingProvider,The length of the statement  "            return pagingProvider.PagingProviderInterface.GetContinuationToken(BasicExpandProvider.ExpandedEnumerator.UnwrapEnumerator(this.enumerator)); " is 141.
Long Statement,Microsoft.OData.Service,ResponseContentTypeNegotiator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseContentTypeNegotiator.cs,DetermineResponseFormat,The length of the statement  "                    throw new DataServiceException(415' null' Microsoft.OData.Service.Strings.DataServiceException_UnsupportedMediaType' null' exception); " is 134.
Long Statement,Microsoft.OData.Service,ExpandAndSelectParseResult,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ExpandAndSelectParseResult.cs,ValidateSelectIsAllowedForRequest,The length of the statement  "            // We only allow $select on entity/entityset queries. Queries which return a primitive/complex value don't support $select. " is 123.
Long Statement,Microsoft.OData.Service,ExpandAndSelectParseResult,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ExpandAndSelectParseResult.cs,ValidateSelectIsAllowedForRequest,The length of the statement  "            if (requestDescription.TargetResourceType == null || (requestDescription.TargetResourceType.ResourceTypeKind != ResourceTypeKind.EntityType)) " is 141.
Long Statement,Microsoft.OData.Service,ExpandAndSelectParseResult,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ExpandAndSelectParseResult.cs,HasSelectedItemAtAnyLevel,The length of the statement  "            return !clause.AllSelected || clause.SelectedItems.OfType<ExpandedNavigationSelectItem>().Any(i => HasSelectedItemAtAnyLevel(i.SelectAndExpand)); " is 145.
Long Statement,Microsoft.OData.Service,BatchServiceHost,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\BatchServiceHost.cs,ProcessException,The length of the statement  "            Debug.Assert(CommonUtil.IsCatchableExceptionType(args.Exception)' "CommonUtil.IsCatchableExceptionType(args.Exception)"); " is 121.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,GetResource,The length of the statement  "            Debug.Assert(description.SegmentInfos[segmentIndex].RequestExpression != null' "requestDescription.SegmentInfos[segmentIndex].RequestExpression != null"); " is 154.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,GetResource,The length of the statement  "            return Deserializer.GetResource(description.SegmentInfos[segmentIndex]' typeFullName' ((IDataService)this)' false /*checkForNull*/); " is 132.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,DisposeDataSource,The length of the statement  "            Debug.Assert(this.operationContext != null' "DisposeDataSource should get called only once per request. It looks like this method was already called."); " is 152.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessRequestForMessage,The length of the statement  "            // First check to see if there is a responseMessage already attached. An external caller might have already attached it. We honor that. " is 135.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessRequestForMessage,The length of the statement  "                Message result = CreateMessage(MessageVersion.None' string.Empty' this.operationContext.ResponseMessage.GetHeader(XmlConstants.HttpContentType)' writer' this); " is 159.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CheckETagValues,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.DataService_ETagValueNotValid(requestMessage.GetRequestIfMatchHeader())); " is 130.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CheckETagValues,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.DataService_ETagValueNotValid(requestMessage.GetRequestIfNoneMatchHeader())); " is 134.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ValidateRequest,The length of the statement  "            if (!String.IsNullOrEmpty(operationContext.RequestMessage.GetRequestIfMatchHeader()) && !String.IsNullOrEmpty(operationContext.RequestMessage.GetRequestIfNoneMatchHeader())) " is 173.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessIncomingRequest,The length of the statement  "            Debug.Assert(dataService.OperationContext.RequestMessage != null' "dataService.OperationContext.RequestMessage != null"); " is 121.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessIncomingRequest,The length of the statement  "                // For service operation and $count' rights are already checked in the RequestUriProcessor and hence we don't need to check here. " is 129.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessIncomingRequest,The length of the statement  "                if (description.LastSegmentInfo.Operation == null && lastSegmentContainer != null && description.LastSegmentInfo.Identifier != XmlConstants.UriCountSegment) " is 156.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessIncomingRequest,The length of the statement  "            Debug.Assert(description.ResponseVersion == newDescription.ResponseVersion' "description.ResponseVersion == newDescription.ResponseVersion"); " is 141.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,SerializeResponseBody,The length of the statement  "            Debug.Assert(dataService.OperationContext.RequestMessage != null' "dataService.OperationContext.RequestMessage != null"); " is 121.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,SerializeResponseBody,The length of the statement  "                if (!String.IsNullOrEmpty(requestMessage.GetRequestIfMatchHeader()) || !String.IsNullOrEmpty(requestMessage.GetRequestIfNoneMatchHeader())) " is 139.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,SerializeResponseBody,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.DataService_ETagCannotBeSpecified(requestMessage.AbsoluteRequestUri)); " is 127.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,SerializeResponseBody,The length of the statement  "                    (String.IsNullOrEmpty(requestMessage.GetRequestIfMatchHeader()) && String.IsNullOrEmpty(requestMessage.GetRequestIfNoneMatchHeader())) || description.TargetSource == RequestTargetSource.ServiceOperation' " is 203.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,SerializeResponseBody,The length of the statement  "                        if (description.TargetSource == RequestTargetSource.ServiceOperation && description.TargetKind == RequestTargetKind.Resource && description.IsETagHeaderAllowed) " is 160.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,SelectMediaResourceContentType,The length of the statement  "            string contentType = service.StreamProvider.GetStreamContentType(mediaLinkEntry' streamProperty' service.OperationContext); " is 123.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,SelectMediaResourceContentType,The length of the statement  "            Debug.Assert(streamProperty != null || !string.IsNullOrEmpty(contentType)' "contentType must not be null for default responseStream."); " is 135.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleServiceAction,The length of the statement  "            Debug.Assert(description.TargetSource == RequestTargetSource.ServiceOperation' "description.TargetSource == RequestTargetSource.ServiceOperation"); " is 147.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleServiceAction,The length of the statement  "            Debug.Assert(dataService.OperationContext.RequestMessage.HttpVerb == HttpVerbs.POST' "dataService.OperationContext.RequestMessage.HttpVerb == HttpVerbs.POST"); " is 159.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandlePostOperation,The length of the statement  "            if (!description.LinkUri && dataService.Provider.HasDerivedTypes(targetResourceType) && WebUtil.HasMediaLinkEntryInHierarchy(targetResourceType' dataService.Provider)) " is 167.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandlePostOperation,The length of the statement  "                Debug.Assert(description.LastSegmentInfo.TargetResourceSet != null' "description.LastSegmentInfo.TargetResourceSet != null"); " is 125.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandlePostOperation,The length of the statement  "                DataServiceConfiguration.CheckResourceRights(description.LastSegmentInfo.TargetResourceSet' EntitySetRights.WriteAppend); " is 121.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandlePostOperation,The length of the statement  "                entity = Deserializer.CreateMediaLinkEntry(targetResourceType.FullName' requestStream' dataService' description' tracker); " is 122.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandlePostOperation,The length of the statement  "                    Debug.Assert(description.Property.Kind == ResourcePropertyKind.ResourceSetReference' "Expecting POST resource set property"); " is 125.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandlePostOperation,The length of the statement  "                using (Deserializer deserializer = Deserializer.CreateDeserializer(description' dataService' false /*update*/' tracker)) " is 120.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandlePostOperation,The length of the statement  "            // With navigation property feature on derived type' we need to make sure the segmentInfo for the newly created entity contains the correct " is 139.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandlePostOperation,The length of the statement  "            // resource type as indicated in the payload.  So when the segment is referenced using contentId by another batch operation' " is 124.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandlePutOperation,The length of the statement  "            Debug.Assert(description.TargetSource != RequestTargetSource.ServiceOperation' "description.TargetSource != RequestTargetSource.ServiceOperation"); " is 147.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandlePutOperation,The length of the statement  "                throw DataServiceException.CreateMethodNotAllowed(Strings.DataService_CannotUpdateSetReferenceLinks' XmlConstants.HttpMethodDelete); " is 132.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandlePutOperation,The length of the statement  "            if (!String.IsNullOrEmpty(host.GetRequestIfNoneMatchHeader()) && description.TargetKind != RequestTargetKind.MediaResource) " is 123.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandlePutOperation,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.DataService_CannotUpdateKeyProperties(description.Property.Name)); " is 123.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleDeleteOperation,The length of the statement  "            Debug.Assert(description.TargetSource != RequestTargetSource.ServiceOperation' "description.TargetSource != RequestTargetSource.ServiceOperation"); " is 147.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleDeleteOperation,The length of the statement  "            Debug.Assert(dataService.OperationContext.RequestMessage != null' "dataService.OperationContext.RequestMessage != null"); " is 121.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleDeleteOperation,The length of the statement  "                Debug.Assert(description.LastSegmentInfo.TargetResourceSet != null' "description.LastSegmentInfo.TargetResourceSet != null"); " is 125.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleDeleteOperation,The length of the statement  "                Debug.Assert(description.TargetSource == RequestTargetSource.Property' "description.TargetSource == RequestTargetSource.Property"); " is 131.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleDeleteOperation,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.DataService_CannotUpdateKeyProperties(description.Property.Name)); " is 123.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleDeleteOperation,The length of the statement  "                object resource = Deserializer.GetResourceToModify(description' dataService' false /*allowCrossReference*/' out securityResource' out container' true /*checkETag*/); " is 165.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleDeleteOperation,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.OpenNavigationPropertiesNotSupportedOnOpenTypes(description.LastSegmentInfo.Identifier)); " is 146.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleDeleteOperation,The length of the statement  "                object resource = Deserializer.GetResourceToModify(description' dataService' false /*allowCrossReference*/' out securityResource' out container' true /*checkETag*/); " is 165.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "            Debug.Assert(dataService.OperationContext != null && dataService.OperationContext.RequestMessage != null' "dataService.OperationContext != null && dataService.OperationContext.RequestMessage != null"); " is 201.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "            // Because of breaking change' we decided not to fix this issue' and hence in batch cases' we cannot assert that one of the these " is 129.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                dataService.OperationContext.IsBatchRequest || String.IsNullOrEmpty(requestMessage.GetRequestIfMatchHeader()) || String.IsNullOrEmpty(requestMessage.GetRequestIfNoneMatchHeader())' " is 180.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                    Debug.Assert(parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count' "parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count"); " is 179.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                        Debug.Assert(String.IsNullOrEmpty(requestMessage.GetRequestIfMatchHeader()) && String.IsNullOrEmpty(requestMessage.GetRequestIfNoneMatchHeader())' "ETag cannot be specified for $link requests"); " is 194.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                        return WriteSingleElementResponse(description' queryResults' parentResourceIndex' etagValue' dataService' responseMessage); " is 123.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                        etag = dataService.StreamProvider.GetStreamETag(actualEntity' description.StreamProperty' dataService.OperationContext); " is 120.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                    // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response " is 129.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                        Debug.Assert(dataService.OperationContext.ResponseStatusCode == 200' "Ensuring that status code is 200 for update requests"); " is 125.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                        return WriteSingleElementResponse(description' queryResults' description.GetIndexOfTargetEntityResource()' etag' dataService' responseMessage); " is 143.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                    EntityToSerialize entityToSerialize = EntityToSerialize.Create(actualEntity' resourceType' container' dataService.Provider' requestMessage.AbsoluteServiceUri); " is 159.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                    dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpResponseLocation' entityToSerialize.SerializedKey.AbsoluteEditLink.AbsoluteUri); " is 152.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                    // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response " is 129.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                        Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 201' "Ensuring that status code is 201 is for insert requests"); " is 136.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                        return WriteSingleElementResponse(description' queryResults' description.SegmentInfos.Count - 1' etagValue' dataService' responseMessage); " is 138.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The length of the statement  "                        dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpODataEntityId' UriUtil.UriToString(entityToSerialize.SerializedKey.Identity)); " is 150.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteSingleElementResponse,The length of the statement  "                // The queryResults parameter contains the enumerator of the parent resource. If the parent resource's RequestEnumerable is not " is 127.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteSingleElementResponse,The length of the statement  "                // Take MediaResource for example' the MLE is its parent resource' which is what we want to write out and we don't want to " is 122.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteSingleElementResponse,The length of the statement  "                        if (currentSegment.TargetKind == RequestTargetKind.PrimitiveValue || currentSegment.TargetKind == RequestTargetKind.OpenPropertyValue) " is 134.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteSingleElementResponse,The length of the statement  "                                Debug.Assert(parentSegment.TargetResourceType.IsAssignableFrom(openTypeParentResourceType)' "parentSegment.TargetResourceType.IsAssignableFrom(openTypeParentResourceType)"); " is 173.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteSingleElementResponse,The length of the statement  "                                resource = WebUtil.GetPropertyValue(dataService.Provider' resource' openTypeParentResourceType' null' currentSegment.Identifier); " is 129.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteSingleElementResponse,The length of the statement  "                            resource = WebUtil.GetPropertyValue(dataService.Provider' resource' parentSegment.TargetResourceType' currentSegment.ProjectedProperty' null); " is 142.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,GetContainerAndActualEntityInstance,The length of the statement  "            // For POST operations' we need to resolve the entity only after save changes. Hence we need to do this at the serialization " is 124.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,GetContainerAndActualEntityInstance,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.OpenNavigationPropertiesNotSupportedOnOpenTypes(description.LastSegmentInfo.Identifier)); " is 146.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleUnbindOperation,The length of the statement  "            if (!String.IsNullOrEmpty(dataService.OperationContext.RequestMessage.GetRequestIfMatchHeader()) || !String.IsNullOrEmpty(dataService.OperationContext.RequestMessage.GetRequestIfNoneMatchHeader())) " is 197.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleUnbindOperation,The length of the statement  "            object parentEntity = Deserializer.GetEntityResourceToModify(description' dataService' false /*allowCrossReferencing*/' out parentEntityResourceSet); " is 149.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleUnbindOperation,The length of the statement  "                Debug.Assert(description.Property.Kind == ResourcePropertyKind.ResourceSetReference' "expecting collection nav properties"); " is 124.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,VerifyAndInitializeRequest,The length of the statement  "            requestMessage.InitializeRequestVersionHeaders(service.Configuration.DataServiceBehavior.MaxProtocolVersion.ToVersion()); " is 121.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,VerifyAndInitializeRequest,The length of the statement  "            // Ideally the ValidateRequest method should also be called from here' so that this applies both for batch and non-batch requests. " is 130.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,VerifyAndInitializeRequest,The length of the statement  "            // But we did not use to call this method for inner batch requests in V1/V2. Hence doing it now will be a breaking change. " is 122.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateResponseBodyWriter,The length of the statement  "                Debug.Assert(resourceType != null' "resourceType != null' WebUtil.GetResourceType() should throw if it fails to resolve the resource type."); " is 141.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateResponseBodyWriter,The length of the statement  "                    string responseContentType = SelectMediaResourceContentType(element' service.OperationContext.RequestMessage.GetAcceptableContentTypes()' service' requestDescription); " is 167.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateResponseBodyWriter,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.BadRequest_InvalidUriForMediaResource(service.OperationContext.AbsoluteRequestUri)); " is 141.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateResponseBodyWriter,The length of the statement  "            else if (requestDescription.TargetKind == RequestTargetKind.OpenPropertyValue || requestDescription.TargetKind == RequestTargetKind.PrimitiveValue) " is 147.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateResponseBodyWriter,The length of the statement  "                Debug.Assert(resourceType != null' "resourceType != null' WebUtil.GetResourceType() should throw if it fails to resolve the resource type."); " is 141.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CheckConfigurationConsistency,The length of the statement  "            Dictionary<ResourceType' ResourceSet> typeRights = new Dictionary<ResourceType' ResourceSet>(ReferenceEqualityComparer<ResourceType>.Instance); " is 143.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleRequest,The length of the statement  "                // The DataServiceConfiguration may not have been initialized here. So' it is not possible to compute the response version based on MPV. " is 136.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchRequest,The length of the statement  "            Debug.Assert(this.operationContext != null && this.operationContext.RequestMessage != null' "this.operationContext != null && this.operationContext.RequestMessage != null"); " is 173.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchRequest,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.DataServiceException_GeneralError' odataException); " is 132.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchRequest,The length of the statement  "            BatchDataService batchDataService = new BatchDataService(this' messageReader' batchReader' responseMessage' messageWriter); " is 123.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,EnsureProviderAndConfigForRequest,The length of the statement  "                Debug.Assert(this.configuration != null' "this.configuration != null -- otherwise this.provider was asssigned with no configuration"); " is 134.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateMetadataAndQueryProviders,The length of the statement  "            //    i.   Create an instance of T by invoking DataService<T>.CreateDataSource (this method may be overridden by a service author)  " is 130.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateMetadataAndQueryProviders,The length of the statement  "            //    ii.  If T implements IDataServiceMetadataProvider then the service is using a custom data service provider (skip step iii. & iv.) " is 135.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateMetadataAndQueryProviders,The length of the statement  "            //    iii. If dataSourceInstance.GetType() == typeof(System.Data.Objects.ObjectContext) then the service will use the built-in IDSP implementation for EF  " is 153.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateMetadataAndQueryProviders,The length of the statement  "            //    iv.  If dataSourceInstance.GetType() != typeof(System.Data.Objects.ObjectContext) then the service will use the built-in reflection  " is 137.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateMetadataAndQueryProviders,The length of the statement  "            // Always try to get IDataServiceMetadataProvider2 and IDataServiceQueryProvider2 before IDataServiceMetadataProvider and IDataServiceQueryProvider. " is 148.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateProvider,The length of the statement  "            Debug.Assert(metadataProviderInstance != null && queryProviderInstance != null' "metadataProviderInstance and queryProviderInstance must not be null"); " is 151.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateProvider,The length of the statement  "                DataServiceStaticConfiguration staticConfiguration = new DataServiceStaticConfiguration(this.GetType()' metadataProviderInstance); " is 130.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateProvider,The length of the statement  "                // 1. We instantiated a provider on users's behalf meaning it is either EntityFramework or ReflectionDataServiceProvider. " is 121.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateProvider,The length of the statement  "                Debug.Assert(internalProvider != null' "IDataServiceInternalProvider is implemented by both Reflection and EntityFrameworkDataServiceProvider classes."); " is 153.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateProvider,The length of the statement  "                internalProvider.FinalizeMetadataModel(dynamicConfiguration.GetKnownTypes()' dynamicConfiguration.DataServiceBehavior.UseMetadataKeyOrderForBuiltInProviders); " is 158.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateProvider,The length of the statement  "                    DataServiceCacheItem cachedCacheItem = MetadataCache<DataServiceCacheItem>.AddCacheItem(dataServiceType' dataSourceInstance' cacheItem); " is 136.
Long Statement,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateProvider,The length of the statement  "            DataServiceCacheItem debugAssertCacheItem = MetadataCache<DataServiceCacheItem>.TryLookup(dataServiceType' dataSourceInstance); " is 127.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,GetSegmentForContentId,The length of the statement  "                        Debug.Assert(segmentInfo.TargetKind == RequestTargetKind.Resource' "segmentInfo.TargetKind == RequestTargetKind.Resource"); " is 123.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,GetSegmentForContentId,The length of the statement  "                        // With navigation property feature on derived type' the segmentInfo for $1 contains the correct resource type as indicated " is 123.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,GetResource,The length of the statement  "                                throw DataServiceException.CreateBadRequestError(Strings.BadRequest_DereferencingNullPropertyValue(description.SegmentInfos[i].Identifier)); " is 140.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,DisposeDataSource,The length of the statement  "                // And DataService<T>.DisposeDataSource() will always be called per request. We don't want to call this.dataService.DisposeDataService() here  " is 141.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The length of the statement  "                                exception = DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.DataServiceException_GeneralError' exception); " is 133.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The length of the statement  "                            // In V1/V2' we always just use to write the error payload if any exception occured during reading of the responseStream. " is 121.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The length of the statement  "                            ErrorHandler.HandleBatchOperationError(this' null' null' exception' batchWriter' responseStream' VersionUtil.GetEffectiveMaxResponseVersion(this.dataService.OperationContext.RequestMessage.RequestMaxVersion' this.dataService.Configuration.DataServiceBehavior.MaxProtocolVersion.ToVersion())); " is 292.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The length of the statement  "                                        this.WriteBatchOperationResponse(this.batchRequestDescription[i]' this.batchOperationContexts[i].RequestMessage.BatchServiceHost); " is 130.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The length of the statement  "                                    this.HandleBatchOperation(operationRequestMessage' batchWriter' exceptionEncounteredInChangeset != null' changesetStarted' ref serviceOperationRequests); " is 153.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The length of the statement  "                                    DataServiceProcessingPipelineEventArgs eventArg = new DataServiceProcessingPipelineEventArgs(this.dataService.OperationContext); " is 128.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The length of the statement  "                            Debug.Assert(this.batchReader.State != ODataBatchReaderState.Exception' "We should never get here with the batch reader in the Exception state."); " is 146.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The length of the statement  "                                // If the operation context for the current operation exists' use it to get the response version. If the responseMessage in the  " is 127.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The length of the statement  "                                this.HandleChangesetException(exception' this.batchOperationContexts' batchWriter' responseStream' VersionUtil.GetEffectiveMaxResponseVersion(this.dataService.OperationContext.RequestMessage.RequestMaxVersion' this.dataService.Configuration.DataServiceBehavior.MaxProtocolVersion.ToVersion())); " is 294.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The length of the statement  "                                    ErrorHandler.HandleBatchOperationError(this' requestMessage' responseMessage' exception' batchWriter' responseStream' VersionUtil.GetEffectiveMaxResponseVersion(this.dataService.OperationContext.RequestMessage.RequestMaxVersion' this.dataService.Configuration.DataServiceBehavior.MaxProtocolVersion.ToVersion())); " is 313.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchContent,The length of the statement  "                    // There is a wired behavior in WCF - if we read past the end of the request responseStream' the response responseStream will be closed. " is 136.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateBatchServiceHostFromOperationMessage,The length of the statement  "                Debug.Assert(dataService != null && dataService.GetType() != typeof(BatchDataService)' "dataService should not be of type BatchDataService."); " is 142.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateBatchServiceHostFromOperationMessage,The length of the statement  "                Debug.Assert(absoluteServiceUri != null && absoluteServiceUri.IsAbsoluteUri' "absoluteServiceUri != null && absoluteServiceUri.IsAbsoluteUri"); " is 143.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateBatchServiceHostFromOperationMessage,The length of the statement  "                    if (!Int32.TryParse(contentIdValue' System.Globalization.NumberStyles.Integer' System.Globalization.NumberFormatInfo.InvariantInfo' out contentId)) " is 147.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CreateOperationContextFromBatchServiceHost,The length of the statement  "                Debug.Assert(dataService != null && dataService.GetType() != typeof(BatchDataService)' "dataService should not be of type BatchDataService."); " is 142.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchOperation,The length of the statement  "                    DataServiceOperationContext currentOperationContext = CreateOperationContextFromBatchServiceHost(this.dataService' operationHost); " is 130.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchOperation,The length of the statement  "                            Debug.Assert(this.operationContext.RequestMessage.HttpVerb.IsQuery()' "this.operationContext.RequestMessage.HttpVerb should be a ReadOnly verb"); " is 145.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchOperation,The length of the statement  "                            RequestDescription description = RequestUriProcessor.ProcessRequestUri(this.operationContext.AbsoluteRequestUri' this' false /*internalQuery*/); " is 144.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchOperation,The length of the statement  "                            RequestDescription description = RequestUriProcessor.ProcessRequestUri(this.operationContext.AbsoluteRequestUri' this' false /*internalQuery*/); " is 144.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchOperation,The length of the statement  "                                            description.TargetKind == RequestTargetKind.Resource || description.TargetSource == RequestTargetSource.ServiceOperation' " is 121.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchOperation,The length of the statement  "                                            "The target must be a resource or source should be a service operation' since otherwise cross-referencing doesn't make sense"); " is 127.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchOperation,The length of the statement  "                    // Need to dispose the batch service host for the operation' this will dispose the request responseStream of the operation. " is 123.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleChangesetException,The length of the statement  "                    DataServiceOperationContext currentContext = changesetOperationContexts.Count == 0 ? null : changesetOperationContexts[changesetOperationContexts.Count - 1]; " is 157.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleChangesetException,The length of the statement  "                    ErrorHandler.HandleBatchOperationError(this' requestMessage' responseMessage' exception' batchWriter' responseStream' defaultResponseVersion); " is 142.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,IncreaseBatchCount,The length of the statement  "                    throw new DataServiceException(400' Strings.DataService_BatchExceedMaxBatchCount(this.dataService.Configuration.MaxBatchCount)); " is 128.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,IncreaseChangeSetCount,The length of the statement  "                    throw new DataServiceException(400' Strings.DataService_BatchExceedMaxChangeSetCount(this.dataService.Configuration.MaxChangesetCount)); " is 136.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,UpdateRequestEnumerableForPut,The length of the statement  "                Debug.Assert(this.batchRequestDescription[this.batchRequestDescription.Count - 1] == requestDescription' "The current request description must be the last one"); " is 161.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,UpdateRequestEnumerableForPut,The length of the statement  "                Debug.Assert(this.batchRequestDescription.Count == this.batchOperationContexts.Count' "RequestMessage and request description count must be the same"); " is 151.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteBatchOperationResponse,The length of the statement  "                    // Note that we don't replace the placeholder AstoriaResponseMessage on OperationContext until after the SerializeResponsebody call. " is 132.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteBatchOperationResponse,The length of the statement  "                    // This means we have two seperate instances of the response message floating around' and calls to set headers on this one " is 122.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteBatchOperationResponse,The length of the statement  "                    // will be overridden by calls to set headers on the operationContext.AstoriaResponseMessage when we call WebUtil.SetResponseHeadersForBatchRequests(). " is 151.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteBatchOperationResponse,The length of the statement  "                    // Ideally we would do "this.operationContext.ResponseMessage = message;" and copy headers over here' but this change is difficult " is 130.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteBatchOperationResponse,The length of the statement  "                    // because of how the public provider (Stream' Action...) access and potentially modify response headers during SerializeResponseBody. " is 134.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteBatchOperationResponse,The length of the statement  "                    // Basically' if we swap the ResponseMessage now' then the public hooks will have ODataBatchOperationResponseMessage instead of AstoriaResponseMessage " is 150.
Long Statement,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,WriteBatchOperationResponse,The length of the statement  "                    // and will not be able to successfully use the APIs on OperationContext to modify headers (and have the changes persist). " is 122.
Long Statement,Microsoft.OData.Service,DataServiceConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceConfiguration.cs,ComposeQueryInterceptors,The length of the statement  "                    throw new InvalidOperationException(Strings.DataService_AuthorizationReturnedNullQuery(methods[i].Name' methods[i].DeclaringType.FullName)); " is 140.
Long Statement,Microsoft.OData.Service,DataServiceConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceConfiguration.cs,ComposeResourceContainer,The length of the statement  "                        throw new InvalidOperationException(Strings.DataService_AuthorizationReturnedNullQuery(methods[i].Name' methods[i].DeclaringType.FullName)); " is 140.
Long Statement,Microsoft.OData.Service,DataServiceConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceConfiguration.cs,CheckServiceOperationRights,The length of the statement  "                ServiceOperationRights requiredRights = singleResult ? ServiceOperationRights.ReadSingle : ServiceOperationRights.ReadMultiple; " is 127.
Long Statement,Microsoft.OData.Service,DataServiceConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceConfiguration.cs,GetAllowedMethods,The length of the statement  "            Debug.Assert(index >= 0 && index < description.SegmentInfos.Count' "index >=0 && index <description.SegmentInfos.Count"); " is 121.
Long Statement,Microsoft.OData.Service,DataServiceConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceConfiguration.cs,InvokeStaticInitialization,The length of the statement  "                MethodInfo method = type.GetMethod(XmlConstants.ClrServiceInitializationMethodName' Flags' null' new Type[] { typeof(IDataServiceConfiguration) }' null) ?? " is 155.
Long Statement,Microsoft.OData.Service,DataServiceConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceConfiguration.cs,InvokeStaticInitialization,The length of the statement  "                                    type.GetMethod(XmlConstants.ClrServiceInitializationMethodName' Flags' null' new Type[] { typeof(DataServiceConfiguration) }' null); " is 132.
Long Statement,Microsoft.OData.Service,DataServiceConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceConfiguration.cs,InvokeStaticInitialization,The length of the statement  "                    Debug.Assert(method.Name == XmlConstants.ClrServiceInitializationMethodName' "Making sure that the method name is as expected"); " is 128.
Long Statement,Microsoft.OData.Service,DataServiceProcessingPipeline,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceProcessingPipeline.cs,AssertAndUpdateDebugStateAtInvokeServiceAction,The length of the statement  "                Debug.Assert(dataService.OperationContext.RequestMessage.HttpVerb.IsChange()' "HTTP verb should be one of the CUD verbs if we are invoking a Service Action"); " is 158.
Long Statement,Microsoft.OData.Service,DataServiceProcessingPipeline,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceProcessingPipeline.cs,InvokeProcessingChangeset,The length of the statement  "                // For CUD requests inside a batch' the previous InvokeProcessedChangeset() would have validated the following and reset them back to 0. " is 136.
Long Statement,Microsoft.OData.Service,DataServiceProcessingPipeline,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceProcessingPipeline.cs,InvokeProcessedChangeset,The length of the statement  "                    // Note that for POST ServiceOps' SaveChanges is not called for V1 providers that doesn't implement IUpdatable and for custom providers. " is 136.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleBatchOperationError,The length of the statement  "                WriteErrorWithFallbackForXml(messageWriter' handler.encoding' responseStream' handler.exceptionArgs' error' messageWriterBuilder); " is 130.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleBatchInStreamError,The length of the statement  "            AstoriaRequestMessage requestMessage = service.OperationContext == null ? null : service.OperationContext.RequestMessage; " is 121.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleBatchInStreamError,The length of the statement  "            ErrorHandler handler = CreateHandler(service' requestMessage' exception' VersionUtil.DataServiceDefaultResponseVersion); " is 120.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleBatchInStreamError,The length of the statement  "            // Note the OData protocol spec did not defined the behavior when an exception is encountered outside of a batch operation. " is 123.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleBatchInStreamError,The length of the statement  "            // Unfortunately the shipped behavior on the server is we serialize out an error payload in XML format. We need to keep the " is 123.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleBatchInStreamError,The length of the statement  "            // existing behavior. The batch client doesn't know how to deserialize an error payload outside of a batch operation however. " is 125.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleBeforeWritingException,The length of the statement  "            ErrorHandler handler = CreateHandler(service' requestMessage' exception' VersionUtil.DataServiceDefaultResponseVersion); " is 120.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleBeforeWritingException,The length of the statement  "            service.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpODataVersion' handler.responseVersion.ToString(2) + ";"); " is 125.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleBeforeWritingException,The length of the statement  "                       WriteErrorWithFallbackForXml(messageWriter' handler.encoding' stream' handler.exceptionArgs' error' messageWriterBuilder); " is 122.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleExceptionWhileWriting,The length of the statement  "            HandleExceptionArgs args = new HandleExceptionArgs(exception' true' contentType' service.Configuration.UseVerboseErrors); " is 121.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,CreateHandler,The length of the statement  "                    responseVersion = VersionUtil.GetResponseVersionForError(requestMessage.GetAcceptableContentTypes()' requestMessage.RequestMaxVersion' maxProtocolVersion); " is 155.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,CreateHandler,The length of the statement  "            return new ErrorHandler(exception' service.Configuration.UseVerboseErrors' responseVersion' acceptableContentTypes' requestAcceptCharsetHeader); " is 144.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "            Debug.Assert(args.ProcessExceptionWasCalled' "ProcessException was not called by the time we tried to serialze this error message with ODataLib."); " is 147.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // If the XmlWriter inside the ODataMessageWriter had entered Error state' ODataMessageWriter.WriteError would throw an InvalidOperationException " is 145.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // The right thing to do is we don't write any more because at this point we don't know what's been written to the underlying " is 125.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // stream. However we still should flush the writer to make sure that all the content that was written but is sitting in the buffers actually appears  " is 149.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // in the stream before writing the instream error. Otherwise the buffer will be flushed when disposing the writer later and we would end up with " is 145.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // either content written after the instream error (this would also result in having the Xml declaration in the middle of the payload - " is 135.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // [Astoria-ODataLib-Integration] In-stream errors due to XmlExceptions are written out backwards (error before partial valid payload)) or'  " is 139.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // hypothetically' the instream error in the middle of the other content that was already partially written. For example we can end up with a payload that  " is 154.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // looks like <element attr="val<m:error... The XmlReader would not be able to parse the error payload in this case. Disposing the writer will flush the buffer.  " is 160.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // It is fine to do it since the writer is not usable at this point anyways. Also note that the writer will be disposed more than once (e.g. in finally block " is 157.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // However since in the versions we shipped we always create a new XmlWriter to serialize the error payload when the existing " is 125.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // Yikes' ODataLib threw while writing the error. This tends to happen if the service author did something invalid during custom " is 128.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // error handling' such as add an custom instance annotation to the error payload. In this dire case' we treat it almost like  " is 125.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // an in-stream error' and abort the previous writing. We write out the new error. Note that this will produce an invalid payload like " is 134.
Long Statement,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,WriteErrorWithFallbackForXml,The length of the statement  "                    // if either an InvalidOperationException was encountered (see comment above) or the message writer was null' write the error out manually. " is 139.
Long Statement,Microsoft.OData.Service,HttpContextServiceHost,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\HttpContextServiceHost.cs,GetQueryStringItem,The length of the statement  "                            throw DataServiceException.CreateBadRequestError(Strings.HttpContextServiceHost_AmbiguousItemName(item' keyFound' key)); " is 120.
Long Statement,Microsoft.OData.Service,HttpContextServiceHost,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\HttpContextServiceHost.cs,GetQueryStringItem,The length of the statement  "            Debug.Assert(values != null && values.Length > 0' "values != null && values.Length > 0 - otherwise we should have returned already"); " is 133.
Long Statement,Microsoft.OData.Service,HttpContextServiceHost,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\HttpContextServiceHost.cs,VerifyQueryParameters,The length of the statement  "                                throw DataServiceException.CreateBadRequestError(Strings.HttpContextServiceHost_QueryParameterMustBeSpecifiedOnce(value)); " is 122.
Long Statement,Microsoft.OData.Service,HttpContextServiceHost,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\HttpContextServiceHost.cs,VerifyQueryParameters,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.HttpContextServiceHost_QueryParameterMustBeSpecifiedOnce(name)); " is 121.
Long Statement,Microsoft.OData.Service,HttpContextServiceHost,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\HttpContextServiceHost.cs,VerifyQueryParameters,The length of the statement  "                        throw DataServiceException.CreateBadRequestError(Strings.HttpContextServiceHost_QueryParameterMustBeSpecifiedOnce(name)); " is 121.
Long Statement,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,SelectRequiredMimeType,The length of the statement  "            Debug.Assert(exactContentType != null && exactContentType.Length != 0' "exactContentType != null && exactContentType.Length != 0"); " is 131.
Long Statement,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,IsResponseMediaTypeJsonLight,The length of the statement  "            return string.Equals(XmlConstants.MimeApplicationJsonODataMinimalMetadata' selectedMediaType' StringComparison.OrdinalIgnoreCase) " is 129.
Long Statement,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,IsResponseMediaTypeJsonLight,The length of the statement  "                || string.Equals(XmlConstants.MimeApplicationJsonODataFullMetadata' selectedMediaType' StringComparison.OrdinalIgnoreCase) " is 122.
Long Statement,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,IsResponseMediaTypeJsonLight,The length of the statement  "                || string.Equals(XmlConstants.MimeApplicationJsonODataNoMetadata' selectedMediaType' StringComparison.OrdinalIgnoreCase); " is 121.
Long Statement,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,IsResponseMediaTypeJsonLight,The length of the statement  "            Version effectiveMaxResponseVersion = VersionUtil.GetEffectiveMaxResponseVersion(dataService.Configuration.DataServiceBehavior.MaxProtocolVersion.ToVersion()' requestMessage.RequestMaxVersion); " is 193.
Long Statement,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,IsResponseMediaTypeJsonLight,The length of the statement  "            return IsResponseMediaTypeJsonLight(requestMessage.GetAcceptableContentTypes()' isEntryOrFeed' effectiveMaxResponseVersion); " is 124.
Long Statement,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,IsNotJson,The length of the statement  "            return responseContentType == null || !responseContentType.StartsWith(XmlConstants.MimeApplicationJson' StringComparison.OrdinalIgnoreCase); " is 140.
Long Statement,Microsoft.OData.Service,MediaType,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,GetMatchingParts,The length of the statement  "                                        if (String.Equals(this.GetParameterValue(XmlConstants.MimeODataParameterName)' candidate.GetParameterValue(XmlConstants.MimeODataParameterName)' StringComparison.OrdinalIgnoreCase)) " is 181.
Long Statement,Microsoft.OData.Service,IgnorePropertiesAttribute,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\IgnorePropertiesAttribute.cs,GetProperties,The length of the statement  "            IgnorePropertiesAttribute[] attributes = (IgnorePropertiesAttribute[])type.GetCustomAttributes(typeof(IgnorePropertiesAttribute)' inherit); " is 139.
Long Statement,Microsoft.OData.Service,IgnorePropertiesAttribute,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\IgnorePropertiesAttribute.cs,GetProperties,The length of the statement  "            Debug.Assert(attributes.Length == 0 || attributes.Length == 1' "There should be atmost one IgnoreProperties specified"); " is 120.
Long Statement,Microsoft.OData.Service,IgnorePropertiesAttribute,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\IgnorePropertiesAttribute.cs,GetProperties,The length of the statement  "                        throw new InvalidOperationException(Strings.IgnorePropertiesAttribute_InvalidPropertyName(propertyName' type.FullName)); " is 120.
Long Statement,Microsoft.OData.Service,AstoriaRequestMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaRequestMessage.cs,CacheHeaders,The length of the statement  "            Debug.Assert(this.requestVersion == null' "this.requestVersion was not null' implying that we called InitializeRequestVersionHeaders before CacheHeaders. We need our version logic to run AFTER the incoming headers get modified by the user."); " is 242.
Long Statement,Microsoft.OData.Service,AstoriaRequestMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaRequestMessage.cs,CacheHeaders,The length of the statement  "            Debug.Assert(this.RequestMaxVersion == null' "this.RequestMaxVersion was not null' implying that we called InitializeRequestVersionHeaders before CacheHeaders. We need our version logic to run AFTER the incoming headers get modified by the user."); " is 248.
Long Statement,Microsoft.OData.Service,AstoriaRequestMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaRequestMessage.cs,InitializeRequestVersionHeaders,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.DataService_RequestVersionMustBeLessThanMPV(this.RequestVersion' maxProtocolVersion)); " is 143.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,UpdatePayloadKindFromValueIfNeeded,The length of the statement  "                Debug.Assert(resourceType != null' "resourceType != null' WebUtil.GetResourceType() should throw if it fails to resolve the resource type."); " is 141.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,AnalyzeClientPreference,The length of the statement  "            Debug.Assert(this.SegmentInfos != null && this.SegmentInfos.Any()' "this.SegmentInfos != null && this.SegmentInfos.Count() > 0"); " is 129.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,AnalyzeClientPreference,The length of the statement  "                (this.RequestVersion < VersionUtil.Version4Dot0) || (this.serviceMaxProtocolVersion >= VersionUtil.Version4Dot0) /*logical implication*/' " is 137.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,AnalyzeClientPreference,The length of the statement  "                "If DSV >= 3' then MPV must also be >= 3 (checked in the host wrapper)' so there's no reason to check both of them later"); " is 123.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,AnalyzeClientPreference,The length of the statement  "            this.Preference = new ClientPreference(this' service.OperationContext.RequestMessage.HttpVerb' service.OperationContext.RequestMessage' this.effectiveMaxResponseVersion); " is 170.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,ApplyCountOption,The length of the statement  "            RequestQueryCountOption countOption = this.LastSegmentInfo.Identifier == XmlConstants.UriCountSegment ? RequestQueryCountOption.CountSegment : RequestQueryCountOption.None; " is 172.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,DetermineResponseFormat,The length of the statement  "                        this.ResponseFormat = contentTypeNegotiator.DetermineResponseFormat(payloadKind' acceptableMediaTypes' acceptableCharSets); " is 123.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,UpdateResponseVersionForPostMediaResource,The length of the statement  "            Debug.Assert(dataService != null && dataService.OperationContext.RequestMessage.HttpVerb == HttpVerbs.POST' "dataService != null && dataService.OperationContext.RequestMessage.AstoriaHttpVerb == AstoriaVerbs.POST"); " is 215.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,HandleCallbackQueryOption,The length of the statement  "            this.JsonPaddingFunctionName = CallbackQueryOptionHandler.HandleCallbackQueryOption(service.OperationContext.RequestMessage' this.ResponseFormat); " is 146.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,VerifyProtocolVersion,The length of the statement  "            VersionUtil.CheckMaxProtocolVersion(featureVersion' service.Configuration.DataServiceBehavior.MaxProtocolVersion.ToVersion()); " is 126.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,DetermineWhetherResponseBodyShouldBeWritten,The length of the statement  "                Debug.Assert(this.ShouldWriteResponseBodyOrETag' "Should only reach here if response body or ETag *might* be written."); " is 120.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,InitializeVersion,The length of the statement  "                this.effectiveMaxResponseVersion = VersionUtil.MatchToKnownVersion(VersionUtil.GetEffectiveMaxResponseVersion(this.serviceMaxProtocolVersion' this.requestMaxVersion)); " is 167.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,DetermineResponsePayloadKind,The length of the statement  "            Debug.Assert(this.TargetKind != RequestTargetKind.OpenPropertyValue' "this.TargetKind != RequestTargetKind.OpenPropertyValue"); " is 127.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,DetermineResponsePayloadKind,The length of the statement  "                Debug.Assert(resourceTypeKind == ResourceTypeKind.EntityCollection' "description.TargetResourceType.ResourceTypeKind == ResourceTypeKind.EntityCollection"); " is 156.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,DetermineResponsePayloadKind,The length of the statement  "            if (this.TargetKind == RequestTargetKind.Primitive || this.TargetKind == RequestTargetKind.ComplexObject || this.TargetKind == RequestTargetKind.Collection) " is 156.
Long Statement,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,DetermineResponsePayloadKind,The length of the statement  "                Debug.Assert(this.TargetSource == RequestTargetSource.ServiceOperation' "description.TargetSource == RequestTargetSource.ServiceOperation"); " is 140.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ProcessQuery,The length of the statement  "            if (description.RequestExpression == null || description.IsServiceActionRequest || !(typeof(IQueryable).IsAssignableFrom(description.RequestExpression.Type))) " is 158.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ApplyPathSelection,The length of the statement  "            if (edmProperty.PropertyKind == EdmPropertyKind.Navigation && this.service.Provider.GetResourceSet(currentNode.ResourceSetWrapper' targetResourceType' resourceProperty) == null) " is 177.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ApplyPathSelection,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.BadRequest_InvalidPropertyNameSpecified(resourceProperty.Name' targetResourceType.FullName)); " is 150.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GetTargetResourceTypeFromTypeSegments,The length of the statement  "                        throw DataServiceException.CreateBadRequestError(Strings.RequestUriProcessor_TypeIdentifierCannotBeSpecifiedAfterTypeIdentifier(targetResourceType.FullName' previousSegmentResourceType.FullName)); " is 196.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GetTargetResourceTypeFromTypeSegments,The length of the statement  "                        throw DataServiceException.CreateBadRequestError(Strings.RequestUriProcessor_InvalidTypeIdentifier_MustBeASubType(targetResourceType.FullName' previousSegmentResourceType.FullName)); " is 182.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ExtractExpandPathSegmentCollections,The length of the statement  "            foreach (ExpandedNavigationSelectItem expandItem in currentNode.SelectExpandClause.SelectedItems.OfType<ExpandedNavigationSelectItem>()) " is 136.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,CreateExpandSegment,The length of the statement  "            IEdmNavigationProperty navigationProperty = ((NavigationPropertySegment)expandItem.PathToNavigationProperty.LastSegment).NavigationProperty; " is 140.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,CreateExpandSegment,The length of the statement  "            currentResourceType = this.GetTargetResourceTypeFromTypeSegments(expandItem.PathToNavigationProperty' currentResourceType); " is 123.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,CreateExpandSegment,The length of the statement  "                return new ExpandSegment(property.Name' filter' targetResourceSet.PageSize' targetResourceSet' currentResourceType' property' internalOrderingInfo); " is 148.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,CreateExpandSegment,The length of the statement  "                // Expansion of collection could result in custom paging provider giving next link' so we need to set the null continuation token. " is 130.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,CreateExpandSegment,The length of the statement  "            return new ExpandSegment(property.Name' filter' this.service.Configuration.MaxResultsPerCollection' targetResourceSet' currentResourceType' property' null); " is 156.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ProcessExpand,The length of the statement  "            // However' the equivalent check in the URI parser checks based on the number of nodes in the tree. So' we need to keep this " is 124.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ProcessExpand,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.DataService_ExpandCountExceeded(actualExpandCount' this.service.Configuration.MaxExpandCount)); " is 152.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ApplyProjectionsToExpandTree,The length of the statement  "            Debug.Assert(currentNode.ResourceType == this.description.TargetResourceType' "The resource type of the root doesn't match the target type of the query."); " is 155.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ApplyProjectionsToExpandTree,The length of the statement  "                        throw DataServiceException.CreateBadRequestError(Strings.RequestQueryProcessor_ProjectedPropertyWithoutMatchingExpand(((NavigationPropertySegment)path.LastSegment).NavigationProperty.Name)); " is 190.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GenerateQueryResult,The length of the statement  "#pragma warning disable 618 // Disable "obsolete" warning for the IExpandProvider interface. Used for backwards compatibilty. " is 125.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GenerateQueryResult,The length of the statement  "                        Debug.Assert(!this.service.Provider.HasReflectionOrEFProviderQueryBehavior' "Reflection and EF Providers should implement the IProjectionProvider interface."); " is 159.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GenerateQueryResult,The length of the statement  "                        //   - the provider requires correct casting to "System.Object" when we assign a value to a property of type "System.Object" " is 124.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GenerateQueryResult,The length of the statement  "                        // A side effect of these assumptions is that if the provider just propagates the calls (with small modifications) to Linq to Objects " is 133.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GenerateQueryResult,The length of the statement  "                // Special case where although there were expand expressions' they were ignored because they did not refer to entity sets " is 121.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GenerateQueryResult,The length of the statement  "                if (!String.IsNullOrEmpty(this.service.OperationContext.RequestMessage.GetQueryStringItem(XmlConstants.HttpQueryStringExpand))) " is 127.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ProcessFilter,The length of the statement  "            if (this.description.TargetKind == RequestTargetKind.OpenProperty || this.description.TargetKind == RequestTargetKind.ComplexObject) " is 132.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ProcessFilter,The length of the statement  "                // Silently ignore the $filter' but don't fail because this used to be parsed (but not used) before URI parser integration. " is 123.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ProcessFilter,The length of the statement  "                // Some previously failing cases will now work' but its not worth parsing an expression that will not actually be applied. " is 122.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ProcessSkipToken,The length of the statement  "            String skipToken = this.service.OperationContext.RequestMessage.GetQueryStringItem(XmlConstants.HttpQueryStringSkipToken); " is 122.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ApplyStandardPaging,The length of the statement  "                // We should not process any $skiptoken query options if the top level entity set being queried doesn't have an entity set page size defined. " is 141.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ApplyStandardPaging,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.DataService_SDP_SkipTokenNotMatchingOrdering(skipTokenValues.Count' skipToken' this.topLevelOrderingInfo.OrderingExpressions.Count)); " is 190.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ApplyStandardPaging,The length of the statement  "                this.queryExpression = this.queryExpression.QueryableWhere(this.skipTokenExpressionBuilder.BuildSkipTokenFilter(this.topLevelOrderingInfo' skipTokenValues' this.description.TargetResourceType.InstanceType)); " is 207.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ObtainOrderingExpressions,The length of the statement  "            if (!string.IsNullOrEmpty(this.service.OperationContext.RequestMessage.GetQueryStringItem(XmlConstants.HttpQueryStringOrderBy))) " is 128.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ObtainOrderingExpressions,The length of the statement  "            // We need to generate ordering expression(when we don't have top level $orderby)' if either the result is paged' or we have " is 124.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ObtainOrderingExpressions,The length of the statement  "                    StringBuilder orderBy = string.IsNullOrEmpty(requestUri.Query) ? new StringBuilder(requestUri.AbsoluteUri + QuestionMark) : new StringBuilder(requestUri.AbsoluteUri + AndMark); " is 176.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ObtainOrderingExpressions,The length of the statement  "                    var uriParser = RequestUriProcessor.CreateUriParserWithBatchReferenceCallback(this.service' new Uri(orderBy.ToString())); " is 121.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ProjectSkipTokenForNonExpand,The length of the statement  "                MemberBinding[] skipTokenBindings = this.GetSkipTokenBindings(skipTokenWrapperType' skipTokenDescription.ToString()' expandParameter); " is 134.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ProjectSkipTokenForNonExpand,The length of the statement  "                resultWrapperBindings[1] = Expression.Bind(resultWrapperType.GetProperty("Description")' Expression.Constant(XmlConstants.HttpQueryStringSkipToken)); " is 149.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GetSkipTokenWrapperTypeAndDescription,The length of the statement  "                skipTokenDescription.Append(separator).Append(XmlConstants.SkipTokenPropertyPrefix + i.ToString(System.Globalization.CultureInfo.InvariantCulture)); " is 148.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GetSkipTokenBindings,The length of the statement  "            skipTokenBindings[1] = Expression.Bind(skipTokenWrapperType.GetProperty("Description")' Expression.Constant(skipTokenDescription.ToString())); " is 142.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GetSkipTokenBindings,The length of the statement  "                MemberInfo member = skipTokenWrapperType.GetProperty("ProjectedProperty" + i.ToString(System.Globalization.CultureInfo.InvariantCulture)); " is 138.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,CheckAndApplyCustomPaging,The length of the statement  "                // Call DataServiceProviderMethods.SetContinuationToken()' which in turn calls IDataServicePagingProvider.SetContinuationToken(). " is 129.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,CheckAndApplyCustomPaging,The length of the statement  "                // IDataServicePagingProvider.SetContinuationToken() returns void' if we call that here we would need to use the Block expression. " is 130.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,CheckAndApplyCustomPaging,The length of the statement  "                // DataServiceProviderMethods.SetContinuationToken() on the other hand returns IQueryable' which simplifies the expression tree " is 127.
Long Statement,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,CheckAndApplyCustomPaging,The length of the statement  "                MethodInfo setContinuationTokenMethodInfo = DataServiceExecutionProviderMethods.SetContinuationTokenMethodInfo.MakeGenericMethod(this.queryExpression.ElementType()); " is 165.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "                    if (operationResultKind == ServiceOperationResultKind.DirectValue || operationResultKind == ServiceOperationResultKind.Enumeration) " is 131.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "                            throw DataServiceException.CreateMethodNotAllowed(Strings.RequestUriProcessor_MethodNotAllowed' lastSegment.Operation.Method); " is 126.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "                var entityReferenceSegmentInfo = segmentInfos.FirstOrDefault(segmentInfo => segmentInfo.Identifier == XmlConstants.UriLinkSegment); " is 131.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "                // DEVNOTE: Ideally $ref should be the last segment' but in order to keep minimum changes to server code' this order is not changed " is 131.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "                // If the order is changed' lot of server code needs to be changed since LastSegment of RequestDescription is used in many places " is 129.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "                        throw DataServiceException.CreateBadRequestError(Strings.BadRequest_QueryOptionsShouldNotBeSpecifiedForDeletingSingleEntityReference); " is 134.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "                    // For collection-valued navigation properties' the entity reference of the entity to be removed MUST be specified using the $id query string option.  " is 149.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "                            throw DataServiceException.CreateBadRequestError(Strings.BadRequest_InvalidUriForDeleteOperation(absoluteRequestUri.Query)); " is 124.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "                            throw DataServiceException.CreateBadRequestError(Strings.BadRequest_IdMustBeSpecifiedForDeletingCollectionOfEntityReference); " is 125.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "                        throw DataServiceException.CreateBadRequestError(Strings.OpenNavigationPropertiesNotSupportedOnOpenTypes(openPropertySegment.Identifier)); " is 138.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "            if (targetKind == RequestTargetKind.Metadata || targetKind == RequestTargetKind.Batch || targetKind == RequestTargetKind.ServiceDirectory) " is 138.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "                        Strings.RequestUriProcessor_InvalidHttpMethodForNamedStream(UriUtil.UriToString(service.OperationContext.AbsoluteRequestUri)' service.OperationContext.RequestMethod)' " is 166.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The length of the statement  "            if ((service.OperationContext.RequestMessage.HttpVerb.IsChange()) && resultDescription.SegmentInfos[0].TargetSource != RequestTargetSource.ServiceOperation) " is 156.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,GetAbsoluteUriFromReference,The length of the statement  "            Debug.Assert(absoluteServiceUri.IsAbsoluteUri' "absoluteServiceUri.IsAbsoluteUri(" + UriUtil.UriToString(absoluteServiceUri) + ")"); " is 132.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,GetAbsoluteUriFromReference,The length of the statement  "            Debug.Assert(string.IsNullOrEmpty(absoluteServiceUri.Fragment)' "The appending in this method assumes no fragment is present"); " is 127.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,GetAbsoluteUriFromReference,The length of the statement  "            Debug.Assert(string.IsNullOrEmpty(absoluteServiceUri.Query)' "The appending in this method assumes no query is present"); " is 121.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,GetAbsoluteUriFromReference,The length of the statement  "                Debug.Assert(!string.IsNullOrEmpty(referenceAsString)' "The referenceAsUri must not be an empty string relative URI' the caller should already verify that case."); " is 163.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,GetAbsoluteUriFromReference,The length of the statement  "                // Currently we are combining segments incorrectly (e.g.' http://odata.org/service.svc/var1 + /bar => http://odata.org/service.svc/abc/pqr instead of http://odata.org/bar). " is 172.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,GetAbsoluteUriFromReference,The length of the statement  "                // The URI composition rules affect the binding scenarios and the batch payloads. To avoid a breaking change we will only do this in V3 payloads and start versioning batch payloads. " is 181.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,GetAbsoluteUriFromReference,The length of the statement  "                // Instead of using string concatenation' we will use the Uri.TryCreate method to create a uri based on the absoluteserviceuri " is 126.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,EnumerateSegments,The length of the statement  "            Debug.Assert(absoluteRequestUri.IsAbsoluteUri' "absoluteRequestUri.IsAbsoluteUri(" + absoluteRequestUri.IsAbsoluteUri + ")"); " is 125.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,EnumerateSegments,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.BadRequest_RequestUriDoesNotHaveTheRightBaseUri(absoluteRequestUri' baseUri)); " is 135.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,EnumerateSegments,The length of the statement  "                Debug.Assert(segmentIndex == segments.Length' "segmentIndex == segments.Length -- otherwise we mis-counted populated/skipped segments."); " is 137.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ParsePath,The length of the statement  "                Debug.Assert(metadataProviderEdmModel.Mode == MetadataProviderEdmModelMode.Serialization' "Model expected to be in serialization mode by default"); " is 147.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ParsePath,The length of the statement  "                // For now' don't include the original exception because it causes the stack trace to be written' breaking a lot of tests. " is 122.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ParsePath,The length of the statement  "                    // For now' don't include the original exception because it causes the stack trace to be written' breaking a lot of tests. " is 122.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForEntitySet,The length of the statement  "                segment.RequestExpression = DataServiceConfiguration.ComposeResourceContainer(service' segment.TargetResourceSet' segment.RequestExpression); " is 141.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForServiceOperation,The length of the statement  "                segment != null && segment.Operation != null && segment.Operation.Kind == OperationKind.ServiceOperation && segment.TargetSource == RequestTargetSource.ServiceOperation' " is 169.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForServiceOperation,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.RequestUriProcessor_ActionComposedWithWebInvokeServiceOperationNotAllowed); " is 132.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForServiceOperation,The length of the statement  "                throw DataServiceException.CreateMethodNotAllowed(Strings.RequestUriProcessor_MethodNotAllowed' segment.Operation.Method); " is 122.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForServiceOperation,The length of the statement  "                    WebUtil.CheckResourceExists(segment.SingleResult || methodResult.Value != null' segment.Identifier);   // Enumerations shouldn't be null. " is 137.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForServiceOperation,The length of the statement  "                    Debug.Assert(segment.Operation.ResultKind == ServiceOperationResultKind.Void' "segment.Operation.ResultKind == ServiceOperationResultKind.Nothing"); " is 148.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForServiceAction,The length of the statement  "            Expression[] parameterTokens = ValidateBindingParameterAndReadPayloadParametersForAction(service' segment' previousSegment); " is 124.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForSegments,The length of the statement  "                            Debug.Assert(segment.Operation.Kind == OperationKind.ServiceOperation' "segment.Operation.Kind == OperationKind.ServiceOperation"); " is 131.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForProperty,The length of the statement  "            Debug.Assert(segment != null && segment.ProjectedProperty != null' "segment != null && segment.ProjectedProperty != null"); " is 123.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForProperty,The length of the statement  "                    segment.RequestExpression = DataServiceConfiguration.ComposeResourceContainer(service' segment.TargetResourceSet' segment.RequestExpression); " is 141.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ParseOperationParameter,The length of the statement  "                WebUtil.CheckSyntaxValid(LiteralParser.ForExpressions.TryParseLiteral(targetType' queryStringValue' out parameterValue)); " is 121.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.RequestUriProcessor_UnbindableOperationsMustBeCalledAtRootLevel(operation.Name)); " is 138.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                // We throw in HandleOpenPropertySegment() when we see an open property on a POST operation. previousSegmentType should not be null here. " is 137.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                    bindingParameterType.ResourceTypeKind == ResourceTypeKind.EntityType || bindingParameterType.ResourceTypeKind == ResourceTypeKind.EntityCollection' " is 147.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                // We need to make sure the item type of the binding parameter is assignable from the item type of the previous segment and " is 123.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                ResourceType bindingParameterItemType = RequestUriProcessor.GetItemTypeFromResourceType(bindingParameterType' out bindingParameterIsCollection); " is 144.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                    !bindingParameterIsCollection || bindingParameterType.ResourceTypeKind == ResourceTypeKind.EntityCollection || bindingParameterType.ResourceTypeKind == ResourceTypeKind.Collection' " is 180.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                    "!bindingParameterIsCollection || bindingParameterType.ResourceTypeKind == ResourceTypeKind.EntityCollection || bindingParameterType.ResourceTypeKind == ResourceTypeKind.Collection"); " is 183.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                ResourceType previousSegmentItemType = RequestUriProcessor.GetItemTypeFromResourceType(previousSegmentType' out previousSegmentIsCollection); " is 141.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                    !previousSegmentIsCollection || previousSegmentType.ResourceTypeKind == ResourceTypeKind.EntityCollection || previousSegmentType.ResourceTypeKind == ResourceTypeKind.Collection' " is 177.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                    "!previousSegmentIsCollection || previousSegmentType.ResourceTypeKind == ResourceTypeKind.EntityCollection || previousSegmentType.ResourceTypeKind == ResourceTypeKind.Collection"); " is 180.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                // If previousSegment is Collection' previousSegment.SingleResult is false but previousSegmentIsCollection is true because previousSegmentType is of Collection type. " is 165.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                // If previousSegment is a ResourceSetReference' its TargetResourceType is the item type of the set rather than the entity collection type so previousSegmentIsCollection " is 169.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                if (bindingParameterIsCollection != previousSegmentIsCollection || !bindingParameterItemType.IsAssignableFrom(previousSegmentItemType)) " is 135.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.RequestUriProcessor_BindingParameterNotAssignableFromPreviousSegment(operation.Name' previousSegment.Identifier)); " is 171.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "            // 2) We don't expect parameters in the payload but content type is not null. In this case if the payload is empty' ODataParameterReader " is 136.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ValidateBindingParameterAndReadPayloadParametersForAction,The length of the statement  "            //    will return no more parameters. Otherwise ODataParameterReader will throw when there is any unexpected parameter on the payload. " is 134.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,SelectElement,The length of the statement  "            Debug.Assert(property.Kind != ResourcePropertyKind.ResourceSetReference' "property != ResourcePropertyKind.ResourceSetReference"); " is 130.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,SelectMultiple,The length of the statement  "            Debug.Assert(property.Kind == ResourcePropertyKind.ResourceSetReference' "property == ResourcePropertyKind.ResourceSetReference"); " is 130.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,SelectMultiple,The length of the statement  "            Debug.Assert(enumerableElement != null' "Providers should never expose a property as a resource-set if it doesn't implement IEnumerable`1."); " is 141.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,SelectOpenProperty,The length of the statement  "            Expression body = Expression.Call(null /* instance */' OpenTypeMethods.GetValueOpenPropertyMethodInfo' parameter' Expression.Constant(propertyName)); " is 149.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,SelectDerivedResourceType,The length of the statement  "            return Expression.Call(null' DataServiceExecutionProviderMethods.OfTypeMethodInfo.MakeGenericMethod(sourceElementType' resourceType.InstanceType)' queryExpression' ce); " is 168.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,SelectLateBoundProperty,The length of the statement  "            Debug.Assert(property != null && !property.CanReflectOnInstanceTypeProperty' "property != null && !property.CanReflectOnInstanceTypeProperty"); " is 143.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,SelectLateBoundProperty,The length of the statement  "            Expression body = Expression.Call(null /*instance*/' DataServiceProviderMethods.GetValueMethodInfo' parameter' Expression.Constant(property)); " is 142.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,SelectLateBoundPropertyMultiple,The length of the statement  "            Debug.Assert(property != null && property.Kind == ResourcePropertyKind.ResourceSetReference && !property.CanReflectOnInstanceTypeProperty' "property != null && property.Kind == ResourcePropertyKind.ResourceSetReference && !property.CanReflectOnInstanceTypeProperty"); " is 267.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,SelectResourceByKey,The length of the statement  "            Debug.Assert(resourceType.KeyProperties.Count == keyValues.Count' "resourceType.KeyProperties.Count == keyValues.Count"); " is 121.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,SelectResourceByKey,The length of the statement  "                    Debug.Assert(keyValue != null && keyValue is DateTimeOffset' "For DateTime properties' the value must be read as DateTimeOffset"); " is 130.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,SelectResourceByKey,The length of the statement  "                    e = Expression.Call(null /*instance*/' DataServiceProviderMethods.GetValueMethodInfo' parameter' Expression.Constant(keyProperty)); " is 131.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,InvokeRequestExpression,The length of the statement  "            bool isPostOperationRequest = httpVerb == HttpVerbs.POST && description.TargetSource == RequestTargetSource.ServiceOperation; " is 125.
Long Statement,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,InvokeRequestExpression,The length of the statement  "                    // GET ~/Customer(1)/Address/State for example we need to execute the expression at the resource level' i.e. Customer(1). " is 121.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The length of the statement  "                            Debug.Assert(this.requestDescription.IsNamedStream || this.mediaResourceStream != null' "this.mediaResourceStream cannot be null for MR request."); " is 147.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The length of the statement  "                        Debug.Assert(this.requestDescription.TargetKind == RequestTargetKind.ServiceDirectory' "this.requestDescription.TargetKind == RequestTargetKind.ServiceDirectory"); " is 163.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The length of the statement  "                        Debug.Assert(this.requestDescription.TargetKind != RequestTargetKind.Resource || this.requestDescription.LinkUri' "this.requestDescription.TargetKind != RequestTargetKind.Resource || this.requestDescription.LinkUri"); " is 217.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The length of the statement  "                        NonEntitySerializer nonEntitySerializer = new NonEntitySerializer(this.requestDescription' this.AbsoluteServiceUri' this.service' this.messageWriter); " is 150.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The length of the statement  "                        Debug.Assert(this.requestDescription.TargetKind == RequestTargetKind.Resource' "TargetKind " + this.requestDescription.TargetKind + " == Resource"); " is 148.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The length of the statement  "                        Debug.Assert(this.PayloadKind == ODataPayloadKind.MetadataDocument' "this.payloadKind == ODataPayloadKind.MetadataDocument"); " is 125.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The length of the statement  "                        Debug.Assert(this.requestDescription.TargetKind == RequestTargetKind.Metadata' "this.requestDescription.TargetKind == RequestTargetKind.Metadata"); " is 147.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The length of the statement  "                // Astoria-ODataLib-Integration: Astoria does not call flush before calling the IDataServiceHost.ProcessException method " is 120.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The length of the statement  "                // If the request is for an entry/feed and the data source throws an error while these results are being enumerated and written' " is 128.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The length of the statement  "                // To handle this case' we'll make the EntitySerializer expose a method that calls Flush on the underlying ODL writer instance. " is 127.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The length of the statement  "                ErrorHandler.HandleExceptionWhileWriting(this.service' exception' this.actualResponseMessageWhoseHeadersMayBeOverridden' this.messageWriter' this.encoding' stream' this.messageWriterBuilder); " is 191.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,Write,The length of the statement  "                if (responseMessageStream != null && this.actualResponseMessageWhoseHeadersMayBeOverridden is ODataBatchOperationResponseMessage) " is 129.
Long Statement,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,GetModelFromService,The length of the statement  "                    Debug.Assert(metadataProviderEdmModel.Mode == MetadataProviderEdmModelMode.Serialization' "Model expected to be in serialization mode."); " is 137.
Long Statement,Microsoft.OData.Service,SegmentInfo,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\SegmentInfo.cs,AssertValid,The length of the statement  "                !String.IsNullOrEmpty(this.Identifier) || RequestTargetSource.None == this.TargetSource || RequestTargetKind.VoidOperation == this.TargetKind' " is 142.
Long Statement,Microsoft.OData.Service,SegmentInfo,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\SegmentInfo.cs,CheckSegmentRights,The length of the statement  "            // In V2' we used to check only service operation rights inside URI Processor' and we only check for middle segments (non-last-segment) " is 135.
Long Statement,Microsoft.OData.Service,SegmentInfo,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\SegmentInfo.cs,CheckSegmentRights,The length of the statement  "            // If this is a last segment' the rights is not checked until we execute the operation' and ready to write out the response " is 123.
Long Statement,Microsoft.OData.Service,SegmentInfo,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\SegmentInfo.cs,CheckSegmentRights,The length of the statement  "            // There's also a problem in V1 where we did not check Service Operation Rights at all. Therefore' there's a flag in V2 which says " is 130.
Long Statement,Microsoft.OData.Service,SegmentInfo,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\SegmentInfo.cs,CheckSegmentRights,The length of the statement  "            // In V3' we must keep this behavior the same' but make it happen earlier' before the service operation is invoked' to avoid potential data corruption " is 150.
Long Statement,Microsoft.OData.Service,SegmentInfo,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\SegmentInfo.cs,CheckSegmentRights,The length of the statement  "            if (this.Operation != null && this.Operation.Kind == OperationKind.ServiceOperation && (0 != (this.Operation.ServiceOperationRights & ServiceOperationRights.OverrideEntitySetRights))) " is 183.
Long Statement,Microsoft.OData.Service,UpdatableWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\UpdatableWrapper.cs,SetETagValues,The length of the statement  "            Debug.Assert(String.IsNullOrEmpty(host.GetRequestIfNoneMatchHeader())' "IfNoneMatch header cannot be specified for Update/Delete operations"); " is 142.
Long Statement,Microsoft.OData.Service,UpdatableWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\UpdatableWrapper.cs,SetETagValues,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.DataService_CannotPerformOperationWithoutETag(resourceType.FullName)); " is 127.
Long Statement,Microsoft.OData.Service,UpdatableWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\UpdatableWrapper.cs,SetETagValues,The length of the statement  "                string etagValue = WebUtil.GetETagValue(resourceCookie' resourceType' etagProperties' this.service' false /*getMethod*/); " is 121.
Long Statement,Microsoft.OData.Service,UpdatableWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\UpdatableWrapper.cs,ParseETagValue,The length of the statement  "            Debug.Assert(ifMatchHeaderValue.StartsWith(XmlConstants.HttpWeakETagPrefix' StringComparison.Ordinal)' "If-Match header must be properly formatted - this check is done in DataService.CheckETagValues method"); " is 208.
Long Statement,Microsoft.OData.Service,UpdatableWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\UpdatableWrapper.cs,ParseETagValue,The length of the statement  "            Debug.Assert(ifMatchHeaderValue.Length >= XmlConstants.HttpWeakETagPrefix.Length + 1' "If-Match header must be properly formatted - this check is done in DataService.CheckETagValues method"); " is 191.
Long Statement,Microsoft.OData.Service,UpdatableWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\UpdatableWrapper.cs,ParseETagValue,The length of the statement  "            string strippedETag = ifMatchHeaderValue.Substring(XmlConstants.HttpWeakETagPrefix.Length' ifMatchHeaderValue.Length - XmlConstants.HttpWeakETagPrefix.Length - 1); " is 163.
Long Statement,Microsoft.OData.Service,VersionUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\VersionUtil.cs,CheckMaxProtocolVersion,The length of the statement  "                throw new InvalidOperationException(Strings.DataServiceConfiguration_ResponseVersionIsBiggerThanProtocolVersion(featureVersion.ToString()' maxProtocolVersion.ToString())); " is 171.
Long Statement,Microsoft.OData.Service,VersionUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\VersionUtil.cs,GetResponseVersionForError,The length of the statement  "            if (ContentTypeUtil.IsResponseMediaTypeJsonLight(acceptableContentTypes' false /*entityTarget*/' effectiveMaxResponseVersion)) " is 126.
Long Statement,Microsoft.OData.Service,VersionUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\VersionUtil.cs,GetResponseVersionForError,The length of the statement  "                Debug.Assert(effectiveMaxResponseVersion >= Version4Dot0' "effectiveMaxResponseVersion should be at least Version3Dot0 to match JSON Light."); " is 142.
Long Statement,Microsoft.OData.Service,VersionUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\VersionUtil.cs,UpdateMetadataVersion,The length of the statement  "            // Metadata versioning should only be impacted by visible types. A resource type is visible only when it is reachable from " is 122.
Long Statement,Microsoft.OData.Service,VersionUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\VersionUtil.cs,UpdateMetadataVersion,The length of the statement  "            // a resource set with EntitySetRights != 'None' or a service op with ServiceOperationRights != None or it is a complex type " is 124.
Long Statement,Microsoft.OData.Service,VersionUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\VersionUtil.cs,UpdateMetadataVersion,The length of the statement  "                    "Otherwise we have introduced a new value for ServiceOperationResultKind' we might need to update the 'if' statement below."); " is 126.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,CheckResourceNotCollectionForOpenProperty,The length of the statement  "            if (resourceType.ResourceTypeKind == ResourceTypeKind.Collection || resourceType.ResourceTypeKind == ResourceTypeKind.EntityCollection) " is 135.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,ResolveTypeIdentifier,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.RequestUriProcessor_TypeIdentifierCannotBeSpecifiedAfterTypeIdentifier(identifier' previousSegmentResourceType.FullName)); " is 179.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,ResolveTypeIdentifier,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.RequestUriProcessor_InvalidTypeIdentifier_MustBeASubType(identifier' previousSegmentResourceType.FullName)); " is 165.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,HasMediaLinkEntryInHierarchy,The length of the statement  "            return baseType.IsMediaLinkEntry || provider.GetDerivedTypes(baseType).Any(derivedType => derivedType.IsMediaLinkEntry); " is 120.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,GetNonPrimitiveResourceType,The length of the statement  "                ? (String.IsNullOrEmpty(projectedResult.ResourceTypeName) ? null : provider.TryResolveResourceType(projectedResult.ResourceTypeName)) : " is 135.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,GetETagValue,The length of the statement  "                Debug.Assert(etagValueText != null' "keyValueText != null - otherwise TryKeyPrimitiveToString returned true and null value"); " is 125.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,CompareAndGetETag,The length of the statement  "                else if (String.IsNullOrEmpty(host.GetRequestIfMatchHeader()) && String.IsNullOrEmpty(host.GetRequestIfNoneMatchHeader())) " is 122.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,CompareAndGetETag,The length of the statement  "                        Debug.Assert(!String.IsNullOrEmpty(host.GetRequestIfNoneMatchHeader())' "Both can't be null' otherwise it should have entered the first condition"); " is 148.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,WriteETagValueInResponseHeader,The length of the statement  "                Debug.Assert(requestDescription == null || requestDescription.IsETagHeaderAllowed' "etag should not be computed before serialization time if etag response header is not allowed"); " is 179.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,WriteETagValueInResponseHeader,The length of the statement  "                Debug.Assert(requestDescription == null || IsETagValueValid(etagValue' requestDescription.TargetKind == RequestTargetKind.MediaResource)' "WebUtil.IsETagValueValid(etagValue)"); " is 177.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,WriteETagValueInResponseHeader,The length of the statement  "                Debug.Assert(String.IsNullOrEmpty(responseMessage.GetHeader(XmlConstants.HttpResponseETag))' "string.IsNullOrEmpty(responseMessage.GetHeader(XmlConstants.HttpResponseETag))"); " is 175.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,GetWrapperType,The length of the statement  "            return GenericExpandedWrapperTypes.Single(x => x.Index == wrapperParameters.Length - 1).Type.MakeGenericType(wrapperParameters); " is 128.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,IsExpandedWrapperType,The length of the statement  "            return inputType.IsGenericType && GenericExpandedWrapperTypes.SingleOrDefault(x => x.Type == inputType.GetGenericTypeDefinition()) != null; " is 139.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,ValidateAndAddAnnotation,The length of the statement  "                Debug.Assert(annotation.GetType() == typeof(string) || annotation.GetType() == typeof(XElement)' "only string and xelement annotations are supported"); " is 151.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,CreateMessageReaderSettings,The length of the statement  "                messageReaderSettings.Validations &= ~(ValidationKinds.ThrowOnDuplicatePropertyNames | ValidationKinds.ThrowIfTypeConflictsWithMetadata); " is 137.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,GetEntitySet,The length of the statement  "            return model.FindEntityContainer(containerName).FindEntitySet(MetadataProviderUtils.GetEntitySetName(resourceSet.ResourceSet)); " is 127.
Long Statement,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,IsCrossReferencedSegment,The length of the statement  "            if (segmentInfo.Identifier.StartsWith("$"' StringComparison.Ordinal) && service.GetSegmentForContentId(segmentInfo.Identifier) != null) " is 135.
Long Statement,Microsoft.OData.Service,AstoriaResponseMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaResponseMessage.cs,GetHeader,The length of the statement  "                    // this.ResponseHeadersWebCollection will throw if host2 is null. We just want to return null as if the header is missing. " is 122.
Long Statement,Microsoft.OData.Service,AstoriaResponseMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaResponseMessage.cs,SetStream,The length of the statement  "            Debug.Assert(this.responseStream == null' "The response stream has already been set once. It should not need to be set again."); " is 128.
Long Statement,Microsoft.OData.Service,AstoriaResponseMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaResponseMessage.cs,SetResponseHeaders,The length of the statement  "            this.PreferenceAppliedHeader().ReturnContent = preference.ShouldIncludeResponseBody ? true : (preference.ShouldNotIncludeResponseBody ? (bool?)false : null); " is 157.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,OpenNavigationPropertiesNotSupportedOnOpenTypes,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.OpenNavigationPropertiesNotSupportedOnOpenTypes' p0); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BaseServiceProvider_IEnumerableAlwaysMultiple,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BaseServiceProvider_IEnumerableAlwaysMultiple' p0' p1); " is 136.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BaseServiceProvider_OverloadingNotSupported,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BaseServiceProvider_OverloadingNotSupported' p0' p1); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BaseServiceProvider_ParameterNotIn,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BaseServiceProvider_ParameterNotIn' p0' p1); " is 125.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BaseServiceProvider_ParameterTypeNotSupported,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BaseServiceProvider_ParameterTypeNotSupported' p0' p1' p2); " is 140.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BaseServiceProvider_ServiceOperationMissingSingleEntitySet,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BaseServiceProvider_ServiceOperationMissingSingleEntitySet' p0' p1); " is 149.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BaseServiceProvider_UnsupportedReturnType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BaseServiceProvider_UnsupportedReturnType' p0' p1); " is 132.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BaseServiceProvider_UnknownResourceTypeInstance,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BaseServiceProvider_UnknownResourceTypeInstance' p0); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BasicExpandProvider_UnsupportedExpandBreadth,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BasicExpandProvider_UnsupportedExpandBreadth' p0); " is 131.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BasicExpandProvider_SDP_UnsupportedOrderingExpressionBreadth,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BasicExpandProvider_SDP_UnsupportedOrderingExpressionBreadth' p0); " is 147.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,CallbackQueryOptionHandler_UnsupportedContentType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.CallbackQueryOptionHandler_UnsupportedContentType' p0); " is 136.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceActionProviderWrapper_ServiceActionBindingParameterNull,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceActionProviderWrapper_ServiceActionBindingParameterNull' p0); " is 153.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceActionProviderWrapper_ResourceTypeMustBeAssignableToBindingParameterResourceType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceActionProviderWrapper_ResourceTypeMustBeAssignableToBindingParameterResourceType' p0' p1' p2); " is 186.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceProviderWrapper_ResourceContainerNotReadonly,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceProviderWrapper_ResourceContainerNotReadonly' p0); " is 142.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceProviderWrapper_ResourceTypeNotReadonly,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceProviderWrapper_ResourceTypeNotReadonly' p0); " is 137.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceProviderWrapper_ServiceOperationNotReadonly,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceProviderWrapper_ServiceOperationNotReadonly' p0); " is 141.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceProviderWrapper_MultipleEntitySetsWithSameName,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceProviderWrapper_MultipleEntitySetsWithSameName' p0); " is 144.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceProviderWrapper_MultipleResourceTypesWithSameName,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceProviderWrapper_MultipleResourceTypesWithSameName' p0); " is 147.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceProviderWrapper_MultipleServiceOperationsWithSameName,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceProviderWrapper_MultipleServiceOperationsWithSameName' p0); " is 151.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceProviderWrapper_CollectionOfComplexTypeWithDerivedTypes,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceProviderWrapper_CollectionOfComplexTypeWithDerivedTypes' p0); " is 153.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceProviderWrapper_InvalidQueryRootType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceProviderWrapper_InvalidQueryRootType' p0' p1); " is 138.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceProviderWrapper_ActionHasNoBindableSet,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceProviderWrapper_ActionHasNoBindableSet' p0' p1); " is 140.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceProviderWrapper_ActionHasNoVisibleSetReachableFromPathExpression,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceProviderWrapper_ActionHasNoVisibleSetReachableFromPathExpression' p0' p1); " is 166.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceActionProviderWrapper_DuplicateAction,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceActionProviderWrapper_DuplicateAction' p0); " is 135.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ExpandSegment_FilterShouldBeLambda,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ExpandSegment_FilterShouldBeLambda' p0); " is 121.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ExpandSegment_FilterBodyShouldReturnBool,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ExpandSegment_FilterBodyShouldReturnBool' p0); " is 127.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ExpandSegment_FilterBodyShouldTakeOneParameter,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ExpandSegment_FilterBodyShouldTakeOneParameter' p0); " is 133.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,HttpContextServiceHost_AmbiguousItemName,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.HttpContextServiceHost_AmbiguousItemName' p0' p1' p2); " is 135.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,HttpContextServiceHost_IncomingTemplateMatchFragment,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.HttpContextServiceHost_IncomingTemplateMatchFragment' p0); " is 139.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,HttpContextServiceHost_IncomingTemplateMatchQuery,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.HttpContextServiceHost_IncomingTemplateMatchQuery' p0); " is 136.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,HttpContextServiceHost_XMethodIncorrectCount,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.HttpContextServiceHost_XMethodIncorrectCount' p0); " is 131.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,HttpContextServiceHost_XMethodIncorrectValue,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.HttpContextServiceHost_XMethodIncorrectValue' p0); " is 131.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,HttpContextServiceHost_QueryParameterMustBeSpecifiedOnce,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.HttpContextServiceHost_QueryParameterMustBeSpecifiedOnce' p0); " is 143.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,HttpContextServiceHost_UnknownQueryParameter,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.HttpContextServiceHost_UnknownQueryParameter' p0); " is 131.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,HttpContextServiceHost_IncomingMessagePropertyMustBeValidUriInstance,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.HttpContextServiceHost_IncomingMessagePropertyMustBeValidUriInstance' p0); " is 155.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,HttpProcessUtility_EncodingNotSupported,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.HttpProcessUtility_EncodingNotSupported' p0); " is 126.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,HttpProcessUtility_EscapeCharWithoutQuotes,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.HttpProcessUtility_EscapeCharWithoutQuotes' p0); " is 129.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,HttpProcessUtility_EscapeCharAtEnd,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.HttpProcessUtility_EscapeCharAtEnd' p0); " is 121.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,HttpProcessUtility_ClosingQuoteNotFound,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.HttpProcessUtility_ClosingQuoteNotFound' p0); " is 126.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,IgnorePropertiesAttribute_InvalidPropertyName,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.IgnorePropertiesAttribute_InvalidPropertyName' p0' p1); " is 136.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,PlainXml_IncorrectElementName,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.PlainXml_IncorrectElementName' p0' p1); " is 120.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_DisallowMemberAccessForResourceSetReference,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_DisallowMemberAccessForResourceSetReference' p0); " is 149.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_ExpressionTypeMismatch,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_ExpressionTypeMismatch' p0); " is 128.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_IncompatibleOperand,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_IncompatibleOperand' p0' p1); " is 129.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_IncompatibleOperands,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_IncompatibleOperands' p0' p1' p2); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_InvalidCharacter,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_InvalidCharacter' p0); " is 122.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_NoApplicableFunction,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_NoApplicableFunction' p0' p1); " is 130.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_NotDoesNotSupportType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_NotDoesNotSupportType' p0); " is 127.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_NullOperatorUnsupported,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_NullOperatorUnsupported' p0); " is 129.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_OrderByDoesNotSupportType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_OrderByDoesNotSupportType' p0); " is 131.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_UnknownFunction,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_UnknownFunction' p0); " is 121.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_UnrecognizedLiteral,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_UnrecognizedLiteral' p0' p1); " is 129.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_UnterminatedLiteral,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_UnterminatedLiteral' p0); " is 125.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_UnterminatedStringLiteral,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_UnterminatedStringLiteral' p0); " is 131.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequsetQueryParser_ExpectingLiteralInSkipToken,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequsetQueryParser_ExpectingLiteralInSkipToken' p0); " is 133.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryParser_InvalidNumericString,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryParser_InvalidNumericString' p0); " is 126.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryProcessor_IncorrectArgumentFormat,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryProcessor_IncorrectArgumentFormat' p0' p1); " is 136.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryProcessor_PrimitivePropertyUsedAsNavigationProperty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryProcessor_PrimitivePropertyUsedAsNavigationProperty' p0' p1); " is 154.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryProcessor_ComplexPropertyAsInnerSelectSegment,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryProcessor_ComplexPropertyAsInnerSelectSegment' p0' p1); " is 148.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryProcessor_CollectionPropertyAsInnerSelectSegment,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryProcessor_CollectionPropertyAsInnerSelectSegment' p0' p1); " is 151.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryProcessor_ProjectedPropertyWithoutMatchingExpand,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryProcessor_ProjectedPropertyWithoutMatchingExpand' p0); " is 147.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryProcessor_NamedStreamMustBeLastSegmentInSelect,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryProcessor_NamedStreamMustBeLastSegmentInSelect' p0); " is 145.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryProcessor_ServiceActionMustBeLastSegmentInSelect,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryProcessor_ServiceActionMustBeLastSegmentInSelect' p0); " is 147.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryProcessor_SelectAndExpandCannotBeSpecifiedTogether,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryProcessor_SelectAndExpandCannotBeSpecifiedTogether' p0); " is 149.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryProcessor_CannotSpecifyOpenPropertyAndDeclaredPropertyAtTheSameTime,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryProcessor_CannotSpecifyOpenPropertyAndDeclaredPropertyAtTheSameTime' p0' p1' p2); " is 174.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier' p0' p1); " is 157.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_PropertyNotFound,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_PropertyNotFound' p0' p1); " is 127.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_ResourceNotFound,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_ResourceNotFound' p0); " is 123.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_ValueSegmentAfterScalarPropertySegment,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_ValueSegmentAfterScalarPropertySegment' p0' p1); " is 149.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed' p0); " is 158.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_CannotQueryCollections,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_CannotQueryCollections' p0); " is 129.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_MustBeLeafSegment,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_MustBeLeafSegment' p0); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_LinkSegmentMustBeFollowedByEntitySegment,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_LinkSegmentMustBeFollowedByEntitySegment' p0' p1); " is 151.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_CannotSpecifyAfterPostLinkSegment,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_CannotSpecifyAfterPostLinkSegment' p0' p1); " is 144.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_CountNotSupported,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_CountNotSupported' p0); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_InvalidHttpMethodForNamedStream,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_InvalidHttpMethodForNamedStream' p0' p1); " is 142.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_SegmentDoesNotSupportKeyPredicates,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_SegmentDoesNotSupportKeyPredicates' p0); " is 141.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_InvalidTypeIdentifier_MustBeASubType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_InvalidTypeIdentifier_MustBeASubType' p0' p1); " is 147.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_InvalidTypeIdentifier_UnrelatedType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_InvalidTypeIdentifier_UnrelatedType' p0' p1); " is 146.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_TypeIdentifierCannotBeSpecifiedAfterTypeIdentifier,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_TypeIdentifierCannotBeSpecifiedAfterTypeIdentifier' p0' p1); " is 161.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_UnbindableOperationsMustBeCalledAtRootLevel,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_UnbindableOperationsMustBeCalledAtRootLevel' p0); " is 150.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_MissingBindingParameter,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_MissingBindingParameter' p0); " is 130.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_BindingParameterNotAssignableFromPreviousSegment,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_BindingParameterNotAssignableFromPreviousSegment' p0' p1); " is 159.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,RequestUriProcessor_BatchedActionOnEntityCreatedInSameChangeset,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.RequestUriProcessor_BatchedActionOnEntityCreatedInSameChangeset' p0); " is 150.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,PathParser_EntityReferenceNotSupported,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.PathParser_EntityReferenceNotSupported' p0); " is 125.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,PathParser_ServiceOperationsWithSameName,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.PathParser_ServiceOperationsWithSameName' p0); " is 127.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceSetPathExpression_PathExpressionMustStartWithBindingParameterName,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceSetPathExpression_PathExpressionMustStartWithBindingParameterName' p0' p1); " is 164.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceSetPathExpression_PropertyNotFound,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceSetPathExpression_PropertyNotFound' p0' p1' p2); " is 137.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceSetPathExpression_PropertyMustBeEntityType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceSetPathExpression_PropertyMustBeEntityType' p0' p1' p2); " is 145.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceSetPathExpression_PathCannotEndWithTypeIdentifier,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceSetPathExpression_PathCannotEndWithTypeIdentifier' p0' p1); " is 148.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceSetPathExpression_EmptySegment,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceSetPathExpression_EmptySegment' p0); " is 125.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceType_InvalidValueForResourceTypeKind,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceType_InvalidValueForResourceTypeKind' p0); " is 131.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceType_MissingKeyPropertiesForEntity,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceType_MissingKeyPropertiesForEntity' p0); " is 129.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceType_NamedStreamsOnlyApplyToEntityType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceType_NamedStreamsOnlyApplyToEntityType' p0); " is 133.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceType_PropertyWithSameNameAlreadyExists,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceType_PropertyWithSameNameAlreadyExists' p0' p1); " is 137.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceType_ComplexTypeCannotBeOpen,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceType_ComplexTypeCannotBeOpen' p0); " is 123.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceType_InvalidResourceTypeKindInheritance,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceType_InvalidResourceTypeKindInheritance' p0' p1); " is 138.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceType_CollectionItemCannotBeStream,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceType_CollectionItemCannotBeStream' p0); " is 128.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceType_SpatialKeyOrETag,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceType_SpatialKeyOrETag' p0' p1); " is 120.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceProperty_MimeTypeAttributeEmpty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceProperty_MimeTypeAttributeEmpty' p0); " is 126.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceProperty_MimeTypeAttributeOnNonPrimitive,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceProperty_MimeTypeAttributeOnNonPrimitive' p0' p1); " is 139.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceProperty_MimeTypeNotValid,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceProperty_MimeTypeNotValid' p0' p1); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceProperty_PropertyKindAndResourceTypeKindMismatch,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceProperty_PropertyKindAndResourceTypeKindMismatch' p0' p1); " is 147.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,Serializer_NullKeysAreNotSupported,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.Serializer_NullKeysAreNotSupported' p0); " is 121.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,Serializer_UnsupportedTopLevelType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.Serializer_UnsupportedTopLevelType' p0); " is 121.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,Serializer_CollectionCanNotBeNull,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.Serializer_CollectionCanNotBeNull' p0); " is 120.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,Serializer_CollectionPropertyValueMustImplementIEnumerable,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.Serializer_CollectionPropertyValueMustImplementIEnumerable' p0); " is 145.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,Serializer_LoopsNotAllowedInComplexTypes,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.Serializer_LoopsNotAllowedInComplexTypes' p0); " is 127.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_MimeTypeNotValid,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_MimeTypeNotValid' p0' p1); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_MimeTypeCannotBeEmpty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_MimeTypeCannotBeEmpty' p0); " is 125.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_ResultTypeAndKindMustMatch,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_ResultTypeAndKindMustMatch' p0' p1' p2); " is 138.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_ResultSetMustBeNullForGivenResultType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_ResultSetMustBeNullForGivenResultType' p0' p1); " is 145.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_ResultSetMustBeNullForGivenReturnType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_ResultSetMustBeNullForGivenReturnType' p0' p1); " is 145.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_ResultTypeAndResultSetMustMatch,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_ResultTypeAndResultSetMustMatch' p0' p1); " is 139.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_ReturnTypeAndResultSetMustMatch,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_ReturnTypeAndResultSetMustMatch' p0' p1' p2); " is 143.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_NotSupportedProtocolMethod,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_NotSupportedProtocolMethod' p0' p1); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_DuplicateParameterName,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_DuplicateParameterName' p0); " is 126.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_InvalidResultType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_InvalidResultType' p0); " is 121.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_InvalidReturnType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_InvalidReturnType' p0); " is 121.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_MustBeBindableToUsePathExpression,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_MustBeBindableToUsePathExpression' p0); " is 137.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_BindingParameterMustBeEntityToUsePathExpression,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_BindingParameterMustBeEntityToUsePathExpression' p0); " is 151.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperation_NonBindingParametersCannotBeEntityorEntityCollection,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperation_NonBindingParametersCannotBeEntityorEntityCollection' p0' p1); " is 160.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,Opereration_BoundOperationsMustNotSpecifyEntitySetOnlyEntitySetPath,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.Opereration_BoundOperationsMustNotSpecifyEntitySetOnlyEntitySetPath' p0); " is 154.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperationParameter_TypeNotSupported,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperationParameter_TypeNotSupported' p0' p1); " is 133.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,Syndication_InvalidOpenPropertyType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.Syndication_InvalidOpenPropertyType' p0); " is 122.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,Syndication_InvalidOpenPropertyName,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.Syndication_InvalidOpenPropertyName' p0); " is 122.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_MissingExtendedAttributeType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_MissingExtendedAttributeType' p0' p1); " is 133.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_ResourceTypeNameNotExist,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_ResourceTypeNameNotExist' p0); " is 125.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_EntityTypeExpected,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_EntityTypeExpected' p0' p1); " is 123.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_ComplexTypeExpected,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_ComplexTypeExpected' p0' p1); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_UnknownResourceTypeForClrType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_UnknownResourceTypeForClrType' p0); " is 130.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_PropertyNotDefinedOnType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_PropertyNotDefinedOnType' p0' p1); " is 129.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_PublicPropertyNotDefinedOnType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_PublicPropertyNotDefinedOnType' p0' p1); " is 135.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_PropertyMustBeNavigationProperty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_PropertyMustBeNavigationProperty' p0' p1); " is 137.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,OperationWrapper_OperationResourceSetNotVisible,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.OperationWrapper_OperationResourceSetNotVisible' p0' p1); " is 138.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,OperationWrapper_TargetSetFromPathExpressionNotNotVisible,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.OperationWrapper_TargetSetFromPathExpressionNotNotVisible' p0' p1' p2); " is 152.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,OperationWrapper_PathExpressionRequiresBindingSet,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.OperationWrapper_PathExpressionRequiresBindingSet' p0); " is 136.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ServiceOperationProvider_TypeIsAbstract,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ServiceOperationProvider_TypeIsAbstract' p0); " is 126.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_BatchExceedMaxBatchCount,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_BatchExceedMaxBatchCount' p0); " is 123.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_BatchExceedMaxChangeSetCount,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_BatchExceedMaxChangeSetCount' p0); " is 127.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_ChangeInterceptorIncorrectParameterCount,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_ChangeInterceptorIncorrectParameterCount' p0' p1' p2); " is 147.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_ContextTypeIsAbstract,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_ContextTypeIsAbstract' p0' p1); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_ExpandCountExceeded,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_ExpandCountExceeded' p0' p1); " is 122.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_QueryInterceptorIncorrectParameterCount,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_QueryInterceptorIncorrectParameterCount' p0' p1' p2); " is 146.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_AttributeEntitySetNotFound,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_AttributeEntitySetNotFound' p0' p1' p2); " is 133.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_AuthorizationMethodNotVoid,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_AuthorizationMethodNotVoid' p0' p1' p2); " is 133.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_AuthorizationMethodVoid,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_AuthorizationMethodVoid' p0' p1' p2); " is 130.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_AuthorizationParameterNotAssignable,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_AuthorizationParameterNotAssignable' p0' p1' p2' p3' p4); " is 150.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_AuthorizationParameterNotResourceAction,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_AuthorizationParameterNotResourceAction' p0' p1' p2' p3); " is 150.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_AuthorizationReturnedNullQuery,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_AuthorizationReturnedNullQuery' p0' p1); " is 133.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_AuthorizationReturnTypeNotAssignable,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_AuthorizationReturnTypeNotAssignable' p0' p1' p2' p3); " is 147.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_ParameterIsOut,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_ParameterIsOut' p0' p1' p2); " is 121.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_ETagCannotBeSpecified,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_ETagCannotBeSpecified' p0); " is 120.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_CannotPerformOperationWithoutETag,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_CannotPerformOperationWithoutETag' p0); " is 132.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_ContentIdMustBeAnInteger,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_ContentIdMustBeAnInteger' p0); " is 123.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_ContentIdMustBeUniqueInBatch,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_ContentIdMustBeUniqueInBatch' p0); " is 127.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_VersionCannotBeParsed,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_VersionCannotBeParsed' p0' p1); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_InvalidRequestVersion,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_InvalidRequestVersion' p0' p1); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_RequestVersionMustBeLessThanMPV,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_RequestVersionMustBeLessThanMPV' p0' p1); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_CannotUpdateKeyProperties,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_CannotUpdateKeyProperties' p0); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_SDP_PageSizeMustbeNonNegative,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_SDP_PageSizeMustbeNonNegative' p0' p1); " is 132.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataService_SDP_SkipTokenNotMatchingOrdering,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataService_SDP_SkipTokenNotMatchingOrdering' p0' p1' p2); " is 139.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceAssociationSetEnd_ResourceTypeMustBeTheDeclaringType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceAssociationSetEnd_ResourceTypeMustBeTheDeclaringType' p0' p1); " is 151.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ResourceAssociationSet_MultipleAssociationSetsForTheSameAssociationTypeMustNotReferToSameEndSets,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ResourceAssociationSet_MultipleAssociationSetsForTheSameAssociationTypeMustNotReferToSameEndSets' p0' p1' p2); " is 191.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,MetadataSerializer_NoResourceAssociationSetForNavigationProperty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.MetadataSerializer_NoResourceAssociationSetForNavigationProperty' p0' p1); " is 155.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,MetadataSerializer_AccessEnabledTypeNoLongerExists,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.MetadataSerializer_AccessEnabledTypeNoLongerExists' p0); " is 137.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,MetadataSerializer_ModelValidationErrors,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.MetadataSerializer_ModelValidationErrors' p0); " is 127.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceConfiguration_NoChangesAllowed,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceConfiguration_NoChangesAllowed' p0); " is 128.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceConfiguration_ResourceSetNameNotFound,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceConfiguration_ResourceSetNameNotFound' p0); " is 135.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceConfiguration_ResourceTypeNameNotFound,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceConfiguration_ResourceTypeNameNotFound' p0); " is 136.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceConfiguration_ServiceNameNotFound,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceConfiguration_ServiceNameNotFound' p0); " is 131.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceConfiguration_NotComplexType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceConfiguration_NotComplexType' p0); " is 126.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceConfiguration_ResponseVersionIsBiggerThanProtocolVersion,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceConfiguration_ResponseVersionIsBiggerThanProtocolVersion' p0' p1); " is 158.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceHost_MoreThanOneQueryParameterSpecifiedWithTheGivenName,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceHost_MoreThanOneQueryParameterSpecifiedWithTheGivenName' p0' p1); " is 157.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_InvalidUriForPostOperation,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_InvalidUriForPostOperation' p0); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_InvalidUriForPutOperation,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_InvalidUriForPutOperation' p0); " is 123.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_InvalidUriForPatchOperation,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_InvalidUriForPatchOperation' p0); " is 125.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_InvalidUriForDeleteOperation,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_InvalidUriForDeleteOperation' p0); " is 126.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_InvalidUriForMediaResource,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_InvalidUriForMediaResource' p0); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,InvalidUri_OpenPropertiesCannotBeCollection,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.InvalidUri_OpenPropertiesCannotBeCollection' p0); " is 130.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,PropertyRequiresNonNegativeNumber,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.PropertyRequiresNonNegativeNumber' p0); " is 120.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,DataServiceStreamProviderWrapper_MustNotSetContentTypeAndEtag,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.DataServiceStreamProviderWrapper_MustNotSetContentTypeAndEtag' p0); " is 148.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_RequestUriDoesNotHaveTheRightBaseUri,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_RequestUriDoesNotHaveTheRightBaseUri' p0' p1); " is 138.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_RequestUriCannotBeBasedOnBaseUri,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_RequestUriCannotBeBasedOnBaseUri' p0' p1); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,CannotCreateInstancesOfAbstractType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.CannotCreateInstancesOfAbstractType' p0); " is 122.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_InvalidPropertyNameSpecified,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_InvalidPropertyNameSpecified' p0' p1); " is 130.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_DereferencingNullPropertyValue,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_DereferencingNullPropertyValue' p0); " is 128.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_CannotSetCollectionsToNull,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_CannotSetCollectionsToNull' p0); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_CannotSetTopLevelResourceToNull,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_CannotSetTopLevelResourceToNull' p0); " is 129.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_ErrorInSettingPropertyValue,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_ErrorInSettingPropertyValue' p0); " is 125.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_PropertyValueCannotBeSet,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_PropertyValueCannotBeSet' p0); " is 122.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_ExceedsMaxObjectCountOnInsert,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_ExceedsMaxObjectCountOnInsert' p0); " is 127.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_CollectionTypeExpected,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_CollectionTypeExpected' p0' p1); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_OpenCollectionProperty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_OpenCollectionProperty' p0); " is 120.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_InvalidTypeSpecified,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_InvalidTypeSpecified' p0' p1); " is 122.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequestStream_MissingNameValueSeperator,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequestStream_MissingNameValueSeperator' p0); " is 129.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_CannotSpecifyValueOrChildElementsForNullElement,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_CannotSpecifyValueOrChildElementsForNullElement' p0); " is 145.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadRequest_LinkHrefMustReferToSingleResource,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadRequest_LinkHrefMustReferToSingleResource' p0); " is 131.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_DifferentContainerRights,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_DifferentContainerRights' p0' p1' p2' p3); " is 137.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_HasStreamAttributeEmpty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_HasStreamAttributeEmpty' p0); " is 124.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_NavigationPropertyUnbound,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_NavigationPropertyUnbound' p0' p1' p2); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_UnableToLoadMetadataForType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_UnableToLoadMetadataForType' p0); " is 128.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_UnsupportedStreamProperty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_UnsupportedStreamProperty' p0' p1); " is 130.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContext_PrimitiveTypeNotSupported,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContext_PrimitiveTypeNotSupported' p0' p1' p2); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ReflectionProvider_MultipleEntitySetsForSameType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ReflectionProvider_MultipleEntitySetsForSameType' p0' p1' p2' p3); " is 147.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ReflectionProvider_InvalidProperty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ReflectionProvider_InvalidProperty' p0' p1); " is 125.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ReflectionProvider_EntityTypeHasKeyButNoEntitySet,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ReflectionProvider_EntityTypeHasKeyButNoEntitySet' p0); " is 136.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ReflectionProvider_InvalidEntitySetProperty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ReflectionProvider_InvalidEntitySetProperty' p0' p1); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ReflectionProvider_EntityPropertyWithNoEntitySet,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ReflectionProvider_EntityPropertyWithNoEntitySet' p0' p1); " is 139.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ReflectionProvider_KeyPropertiesCannotBeIgnored,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ReflectionProvider_KeyPropertiesCannotBeIgnored' p0); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ReflectionProvider_ETagPropertyNameNotValid,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ReflectionProvider_ETagPropertyNameNotValid' p0' p1); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ReflectionProvider_HasStreamAttributeOnlyAppliesToEntityType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ReflectionProvider_HasStreamAttributeOnlyAppliesToEntityType' p0); " is 147.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ReflectionProvider_ComplexTypeWithNavigationProperty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ReflectionProvider_ComplexTypeWithNavigationProperty' p0' p1); " is 143.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ReflectionProvider_CollectionOfCollectionProperty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ReflectionProvider_CollectionOfCollectionProperty' p0' p1); " is 140.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ReflectionProvider_CollectionOfUnsupportedTypeProperty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ReflectionProvider_CollectionOfUnsupportedTypeProperty' p0' p1' p2); " is 149.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ReflectionProvider_ResourceTypeHasNoPublicallyVisibleProperties,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ReflectionProvider_ResourceTypeHasNoPublicallyVisibleProperties' p0); " is 150.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,TargetElementTypeOfTheUriSpecifiedDoesNotMatchWithTheExpectedType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.TargetElementTypeOfTheUriSpecifiedDoesNotMatchWithTheExpectedType' p0' p1); " is 156.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,ObjectContextServiceProvider_OSpaceTypeNotFound,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.ObjectContextServiceProvider_OSpaceTypeNotFound' p0); " is 134.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadProvider_UnableToGetPropertyInfo,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadProvider_UnableToGetPropertyInfo' p0' p1); " is 126.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadProvider_UnsupportedAncestorType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadProvider_UnsupportedAncestorType' p0' p1); " is 126.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadProvider_UnsupportedPropertyType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadProvider_UnsupportedPropertyType' p0' p1); " is 126.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadProvider_InconsistentEntityOrComplexTypeUsage,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadProvider_InconsistentEntityOrComplexTypeUsage' p0); " is 135.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadProvider_ResourceTypeMustBeDeclaringTypeForProperty,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadProvider_ResourceTypeMustBeDeclaringTypeForProperty' p0' p1); " is 145.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,BadProvider_PropertyMustBeNavigationPropertyOnType,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.BadProvider_PropertyMustBeNavigationPropertyOnType' p0' p1); " is 141.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,MetadataProviderUtils_UnsupportedPrimitiveTypeKind,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.MetadataProviderUtils_UnsupportedPrimitiveTypeKind' p0); " is 137.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,MetadataProviderUtils_ConversionError,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.MetadataProviderUtils_ConversionError' p0' p1' p2); " is 132.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,MetadataProviderUtils_PropertiesMustNotContainReservedChars,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.MetadataProviderUtils_PropertiesMustNotContainReservedChars' p0' p1); " is 150.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,MetadataProviderEdmModel_UnsupportedSchemaTypeKind,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.MetadataProviderEdmModel_UnsupportedSchemaTypeKind' p0); " is 137.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,MetadataProviderEdmModel_UnsupportedResourceTypeKind,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.MetadataProviderEdmModel_UnsupportedResourceTypeKind' p0); " is 139.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,MetadataProviderEdmModel_UnsupportedCollectionItemType_PrimitiveOrComplex,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.MetadataProviderEdmModel_UnsupportedCollectionItemType_PrimitiveOrComplex' p0); " is 160.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,MetadataProviderEdmModel_UnsupportedCollectionItemType_EntityPrimitiveOrComplex,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.MetadataProviderEdmModel_UnsupportedCollectionItemType_EntityPrimitiveOrComplex' p0); " is 166.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,MetadataProviderEdmModel_UnsupportedResourcePropertyKind,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.MetadataProviderEdmModel_UnsupportedResourcePropertyKind' p0); " is 143.
Long Statement,Microsoft.OData.Service,Strings,C:\repos\OData_odata.net\test\FunctionalTests\Service\Parameterized.Microsoft.OData.Service.cs,PlatformHelper_DateTimeOffsetMustContainTimeZone,The length of the statement  "            return Microsoft.OData.Service.TextRes.GetString(Microsoft.OData.Service.TextRes.PlatformHelper_DateTimeOffsetMustContainTimeZone' p0); " is 135.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionLexerUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\ExpressionLexerUtils.cs,IsInfinityOrNaNDouble,The length of the statement  "            // For now we behave exactly the same as WCF DS' we should consider "fixing" this bug in ODataLib' but it is technically a breaking change! " is 139.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionLexerUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\ExpressionLexerUtils.cs,IsInfinityLiteralDouble,The length of the statement  "            // For now we behave exactly the same as WCF DS' we should consider "fixing" this bug in ODataLib' but it is technically a breaking change! " is 139.
Long Statement,Microsoft.OData.Service.Parsing,SkipTokenExpressionBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\SkipTokenExpressionBuilder.cs,BuildSkipTokenFilter,The length of the statement  "            foreach (var v in WebUtil.Zip(topLevelOrderingInfo.OrderingExpressions' skipToken' (x' y) => new { Order = x' Value = y })) " is 123.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,Visit,The length of the statement  "                this.functionExpressionBinder.CheckAndPromoteOperands(typeof(OperationSignatures.ILogicalSignatures)' node.OperatorKind' ref left' ref right); " is 142.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,Visit,The length of the statement  "                this.functionExpressionBinder.CheckAndPromoteOperands(typeof(OperationSignatures.IArithmeticSignatures)' node.OperatorKind' ref left' ref right);     " is 145.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,Visit,The length of the statement  "                Debug.Assert(targetType != null' "TryCreateLiteral value should have a public spatial type in its hierarchy"' "Value type : {0}"' node.Value.ToString()); " is 153.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,Visit,The length of the statement  "            Expression call = Expression.Call(null /* instance */' OpenTypeMethods.GetValueOpenPropertyMethodInfo' source' Expression.Constant(node.Name)); " is 143.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,Visit,The length of the statement  "            Expression call = Expression.Call(null /* instance */' OpenTypeMethods.GetCollectionValueOpenPropertyMethodInfo' source' Expression.Constant(node.Name)); " is 153.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,Visit,The length of the statement  "                this.functionExpressionBinder.CheckAndPromoteOperand(typeof(OperationSignatures.INegationSignatures)' node.OperatorKind' ref expr); " is 131.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,Visit,The length of the statement  "                this.functionExpressionBinder.CheckAndPromoteOperand(typeof(OperationSignatures.INotSignatures)' node.OperatorKind' ref expr); " is 126.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateComparison,The length of the statement  "                this.functionExpressionBinder.CheckAndPromoteOperands(typeof(OperationSignatures.IRelationalSignatures)' operatorKind' ref left' ref right); " is 140.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,GetPublicSpatialBaseType,The length of the statement  "            Debug.Assert(publicSpatialBaseType != null' "TryCreateLiteral value should have a public spatial type in its hierarchy"' "Value type : {0}"' spatialValue.ToString()); " is 166.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslatePropertyAccess,The length of the statement  "            ResourceSetWrapper container = (navigationSource != null && !(navigationSource is IEdmUnknownEntitySet)) ? ((IResourceSetBasedEdmEntitySet)navigationSource).ResourceSet : null; " is 176.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslatePropertyAccess,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.BadRequest_InvalidPropertyNameSpecified(property.Name' currentResourceType.FullName)); " is 143.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslatePropertyAccess,The length of the statement  "                propertyAccess = Expression.Call(null /*instance*/' DataServiceProviderMethods.GetValueMethodInfo' source' Expression.Constant(property)); " is 138.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateFunctionCall,The length of the statement  "            bool openParameters = !functionDescriptions[0].IsTypeCheckOrCast && arguments.Any(OpenTypeMethods.IsOpenPropertyExpression); " is 124.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateFunctionCall,The length of the statement  "                string message = Strings.RequestQueryParser_NoApplicableFunction(functionName' FunctionDescription.BuildSignatureList(functionName' functionDescriptions)); " is 155.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateFunctionCall,The length of the statement  "                if (function.ConversionFunction == FunctionDescription.BinaryIsOfResourceType || function.ConversionFunction == FunctionDescription.BinaryCastResourceType) " is 155.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateFunctionCall,The length of the statement  "                    finalArguments[arguments.Length] = Expression.Constant(OpenTypeMethods.IsOpenPropertyExpression(arguments[0])' typeof(bool)); " is 125.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateFunctionCall,The length of the statement  "                Debug.Assert(originalArguments.Length == arguments.Length' "originalArguments.Length == arguments.Length -- arguments should not be added/removed"); " is 148.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateLambda,The length of the statement  "            // to emulate the old null-propagation behavior of Any/All handling' we need to peek at the source of the lambda and see if it is a type cast. " is 142.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateLambda,The length of the statement  "                    string message = Strings.RequestUriProcessor_TypeIdentifierCannotBeSpecifiedAfterTypeIdentifier(((CollectionResourceCastNode)sourceNode).ItemType.FullName()' castNode.ItemType.FullName()); " is 188.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateLambda,The length of the statement  "                Debug.Assert(node.Body.Kind == QueryNodeKind.Constant && (bool)((ConstantNode)node.Body).Value' "Not having a range variable indicates this must be an empty any"); " is 163.
Long Statement,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateLambda,The length of the statement  "            ParameterExpression predicateParameter = Expression.Parameter(BaseServiceProvider.GetIEnumerableElement(source.Type)' node.CurrentRangeVariable.Name); " is 150.
Long Statement,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,FindMethod,The length of the statement  "            const BindingFlags Flags = BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Instance; " is 121.
Long Statement,Microsoft.OData.Service.Parsing,DefaultLiteralParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\LiteralParser.cs,TryParseLiteral,The length of the statement  "                Debug.Assert(!targetType.IsSpatial()' "Not supported for spatial types' as they cannot be part of a key' etag' or skiptoken"); " is 126.
Long Statement,Microsoft.OData.Service.Parsing,DefaultLiteralParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\LiteralParser.cs,TryRemoveFormattingAndConvert,The length of the statement  "                Debug.Assert(!targetType.IsSpatial()' "Not supported for spatial types' as they cannot be part of a key' etag' or skiptoken"); " is 126.
Long Statement,Microsoft.OData.Service.Parsing,KeysAsSegmentsLiteralParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\LiteralParser.cs,TryParseLiteral,The length of the statement  "                Debug.Assert(!targetType.IsSpatial()' "Not supported for spatial types' as they cannot be part of a key' etag' or skiptoken"); " is 126.
Long Statement,Microsoft.OData.Service.Parsing,KeysAsSegmentsLiteralParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\LiteralParser.cs,UnescapeLeadingDollarSign,The length of the statement  "                    Debug.Assert(text.Length > 0 && text[1] == '$'' "2nd character should also be '$'' otherwise it would have been treated as a system segment."); " is 143.
Long Statement,Microsoft.OData.Service.Parsing,PrimitiveParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\LiteralParser.cs,TryRemoveLiteralSuffix,The length of the statement  "                if (text.Length <= suffix.Length || IsValidNumericConstant(text) || !text.EndsWith(suffix' StringComparison.OrdinalIgnoreCase)) " is 127.
Long Statement,Microsoft.OData.Service.Parsing,WellKnownTextParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\WellKnownTextParser.cs,TryParseSpatialLiteral,The length of the statement  "                var worked = TryParseSpatialLiteral(literalText' XmlConstants.LiteralPrefixGeography' wellKnownTextSqlFormatter' out geography); " is 128.
Long Statement,Microsoft.OData.Service.Parsing,WellKnownTextParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\WellKnownTextParser.cs,TryParseSpatialLiteral,The length of the statement  "                var worked = TryParseSpatialLiteral(literalText' XmlConstants.LiteralPrefixGeometry' wellKnownTextSqlFormatter' out geometry); " is 126.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,CreateQuery,The length of the statement  "            return (IQueryable)CreateQueryMethodInfo.MakeGenericMethod(source.ElementType()).Invoke(provider' new object[] { source }); " is 123.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,Where,The length of the statement  "            Debug.Assert(genericMethodInfo != null && genericMethodInfo.IsGenericMethod' "genericMethodInfo != null && genericMethodInfo.IsGenericMethod"); " is 143.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,SelectMany,The length of the statement  "            Debug.Assert(genericMethodInfo != null && genericMethodInfo.IsGenericMethod' "genericMethodInfo != null && genericMethodInfo.IsGenericMethod"); " is 143.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,CallMethodWithTypeParam,The length of the statement  "            Debug.Assert(genericMethodInfo != null && genericMethodInfo.IsGenericMethod' "genericMethodInfo != null && genericMethodInfo.IsGenericMethod"); " is 143.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,CallMethodWithSelector,The length of the statement  "            Debug.Assert(genericMethodInfo != null && genericMethodInfo.IsGenericMethod' "genericMethodInfo != null && genericMethodInfo.IsGenericMethod"); " is 143.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,CallMethodWithSelector,The length of the statement  "            Debug.Assert(selector.Type == typeof(Func<'>).MakeGenericType(elementType' selector.Body.Type)' "selector should be of type Expression<Func<T1' T2>>"); " is 151.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,CallMethodWithCount,The length of the statement  "            Debug.Assert(genericMethodInfo != null && genericMethodInfo.IsGenericMethod' "genericMethodInfo != null && genericMethodInfo.IsGenericMethod"); " is 143.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,CallMethodWithNoParam,The length of the statement  "            Debug.Assert(genericMethodInfo != null && genericMethodInfo.IsGenericMethod' "genericMethodInfo != null && genericMethodInfo.IsGenericMethod"); " is 143.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionUtils.cs,CallMethodWithPredicate,The length of the statement  "            Debug.Assert(genericMethodInfo != null && genericMethodInfo.IsGenericMethod' "genericMethodInfo != null && genericMethodInfo.IsGenericMethod"); " is 143.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,ExpandIdentifierAsFunction,The length of the statement  "            bool matched = this.CurrentToken.Kind == ExpressionTokenKind.Identifier && this.PeekNextToken().Kind == ExpressionTokenKind.OpenParen; " is 134.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,HandleTypePrefixedLiterals,The length of the statement  "            if (String.Equals(tokenText' XmlConstants.LiteralPrefixBinary' StringComparison.OrdinalIgnoreCase) || tokenText == "X" || tokenText == "x") " is 139.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,MakeBestGuessOnNoSuffixStr,The length of the statement  "            // look at precision:   "3258.67876576549" may be sinle/double/decimal' "3258.678765765489753678965390" must be decimal. " is 120.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,MakeBestGuessOnNoSuffixStr,The length of the statement  "            // (2) then let MetadataUtilsCommon.CanConvertPrimitiveTypeTo() method does further promotion when knowing expected sematics type.  " is 130.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,MakeBestGuessOnNoSuffixStr,The length of the statement  "                bool doubleCanBeDecimalR = decimal.TryParse(tmpDouble.ToString("R"' CultureInfo.InvariantCulture)' out doubleToDecimalR); " is 121.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,MakeBestGuessOnNoSuffixStr,The length of the statement  "                bool doubleCanBeDecimalN = decimal.TryParse(tmpDouble.ToString("N29"' CultureInfo.InvariantCulture)' out doubleToDecimalN); " is 123.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,MakeBestGuessOnNoSuffixStr,The length of the statement  "                if ((doubleCanBeDecimalR && doubleToDecimalR != tmpDecimal) || (!doubleCanBeDecimalR && doubleCanBeDecimalN && doubleToDecimalN != tmpDecimal)) " is 143.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,MakeBestGuessOnNoSuffixStr,The length of the statement  "            // e.g. for text "123.2"' 123.2f should be == 123.2d' but normal casting (double)(123.2f) will return 123.19999694824219 thus becomes != 123.2d " is 143.
Long Statement,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,MakeBestGuessOnNoSuffixStr,The length of the statement  "            if (canBeSingle && canBeDouble && (double.Parse(tmpFloat.ToString("R"' CultureInfo.InvariantCulture)' CultureInfo.InvariantCulture) != tmpDouble)) " is 146.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "            Dictionary<string' FunctionDescription[]> result = new Dictionary<string' FunctionDescription[]>(StringComparer.Ordinal); " is 121.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "            result.Add("replace"' new FunctionDescription[] { StringInstanceFunction(FunctionNameClrStringReplace' typeof(string)' typeof(string)) }); " is 138.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "                CreateFunctionDescription(typeof(string)' false /* instance */' true /* method */' "Concat"' typeof(string)' typeof(string)) " is 124.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "                new FunctionDescription(FunctionNameIsOf' new Type[] { typeof(ResourceType) }' FunctionDescription.UnaryIsOfResourceType)' " is 122.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "                new FunctionDescription(FunctionNameIsOf' new Type[] { typeof(object)' typeof(ResourceType) }' FunctionDescription.BinaryIsOfResourceType)' " is 139.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "                castSignatures.Add(new FunctionDescription(FunctionNameCast' new Type[] { primitiveTypes[i].InstanceType' typeof(Type) }' FunctionDescription.BinaryCast)); " is 155.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "            castSignatures.Add(new FunctionDescription(FunctionNameCast' new Type[] { typeof(Type) }' FunctionDescription.UnaryCast)); " is 122.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "            castSignatures.Add(new FunctionDescription(FunctionNameCast' new Type[] { typeof(object)' typeof(Type) }' FunctionDescription.BinaryCast)); " is 139.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "            castSignatures.Add(new FunctionDescription(FunctionNameCast' new Type[] { typeof(ResourceType) }' FunctionDescription.UnaryCastResourceType)); " is 142.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "            castSignatures.Add(new FunctionDescription(FunctionNameCast' new Type[] { typeof(object)' typeof(ResourceType) }' FunctionDescription.BinaryCastResourceType)); " is 159.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "                CreateFunctionDescription(typeof(GeographyOperationsExtensions)' false /* instance */' true /* method */' "Distance"' typeof(GeographyPoint)' typeof(GeographyPoint))' " is 166.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "                CreateFunctionDescription(typeof(GeometryOperationsExtensions)' false /* instance */' true /* method */' "Distance"' typeof(GeometryPoint)' typeof(GeometryPoint))' " is 163.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "                CreateFunctionDescription(typeof(GeographyOperationsExtensions)' false /* instance */' true /* method */' "Length"' typeof(GeographyLineString))' " is 145.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "                CreateFunctionDescription(typeof(GeometryOperationsExtensions)' false /* instance */' true /* method */' "Length"' typeof(GeometryLineString))' " is 143.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "                CreateFunctionDescription(typeof(GeographyOperationsExtensions)' false /* instance */' true /* method */' "Intersects"' typeof(GeographyPoint)' typeof(GeographyPolygon))' " is 170.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The length of the statement  "                CreateFunctionDescription(typeof(GeometryOperationsExtensions)' false /* instance */' true /* method */' "Intersects"' typeof(GeometryPoint)' typeof(GeometryPolygon))' " is 167.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,UnaryIsOfResourceType,The length of the statement  "            Debug.Assert(((ConstantExpression)arguments[0]).Type == typeof(ResourceType)' "Constant expression type should be ResourceType"); " is 129.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryIsOfResourceType,The length of the statement  "            Debug.Assert(((ConstantExpression)arguments[1]).Type == typeof(ResourceType)' "Constant expression type should be ResourceType"); " is 129.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryIsOfResourceType,The length of the statement  "            return Expression.Call(null' callOpenTypeMethod ? OpenTypeMethods.TypeIsMethodInfo : DataServiceProviderMethods.TypeIsMethodInfo' arguments[0]' arguments[1]); " is 158.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,UnaryCastResourceType,The length of the statement  "            Debug.Assert(((ConstantExpression)arguments[0]).Type == typeof(ResourceType)' "Constant expression type should be ResourceType"); " is 129.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryCastResourceType,The length of the statement  "            Debug.Assert(((ConstantExpression)arguments[1]).Type == typeof(ResourceType)' "Constant expression type should be ResourceType"); " is 129.
Long Statement,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryCastResourceType,The length of the statement  "            return Expression.Call(null' callOpenTypeMethod ? OpenTypeMethods.ConvertMethodInfo : DataServiceProviderMethods.ConvertMethodInfo' arguments[0]' arguments[1]); " is 160.
Long Statement,Microsoft.OData.Service.Parsing,RequestQueryParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\RequestQueryParser.cs,OrderBy,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.RequestQueryParser_OrderByDoesNotSupportType(WebUtil.GetTypeName(selectorType))); " is 138.
Long Statement,Microsoft.OData.Service.Parsing,RequestQueryParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\RequestQueryParser.cs,OrderBy,The length of the statement  "                    queryExpr = o.IsAscending ? queryExpr.QueryableOrderBy(selectorLambda) : queryExpr.QueryableOrderByDescending(selectorLambda); " is 126.
Long Statement,Microsoft.OData.Service.Parsing,RequestQueryParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\RequestQueryParser.cs,OrderBy,The length of the statement  "                    queryExpr = o.IsAscending ? queryExpr.QueryableThenBy(selectorLambda) : queryExpr.QueryableThenByDescending(selectorLambda); " is 124.
Long Statement,Microsoft.OData.Service.Parsing,RequestQueryParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\RequestQueryParser.cs,Where,The length of the statement  "                (requestDescription.TargetResourceSet == null && (requestDescription.TargetResourceType == null || requestDescription.TargetResourceType.ResourceTypeKind != ResourceTypeKind.EntityType)) || " is 189.
Long Statement,Microsoft.OData.Service.Parsing,RequestQueryParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\RequestQueryParser.cs,Where,The length of the statement  "                (requestDescription.TargetResourceType != null && requestDescription.TargetResourceType.ResourceTypeKind == ResourceTypeKind.EntityType)' " is 137.
Long Statement,Microsoft.OData.Service.Parsing,RequestQueryParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\RequestQueryParser.cs,Where,The length of the statement  "                requestDescription.TargetResourceType != null && requestDescription.TargetResourceType.InstanceType == parameterForIt.Type' " is 123.
Long Statement,Microsoft.OData.UriParser,SelectExpandClauseExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\SemanticAst\SelectExpandClauseExtensions.cs,Traverse,The length of the statement  "            foreach (ExpandedNavigationSelectItem expandSelectItem in selectExpandClause.SelectedItems.Where(I => I.GetType() == typeof(ExpandedNavigationSelectItem))) " is 155.
Long Statement,Microsoft.OData.UriParser,SelectExpandClauseExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\SemanticAst\SelectExpandClauseExtensions.cs,Traverse,The length of the statement  "                string currentExpandClause = String.Join("/"' expandSelectItem.PathToNavigationProperty.WalkWith(PathSegmentToStringTranslator.Instance).ToArray()); " is 148.
Long Statement,Microsoft.OData.UriParser,SelectExpandClauseExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\SemanticAst\SelectExpandClauseExtensions.cs,Traverse,The length of the statement  "            foreach (ExpandedReferenceSelectItem expandSelectItem in selectExpandClause.SelectedItems.Where(I => I.GetType() == typeof(ExpandedReferenceSelectItem))) " is 153.
Long Statement,Microsoft.OData.UriParser,SelectExpandClauseExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\SemanticAst\SelectExpandClauseExtensions.cs,Traverse,The length of the statement  "                string currentExpandClause = String.Join("/"' expandSelectItem.PathToNavigationProperty.WalkWith(PathSegmentToStringTranslator.Instance).ToArray()); " is 148.
Long Statement,Microsoft.OData.UriParser,SelectExpandClauseExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\SemanticAst\SelectExpandClauseExtensions.cs,BuildExpandsForNode,The length of the statement  "            foreach (ExpandedNavigationSelectItem expandItem in selectExpandClause.SelectedItems.Where(I => I.GetType() == typeof(ExpandedNavigationSelectItem))) " is 149.
Long Statement,Microsoft.OData.UriParser,SelectExpandClauseExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\SemanticAst\SelectExpandClauseExtensions.cs,BuildExpandsForNode,The length of the statement  "                string currentExpandClause = String.Join("/"' expandItem.PathToNavigationProperty.WalkWith(PathSegmentToStringTranslator.Instance).ToArray()); " is 142.
Long Statement,Microsoft.OData.UriParser,SelectExpandClauseExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\SemanticAst\SelectExpandClauseExtensions.cs,BuildExpandsForNode,The length of the statement  "            foreach (ExpandedReferenceSelectItem expandItem in selectExpandClause.SelectedItems.Where(I => I.GetType() == typeof(ExpandedReferenceSelectItem))) " is 147.
Long Statement,Microsoft.OData.UriParser,SelectExpandClauseExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\SemanticAst\SelectExpandClauseExtensions.cs,BuildExpandsForNode,The length of the statement  "                string currentExpandClause = String.Join("/"' expandItem.PathToNavigationProperty.WalkWith(PathSegmentToStringTranslator.Instance).ToArray()); " is 142.
Long Statement,Microsoft.OData.Json,JsonSharedUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Json\JsonSharedUtils.cs,ValueTypeMatchesJsonType,The length of the statement  "                // If the value being serialized is of a basic type where we can rely on just the JSON representation to convey type information' then never write the type name. " is 161.
Long Statement,Microsoft.OData.Json,JsonSharedUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Json\JsonSharedUtils.cs,ValueTypeMatchesJsonType,The length of the statement  "                    // (i.e.' if the property is open or the property type is assumed to be unknown' as is the case when writing in full metadata mode). " is 132.
Long Statement,Microsoft.OData.Metadata,EdmLibraryExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\EdmLibraryExtensions.cs,Clone,The length of the statement  "                            return new EdmDecimalTypeReference(primitiveType' nullable' decimalTypeReference.Precision' decimalTypeReference.Scale); " is 120.
Long Statement,Microsoft.OData.Metadata,EdmLibraryExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\EdmLibraryExtensions.cs,Clone,The length of the statement  "                            throw new ODataException(ErrorStrings.General_InternalError(InternalErrorCodesCommon.EdmLibraryExtensions_Clone_PrimitiveTypeKind)); " is 132.
Long Statement,Microsoft.OData.Metadata,EdmLibraryExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\EdmLibraryExtensions.cs,Clone,The length of the statement  "                    throw new ODataException(ErrorStrings.General_InternalError(InternalErrorCodesCommon.EdmLibraryExtensions_Clone_TypeKind)); " is 123.
Long Statement,Microsoft.OData.Metadata,EdmLibraryExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\EdmLibraryExtensions.cs,OperationImportGroupFullName,The length of the statement  "            Debug.Assert(operationImportGroup != null && operationImportGroup.Any()' "operationImportGroup != null && operationImportGroup.Any()"); " is 135.
Long Statement,Microsoft.OData.Metadata,EdmLibraryExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\EdmLibraryExtensions.cs,OperationImportGroupFullName,The length of the statement  "            Debug.Assert(operationImportGroup.All(f => f.FullName() == fullName)' "operationImportGroup.All(f => f.FullName() == fullName)"); " is 129.
Long Statement,Microsoft.OData.Metadata,EdmLibraryExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\EdmLibraryExtensions.cs,ToTypeReference,The length of the statement  "                    throw new ODataException(ErrorStrings.General_InternalError(InternalErrorCodesCommon.EdmLibraryExtensions_ToTypeReference)); " is 124.
Long Statement,Microsoft.OData.Metadata,EdmLibraryExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\EdmLibraryExtensions.cs,ResolveOperationImports,The length of the statement  "                operationNameWithoutContainerOrNamespace = functionImportNameWithoutParameterTypes.Substring(lastPeriodPos' functionImportNameWithoutParameterTypes.Length - lastPeriodPos).TrimStart('.'); " is 187.
Long Statement,Microsoft.OData.Metadata,EdmLibraryExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\EdmLibraryExtensions.cs,ResolveOperationImports,The length of the statement  "            // if the container name of the operationImport doesn't equal the current container' don't search just return empty as there are no matches. " is 140.
Long Statement,Microsoft.OData.Metadata,EdmLibraryExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\EdmLibraryExtensions.cs,ResolveOperationImports,The length of the statement  "            IEnumerable<IEdmOperationImport> operationImports = container.FindOperationImports(operationNameWithoutContainerOrNamespace); " is 125.
Long Statement,Microsoft.OData.Metadata,EdmLibraryExtensions,C:\repos\OData_odata.net\src\Microsoft.OData.Core\Metadata\EdmLibraryExtensions.cs,ToTypeReference,The length of the statement  "                    throw new ODataException(ErrorStrings.General_InternalError(InternalErrorCodesCommon.EdmLibraryExtensions_PrimitiveTypeReference)); " is 131.
Long Statement,Microsoft.OData,ErrorUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\ErrorUtils.cs,WriteXmlError,The length of the statement  "            writer.WriteStartElement(ODataMetadataConstants.ODataMetadataNamespacePrefix' ODataMetadataConstants.ODataErrorElementName' ODataMetadataConstants.ODataMetadataNamespace); " is 171.
Long Statement,Microsoft.OData,ErrorUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\ErrorUtils.cs,WriteXmlError,The length of the statement  "            writer.WriteElementString(ODataMetadataConstants.ODataMetadataNamespacePrefix' ODataMetadataConstants.ODataErrorCodeElementName' ODataMetadataConstants.ODataMetadataNamespace' code); " is 182.
Long Statement,Microsoft.OData,ErrorUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\ErrorUtils.cs,WriteXmlError,The length of the statement  "            writer.WriteElementString(ODataMetadataConstants.ODataMetadataNamespacePrefix' ODataMetadataConstants.ODataErrorMessageElementName' ODataMetadataConstants.ODataMetadataNamespace' message); " is 188.
Long Statement,Microsoft.OData,ErrorUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\ErrorUtils.cs,WriteXmlError,The length of the statement  "                WriteXmlInnerError(writer' innerError' ODataMetadataConstants.ODataInnerErrorElementName' /* recursionDepth */ 0' maxInnerErrorDepth); " is 134.
Long Statement,Microsoft.OData,ErrorUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\ErrorUtils.cs,WriteXmlInnerError,The length of the statement  "            writer.WriteStartElement(ODataMetadataConstants.ODataMetadataNamespacePrefix' innerErrorElementName' ODataMetadataConstants.ODataMetadataNamespace); " is 148.
Long Statement,Microsoft.OData,ErrorUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\ErrorUtils.cs,WriteXmlInnerError,The length of the statement  "            writer.WriteStartElement(ODataMetadataConstants.ODataInnerErrorMessageElementName' ODataMetadataConstants.ODataMetadataNamespace); " is 130.
Long Statement,Microsoft.OData,ErrorUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\ErrorUtils.cs,WriteXmlInnerError,The length of the statement  "            writer.WriteStartElement(ODataMetadataConstants.ODataInnerErrorTypeElementName' ODataMetadataConstants.ODataMetadataNamespace); " is 127.
Long Statement,Microsoft.OData,ErrorUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\ErrorUtils.cs,WriteXmlInnerError,The length of the statement  "            writer.WriteStartElement(ODataMetadataConstants.ODataInnerErrorStackTraceElementName' ODataMetadataConstants.ODataMetadataNamespace); " is 133.
Long Statement,Microsoft.OData,ErrorUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\ErrorUtils.cs,WriteXmlInnerError,The length of the statement  "                WriteXmlInnerError(writer' innerError.InnerError' ODataMetadataConstants.ODataInnerErrorInnerErrorElementName' recursionDepth' maxInnerErrorDepth); " is 147.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderBehavior,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderBehavior.cs,HasReflectionOrEntityFrameworkProviderQueryBehavior,The length of the statement  "            return GetBehavior(providerBehavior).ProviderQueryBehavior == ProviderQueryBehaviorKind.ReflectionProviderQueryBehavior || " is 122.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderBehavior,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderBehavior.cs,HasEntityFrameworkProviderQueryBehavior,The length of the statement  "            return GetBehavior(providerBehavior).ProviderQueryBehavior == ProviderQueryBehaviorKind.EntityFrameworkProviderQueryBehavior; " is 125.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderBehavior,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderBehavior.cs,HasReflectionProviderQueryBehavior,The length of the statement  "            return GetBehavior(providerBehavior).ProviderQueryBehavior == ProviderQueryBehaviorKind.ReflectionProviderQueryBehavior; " is 120.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmOperation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmOperation.cs,CreateReturnTypeReference,The length of the statement  "            if (returnType.ResourceTypeKind == ResourceTypeKind.Collection || returnType.ResourceTypeKind == ResourceTypeKind.EntityCollection) " is 131.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmOperation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmOperation.cs,CreateReturnTypeReference,The length of the statement  "                return this.model.EnsureEntityPrimitiveOrComplexCollectionTypeReference(itemResourceType' returnType' /*annotations*/ null); " is 124.
Long Statement,Microsoft.OData.Service.Providers,OperationCache,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\OperationCache.cs,GetCacheKey,The length of the statement  "            ResourceType bindingType = operation.OperationBindingParameter == null ? null : operation.OperationBindingParameter.ParameterType; " is 130.
Long Statement,Microsoft.OData.Service.Providers,SelectedOperationsCache,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\SelectedOperationsCache.cs,AddSelectedOperations,The length of the statement  "                if (operationsAlreadySelected == null && !this.selectedOperationsByUriType.TryGetValue(specificSelectedTypeInUri' out operationsAlreadySelected)) " is 145.
Long Statement,Microsoft.OData.Service.Providers,SelectedOperationsCache,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\SelectedOperationsCache.cs,GetSelectedOperations,The length of the statement  "            if (!this.selectedOperationsByPayloadType.TryGetValue(instanceTypeBeingSerialized' out selectedOperationsForPayloadType)) " is 121.
Long Statement,Microsoft.OData.Service.Providers,SelectedOperationsCache,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\SelectedOperationsCache.cs,GetSelectedOperations,The length of the statement  "                selectedOperationsForPayloadType = this.GetSelectedAndBindableOperationsForAssignableTypes(instanceTypeBeingSerialized); " is 120.
Long Statement,Microsoft.OData.Service.Providers,SelectedOperationsCache,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\SelectedOperationsCache.cs,GetSelectedAndBindableOperationsForAssignableTypes,The length of the statement  "            // this filtering is needed because the key for something like Person will include actions bound to Employee and Manager as well' " is 129.
Long Statement,Microsoft.OData.Service.Providers,SelectedOperationsCache,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\SelectedOperationsCache.cs,GetSelectedAndBindableOperationsForAssignableTypes,The length of the statement  "            // so that something like ?$select=ActionName will match a varying set of actions based on which instance type is being serialized. " is 131.
Long Statement,Microsoft.OData.Service.Providers,SelectedOperationsCache,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\SelectedOperationsCache.cs,GetSelectedAndBindableOperationsForAssignableTypes,The length of the statement  "            selectedOperations = selectedOperations.Where(o => o.BindingParameter.ParameterType.IsAssignableFrom(instanceTypeBeingSerialized)); " is 131.
Long Statement,Microsoft.OData.Service.Providers,ServiceOperationProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceOperationProvider.cs,FindServiceOperations,The length of the statement  "            foreach (MethodInfo methodInfo in this.type.GetMethods(WebUtil.PublicInstanceBindingFlags | BindingFlags.FlattenHierarchy)) " is 123.
Long Statement,Microsoft.OData.Service.Providers,ServiceOperationProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceOperationProvider.cs,GetServiceOperationForMethod,The length of the statement  "            ServiceOperation operation = new ServiceOperation(method.Name' resultKind' resourceType' resourceSet' protocolMethod' parameters); " is 130.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntitySet,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntitySet.cs,FindNavigationTarget,The length of the statement  "            if (this.navigationBindingMappings == null || !this.navigationBindingMappings.TryGetValue(navigationProperty' out result)) " is 122.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntitySet,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntitySet.cs,FindNavigationTarget,The length of the statement  "                ResourceProperty navigationResourceProperty = declaringResourceType.TryResolvePropertiesDeclaredOnThisTypeByName(navigationProperty.Name); " is 138.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntitySet,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntitySet.cs,FindNavigationTarget,The length of the statement  "                // When parsing $select/$expand' the URI parser has no way of knowing which sets are visible. So' if a navigation property is found " is 131.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntitySet,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntitySet.cs,FindNavigationTarget,The length of the statement  "                // that does not have a target entity set' then it means that the target set is hidden. To avoid disclosing the existence of the set' act " is 137.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntitySet,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntitySet.cs,FindNavigationTarget,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Strings.BadRequest_InvalidPropertyNameSpecified(navigationProperty.Name' navigationProperty.DeclaringEntityType().FullName())); " is 176.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntitySet,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntitySet.cs,FindNavigationTarget,The length of the statement  "                // As with select and expand' when parsing the path' the URI parser has no way of knowing which sets are visible. See above. " is 124.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntitySet,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntitySet.cs,EnsureNavigationTarget,The length of the statement  "            this.navigationBindingMappings[navigationProperty][path] = new EdmNavigationPropertyBinding(navigationProperty' entitySet' new EdmPathExpression(path)); " is 152.
Long Statement,Microsoft.OData.Service.Providers,ServiceOperation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceOperation.cs,GetReturnTypeFromResultType,The length of the statement  "                throw new ArgumentException(Strings.ServiceOperation_ResultTypeAndKindMustMatch("resultKind"' "resultType"' ServiceOperationResultKind.Void)); " is 142.
Long Statement,Microsoft.OData.Service.Providers,ServiceOperation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceOperation.cs,GetReturnTypeFromResultType,The length of the statement  "            else if ((resultType.ResourceTypeKind == ResourceTypeKind.Primitive || resultType.ResourceTypeKind == ResourceTypeKind.ComplexType) && (resultKind == ServiceOperationResultKind.Enumeration || resultKind == ServiceOperationResultKind.QueryWithMultipleResults)) " is 259.
Long Statement,Microsoft.OData.Service.Providers,ServiceOperation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceOperation.cs,GetReturnTypeFromResultType,The length of the statement  "            else if (resultType.ResourceTypeKind == ResourceTypeKind.EntityType && (resultKind == ServiceOperationResultKind.Enumeration || resultKind == ServiceOperationResultKind.QueryWithMultipleResults)) " is 195.
Long Statement,Microsoft.OData.Service.Providers,ServiceOperation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceOperation.cs,GetReturnTypeFromResultType,The length of the statement  "                    "resultKind == ServiceOperationResultKind.DirectValue || resultKind == ServiceOperationResultKind.QueryWithSingleResult"); " is 122.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,ResolveActionResult,The length of the statement  "            Debug.Assert(actionSegment.Operation.ResultKind != ServiceOperationResultKind.Void' "actionSegment.Operation.ResultKind != ServiceOperationResultKind.Void"); " is 157.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,CreateInvokable,The length of the statement  "            Debug.Assert(serviceAction != null && serviceAction.Kind == OperationKind.Action' "serviceAction != null && serviceAction.Kind == OperationKind.Action"); " is 153.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,GetActionsBoundToAnyTypeInHierarchy,The length of the statement  "                this.ServiceActionByResourceTypeHierarchyCache[resourceType] = allServiceActionsBoundToHierarchy = this.GetServiceActionsBySpecificBindingParameterTypes(types); " is 160.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,GetServiceActionsByBindingParameterType,The length of the statement  "            Debug.Assert(bindingParameterType.ResourceTypeKind == ResourceTypeKind.EntityType' "Only entity types should be passed to this method."); " is 137.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,AdvertiseServiceAction,The length of the statement  "            Debug.Assert(serviceAction != null && serviceAction.Kind == OperationKind.Action' "serviceOperation != null && serviceAction.Kind == OperationKind.Action"); " is 156.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,AdvertiseServiceAction,The length of the statement  "            return this.ActionProvider.AdvertiseServiceAction(this.OperationContext' serviceAction.ServiceAction' resourceInstance' resourceInstanceInFeed' ref actionToSerialize); " is 167.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,GetServiceActionsBySpecificBindingParameterTypes,The length of the statement  "            // DEVNOTE: We create a list to force enumeration here (rather than waiting for serialization-time enumeration) to preserve call-order. " is 135.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,GetServiceActionsBySpecificBindingParameterTypes,The length of the statement  "            return bindingParameterTypes.SelectMany(resourceType => this.GetServiceActionsBySpecificBindingParameterType(resourceType' existingOperations)).ToList(); " is 153.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,GetServiceActionsBySpecificBindingParameterType,The length of the statement  "                IEnumerable<ServiceAction> serviceActions = this.actionProvider.GetServiceActionsByBindingParameterType(this.OperationContext' bindingParameterType); " is 149.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,GetServiceActionsBySpecificBindingParameterType,The length of the statement  "                        .Select(serviceAction => this.ValidateCanAdvertiseServiceAction(bindingParameterType' serviceAction' existingOperations)) " is 121.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,TryLoadActionProvider,The length of the statement  "                    // try to get the action resolver for overloads. This can either be the same instance as the action provider' or a separate instance returned by GetService. " is 156.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,TryLoadActionProvider,The length of the statement  "                    this.actionResolver = this.actionProvider as IDataServiceActionResolver ?? this.provider.GetService<IDataServiceActionResolver>(); " is 130.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,ValidateCanAdvertiseServiceAction,The length of the statement  "            Debug.Assert(resourceType != null && resourceType.ResourceTypeKind == ResourceTypeKind.EntityType' "resourceType != null && resourceType.ResourceTypeKind == ResourceTypeKind.EntityType"); " is 187.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,ValidateCanAdvertiseServiceAction,The length of the statement  "                throw new DataServiceException(500' Strings.DataServiceActionProviderWrapper_ServiceActionBindingParameterNull(serviceAction.Name)); " is 132.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,ValidateCanAdvertiseServiceAction,The length of the statement  "            // We only support advertising actions for entities and not entity collections. Since resourceType must be an entity type' " is 122.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,ValidateCanAdvertiseServiceAction,The length of the statement  "                throw new DataServiceException(500' Strings.DataServiceActionProviderWrapper_ResourceTypeMustBeAssignableToBindingParameterResourceType(serviceAction.Name' bindingParameterType.FullName' resourceType.FullName)); " is 211.
Long Statement,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,ValidateCanAdvertiseServiceAction,The length of the statement  "            Debug.Assert(bindingParameterType.ResourceTypeKind == ResourceTypeKind.EntityType' "We only support advertising actions for entities and not entity collections."); " is 163.
Long Statement,Microsoft.OData.Service.Providers,DataServiceExecutionProviderMethods,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceExecutionProviderMethods.cs,OfType,The length of the statement  "            return query.Provider.CreateQuery<TResult>(Expression.Call(null' DataServiceProviderMethods.OfTypeIQueryableMethodInfo.MakeGenericMethod(new Type[] { typeof(TSource)' typeof(TResult) })' new Expression[] { query.Expression' Expression.Constant(resourceType) })); " is 262.
Long Statement,Microsoft.OData.Service.Providers,DataServiceExecutionProviderMethods,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceExecutionProviderMethods.cs,ApplyProjections,The length of the statement  "            return (IQueryable)((IProjectionProvider)projectionProvider).ApplyProjections(source' (RootProjectionNode)rootProjectionNode); " is 126.
Long Statement,Microsoft.OData.Service.Providers,DataServiceExecutionProviderMethods,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceExecutionProviderMethods.cs,CreateServiceActionInvokable,The length of the statement  "            operationContext.CurrentDataService.ProcessingPipeline.AssertAndUpdateDebugStateAtInvokeServiceAction(operationContext.CurrentDataService); " is 139.
Long Statement,Microsoft.OData.Service.Providers,ExpressionEvaluator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpressionEvaluator.cs,VisitMethodCall,The length of the statement  "#pragma warning disable 618 // Disable "obsolete" warning for the IExpandProvider interface. Used for backwards compatibilty. " is 125.
Long Statement,Microsoft.OData.Service.Providers,ExpressionEvaluator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpressionEvaluator.cs,VisitMethodCall,The length of the statement  "                "Expecting method defined in Queryable' Enumerable' DataServiceExecutionProviderMethods or IExpandProvider. Current method: " + m.Method.DeclaringType.FullName + "." + m.Method.Name); " is 183.
Long Statement,Microsoft.OData.Service.Providers,ExpressionEvaluator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpressionEvaluator.cs,VisitMethodCall,The length of the statement  "                return Expression.Constant(m.Method.Invoke(instance' this.VisitExpressionList(m.Arguments).Select(arg => ((ConstantExpression)arg).Value).ToArray())); " is 150.
Long Statement,Microsoft.OData.Service.Providers,DataServiceExecutionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceExecutionProviderWrapper.cs,GetSingleResultFromRequest,The length of the statement  "            Debug.Assert(segmentInfo != null && segmentInfo.RequestEnumerable != null' "segmentInfo != null && segmentInfo.RequestEnumerable != null"); " is 139.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntityContainer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntityContainer.cs,LazyLoadEntitySet,The length of the statement  "                var resourceSetWithContainerQualifiedName = this.model.MetadataProvider.TryResolveResourceSet(this.containerName + "." + qualifiedName); " is 136.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntityContainer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntityContainer.cs,LazyLoadServiceOperationImports,The length of the statement  "                IEdmOperationImport foundOperationImport = this.model.EnsureDefaultEntityContainer().EnsureOperationImport(operationWrapper); " is 125.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntityContainer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntityContainer.cs,LazyLoadServiceOperationImports,The length of the statement  "                var operationWrapperQaulified = this.model.MetadataProvider.TryResolveServiceOperation(this.containerName + "." + qualifiedName); " is 129.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntityContainer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntityContainer.cs,LazyLoadServiceOperationImports,The length of the statement  "                    IEdmOperationImport foundOperationImport = this.model.EnsureDefaultEntityContainer().EnsureOperationImport(operationWrapperQaulified); " is 134.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntityContainer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntityContainer.cs,LazyLoadServiceOperationImports,The length of the statement  "                var operationName = this.model.MetadataProvider.GetNameFromContainerQualifiedName(qualifiedName' out nameIsContainerQualified); " is 127.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntityContainer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntityContainer.cs,LazyLoadServiceOperationImports,The length of the statement  "                var operation = this.model.ActionProviderWrapper.TryResolveServiceAction(operationName' MetadataProviderUtils.GetResourceType((IEdmType)null)); " is 143.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmEntityContainer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmEntityContainer.cs,EnsureOperationImport,The length of the statement  "                operationImport = operationImports.Cast<MetadataProviderEdmOperationImport>().SingleOrDefault(f => f.ServiceOperation == serviceOperation); " is 139.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,GetEntitySetName,The length of the statement  "                Debug.Assert(resourceSet.Name.Count(c => c == '.') == 1' "The resourceSet name should have exactly one period character."); " is 123.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,GetAssociationName,The length of the statement  "            ResourceAssociationSetEnd end1 = associationSet.End1.ResourceProperty != null ? associationSet.End1 : associationSet.End2; " is 122.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,GetAssociationName,The length of the statement  "            ResourceAssociationSetEnd end2 = (end1 == associationSet.End1 ? (associationSet.End2.ResourceProperty != null ? associationSet.End2 : null) : null); " is 148.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,GetMultiplicity,The length of the statement  "                property == null || property.IsOfKind(ResourcePropertyKind.ResourceReference) || property.IsOfKind(ResourcePropertyKind.ResourceSetReference)' " is 142.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreatePrimitiveTypeReference,The length of the statement  "            Debug.Assert(resourceType.ResourceTypeKind == ResourceTypeKind.Primitive' "resourceType.ResourceTypeKind == ResourceTypeKind.Primitive"); " is 137.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,GetAndRemoveDefaultValue,The length of the statement  "            if (TryFindAndRemoveAnnotation(annotations' XmlConstants.CsdlDefaultValueAttributeName' out defaultValueAnnotationValue)) " is 121.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,ConvertCustomAnnotations,The length of the statement  "                        yield return new EdmDirectValueAnnotation(string.Empty' annotation.Key' new EdmStringConstant(EdmCoreModel.Instance.GetString(/*nullable*/true)' annotationStringValue)); " is 169.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,ConvertCustomAnnotations,The length of the statement  "                        yield return new EdmDirectValueAnnotation(xmlNamespace' localname' new EdmStringConstant(EdmCoreModel.Instance.GetString(/*nullable*/true)' annotationStringValue)); " is 164.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,ConvertCustomAnnotations,The length of the statement  "                        EdmStringConstant elementAnnotation = new EdmStringConstant(EdmCoreModel.Instance.GetString(/*nullable*/false)' xmlElementString); " is 130.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,FixUpNavigationPropertyWithAssociationSetData,The length of the statement  "            MetadataProviderEdmNavigationProperty metadataProviderNavigationProperty = navigationProperty as MetadataProviderEdmNavigationProperty; " is 135.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,ShouldDisablePrimitivePropertyNullValidation,The length of the statement  "            // can have different nullability than the backing CLR type' since that nullability can come from the underlying EF model. " is 122.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,GetResourceType,The length of the statement  "                // pull the original resource type from it. Instead' resolve the element type' then create an EntityCollectionResourceType " is 122.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,GetResourceType,The length of the statement  "            Debug.Assert(primitiveResourceType != null' "Could not determine a resource type for edm type: " + edmType.FullTypeName()); " is 123.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,ConvertAttributeAnnotationValue,The length of the statement  "                string bytesAsHexString = string.Concat(((byte[])annotationValue).Select(b => b.ToString("X2"' CultureInfo.InvariantCulture))); " is 127.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,GetPrimitiveTypeReferenceFromTypeAndFacets,The length of the statement  "                primitiveTypeReference = new EdmSpatialTypeReference(primitiveTypeReference.PrimitiveDefinition()' primitiveTypeReference.IsNullable' /*SRID*/ null); " is 149.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,ApplyFacetAnnotations,The length of the statement  "                    throw new InvalidOperationException(Service.Strings.MetadataProviderUtils_UnsupportedPrimitiveTypeKind(kind.ToString())); " is 121.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateBinaryTypeReference,The length of the statement  "            Debug.Assert(primitiveTypeReference.PrimitiveKind() == EdmPrimitiveTypeKind.Binary' "primitiveType.PrimitiveKind() == EdmPrimitiveTypeKind.Binary"); " is 148.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateBinaryTypeReference,The length of the statement  "            Debug.Assert(annotations.Where(kvp => kvp.Key == XmlConstants.CsdlNullableAttributeName).Count() == 0' "The nullable facet should have been removed from the annotations by now."); " is 179.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateBinaryTypeReference,The length of the statement  "                return primitiveTypeReference.IsNullable == nullableFacet ? primitiveTypeReference : new EdmBinaryTypeReference(primitiveTypeReference.PrimitiveDefinition()' nullableFacet); " is 173.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateBinaryTypeReference,The length of the statement  "            return new EdmBinaryTypeReference(primitiveTypeReference.PrimitiveDefinition()' nullableFacet' isMaxMaxLength' maxLength); " is 122.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateStringTypeReference,The length of the statement  "            Debug.Assert(annotations.Where(kvp => kvp.Key == XmlConstants.CsdlNullableAttributeName).Count() == 0' "The nullable facet should have been removed from the annotations by now."); " is 179.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateStringTypeReference,The length of the statement  "                return primitiveTypeReference.IsNullable == nullableFacet ? primitiveTypeReference : new EdmStringTypeReference(primitiveTypeReference.PrimitiveDefinition()' nullableFacet); " is 173.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateStringTypeReference,The length of the statement  "            return new EdmStringTypeReference(primitiveTypeReference.PrimitiveDefinition()' nullableFacet' isMaxMaxLength' maxLength' isUnicode); " is 133.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateDecimalTypeReference,The length of the statement  "            Debug.Assert(annotations.Where(kvp => kvp.Key == XmlConstants.CsdlNullableAttributeName).Count() == 0' "The nullable facet should have been removed from the annotations by now."); " is 179.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateDecimalTypeReference,The length of the statement  "                return primitiveTypeReference.IsNullable == nullableFacet ? primitiveTypeReference : new EdmDecimalTypeReference(primitiveTypeReference.PrimitiveDefinition()' nullableFacet); " is 174.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateTemporalTypeReference,The length of the statement  "            Debug.Assert(annotations.Where(kvp => kvp.Key == XmlConstants.CsdlNullableAttributeName).Count() == 0' "The nullable facet should have been removed from the annotations by now."); " is 179.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateTemporalTypeReference,The length of the statement  "                return primitiveTypeReference.IsNullable == nullableFacet ? primitiveTypeReference : new EdmTemporalTypeReference(primitiveTypeReference.PrimitiveDefinition()' nullableFacet); " is 175.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateSpatialTypeReference,The length of the statement  "            Debug.Assert(annotations.Where(kvp => kvp.Key == XmlConstants.CsdlNullableAttributeName).Count() == 0' "The nullable facet should have been removed from the annotations by now."); " is 179.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateSpatialTypeReference,The length of the statement  "            if (annotations.Count == 0 || !TryFindAndRemoveAnnotation(annotations' XmlConstants.CsdlSridAttributeName' out spatialReferenceIdentifierAnnotationValue)) " is 154.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateSpatialTypeReference,The length of the statement  "                return primitiveTypeReference.IsNullable == nullableFacet ? primitiveTypeReference : new EdmSpatialTypeReference(primitiveTypeReference.PrimitiveDefinition()' nullableFacet' null); " is 180.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateSpatialTypeReference,The length of the statement  "            int spatialReferenceIdentifier = ConvertAnnotationValue<int>(spatialReferenceIdentifierAnnotationValue' XmlConstants.CsdlSridAttributeName); " is 140.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,CreateSpatialTypeReference,The length of the statement  "            return new EdmSpatialTypeReference(primitiveTypeReference.PrimitiveDefinition()' nullableFacet' spatialReferenceIdentifier); " is 124.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,GetFixedLengthAnnotation,The length of the statement  "            if (TryFindAndRemoveAnnotation(annotations' XmlConstants.CsdlFixedLengthAttributeName' out isFixedLengthAnnotationValue)) " is 121.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,GetMaxLengthAnnotation,The length of the statement  "                throw new FormatException(Service.Strings.MetadataProviderUtils_ConversionError(XmlConstants.CsdlMaxLengthAttributeName' typeName' typeof(string).FullName)); " is 157.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,ConvertAnnotationValue,The length of the statement  "                throw new FormatException(Service.Strings.MetadataProviderUtils_ConversionError(facetName' typeName' typeof(T).FullName)); " is 122.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderUtils,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderUtils.cs,ConvertDefaultValue,The length of the statement  "                        string bytesAsHexString = string.Concat(((byte[])annotationValue).Select(b => b.ToString("X2"' CultureInfo.InvariantCulture))); " is 127.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,LoadAndValidateStreamProvider,The length of the statement  "                    throw new DataServiceException(500' Strings.DataServiceStreamProviderWrapper_MustImplementIDataServiceStreamProviderToSupportStreaming); " is 136.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,LoadAndValidateStreamProvider2,The length of the statement  "                throw new InvalidOperationException(Strings.DataServiceStreamProviderWrapper_MustImplementDataServiceStreamProvider2ToSupportNamedStreams); " is 139.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetReadStream,The length of the statement  "                string.IsNullOrEmpty(etagFromHeader) && !checkETagForEquality.HasValue || !string.IsNullOrEmpty(etagFromHeader) && checkETagForEquality.HasValue' " is 145.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetReadStream,The length of the statement  "                    readStream = InvokeApiCallAndValidateHeaders("IDataServiceStreamProvider.GetReadStream"' () => this.LoadAndValidateStreamProvider().GetReadStream(entity' etagFromHeader' checkETagForEquality' operationContext)' operationContext); " is 229.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetReadStream,The length of the statement  "                    readStream = InvokeApiCallAndValidateHeaders("IDataServiceStreamProvider2.GetReadStream"' () => this.LoadAndValidateStreamProvider2().GetReadStream(entity' streamProperty' etagFromHeader' checkETagForEquality' operationContext)' operationContext); " is 247.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetReadStream,The length of the statement  "                    WebUtil.WriteETagValueInResponseHeader(null' this.GetStreamETag(entity' streamProperty' operationContext)' operationContext.ResponseMessage); " is 141.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetReadStream,The length of the statement  "                WebUtil.WriteETagValueInResponseHeader(null' this.GetStreamETag(entity' streamProperty' operationContext)' operationContext.ResponseMessage); " is 141.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetWriteStream,The length of the statement  "                string.IsNullOrEmpty(etag) && !checkETagForEquality.HasValue || !string.IsNullOrEmpty(etag) && checkETagForEquality.HasValue' " is 125.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetWriteStream,The length of the statement  "                writeStream = InvokeApiCallAndValidateHeaders("IDataServiceStreamProvider.GetWriteStream"' () => this.LoadAndValidateStreamProvider().GetWriteStream(entity' etag' checkETagForEquality' operationContext)' operationContext); " is 222.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetWriteStream,The length of the statement  "                writeStream = InvokeApiCallAndValidateHeaders("IDataServiceStreamProvider2.GetWriteStream"' () => this.LoadAndValidateStreamProvider2().GetWriteStream(entity' streamProperty' etag' checkETagForEquality' operationContext)' operationContext); " is 240.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,DeleteStream,The length of the statement  "            InvokeApiCallAndValidateHeaders("IDataServiceStreamProvider.DeleteStream"' () => { this.LoadAndValidateStreamProvider().DeleteStream(entity' operationContext); return true; }' operationContext); " is 194.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetStreamContentType,The length of the statement  "                contentType = InvokeApiCallAndValidateHeaders("IDataServiceStreamProvider.GetStreamContentType"' () => this.LoadAndValidateStreamProvider().GetStreamContentType(entity' operationContext)' operationContext); " is 206.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetStreamContentType,The length of the statement  "                // Since named streams can be null' i.e. GetReadStream methods will return an empty stream' we allow the content type to be null. " is 129.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetStreamContentType,The length of the statement  "                contentType = InvokeApiCallAndValidateHeaders("IDataServiceStreamProvider2.GetStreamContentType"' () => this.LoadAndValidateStreamProvider2().GetStreamContentType(entity' streamProperty' operationContext)' operationContext); " is 224.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetReadStreamUri,The length of the statement  "                readStreamUri = InvokeApiCallAndValidateHeaders("IDataServiceStreamProvider.GetReadStreamUri"' () => this.LoadAndValidateStreamProvider().GetReadStreamUri(entity' operationContext)' operationContext); " is 200.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetReadStreamUri,The length of the statement  "                readStreamUri = InvokeApiCallAndValidateHeaders("IDataServiceStreamProvider2.GetReadStreamUri"' () => this.LoadAndValidateStreamProvider2().GetReadStreamUri(entity' streamProperty' operationContext)' operationContext); " is 218.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetReadStreamUri,The length of the statement  "                    throw new InvalidOperationException(Strings.DataServiceStreamProviderWrapper_GetReadStreamUriMustReturnAbsoluteUriOrNull); " is 122.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetStreamETag,The length of the statement  "                etag = InvokeApiCallAndValidateHeaders("IDataServiceStreamProvider.GetStreamETag"' () => this.LoadAndValidateStreamProvider().GetStreamETag(entity' operationContext)' operationContext); " is 185.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetStreamETag,The length of the statement  "                etag = InvokeApiCallAndValidateHeaders("IDataServiceStreamProvider2.GetStreamETag"' () => this.LoadAndValidateStreamProvider2().GetStreamETag(entity' streamProperty' operationContext)' operationContext); " is 203.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,ResolveType,The length of the statement  "            string resourceTypeName = InvokeApiCallAndValidateHeaders("IDataServiceStreamProvider.ResolveType"' () => this.LoadAndValidateStreamProvider().ResolveType(entitySetName' operationContext)' operationContext); " is 207.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,ResolveType,The length of the statement  "                throw new InvalidOperationException(Strings.DataServiceStreamProviderWrapper_ResolveTypeMustReturnValidResourceTypeName); " is 121.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,ResolveType,The length of the statement  "                throw new InvalidOperationException(Strings.DataServiceStreamProviderWrapper_ResolveTypeMustReturnValidResourceTypeName); " is 121.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetETagFromHeaders,The length of the statement  "            Debug.Assert(string.IsNullOrEmpty(host.GetRequestIfMatchHeader()) || string.IsNullOrEmpty(host.GetRequestIfNoneMatchHeader())' "IfMatch and IfNoneMatch should not be both set."); " is 178.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,InvokeApiCallAndValidateHeaders,The length of the statement  "            if (operationContext.ResponseStatusCode != 304 && (operationContext.ResponseMessage.GetHeader(XmlConstants.HttpContentType) != responseContentType || operationContext.ResponseMessage.GetHeader(XmlConstants.HttpResponseETag) != responseETag)) " is 241.
Long Statement,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,LoadStreamProvider,The length of the statement  "                    // Load IDataServiceStreamProvider if MaxProtocolVersion is V1/V2 or the V3+ service doesn't implement IDataServiceStreamProvider2. " is 131.
Long Statement,Microsoft.OData.Service.Providers,ExpandedProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpandedProjectionNode.cs,FindExpandedNode,The length of the statement  "            Debug.Assert(this.nodes.Count(node => node.Property == property && node.TargetResourceType.IsAssignableFrom(targetResourceType)) <= 1' "there must be only one property node with the given name and target resource type"); " is 220.
Long Statement,Microsoft.OData.Service.Providers,ExpandedProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpandedProjectionNode.cs,FindExpandedNode,The length of the statement  "                node => node.Property == property && node.TargetResourceType.IsAssignableFrom(targetResourceType)) as ExpandedProjectionNode; " is 125.
Long Statement,Microsoft.OData.Service.Providers,ExpandedProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpandedProjectionNode.cs,ApplyWildcardsAndSort,The length of the statement  "                List<ProjectionNode> derivedProjectionNodes = this.nodes.Where(n => !ResourceType.CompareReferences(n.TargetResourceType' this.ResourceType)).ToList(); " is 151.
Long Statement,Microsoft.OData.Service.Providers,ExpandedProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpandedProjectionNode.cs,ApplyPropertyToExistingNode,The length of the statement  "            Debug.Assert(property == null || property.Name == existingNode.PropertyName' "property == null || property.Name == existingNode.PropertyName"); " is 143.
Long Statement,Microsoft.OData.Service.Providers,ExpandedProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpandedProjectionNode.cs,VerifyPropertyMismatchAndExpandSelectMismatchScenario,The length of the statement  "            Debug.Assert(!expandNode || existingNode is ExpandedProjectionNode' "If expandNode is true' then the existingNode must be an ExpandedProjectionNode"); " is 150.
Long Statement,Microsoft.OData.Service.Providers,ExpandedProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpandedProjectionNode.cs,VerifyPropertyMismatchAndExpandSelectMismatchScenario,The length of the statement  "                Debug.Assert(property == null || existingNode.Property == null' "One of the properties must be null' since the types belong to the same inheritance chain' and cannot have different property instance from a given property name"); " is 228.
Long Statement,Microsoft.OData.Service.Providers,ExpandedProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpandedProjectionNode.cs,FindNode,The length of the statement  "            Debug.Assert(this.nodes.Count(p => p.PropertyName == propertyName) <= 1' "there must be only one property node with the given name"); " is 133.
Long Statement,Microsoft.OData.Service.Providers,ExpandedProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpandedProjectionNode.cs,AddNode,The length of the statement  "                    (n.TargetResourceType.IsAssignableFrom(node.TargetResourceType) || node.TargetResourceType.IsAssignableFrom(n.TargetResourceType))) == 0' " is 137.
Long Statement,Microsoft.OData.Service.Providers,ExpandedProjectionNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ExpandedProjectionNode.cs,AddNode,The length of the statement  "                this.hasExpandedPropertyOnDerivedType = this.hasExpandedPropertyOnDerivedType || (!ResourceType.CompareReferences(this.ResourceType' node.TargetResourceType)); " is 159.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetQueryRootForResourceSet,The length of the statement  "                throw new InvalidOperationException(s.Strings.DataServiceProviderWrapper_InvalidQueryRootType(resourceSet.Name' resourceSet.QueryRootType.FullName)); " is 149.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,InvokeServiceOperation,The length of the statement  "            Debug.Assert(serviceOperation.Kind == OperationKind.ServiceOperation' "serviceOperation.Kind == OperationKind.ServiceOperation"); " is 129.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleTypes,The length of the statement  "                    Debug.Assert(this.VisibleTypeCache.ContainsKey(type.FullName)' "this.VisibleTypeCache.ContainsKey(type.FullName) or else the type has not been validated"); " is 155.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleTypes,The length of the statement  "                // Hash set to make sure we only return each type once.  Note the hash set will use reference comparison for ResourceType. " is 122.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleTypes,The length of the statement  "                // The EqualityComparer<T>.Default property checks whether type T implements the System::IEquatable<T> interface and' if so' returns an EqualityComparer<T> " is 155.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleTypes,The length of the statement  "                // that uses that implementation. Otherwise' it returns an EqualityComparer<T> that uses the overrides of Object::Equals and Object::GetHashCode provided by T. " is 159.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleTypes,The length of the statement  "                    Debug.Assert(complexType.ResourceTypeKind == ResourceTypeKind.ComplexType' "complexType.ResourceTypeKind == ResourceTypeKind.ComplexType"); " is 139.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleTypes,The length of the statement  "                    Debug.Assert(this.VisibleTypeCache.ContainsKey(type.FullName)' "this.VisibleTypeCache.ContainsKey(type.FullName) or else the type has not been validated"); " is 155.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleOperations,The length of the statement  "                        throw new DataServiceException(500' s.Strings.DataServiceProviderWrapper_MultipleServiceOperationsWithSameName(serviceOperation.Name)); " is 135.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleOperations,The length of the statement  "                        throw new InvalidOperationException(s.Strings.DataServiceProviderWrapper_ActionHasNoBindableSet(serviceAction.Name' serviceAction.BindingParameter.ParameterType.FullName)); " is 172.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleOperations,The length of the statement  "                    serviceAction.ResultType == null || serviceAction.ResultType.ResourceTypeKind != ResourceTypeKind.EntityType || serviceAction.ResultSetPathExpression != null || serviceAction.ResourceSet.IsVisible' " is 197.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleOperations,The length of the statement  "                    "When the action returns an entity or entity collection type' the action must have a path expression or its result set is visible."); " is 133.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleOperations,The length of the statement  "                        throw new InvalidOperationException(s.Strings.DataServiceProviderWrapper_ActionHasNoVisibleSetReachableFromPathExpression(serviceAction.Name' serviceAction.ResultSetPathExpression.PathExpression)); " is 197.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceAssociationSet,The length of the statement  "            Debug.Assert(resourceProperty != null && !resourceProperty.IsOfKind(ResourcePropertyKind.Stream)' "resourceProperty != null && !resourceProperty.IsOfKind(ResourcePropertyKind.Stream)"); " is 185.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceAssociationSet,The length of the statement  "                    ResourceAssociationSetEnd relatedEnd = associationSet.GetRelatedResourceAssociationSetEnd(resourceSet' resourceType' resourceProperty); " is 135.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceAssociationSet,The length of the statement  "            associationSet = this.metadataProvider.GetResourceAssociationSet(resourceSet.ResourceSet' resourceType' resourceProperty); " is 122.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceAssociationSet,The length of the statement  "                ResourceAssociationSetEnd thisEnd = associationSet.GetResourceAssociationSetEnd(resourceSet' resourceType' resourceProperty); " is 125.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceAssociationSet,The length of the statement  "                ResourceAssociationSetEnd relatedEnd = associationSet.GetRelatedResourceAssociationSetEnd(resourceSet' resourceType' resourceProperty); " is 135.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceAssociationSet,The length of the statement  "                        relatedProperty = relatedType.TryResolvePropertyName(relatedEnd.ResourceProperty.Name' exceptKind: ResourcePropertyKind.Stream); " is 128.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,PopulateMetadataCacheItemForBuiltInProvider,The length of the statement  "                    foreach (var resourceProperty in derivedType.PropertiesDeclaredOnThisType.Where(p => p.Kind == ResourcePropertyKind.ResourceReference || p.Kind == ResourcePropertyKind.ResourceSetReference)) " is 190.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,PopulateMetadataCacheItemForBuiltInProvider,The length of the statement  "                foreach (var resourceProperty in resourceType.Properties.Where(p => p.Kind == ResourcePropertyKind.ResourceReference || p.Kind == ResourcePropertyKind.ResourceSetReference)) " is 173.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceSet,The length of the statement  "            ResourceAssociationSet associationSet = this.GetResourceAssociationSet(sourceResourceSet' sourceResourceType' navigationProperty); " is 130.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceSet,The length of the statement  "                ResourceAssociationSetEnd relatedEnd = associationSet.GetRelatedResourceAssociationSetEnd(sourceResourceSet' sourceResourceType' navigationProperty); " is 149.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetETagProperties,The length of the statement  "            Debug.Assert(resourceType != null && resourceType.ResourceTypeKind == ResourceTypeKind.EntityType' "Resource should be non-null and of an entity type"); " is 152.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetService,The length of the statement  "            // 1. Check if subclass of DataService<T> implements IServiceProvider. If it does' then call IServiceProvider.GetService() " is 122.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetEntityContainerAnnotations,The length of the statement  "                Debug.Assert(internalProvider != null' "Internally created providers must implement IDataServiceInternalProvider interface."); " is 126.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetNameFromContainerQualifiedName,The length of the statement  "            this.fullyQualifiedContainerNamePrefix = this.fullyQualifiedContainerNamePrefix ?? (string.IsNullOrEmpty(this.ContainerNamespace) ? this.containerNamePrefix : this.ContainerNamespace + "." + this.containerNamePrefix); " is 217.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetNameFromContainerQualifiedName,The length of the statement  "            // If name is empty (name can never be null)' it means the containerQualifiedName is "Namespace.ContainerName." or "ContainerName.". " is 132.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetNameFromContainerQualifiedName,The length of the statement  "            // We will return the original containerQualifiedName as it is and throw at a later point if the providers can't resolve the name. " is 130.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,ValidateResourceTypeReadOnly,The length of the statement  "                throw new DataServiceException(500' s.Strings.DataServiceProviderWrapper_ResourceTypeNotReadonly(resourceType.FullName)); " is 121.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceTypeAndReachableComplexTypes,The length of the statement  "                        Debug.Assert(candidateResourceType is CollectionResourceType' "Collection resource type must be an instance of CollectionResourceType."); " is 137.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceTypeAndReachableComplexTypes,The length of the statement  "                        // We have to check for derived complex types in collection property here since we can't do that during metadata creation " is 121.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceTypeAndReachableComplexTypes,The length of the statement  "                        // The ability to determine if a given type has derived types requires the IDSMP in hand (and thus all ResourceType methods are out of question) " is 144.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceTypeAndReachableComplexTypes,The length of the statement  "                        // We could verify this in the provider wrapper before we return a ResourceType' but that would mean walking all its properties " is 127.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceTypeAndReachableComplexTypes,The length of the statement  "                        // Since we're going ot fail in serializer/deserializer if we hit this anyway' and we kind of require services to test their $metadata " is 134.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceTypeAndReachableComplexTypes,The length of the statement  "                            candidateResourceType.ResourceTypeKind == ResourceTypeKind.Primitive || candidateResourceType.ResourceTypeKind == ResourceTypeKind.ComplexType' " is 143.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetReachableComplexTypesFromOperation,The length of the statement  "            complexTypes.AddRange(operation.Parameters.Where(p => p.ParameterType.ResourceTypeKind == ResourceTypeKind.ComplexType).Select(p => p.ParameterType)); " is 150.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,ValidateCollectionResourceType,The length of the statement  "            Debug.Assert(collectionResourceType.ItemType != ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))' "collectionResourceType.ItemType != ResourceType.GetPrimitiveResourceType(typeof(System.IO.Stream))"); " is 215.
Long Statement,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,ValidateCollectionResourceType,The length of the statement  "                    throw new DataServiceException(500' s.Strings.DataServiceProviderWrapper_CollectionOfComplexTypeWithDerivedTypes(collectionResourceType.ItemType.FullName)); " is 156.
Long Statement,Microsoft.OData.Service.Providers,EdmUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\EdmUtil.cs,FindExtendedProperty,The length of the statement  "                Debug.Assert(metadataProperty.PropertyKind == PropertyKind.Extended' "Metadata properties in the data services namespace should always be extended EDM properties"); " is 164.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetWrapper.cs,MinimumResponsePayloadVersion,The length of the statement  "            // If we encounter during serialization' anything greater than the computed response version' we will throw instream error. " is 123.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetWrapper.cs,GetEntitySerializableProperties,The length of the statement  "            Debug.Assert(entityType != null && entityType.ResourceTypeKind == ResourceTypeKind.EntityType' "entityType != null && entityType.ResourceTypeKind == ResourceTypeKind.EntityType"); " is 179.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetWrapper.cs,GetEntitySerializablePropertiesDeclaredOnTheResourceType,The length of the statement  "            Debug.Assert(entityType != null && entityType.ResourceTypeKind == ResourceTypeKind.EntityType' "entityType != null && entityType.ResourceTypeKind == ResourceTypeKind.EntityType"); " is 179.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetWrapper.cs,CheckHierarchy,The length of the statement  "            bool hasNavigationProperty = this.GetEntitySerializableProperties(provider' baseType).Any(p => p.TypeKind == ResourceTypeKind.EntityType); " is 138.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetWrapper.cs,CheckHierarchy,The length of the statement  "                    bool hasNavigationPropertyOnDerivedType = this.GetEntitySerializablePropertiesDeclaredOnTheResourceType(provider' derivedType).Any(p => p.TypeKind == ResourceTypeKind.EntityType); " is 179.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetWrapper.cs,CheckHierarchy,The length of the statement  "                    hasNavigationPropertyOrNamedStreamOnDerivedType |= derivedType.HasNamedStreamsDeclaredOnThisType | hasNavigationPropertyOnDerivedType; " is 134.
Long Statement,Microsoft.OData.Service.Providers,OperationWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\OperationWrapper.cs,ApplyConfiguration,The length of the statement  "            if ((this.Kind == OperationKind.ServiceOperation && (this.serviceOperationRights & ~ServiceOperationRights.OverrideEntitySetRights) != ServiceOperationRights.None) || " is 166.
Long Statement,Microsoft.OData.Service.Providers,OperationWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\OperationWrapper.cs,ApplyConfiguration,The length of the statement  "                        throw new InvalidOperationException(Strings.OperationWrapper_OperationResourceSetNotVisible(this.Name' this.operation.ResourceSet.Name)); " is 137.
Long Statement,Microsoft.OData.Service.Providers,OperationWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\OperationWrapper.cs,GetResultSet,The length of the statement  "                Debug.Assert(this.resourceSet.ResourceSet == this.operation.ResourceSet' "this.resourceSet.ResourceSet == this.serviceOperation.ResourceSet"); " is 142.
Long Statement,Microsoft.OData.Service.Providers,OperationWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\OperationWrapper.cs,GetResultSet,The length of the statement  "                    throw new InvalidOperationException(Strings.OperationWrapper_TargetSetFromPathExpressionNotNotVisible(this.Name' this.ResultSetPathExpression.PathExpression' bindingSet.Name)); " is 176.
Long Statement,Microsoft.OData.Service.Providers,BaseServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BaseServiceProvider.cs,HasDerivedTypes,The length of the statement  "            Debug.Assert(this.ChildTypesCache[resourceType] == null || this.ChildTypesCache[resourceType].Count > 0' "this.ChildTypesCache[resourceType] == null || this.ChildTypesCache[resourceType].Count > 0"); " is 199.
Long Statement,Microsoft.OData.Service.Providers,BaseServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BaseServiceProvider.cs,AssertUsingCachedProviderMetadata,The length of the statement  "            ProviderMetadataCacheItem providerMetadataCacheItem = MetadataCache<ProviderMetadataCacheItem>.TryLookup(this.dataServiceInstance.GetType()' this.dataSourceInstance); " is 166.
Long Statement,Microsoft.OData.Service.Providers,BaseServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BaseServiceProvider.cs,AssertUsingCachedProviderMetadata,The length of the statement  "            Debug.Assert(Object.ReferenceEquals(providerMetadataCacheItem' this.metadata)' "we are not using the cached provider metadata"); " is 128.
Long Statement,Microsoft.OData.Service.Providers,BaseServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BaseServiceProvider.cs,AddStreamProperties,The length of the statement  "            // Note Named streams are like virtual properties and each ResourceType will inherit named streams from its parent type. " is 120.
Long Statement,Microsoft.OData.Service.Providers,BaseServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BaseServiceProvider.cs,AddStreamProperties,The length of the statement  "            var namedStreamAttributes = clrType.GetCustomAttributes(typeof(NamedStreamAttribute)' inherit).Cast<NamedStreamAttribute>().OrderBy(a => a.Name); " is 145.
Long Statement,Microsoft.OData.Service.Providers,BaseServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BaseServiceProvider.cs,AddStreamProperties,The length of the statement  "                resourceType.AddProperty(new ResourceProperty((namedStream).Name' ResourcePropertyKind.Stream' PrimitiveResourceTypeMap.TypeMap.GetPrimitive(typeof(Stream)))); " is 159.
Long Statement,Microsoft.OData.Service.Providers,BaseServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BaseServiceProvider.cs,GetResourcePropertyCacheItem,The length of the statement  "            Debug.Assert(resourceTypeCacheItem.ResourceType.Properties.Contains(resourceProperty)' "resourceTypeCacheItem.ResourceType.Properties.Contains(resourceProperty)"); " is 163.
Long Statement,Microsoft.OData.Service.Providers,BaseServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BaseServiceProvider.cs,LoadServiceOperations,The length of the statement  "            ServiceOperationProvider sop = new ServiceOperationProvider(dataServiceType' this.ResolveResourceType' this.ResolveResourceSet); " is 128.
Long Statement,Microsoft.OData.Service.Providers,BaseServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BaseServiceProvider.cs,LoadServiceOperations,The length of the statement  "                    throw new InvalidOperationException(Strings.BaseServiceProvider_OverloadingNotSupported(dataServiceType' (MethodInfo)so.CustomState)); " is 134.
Long Statement,Microsoft.OData.Service.Providers,BaseServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BaseServiceProvider.cs,MakeMetadataReadonly,The length of the statement  "            this.metadata = MetadataCache<ProviderMetadataCacheItem>.AddCacheItem(this.dataServiceInstance.GetType()' this.dataSourceInstance' this.metadata); " is 146.
Long Statement,Microsoft.OData.Service.Providers,BasicExpandProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyProjections,The length of the statement  "            sourceExpression = ApplyOrderSkipTakeOnTopLevelResultBeforeProjections(sourceExpression' rootProjectionNode.OrderingInfo' rootProjectionNode.SkipCount' rootProjectionNode.TakeCount); " is 182.
Long Statement,Microsoft.OData.Service.Providers,BasicExpandProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyOrderBy,The length of the statement  "                return isAscending ? queryExpression.QueryableOrderBy(orderExpression) : queryExpression.QueryableOrderByDescending(orderExpression); " is 133.
Long Statement,Microsoft.OData.Service.Providers,BasicExpandProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyOrderBy,The length of the statement  "            return isAscending ? queryExpression.QueryableThenBy(orderExpression) : queryExpression.QueryableThenByDescending(orderExpression); " is 131.
Long Statement,Microsoft.OData.Service.Providers,ExpandedEnumerator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,UnwrapEnumerator,The length of the statement  "                // Note that only one wrapper could have been applied. If the query only used projections and no expansions then we wrap it " is 123.
Long Statement,Microsoft.OData.Service.Providers,ExpandedEnumerator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,UnwrapEnumerator,The length of the statement  "                //   with the ProjectedWrapper enumerator wrapper. If the query had expansions we wrap it wil ExpandedWrapper enumerator wrapper " is 128.
Long Statement,Microsoft.OData.Service.Providers,ExpandedEnumerator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,UnwrapEnumerator,The length of the statement  "                return expandedEnumerator != null ? expandedEnumerator.GetInnerEnumerator() : ProjectedWrapper.UnwrapEnumerator(enumerator); " is 124.
Long Statement,Microsoft.OData.Service.Providers,ProjectedProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,Equals,The length of the statement  "                return String.Equals(x.name' y.name' StringComparison.Ordinal) && x.property == y.property && x.declaringResourceType == y.declaringResourceType; " is 145.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AddProjectedProperty,The length of the statement  "                ProjectedProperty newProjectedProperty = new ProjectedProperty(propertyName' property' targetResourceType' declaringType); " is 122.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AddProjectedProperty,The length of the statement  "                    Debug.Assert(this.projectedPropertyCandidates.Count(p => ProjectedProperty.Equals(p' newProjectedProperty)) <= 1' "For strongly typed properties' there should be exactly one node per property"); " is 194.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AddProjectedProperty,The length of the statement  "                    existingProjectedProperty = this.projectedPropertyCandidates.FirstOrDefault(p => ProjectedProperty.Equals(p' newProjectedProperty)); " is 132.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AddProjectedProperty,The length of the statement  "                        Debug.Assert(targetResourceType.IsAssignableFrom(existingProjectedProperty.TargetResourceType)' "targetResourceType.IsAssignableFrom(existingProjectedProperty.TargetResourceType)"); " is 181.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AddProjectedProperty,The length of the statement  "                        this.projectedPropertyCandidates.Count(p => ProjectedProperty.Equals(p' newProjectedProperty) && targetResourceType.IsAssignableFrom(p.TargetResourceType)) <= 1' " is 161.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AddProjectedProperty,The length of the statement  "                        this.projectedPropertyCandidates.Count(p => ProjectedProperty.Equals(p' newProjectedProperty) && p.TargetResourceType != targetResourceType && p.TargetResourceType.IsAssignableFrom(targetResourceType)) == 0' " is 207.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AddProjectedProperty,The length of the statement  "                    foreach (var existingOpenProjectedProperty in this.projectedPropertyCandidates.Where(p => ProjectedProperty.Equals(p' newProjectedProperty))) " is 141.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyProjections,The length of the statement  "                if (!this.Node.ProjectAllProperties && !this.Node.Nodes.Where(n => n.Property != null && n.Property.IsOfKind(ResourcePropertyKind.Stream)).Any()) " is 145.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyProjections,The length of the statement  "                                this.AddProjectedProperty(node.Property' node.TargetResourceType' node.TargetResourceType.GetDeclaringTypeForProperty(node.Property)); " is 134.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyProjections,The length of the statement  "                        this.AddProjectedProperty(keyProperty' this.BaseResourceType' this.BaseResourceType.GetDeclaringTypeForProperty(keyProperty)); " is 126.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyProjections,The length of the statement  "                        foreach (ResourceProperty etagProperty in this.ExpandProvider.Provider.GetETagProperties(this.Node.ResourceSetWrapper.Name' resourceType)) " is 138.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyProjections,The length of the statement  "                        // We need to do ToList on the collection' since if the property is declared' we will add it to the projectedPropertyCandidates list " is 132.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyProjections,The length of the statement  "                        foreach (var projectedOpenProperty in this.projectedPropertyCandidates.Where(p => p.Property == null && p.TargetResourceType.IsAssignableFrom(resourceType)).ToList()) " is 166.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyProjections,The length of the statement  "                            ResourceProperty property = resourceType.TryResolvePropertyName(projectedOpenProperty.Name' exceptKind: ResourcePropertyKind.Stream); " is 133.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyProjections,The length of the statement  "                                this.AddProjectedProperty(projectedOpenProperty.Name' property' projectedOpenProperty.TargetResourceType' resourceType.GetDeclaringTypeForProperty(property)); " is 158.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AssignTypeForExpected,The length of the statement  "                                Debug.Assert(this.RequiresProjectedWrapper' "The parent segment must use projected wrapper' if some of its children where projected explicitely."); " is 147.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,GetProjectedPropertyIndex,The length of the statement  "                Debug.Assert(this.projectedProperties != null' "Trying to find a projected property when no projections were applied."); " is 120.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AccessProperty,The length of the statement  "                Debug.Assert(source.Type.IsAssignableFrom(resourceType.InstanceType)' "Trying to access a property on expression of a wrong type."); " is 132.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AccessProperty,The length of the statement  "                        MethodInfo getter = DataServiceProviderMethods.GetSequenceValueMethodInfo.MakeGenericMethod(property.ResourceType.InstanceType); " is 128.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AccessProperty,The length of the statement  "                        MethodInfo getter = DataServiceProviderMethods.GetSequenceValueMethodInfo.MakeGenericMethod(collectionResourceType.ItemType.InstanceType); " is 138.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AccessProperty,The length of the statement  "                            "The GetSequenceValue should return IEnumerable<ItemInstanceType>' which should be exactly the same as the instance type of the collection itself."); " is 149.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,AccessProperty,The length of the statement  "                Debug.Assert(property.Type.IsAssignableFrom(expression.Type)' "The returned expression is not of the type of the property being accessed."); " is 140.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpression,The length of the statement  "                        LambdaExpression selector = BuildLambdaExpression(delegateType' body' new ParameterExpression[] { (ParameterExpression)parameter }); " is 132.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The length of the statement  "                    skipTokenPropertyBindings[0] = BindByName(projectedSkipTokenType' "ExpandedElement"' Expression.Constant((string)null' typeof(string))); " is 136.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The length of the statement  "                        skipTokenDescription.Append(XmlConstants.SkipTokenPropertyPrefix + i.ToString(System.Globalization.CultureInfo.InvariantCulture)).Append("'"); " is 142.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The length of the statement  "                        MemberInfo member = projectedSkipTokenType.GetProperty("ProjectedProperty" + i.ToString(System.Globalization.CultureInfo.InvariantCulture)); " is 140.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The length of the statement  "                    skipTokenPropertyBindings[1] = BindByName(projectedSkipTokenType' "Description"' Expression.Constant(skipTokenDescription.Remove(skipTokenDescription.Length - 1' 1).ToString())); " is 178.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The length of the statement  "                    bindings[this.children.Count + 3] = BindByName(this.elementType' "ProjectedProperty" + this.children.Count.ToString(System.Globalization.CultureInfo.InvariantCulture)' skipTokenBody); " is 183.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The length of the statement  "                string referenceDescriptionString = referencePropertyNameList != null ? referencePropertyNameList.ToString() : String.Empty; " is 124.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,PrepareProjectionBindingForResourceType,The length of the statement  "                        ResourceProperty resourceProperty = resourceType.TryResolvePropertyName(projectedProperty.Name' exceptKind: ResourcePropertyKind.Stream); " is 137.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,PrepareProjectionBindingForResourceType,The length of the statement  "                                    Debug.Assert(this.BaseResourceType.IsAssignableFrom(projectedProperty.TargetResourceType)' "this.BaseResourceType.IsAssignableFrom(projectedProperty.TargetResourceType)"); " is 171.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForProjectedWrapper,The length of the statement  "                Debug.Assert(!this.RequiresProjectedWrapper || this.projectedProperties != null' "Must have a list of projected properties if projection wrapper is required."); " is 160.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyOrderTakeOnInnerSegment,The length of the statement  "                            (oi.IsAscending ? expression.EnumerableOrderBy(updatedOrderLambda) : expression.EnumerableOrderByDescending(updatedOrderLambda)) : " is 130.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyOrderTakeOnInnerSegment,The length of the statement  "                            (oi.IsAscending ? expression.EnumerableThenBy(updatedOrderLambda) : expression.EnumerableThenByDescending(updatedOrderLambda)); " is 127.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ApplyOrderTakeOnInnerSegment,The length of the statement  "                    Debug.Assert(this.Node.MaxResultsExpected.HasValue' "Paging is on for this node' so it should have the MaxResultsExpected set as well."); " is 137.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,SetWrapperElementType,The length of the statement  "                    typeArguments[typeArgumentIndex++] = this.RequiresProjectedWrapper ? this.GetProjectedWrapperType() : this.enumeratedType; " is 122.
Long Statement,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,SetWrapperElementType,The length of the statement  "                        typeArguments[typeArgumentIndex++] = WebUtil.GetWrapperType(skipTokenTypes' Strings.BasicExpandProvider_SDP_UnsupportedOrderingExpressionBreadth); " is 146.
Long Statement,Microsoft.OData.Service.Providers,ExpandNodeAnnotationVisitor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,VisitConditional,The length of the statement  "                    Debug.Assert(trueAnnotation == falseAnnotation' "True and False branches of a conditional expression have different asigned expand nodes."); " is 140.
Long Statement,Microsoft.OData.Service.Providers,ExpandNodeAnnotationVisitor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,SetExpandNodeAnnotation,The length of the statement  "                Debug.Assert(existingAnnotation == null || existingAnnotation == annotation' "Same expression can't have two different assigned expand nodes."); " is 144.
Long Statement,Microsoft.OData.Service.Providers,AddPropertyAccessesAsProjectedPropertiesVisitor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,ProcessPropertyAccess,The length of the statement  "                    ResourceProperty property = operandExpandNode.BaseResourceType.TryResolvePropertyName(propertyName' exceptKind: ResourcePropertyKind.Stream); " is 141.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "            EntityType sourceEntityType = this.ObjectContext.MetadataWorkspace.GetItem<EntityType>(resourceType.FullName' DataSpace.CSpace); " is 128.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "            sourceEntityType.NavigationProperties.TryGetValue(resourceProperty.Name' false /*ignoreCase*/' out sourceNavigationProperty); " is 125.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "                throw new InvalidOperationException(Strings.BadProvider_PropertyMustBeNavigationPropertyOnType(resourceProperty.Name' resourceType.FullName)); " is 142.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "            if (sourceEntityType != (EntityType)sourceNavigationProperty.DeclaringType || resourceType != resourceType.GetDeclaringTypeForProperty(resourceProperty)) " is 153.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "                throw new InvalidOperationException(Strings.BadProvider_ResourceTypeMustBeDeclaringTypeForProperty(resourceType.FullName' resourceProperty.Name)); " is 146.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "                        ResourceAssociationSetEnd thisAssociationSetEnd = ObjectContextServiceProvider.PopulateResourceAssociationSetEnd(setEnd' resourceSet' resourceType' resourceProperty); " is 166.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "                        string targetEntitySetName = GetEntitySetName(targetEntitySet.Name' targetEntitySet.EntityContainer.Name' this.ObjectContext.DefaultContainerName == targetEntitySet.EntityContainer.Name); " is 187.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "                        EntityType targetEntityType = (EntityType)((RefType)sourceNavigationProperty.ToEndMember.TypeUsage.EdmType).ElementType; " is 120.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "                                targetResourceProperty = targetResourceType.TryResolvePropertyName(navProperty.Name' exceptKind: ResourcePropertyKind.Stream); " is 126.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,CreateResource,The length of the statement  "                throw ObjectContextServiceProvider.CreateBadRequestError(Strings.CannotCreateInstancesOfAbstractType(resourceType.FullName)); " is 125.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,CreateResource,The length of the statement  "                    throw new InvalidOperationException(Strings.ObjectContext_EntityTypeExpected(resourceType.FullName' resourceType.ResourceTypeKind)); " is 132.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,CreateResource,The length of the statement  "                    throw new InvalidOperationException(Strings.ObjectContext_ComplexTypeExpected(resourceType.FullName' resourceType.ResourceTypeKind)); " is 133.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetResource,The length of the statement  "                    throw ObjectContextServiceProvider.CreateBadRequestError(Strings.TargetElementTypeOfTheUriSpecifiedDoesNotMatchWithTheExpectedType(resourceType.FullName' fullTypeName)); " is 169.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,ResetResource,The length of the statement  "                    this.ObjectContext.AddObject(ObjectContextServiceProvider.GetEntitySetName(objectStateEntry' this.ObjectContext.DefaultContainerName)' newInstance); " is 148.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SetValue,The length of the statement  "                throw new InvalidOperationException(Strings.ObjectContext_UnknownResourceTypeForClrType(targetResource.GetType().FullName)); " is 124.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SetValue,The length of the statement  "            ResourceProperty resourceProperty = resourceType.TryResolvePropertyName(propertyName' exceptKind: ResourcePropertyKind.Stream); " is 127.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SetValue,The length of the statement  "                throw new InvalidOperationException(Strings.ObjectContext_PropertyNotDefinedOnType(resourceType.FullName' propertyName)); " is 121.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SetValue,The length of the statement  "            else if (resourceType.ResourceTypeKind == ResourceTypeKind.EntityType && resourceProperty.IsOfKind(ResourcePropertyKind.Primitive)) " is 131.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SetValue,The length of the statement  "                    throw ObjectContextServiceProvider.CreateBadRequestError(Strings.BadRequest_ErrorInSettingPropertyValue(resourceProperty.Name)' exception); " is 139.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SetValue,The length of the statement  "                // Ideally we should have caught the ConstraintException and all other types of exception here' and then throw DataServiceException " is 131.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetValue,The length of the statement  "                throw new InvalidOperationException(Strings.ObjectContext_UnknownResourceTypeForClrType(targetResource.GetType().FullName)); " is 124.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetValue,The length of the statement  "            ResourceProperty resourceProperty = resourceType.TryResolvePropertyName(propertyName' exceptKind: ResourcePropertyKind.Stream); " is 127.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetValue,The length of the statement  "                throw new InvalidOperationException(Strings.ObjectContext_PropertyNotDefinedOnType(resourceType.FullName' propertyName)); " is 121.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SaveChanges,The length of the statement  "                ObjectContextServiceProvider.ApplyChangesToEntity(this.ObjectContext' objectToBeReplaced.Key' objectToBeReplaced.Value); " is 120.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SaveChanges,The length of the statement  "                throw new DataServiceException((int)HttpStatusCode.PreconditionFailed' null' Strings.Serializer_ETagValueDoesNotMatch' null' e); " is 128.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,ClearChanges,The length of the statement  "            foreach (ObjectStateEntry entry in this.ObjectContext.ObjectStateManager.GetObjectStateEntries(EntityState.Added | EntityState.Deleted | EntityState.Modified | EntityState.Unchanged)) " is 183.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetETagProperties,The length of the statement  "            EntityType entityType = this.ObjectContext.MetadataWorkspace.GetItem<EntityType>(resourceType.FullName' DataSpace.CSpace); " is 122.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetETagProperties,The length of the statement  "                Debug.Assert(property.ResourceType.ResourceTypeKind == ResourceTypeKind.Primitive' "property.ResourceType.TypeKind == ResourceTypeKind.Primitive"); " is 147.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetEntityContainerAnnotations,The length of the statement  "            EntityContainer container = this.ObjectContext.MetadataWorkspace.GetItem<EntityContainer>(entityContainerName' DataSpace.CSpace); " is 129.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetEntityContainerAnnotations,The length of the statement  "                    Debug.Assert(annotation.GetType() == typeof(string) || annotation.GetType() == typeof(XElement)' "only string and xelement annotations are supported"); " is 151.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SetConcurrencyValues,The length of the statement  "                throw ObjectContextServiceProvider.CreateBadRequestError(Strings.DataService_CannotPerformOperationWithoutETag(resourceType == null ? resource.GetType().FullName : resourceType.FullName)); " is 188.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SetConcurrencyValues,The length of the statement  "                throw ObjectContextServiceProvider.CreateBadRequestError(Strings.ObjectContext_IfNoneMatchHeaderNotSupportedInUpdateAndDelete); " is 127.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMemberMetadata,The length of the statement  "                // If the property on the CLR type which is representing the EDM type has non-public properties but those properties are part of the " is 132.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMemberMetadata,The length of the statement  "                // The Type.GetProperty(propertyName) method used BindingFlags.Instance | BindingFlags.Public by default if no binding flags are specified. " is 139.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMemberMetadata,The length of the statement  "                // Since the property was not found with these binding flags' the GetProperty method returns null' which we didn't check for in v1 and v2 and threw an NRE. " is 155.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMemberMetadata,The length of the statement  "                // We now check for null return values from this function and throw if we find that the model property declared on the CLR type is not public. " is 142.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMemberMetadata,The length of the statement  "                PropertyInfo propertyInfo = resourceType.InstanceType.GetProperty(member.Name' BindingFlags.Instance | BindingFlags.Public); " is 124.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMemberMetadata,The length of the statement  "                    throw new DataServiceException((int)HttpStatusCode.InternalServerError' Strings.ObjectContext_PublicPropertyNotDefinedOnType(edmType.Name' member.Name)); " is 153.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMemberMetadata,The length of the statement  "                            throw new NotSupportedException(Strings.ObjectContext_PrimitiveTypeNotSupported(member.Name' edmType.Name' member.EdmTypeName)); " is 128.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMemberMetadata,The length of the statement  "                        Debug.Assert(!WebUtil.IsPrimitiveType(collectionItemClrType)' "We don't support collections of primitives' we shouldn't see one here"); " is 135.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMemberMetadata,The length of the statement  "                        throw new NotSupportedException(Strings.ObjectContext_PrimitiveTypeNotSupported(member.Name' edmType.Name' member.EdmTypeName)); " is 128.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMemberMetadata,The length of the statement  "                ObjectContextServiceProvider.PopulateFacets(resourceProperty' member.Facets' resourceProperty.ResourceType.ResourceTypeKind == ResourceTypeKind.EntityType /*ignoreNullableAnnotation*/); " is 185.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMemberMetadata,The length of the statement  "                resourceTypeCacheItem.AddResourcePropertyCacheItem(resourceProperty' new ObjectContextResourcePropertyCacheItem(propertyInfo' member)); " is 135.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMetadata,The length of the statement  "                        throw new InvalidOperationException(Strings.ObjectContextServiceProvider_OSpaceTypeNotFound(entitySet.ElementType.FullName)); " is 125.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMetadata,The length of the statement  "                PopulateMemberMetadata(resourceTypeCacheItem' new ObjectContextMetadata(metadataWorkspace)' metadataCacheItem' PrimitiveResourceTypeMap.TypeMap); " is 145.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMetadataForUserSpecifiedTypes,The length of the statement  "                throw new InvalidOperationException(Strings.ObjectContext_UnableToLoadMetadataForType(this.typesWithoutOSpaceMetadata[0].FullName)); " is 132.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateMetadataForType,The length of the statement  "                ObjectItemCollection objectItemCollection = (ObjectItemCollection)this.ObjectContext.MetadataWorkspace.GetItemCollection(DataSpace.OSpace); " is 139.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetEntityTypeDefaultStreamProperty,The length of the statement  "            const string HasStreamAttribute = XmlConstants.DataWebMetadataNamespace + ":" + XmlConstants.DataWebAccessHasStreamAttribute; " is 125.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,CreateResourceType,The length of the statement  "            ResourceTypeKind resourceTypeKind = cspaceType.BuiltInTypeKind == BuiltInTypeKind.EntityType ? ResourceTypeKind.EntityType : ResourceTypeKind.ComplexType; " is 154.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,CreateResourceType,The length of the statement  "            ResourceType resourceType = new ResourceType(clrType' resourceTypeKind' baseResourceType' cspaceType.NamespaceName' cspaceType.Name' clrType.IsAbstract); " is 153.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetEscapedEntitySetName,The length of the statement  "                return "[" + qualifiedEntitySetName.Substring(0' indexOfLastPeriod) + "].[" + qualifiedEntitySetName.Substring(indexOfLastPeriod + 1) + "]"; " is 140.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,CreateObject,The length of the statement  "            MethodInfo createObjectMethod = context.GetType().GetMethod("CreateObject"' BindingFlags.Public | BindingFlags.Instance); " is 121.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,IsOneToOneFKAssocation,The length of the statement  "            // first check if the relationship type is a FK relationship. If no' then return ' since updates are not supported only for FK relationships " is 140.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,IsOneToOneFKAssocation,The length of the statement  "            // check if the relationship is 1 to 1 or 1 to 0..1 relationship (FK relationships are not supported for 0..1 to 0..1 cardinality) " is 130.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,ApplyChangesToEntity,The length of the statement  "            string entitySetName = ObjectContextServiceProvider.GetEntitySetName(objectStateEntry' objectContext.DefaultContainerName); " is 123.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateResourceAssociationSetEnd,The length of the statement  "            ResourceAssociationSetEnd resourceAssociationSetEnd = new ResourceAssociationSetEnd(resourceSet' resourceType' resourceProperty); " is 129.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateResourceAssociationSetEnd,The length of the statement  "            ObjectContextServiceProvider.PopulateAnnotations(setEnd.MetadataProperties' resourceAssociationSetEnd.AddCustomAnnotation); " is 123.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateResourceAssociationTypeEnd,The length of the statement  "            ResourceAssociationTypeEnd resourceAssociationTypeEnd = new ResourceAssociationTypeEnd(end.Name' resourceType' resourceProperty' ObjectContextServiceProvider.GetMultiplicity(end.RelationshipMultiplicity)' (EdmOnDeleteAction)end.DeleteBehavior); " is 244.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateResourceAssociationTypeEnd,The length of the statement  "            ObjectContextServiceProvider.PopulateAnnotations(end.MetadataProperties' resourceAssociationTypeEnd.AddCustomAnnotation); " is 121.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateResourceAssociationType,The length of the statement  "            ObjectContextServiceProvider.PopulateAnnotations(associationType.MetadataProperties' resourceAssociationType.AddCustomAnnotation); " is 130.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,PopulateReferentialConstraint,The length of the statement  "            ObjectContextServiceProvider.PopulateAnnotations(referentialConstraint.MetadataProperties' resourceAssociationType.ReferentialConstraint.AddCustomAnnotation); " is 158.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetEntitySet,The length of the statement  "                "!String.IsNullOrEmpty(qualifiedEntitySetName) -- otherwise qualifiedEntitySetName didn't come from internal metadata"); " is 120.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,GetEntitySet,The length of the statement  "            EntityContainer entityContainer = this.ObjectContext.MetadataWorkspace.GetEntityContainer(entityContainerName' DataSpace.CSpace); " is 129.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,BuildQueryRootDelegate,The length of the statement  "            // ((ObjectContext)arg0).CreateQuery<resourceSet.ResourceType.InstanceType>("escapedEntitySetName"' new ObjectParameter[0]); " is 124.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,BuildQueryRootDelegate,The length of the statement  "            MethodInfo genericMethod = typeof(ObjectContext).GetMethod("CreateQuery"' WebUtil.PublicInstanceBindingFlags).MakeGenericMethod(resourceSet.ResourceType.InstanceType); " is 167.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,BuildQueryRootDelegate,The length of the statement  "            return context => (IQueryable)genericMethod.Invoke(context' new Object[] { escapedEntitySetName' new ObjectParameter[0] }); " is 123.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "                throw new InvalidOperationException(Strings.ObjectContext_UnknownResourceTypeForClrType(targetResource.GetType().FullName)); " is 124.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "            ResourceProperty resourceProperty = resourceType.TryResolvePropertyName(propertyName' exceptKind: ResourcePropertyKind.Stream); " is 127.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "                throw new InvalidOperationException(Strings.ObjectContext_PropertyNotDefinedOnType(resourceType.FullName' propertyName)); " is 121.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "                throw new InvalidOperationException(Strings.ObjectContext_PropertyMustBeNavigationProperty(propertyName' resourceType.FullName)); " is 129.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "            EntityType cspaceEntityType = this.ObjectContext.MetadataWorkspace.GetItem<EntityType>(resourceType.FullName' DataSpace.CSpace); " is 128.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "            IRelatedEnd relatedEnd = stateEntry.RelationshipManager.GetRelatedEnd(navProperty.RelationshipType.Name' navProperty.ToEndMember.Name); " is 135.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "                        // If the key is null' that means there was no relationship and user is trying to set the relationship for the first time " is 121.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "                        // The reason why we need to do a equality check is because when we set the EntityKey to null' it will put the dependent " is 120.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "                            PropertyInfo valueProperty = entityReference.GetType().GetProperty("Value"' BindingFlags.Public | BindingFlags.Instance); " is 121.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "                throw ObjectContextServiceProvider.CreateBadRequestError(Strings.BadRequest_ErrorInSettingPropertyValue(propertyName)' exception); " is 130.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "                // In V2' we didn't use to do reflection' and hence we now need to catch both ArgumentException and TargetInvocationException " is 125.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "                throw ObjectContextServiceProvider.CreateBadRequestError(Strings.BadRequest_ErrorInSettingPropertyValue(propertyName)' exception); " is 130.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "                // In V2' we didn't use to do reflection' and hence we now need to catch both ArgumentException and TargetInvocationException " is 125.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,UpdateRelationship,The length of the statement  "                throw ObjectContextServiceProvider.CreateBadRequestError(Strings.BadRequest_ErrorInSettingPropertyValue(propertyName)' exception.InnerException ?? exception); " is 158.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SetValue,The length of the statement  "            MethodInfo setMethod = this.GetResourcePropertyCacheItem(resourceTypeCacheItem' resourceProperty).PropertyInfo.GetSetMethod(); " is 126.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SetValue,The length of the statement  "                throw ObjectContextServiceProvider.CreateBadRequestError(Strings.BadRequest_PropertyValueCannotBeSet(resourceProperty.Name)); " is 125.
Long Statement,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,SetValue,The length of the statement  "                throw ObjectContextServiceProvider.CreateBadRequestError(Strings.BadRequest_ErrorInSettingPropertyValue(resourceProperty.Name)' exception); " is 139.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "                throw new InvalidOperationException(Strings.BadProvider_ResourceTypeMustBeDeclaringTypeForProperty(resourceType.FullName' resourceProperty.Name)); " is 146.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "                throw new InvalidOperationException(Strings.BadProvider_PropertyMustBeNavigationPropertyOnType(resourceProperty.Name' resourceType.FullName)); " is 142.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "            // In order to prevent this from becoming a breaking change' we use the name to build up the association whenever possible. " is 123.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "            if (targetResourceProperty != null && !this.MetadataCacheItem.TargetResourcePropertiesCacheItems.ContainsKey(targetSet.Name + "_" + targetResourceProperty.Name)) " is 161.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,GetResourceAssociationSet,The length of the statement  "                this.MetadataCacheItem.TargetResourcePropertiesCacheItems.Add(targetSet.Name + "_" + targetResourceProperty.Name' resourceProperty); " is 132.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,PopulateMetadata,The length of the statement  "                        ResourceType resourceType = BuildHierarchyForEntityType(elementType' metadataCacheItem' unvisitedTypes' true /* entity type candidate */); " is 138.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,PopulateMetadata,The length of the statement  "                                    throw new InvalidOperationException(Strings.ReflectionProvider_MultipleEntitySetsForSameType(entitySetInfo.Value.Name' property.Name' entitySetType.FullName' resourceType.FullName)); " is 182.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,PopulateMetadata,The length of the statement  "                                    throw new InvalidOperationException(Strings.ReflectionProvider_MultipleEntitySetsForSameType(property.Name' entitySetInfo.Value.Name' resourceType.FullName' entitySetType.FullName)); " is 182.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,PopulateMetadata,The length of the statement  "                            throw new InvalidOperationException(Strings.ReflectionProvider_InvalidEntitySetProperty(property.Name' XmlConvert.EncodeName(((IDataServiceMetadataProvider)this).ContainerName))); " is 179.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildHierarchyForEntityType,The length of the statement  "                ResourceType entityType = ReflectionServiceProvider.CreateResourceType(ancestors[i]' ResourceTypeKind.EntityType' baseResourceType' metadataCacheItem); " is 151.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "            HashSet<string> propertiesToBeIgnored = new HashSet<string>(IgnorePropertiesAttribute.GetProperties(parentResourceType.InstanceType' false /*inherit*/' bindingFlags)' StringComparer.Ordinal); " is 191.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "            HashSet<string> etagPropertyNames = new HashSet<string>(LoadETagProperties(parentResourceType)' StringComparer.Ordinal); " is 120.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                throw new NotSupportedException(Strings.ReflectionProvider_ResourceTypeHasNoPublicallyVisibleProperties(parentResourceType.FullName)); " is 134.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                                if (parentResourceType.BaseType == null && parentResourceType.ResourceTypeKind == ResourceTypeKind.EntityType && IsPropertyKeyProperty(property' out currentKeyKind)) " is 165.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                                    // In that case we used to only allow entity types as T' now with collection properties we also allow primitive and complex types' " is 130.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                                    // Note that we can't just make IEnumerable<T> not be a complex types since in certain cases we used to recognize it as such " is 124.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                                        throw new InvalidOperationException(Strings.ReflectionProvider_CollectionOfCollectionProperty(property.Name' parentResourceType.FullName)); " is 139.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                        (resourceType.ResourceTypeKind == ResourceTypeKind.EntityType && parentResourceType.ResourceTypeKind == ResourceTypeKind.ComplexType)) " is 134.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                                throw new InvalidOperationException(Strings.ReflectionProvider_CollectionOfCollectionProperty(property.Name' parentResourceType.FullName)); " is 139.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                                throw new InvalidOperationException(Strings.ReflectionProvider_CollectionOfUnsupportedTypeProperty(property.Name' parentResourceType.FullName' resourcePropertyType)); " is 166.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                                throw new InvalidOperationException(Strings.BadProvider_UnsupportedPropertyType(property.Name' parentResourceType.FullName)); " is 125.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                            throw new InvalidOperationException(Strings.ReflectionProvider_InvalidProperty(property.Name' parentResourceType.FullName)); " is 124.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                        throw new InvalidOperationException(Strings.ReflectionProvider_ComplexTypeWithNavigationProperty(property.Name' parentResourceType.FullName)); " is 142.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                            throw new InvalidOperationException(Strings.ReflectionProvider_EntityPropertyWithNoEntitySet(parentResourceType.FullName' property.Name)); " is 138.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                    throw new InvalidOperationException(Strings.ReflectionProvider_InvalidProperty(property.Name' parentResourceType.FullName)); " is 124.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                throw new InvalidOperationException(Strings.ReflectionProvider_KeyPropertiesCannotBeIgnored(parentResourceType.FullName)); " is 122.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,BuildTypeProperties,The length of the statement  "                throw new InvalidOperationException(Strings.ReflectionProvider_ETagPropertyNameNotValid(etagPropertyNames.ElementAt(0)' parentResourceType.FullName)); " is 150.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,IsEntityOrComplexType,The length of the statement  "            ResourceType resourceType = BuildHierarchyForEntityType(type' metadataCacheItem' unvisitedTypes' false /* entityTypeCandidate */); " is 130.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,IsEntityOrComplexType,The length of the statement  "                resourceType = ReflectionServiceProvider.CreateResourceType(type' ResourceTypeKind.ComplexType' null' metadataCacheItem); " is 121.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,LoadETagProperties,The length of the statement  "            ETagAttribute[] attributes = (ETagAttribute[])resourceType.InstanceType.GetCustomAttributes(typeof(ETagAttribute)' inherit); " is 124.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,CreateResourceType,The length of the statement  "            ResourceType resourceType = new ResourceType(type' kind' baseType' type.Namespace' CommonUtil.GetModelTypeName(type)' type.IsAbstract); " is 135.
Long Statement,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,GetResourcePropertyByResourcePropertyTypeInResourceSet,The length of the statement  "                if (p.ResourceType == type && !this.MetadataCacheItem.TargetResourcePropertiesCacheItems.ContainsKey(resourceSet.Name + "_" + p.Name)) " is 134.
Long Statement,Microsoft.OData.Service.Providers,ResourceProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceProperty.cs,ValidatePropertyParameters,The length of the statement  "            if (IsOfKind(kind' ResourcePropertyKind.ResourceReference) || IsOfKind(kind' ResourcePropertyKind.ResourceSetReference)) " is 120.
Long Statement,Microsoft.OData.Service.Providers,ResourceProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceProperty.cs,ValidatePropertyParameters,The length of the statement  "                    throw new ArgumentException(Strings.ResourceProperty_PropertyKindAndResourceTypeKindMismatch("kind"' "propertyResourceType")); " is 126.
Long Statement,Microsoft.OData.Service.Providers,ResourceProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceProperty.cs,ValidatePropertyParameters,The length of the statement  "                    throw new ArgumentException(Strings.ResourceProperty_PropertyKindAndResourceTypeKindMismatch("kind"' "propertyResourceType")); " is 126.
Long Statement,Microsoft.OData.Service.Providers,ResourceProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceProperty.cs,ValidatePropertyParameters,The length of the statement  "                    throw new ArgumentException(Strings.ResourceProperty_PropertyKindAndResourceTypeKindMismatch("kind"' "propertyResourceType")); " is 126.
Long Statement,Microsoft.OData.Service.Providers,ResourceProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceProperty.cs,ValidatePropertyParameters,The length of the statement  "                    throw new ArgumentException(Strings.ResourceProperty_PropertyKindAndResourceTypeKindMismatch("kind"' "propertyResourceType")); " is 126.
Long Statement,Microsoft.OData.Service.Providers,ResourceProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceProperty.cs,ValidatePropertyParameters,The length of the statement  "                    throw new ArgumentException(Strings.ResourceProperty_PropertyKindAndResourceTypeKindMismatch("kind"' "propertyResourceType")); " is 126.
Long Statement,Microsoft.OData.Service.Providers,ResourceProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceProperty.cs,ValidatePropertyParameters,The length of the statement  "                throw new ArgumentException(Strings.ResourceProperty_PropertyKindAndResourceTypeKindMismatch("kind"' "propertyResourceType")); " is 126.
Long Statement,Microsoft.OData.Service.Providers,ResourceProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceProperty.cs,ValidatePropertyParameters,The length of the statement  "            Debug.Assert(propertyResourceType.ResourceTypeKind != ResourceTypeKind.EntityCollection' "EntityCollectionResourceType is not a supported type for ResourceProperty."); " is 167.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,SetReadOnly,The length of the statement  "            // We cannot change the properties collection method. Basically' we should not be calling Properties or PropertiesDeclaredOnThisType properties " is 143.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,SetReadOnly,The length of the statement  "            // since they call the virtual LoadPropertiesDeclaredOnThisType and we want to postpone that virtual call until we actually need to do something " is 144.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,SetReadOnly,The length of the statement  "            Debug.Assert(Object.ReferenceEquals(this.propertiesDeclaredOnThisType' currentPropertyCollection)' "We should not have modified the properties collection instance"); " is 165.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,CompareReferences,The length of the statement  "            Debug.Assert(resourceType1.FullName != resourceType2.FullName' "if the reference do not match' then the full names must be different"); " is 135.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,GetMinimumResponseVersion,The length of the statement  "            // and if we encounter during serialization' anything greater than the computed response version' we will throw instream error. " is 127.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,CreateReadOnlyDeclaredPropertiesCollection,The length of the statement  "            ReadOnlyCollection<ResourceProperty> readOnlyProperties = new ReadOnlyCollection<ResourceProperty>(this.propertiesDeclaredOnThisType ?? " is 135.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,InitializeProperties,The length of the statement  "                        Debug.Assert(!this.propertiesLoadingHitPreviously' "We should not call this property recursively as it will mess up the lazy loading' attempts to make it work tend to break multithed scenarios' just don't do it."); " is 214.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,GetPropertyInfoDecaredOnThisType,The length of the statement  "                this.propertyInfosDeclaredOnThisType = new Dictionary<ResourceProperty' ResourcePropertyInfo>(ReferenceEqualityComparer<ResourceProperty>.Instance); " is 148.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,AddPropertyToResourceTypePropertyInfoCache,The length of the statement  "            var propertiesDictionary = new Dictionary<ResourceProperty' ResourcePropertyInfo>(this.propertyInfosDeclaredOnThisType' ReferenceEqualityComparer<ResourceProperty>.Instance); " is 174.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,AddPropertyInternal,The length of the statement  "                    throw new InvalidOperationException(Strings.ResourceType_PropertyWithSameNameAlreadyExists(resourceProperty.Name' this.FullName)); " is 130.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,AddPropertyInternal,The length of the statement  "                Debug.Assert(!property.IsOfKind(ResourcePropertyKind.Key) && !property.IsOfKind(ResourcePropertyKind.ETag)' "NamedStream property kind must be used alone"); " is 156.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,AddPropertyInternal,The length of the statement  "                    Debug.Assert(property.TypeKind == ResourceTypeKind.Primitive' "This check must have been done in ResourceProperty.ValidatePropertyParameters method"); " is 150.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,AddPropertyInternal,The length of the statement  "                    Debug.Assert(!property.IsOfKind(ResourcePropertyKind.ETag)' "This check must have been done in ResourceProperty.ValidatePropertyParameters method"); " is 148.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,AddPropertyInternal,The length of the statement  "                    Debug.Assert(property.IsOfKind(ResourcePropertyKind.Primitive)' "This check must have been done in ResourceProperty.ValidatePropertyParameters method"); " is 152.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,AddPropertyInternal,The length of the statement  "                    Debug.Assert(property.TypeKind == ResourceTypeKind.Primitive' "This check must have been done in ResourceProperty.ValidatePropertyParameters method"); " is 150.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,AddPropertyInternal,The length of the statement  "                    Debug.Assert(property.IsOfKind(ResourcePropertyKind.Primitive)' "This check must have been done in ResourceProperty.ValidatePropertyParameters method"); " is 152.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,AddPropertyInternal,The length of the statement  "                    Debug.Assert(!property.IsOfKind(ResourcePropertyKind.Key)' "This check must have been done in ResourceProperty.ValidatePropertyParameters method"); " is 147.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,AddPropertyInternal,The length of the statement  "                Debug.Assert(property.ResourceType != GetPrimitiveResourceType(typeof(System.IO.Stream))' "Non NamedStream resource using Stream type"); " is 136.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,GetPropertiesDeclaredOnThisType,The length of the statement  "                Debug.Assert(!this.isLoadPropertiesMethodCalled' "The LoadPropertiesDeclaredOnThisType() was called more than once' because of multi-threading"); " is 145.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,ValidateType,The length of the statement  "            Debug.Assert(this.isLoadPropertiesMethodCalled && this.IsReadOnly' "This method must be invoked only if LoadPropertiesDeclaredOnThisType has been called and the type is set to ReadOnly"); " is 187.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,InitializeMetadataAndSchemaVersionForPrimitiveType,The length of the statement  "            Debug.Assert(this.schemaVersion == (MetadataEdmSchemaVersion)(-1)' "this.schemaVersion == (MetadataEdmSchemaVersion)(-1)"); " is 123.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,InitializeMetadataAndSchemaVersionForCollectionType,The length of the statement  "            Debug.Assert(this.schemaVersion == (MetadataEdmSchemaVersion)(-1)' "this.schemaVersion == (MetadataEdmSchemaVersion)(-1)"); " is 123.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,InitializeMetadataAndSchemaVersionForEntityCollectionType,The length of the statement  "            Debug.Assert(this.resourceTypeKind == ResourceTypeKind.EntityCollection' "This method only works on entity collection types."); " is 127.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,InitializeMetadataAndSchemaVersionForEntityCollectionType,The length of the statement  "            Debug.Assert(this.schemaVersion == (MetadataEdmSchemaVersion)(-1)' "this.schemaVersion == (MetadataEdmSchemaVersion)(-1)"); " is 123.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,InitializeMetadataAndSchemaVersionForComplexOrEntityType,The length of the statement  "            Debug.Assert(this.schemaVersion == (MetadataEdmSchemaVersion)(-1)' "this.schemaVersion == (MetadataEdmSchemaVersion)(-1)"); " is 123.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,InitializeMetadataAndSchemaVersionForComplexOrEntityType,The length of the statement  "                this.ComputeMetadataAndSchemaVersionForPropertyCollection(this.PropertiesDeclaredOnThisType' null' out propertySchemaVersion)); " is 127.
Long Statement,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,ComputeMetadataAndSchemaVersionForPropertyCollection,The length of the statement  "                        this.ComputeMetadataAndSchemaVersionForPropertyCollection(property.ResourceType.PropertiesDeclaredOnThisType' visitedComplexTypes' out complexTypeSchemaVersion)); " is 162.
Long Statement,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,GetResultKindFromReturnType,The length of the statement  "            else if ((returnType.ResourceTypeKind == ResourceTypeKind.EntityCollection && !isComposable) || returnType.ResourceTypeKind == ResourceTypeKind.Collection) " is 155.
Long Statement,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,ValidateConstructorArguments,The length of the statement  "            if (returnType != null && (returnType.ResourceTypeKind == ResourceTypeKind.EntityType || returnType.ResourceTypeKind == ResourceTypeKind.EntityCollection)) " is 155.
Long Statement,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,ValidateConstructorArguments,The length of the statement  "                ResourceType resultType = returnType.ResourceTypeKind == ResourceTypeKind.EntityCollection ? ((EntityCollectionResourceType)returnType).ItemType : returnType; " is 158.
Long Statement,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,ValidateConstructorArguments,The length of the statement  "                if (resultSet == null && resultSetPathExpression == null || resultSet != null && !resultSet.ResourceType.IsAssignableFrom(resultType)) " is 134.
Long Statement,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,ValidateConstructorArguments,The length of the statement  "                    throw new ArgumentException(Strings.ServiceOperation_ReturnTypeAndResultSetMustMatch("returnType"' "resultSetPathExpression"' "resultSet")); " is 140.
Long Statement,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,ValidateConstructorArguments,The length of the statement  "                        throw new ArgumentException(Strings.ServiceOperation_ResultSetMustBeNullForGivenResultType(setParameterName' "resultType")); " is 124.
Long Statement,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,ValidateConstructorArguments,The length of the statement  "                    throw new ArgumentException(Strings.ServiceOperation_ResultSetMustBeNullForGivenReturnType(setParameterName' "returnType")); " is 124.
Long Statement,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,ValidateConstructorArguments,The length of the statement  "                throw new ArgumentException(Strings.ServiceOperation_MustBeBindableToUsePathExpression("resultSetPathExpression")' "resultSetPathExpression"); " is 142.
Long Statement,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,ValidateParameters,The length of the statement  "                            throw new ArgumentException(Strings.ServiceOperation_NonBindingParametersCannotBeEntityorEntityCollection(parameter.Name' parameterTypeKind)); " is 142.
Long Statement,Microsoft.OData.Service.Providers,PrimitiveResourceTypeMap,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\PrimitiveResourceTypeMap.cs,GetPrimitive,The length of the statement  "            Debug.Assert(!String.IsNullOrEmpty(fullEdmTypeName)' "Can't look up a primitive resource type based on a null or empty EDM type name."); " is 136.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,FindDeclaredOperations,The length of the statement  "                var actionOperationName = this.metadataProvider.GetNameFromNamespaceQualifiedName(qualifiedName' out nameIsContainerQualified); " is 127.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,FindDeclaredBoundOperations,The length of the statement  "                var actionOperationName = this.metadataProvider.GetNameFromNamespaceQualifiedName(qualifiedName' out nameIsContainerQualified); " is 127.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,FindDeclaredBoundOperations,The length of the statement  "                var operation = this.actionProviderWrapper.TryResolveServiceAction(actionOperationName' MetadataProviderUtils.GetResourceType(bindingType)); " is 140.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,FindDeclaredBoundOperations,The length of the statement  "                IEnumerable<OperationWrapper> getOperationWrappersBoundToType = this.actionProviderWrapper.GetActionsBoundToAnyTypeInHierarchy(bindingResourceType); " is 148.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,FindOperationByBindingParameterType,The length of the statement  "                var actionOperationName = this.metadataProvider.GetNameFromNamespaceQualifiedName(operationName' out nameIsContainerQualified); " is 127.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,FindOperationByBindingParameterType,The length of the statement  "                var operation = this.actionProviderWrapper.TryResolveServiceAction(actionOperationName' MetadataProviderUtils.GetResourceType(bindingType)); " is 140.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureSchemaType,The length of the statement  "            Debug.Assert(resourceTypeKind != ResourceTypeKind.EntityCollection' "Entity collection types are not valid schema types."); " is 123.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureSchemaType,The length of the statement  "                    throw new InvalidOperationException(Microsoft.OData.Service.Strings.MetadataProviderEdmModel_UnsupportedSchemaTypeKind(resourceTypeKind.ToString())); " is 149.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureTypeReference,The length of the statement  "                    return this.EnsurePrimitiveOrComplexCollectionType(resourceType' customAnnotations).ToTypeReference(PrimitiveOrComplexCollectionTypeDefaultNullability); " is 152.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureTypeReference,The length of the statement  "                    return this.EnsureEntityCollectionType(resourceType' customAnnotations).ToTypeReference(EntityPrimitiveOrComplexCollectionTypeDefaultNullability); " is 146.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureTypeReference,The length of the statement  "                    throw new InvalidOperationException(Microsoft.OData.Service.Strings.MetadataProviderEdmModel_UnsupportedResourceTypeKind(resourceType.ResourceTypeKind.ToString())); " is 164.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureEntityPrimitiveOrComplexCollectionTypeReference,The length of the statement  "            IEdmCollectionType collectionType = this.EnsureCollectionItemTypeIsEntityPrimitiveOrComplex(itemResourceType' collectionResourceType' customAnnotations); " is 153.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureDefaultEntityContainer,The length of the statement  "                MetadataProviderUtils.ConvertCustomAnnotations(this' this.metadataProvider.GetEntityContainerAnnotations(defaultContainerName)' defaultContainer); " is 146.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureEntitySet,The length of the statement  "                MetadataProviderUtils.ConvertCustomAnnotations(this' this.metadataProvider.GetEntityContainerAnnotations(entityContainerName)' entityContainer); " is 144.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,AddOperation,The length of the statement  "                this.operationsQualifiedNameCache.Add(operation.FullName()' new List<MetadataProviderEdmOperation>(new MetadataProviderEdmOperation[] { operation })); " is 150.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationProperty,The length of the statement  "            Debug.Assert(navigationProperty != null && navigationProperty.ResourceType.ResourceTypeKind == ResourceTypeKind.EntityType' "navigationProperty != null && navigationProperty.ResourceType.ResourceTypeKind == ResourceTypeKind.EntityType"); " is 237.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationProperty,The length of the statement  "            Debug.Assert(resourceType.TryResolvePropertiesDeclaredOnThisTypeByName(navigationProperty.Name) != null' "navigationProperty must be declared on resourceType."); " is 161.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationProperty,The length of the statement  "            ResourceAssociationSet resourceAssociationSet = this.MetadataProvider.GetResourceAssociationSet(resourceSet' resourceType' navigationProperty); " is 143.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureCollectionItemTypeIsEntityPrimitiveOrComplex,The length of the statement  "                    throw new InvalidOperationException(Microsoft.OData.Service.Strings.MetadataProviderEdmModel_UnsupportedCollectionItemType_EntityPrimitiveOrComplex(itemResourceType.ResourceTypeKind.ToString())); " is 195.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureCollectionItemTypeIsPrimitiveOrComplex,The length of the statement  "                    // WCF DS forces the item types of collection types to not be nullable. Only starting v3' can complex properties be nullable.  " is 125.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureCollectionItemTypeIsPrimitiveOrComplex,The length of the statement  "                    IEdmPrimitiveTypeReference primitiveTypeReference = MetadataProviderUtils.CreatePrimitiveTypeReference(itemResourceType' customAnnotations); " is 140.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureCollectionItemTypeIsPrimitiveOrComplex,The length of the statement  "                    throw new InvalidOperationException(Microsoft.OData.Service.Strings.MetadataProviderEdmModel_UnsupportedCollectionItemType_PrimitiveOrComplex(itemResourceType.ResourceTypeKind.ToString())); " is 189.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureFullMetadata,The length of the statement  "            // If we have encountered a visible named stream' we need to make sure there is an implementation for IDataServiceStreamProvider2 " is 129.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureFullMetadata,The length of the statement  "                    // If we have encountered a visible MLE type' we need to make sure there is an implementation for IDataServiceStreamProvider " is 124.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,GroupResourceTypesByNamespace,The length of the statement  "                this.AddVisibleResourceTypeToTypesInNamespaceCache(resourceType' ref hasVisibleMediaLinkEntry' ref hasVisibleNamedStreams); " is 123.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertiesForEntitySetAndType,The length of the statement  "                foreach (ResourceProperty navigationProperty in resourceProperties.Where(p => p.TypeKind == ResourceTypeKind.EntityType)) " is 121.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,The length of the statement  "                    // If this association is not bi-directional' we use the type name as the from role name and the property name as the to role name " is 130.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,The length of the statement  "                    end1Name = MetadataProviderUtils.GetAssociationEndName(resourceAssociationSet.End1.ResourceType' resourceAssociationSet.End1.ResourceProperty); " is 143.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,The length of the statement  "                    end2Name = MetadataProviderUtils.GetAssociationEndName(resourceAssociationSet.End2.ResourceType' resourceAssociationSet.End2.ResourceProperty); " is 143.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,The length of the statement  "            string associationName = resourceAssociationType == null ? MetadataProviderUtils.GetAssociationName(resourceAssociationSet) : resourceAssociationType.Name; " is 155.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,The length of the statement  "                ResourceAssociationSetEnd end1 = resourceAssociationSet.End1.ResourceProperty != null ? resourceAssociationSet.End1 : resourceAssociationSet.End2; " is 146.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,The length of the statement  "            MetadataProviderUtils.FixUpNavigationPropertyWithAssociationSetData(navigationProperty1' navigationProperty2' end1IsPrinciple' dependentProperties' end1DeleteAction' navigationProperty1Multiplicity); " is 199.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,The length of the statement  "                MetadataProviderUtils.FixUpNavigationPropertyWithAssociationSetData(navigationProperty2' navigationProperty1' !end1IsPrinciple' dependentProperties' end2DeleteAction' navigationProperty2Multiplicity); " is 200.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,The length of the statement  "            MetadataProviderEdmEntitySet end1EntitySet = (MetadataProviderEdmEntitySet)this.EnsureEntitySet(this.metadataProvider.ValidateResourceSet(resourceAssociationSet.End1.ResourceSet)); " is 180.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,PairUpNavigationPropertyWithResourceAssociationSet,The length of the statement  "            MetadataProviderEdmEntitySet end2EntitySet = (MetadataProviderEdmEntitySet)this.EnsureEntitySet(this.metadataProvider.ValidateResourceSet(resourceAssociationSet.End2.ResourceSet)); " is 180.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,AddEntityType,The length of the statement  "            Debug.Assert(resourceType.ResourceTypeKind == ResourceTypeKind.EntityType' "resourceType.ResourceTypeKind == ResourceTypeKind.EntityType"); " is 139.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,AddEntityType,The length of the statement  "                                    keyProperties = new Dictionary<ResourceProperty' IEdmStructuralProperty>(ReferenceEqualityComparer<ResourceProperty>.Instance); " is 127.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,AddEntityType,The length of the statement  "                                Debug.Assert(property.PropertyKind == EdmPropertyKind.Structural' "property.PropertyKind == EdmPropertyKind.Structural"); " is 121.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,AddEntityType,The length of the statement  "            bool hasStream = resourceType.IsMediaLinkEntry && (resourceType.BaseType == null || resourceType.BaseType.IsMediaLinkEntry == false); " is 133.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,AddEntityType,The length of the statement  "            // TODO: Once we want to support OData.Query we need to add an EdmType annotation here to specify the CanReflectOnInstanceType and InstanceType values. " is 151.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,AddComplexType,The length of the statement  "            Debug.Assert(resourceType.ResourceTypeKind == ResourceTypeKind.ComplexType' "resourceType.ResourceTypeKind == ResourceTypeKind.ComplexType"); " is 141.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,AddComplexType,The length of the statement  "            // EDM does not support open complex types. If this is no longer true' pass resourceType.IsOpenType as a parameter into the constructor below. " is 142.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,AddComplexType,The length of the statement  "            // Abstract complex types and types in the System namespace cause $metadata to blow off (was: $metadata small breaking change after Edmlib integration on Reflection Service on Array Type " is 186.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,AddComplexType,The length of the statement  "            // TODO: Once we want to support OData.Query we need to add an EdmType annotation here to specify the CanReflectOnInstanceType and InstanceType values. " is 151.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsurePrimitiveOrComplexCollectionType,The length of the statement  "            Debug.Assert(resourceType.ResourceTypeKind == ResourceTypeKind.Collection' "resourceType.ResourceTypeKind == ResourceTypeKind.Collection"); " is 139.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureEntityCollectionType,The length of the statement  "              resourceType.ResourceTypeKind == ResourceTypeKind.EntityCollection || resourceType.ResourceTypeKind == ResourceTypeKind.EntityType' " is 131.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureEntityCollectionType,The length of the statement  "              "resourceType.ResourceTypeKind == ResourceTypeKind.EntityCollection || resourceType.ResourceTypeKind == ResourceTypeKind.EntityType"); " is 134.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,EnsureEntityCollectionType,The length of the statement  "            Debug.Assert(itemType.ResourceTypeKind == ResourceTypeKind.EntityType' "itemType.ResourceTypeKind == ResourceTypeKind.EntityType"); " is 131.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,CreateProperty,The length of the statement  "            List<KeyValuePair<string' object>> customAnnotations = resourceProperty.CustomAnnotations == null ? null : resourceProperty.CustomAnnotations.ToList(); " is 151.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,CreateProperty,The length of the statement  "            if (resourceProperty.IsOfKind(ResourcePropertyKind.Primitive) || resourceProperty.IsOfKind(ResourcePropertyKind.Stream)) " is 120.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,CreateProperty,The length of the statement  "                IEdmPrimitiveTypeReference primitiveTypeReference = MetadataProviderUtils.CreatePrimitiveTypeReference(resourceType' customAnnotations); " is 136.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,CreateProperty,The length of the statement  "                        Debug.Assert(resourceProperty.IsOfKind(ResourcePropertyKind.Primitive)' "Streams are always non-nullable so this must be a primitive resource property"); " is 153.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,CreateProperty,The length of the statement  "                result = new MetadataProviderEdmStructuralProperty(declaringType' resourceProperty' primitiveTypeReference' defaultValue); " is 122.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,CreateProperty,The length of the statement  "                result = new MetadataProviderEdmStructuralProperty(declaringType' resourceProperty' collectionTypeReference' defaultValue); " is 123.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,CreateProperty,The length of the statement  "            else if (resourceProperty.IsOfKind(ResourcePropertyKind.ResourceSetReference) || resourceProperty.IsOfKind(ResourcePropertyKind.ResourceReference)) " is 147.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,CreateProperty,The length of the statement  "                Debug.Assert(resourceProperty.TypeKind == ResourceTypeKind.EntityType' "Expected entity type kind for navigation properties"); " is 126.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,CreateProperty,The length of the statement  "                    ? this.EnsureEntityPrimitiveOrComplexCollectionTypeReference(resourceProperty.ResourceType' new EntityCollectionResourceType(resourceProperty.ResourceType)' customAnnotations) " is 175.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,CreateProperty,The length of the statement  "                throw new InvalidOperationException(Microsoft.OData.Service.Strings.MetadataProviderEdmModel_UnsupportedResourcePropertyKind(resourceProperty.Kind.ToString())); " is 160.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,CreateProperty,The length of the statement  "            // TODO: Once we want to support OData.Query we need to add a property annotation here to specify the CanReflectOnInstanceProperty value. " is 137.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,CacheSchemaType,The length of the statement  "            Debug.Assert(!this.schemaTypeCache.ContainsKey(fullName)' "Schema type cache already contains an element with name " + fullName + "."); " is 135.
Long Statement,Microsoft.OData.Service.Providers,MetadataProviderEdmModel,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmModel.cs,SetMaterializationState,The length of the statement  "            Debug.Assert(this.materializationState != newState' "Nested calls of this method with the same state are not allowed."); " is 120.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetPathExpression,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetPathExpression.cs,SetBindingParameter,The length of the statement  "                parameter.ParameterType.ResourceTypeKind == ResourceTypeKind.EntityType || parameter.ParameterType.ResourceTypeKind == ResourceTypeKind.EntityCollection' " is 153.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetPathExpression,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetPathExpression.cs,SetBindingParameter,The length of the statement  "                "parameter.ParameterType.ResourceTypeKind == ResourceTypeKind.EntityType || parameter.ParameterType.ResourceTypeKind == ResourceTypeKind.EntityCollection"); " is 156.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetPathExpression,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetPathExpression.cs,SetBindingParameter,The length of the statement  "            if (this.PathExpression != parameter.Name && !this.PathExpression.StartsWith(parameter.Name + ResourceSetPathExpression.PathSeparator' StringComparison.Ordinal)) " is 161.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetPathExpression,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetPathExpression.cs,SetBindingParameter,The length of the statement  "                throw new InvalidOperationException(Strings.ResourceSetPathExpression_PathExpressionMustStartWithBindingParameterName(this.PathExpression' parameter.Name)); " is 156.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetPathExpression,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetPathExpression.cs,InitializePathSegments,The length of the statement  "                            ResourceType currentType = WebUtil.ResolveTypeIdentifier(provider' segmentString' currentSegment.SourceType' previousSegmentIsTypeSegment: seenTypeSegment); " is 156.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetPathExpression,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetPathExpression.cs,InitializePathSegments,The length of the statement  "                                    throw new InvalidOperationException(Strings.ResourceSetPathExpression_PathCannotEndWithTypeIdentifier(this.pathExpression' segmentStrings[segmentLength - 1])); " is 159.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetPathExpression,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetPathExpression.cs,InitializePathSegments,The length of the statement  "                                throw new InvalidOperationException(Strings.ResourceSetPathExpression_PropertyNotFound(this.pathExpression' segmentString' currentSegment.SourceType.FullName)); " is 160.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetPathExpression,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetPathExpression.cs,InitializePathSegments,The length of the statement  "                            throw new InvalidOperationException(Strings.ResourceSetPathExpression_PropertyMustBeEntityType(this.pathExpression' segmentString' currentSegment.SourceType.FullName)); " is 168.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetPathExpression,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetPathExpression.cs,GetTargetSet,The length of the statement  "            Debug.Assert(this.pathSegments != null && this.pathSegments.Length > 0' "InitializePathSegments() must be called before this."); " is 128.
Long Statement,Microsoft.OData.Service.Providers,ResourceSetPathExpression,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetPathExpression.cs,GetTargetSet,The length of the statement  "            Debug.Assert(bindingSet.ResourceType.IsAssignableFrom(this.pathSegments[0].SourceType)' "bindingSet.ResourceType.IsAssignableFrom(this.pathSegments[0].SourceType)"); " is 165.
Long Statement,Microsoft.OData.Service.Serializers,OperationLinkBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationLinkBuilder.cs,BuildTargetLink,The length of the statement  "            string targetSegment = operation.GetActionTargetSegmentByResourceType(entityToSerialize.ResourceType' this.namespaceName); " is 122.
Long Statement,Microsoft.OData.Service.Serializers,OperationLinkBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationLinkBuilder.cs,BuildTargetLink,The length of the statement  "            // If there are multiple operations with the same name' then using the edit link of the entry would cause the target to potentially resolve to the wrong " is 152.
Long Statement,Microsoft.OData.Service.Serializers,OperationLinkBuilder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationLinkBuilder.cs,BuildTargetLink,The length of the statement  "                Uri editLinkWithBindingType = RequestUriProcessor.AppendUnescapedSegment(entityToSerialize.SerializedKey.AbsoluteEditLinkWithoutSuffix' operation.BindingParameter.ParameterType.FullName); " is 187.
Long Statement,Microsoft.OData.Service.Serializers,EntityToSerialize,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityToSerialize.cs,Create,The length of the statement  "            KeySerializer keySerializer = KeySerializer.Create(provider.DataService.Configuration.DataServiceBehavior.GenerateKeyAsSegment); " is 128.
Long Statement,Microsoft.OData.Service.Serializers,EntityToSerialize,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityToSerialize.cs,Create,The length of the statement  "            return Create(entity' resourceType' resourceSetWrapper.Name' includeTypeSegment' getPropertyValue' keySerializer' absoluteServiceUri); " is 134.
Long Statement,Microsoft.OData.Service.Serializers,EntityToSerialize,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityToSerialize.cs,Create,The length of the statement  "            Debug.Assert(absoluteServiceUri != null && absoluteServiceUri.IsAbsoluteUri' "absoluteServiceUri != null && absoluteServiceUri.IsAbsoluteUri"); " is 143.
Long Statement,Microsoft.OData.Service.Serializers,EntityToSerialize,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityToSerialize.cs,Create,The length of the statement  "            SerializedEntityKey serializedKey = LazySerializedEntityKey.Create(keySerializer' absoluteServiceUri' resourceSetName' resourceType.KeyProperties' getPropertyValue' editLinkSuffix); " is 181.
Long Statement,Microsoft.OData.Service.Serializers,LazySerializedEntityKey,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\LazySerializedEntityKey.cs,AppendLazilyIfNeeded,The length of the statement  "            return suffix == null ? lazyUri : new SimpleLazy<Uri>(() => RequestUriProcessor.AppendUnescapedSegment(lazyUri.Value' suffix)' false); " is 134.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldIncludeEntryMetadata,The length of the statement  "            Debug.Assert(kind != PayloadMetadataKind.Entry.TypeName' "Must use other helper method 'ShouldIncludeEntryTypeName' instead"); " is 126.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldIncludeEntryMetadata,The length of the statement  "            Debug.Assert(this.metadataParameterValue == MetadataParameterValue.Minimal' "Unexpected metadata parameter value: " + this.metadataParameterValue); " is 147.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldIncludeEntryTypeName,The length of the statement  "            Debug.Assert(this.metadataParameterValue == MetadataParameterValue.Minimal' "setting == MetadataParameterValue.Default"); " is 121.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldIncludeStreamMetadata,The length of the statement  "            Debug.Assert(this.metadataParameterValue == MetadataParameterValue.Minimal' "Unexpected metadata parameter value: " + this.metadataParameterValue); " is 147.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldIncludeStreamMetadata,The length of the statement  "            // Most stream metadata is generated by the custom provider and cannot be computed client-side' and must be included by default. " is 128.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldIncludeNavigationMetadata,The length of the statement  "            Debug.Assert(this.metadataParameterValue == MetadataParameterValue.Minimal' "Unexpected metadata parameter value: " + this.metadataParameterValue); " is 147.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldIncludeNavigationMetadata,The length of the statement  "            Debug.Assert(kind == PayloadMetadataKind.Navigation.AssociationLinkUrl || kind == PayloadMetadataKind.Navigation.Url' "Unexpected metadata kind: " + kind); " is 155.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldIncludeAssociationMetadata,The length of the statement  "            Debug.Assert(this.metadataParameterValue == MetadataParameterValue.Minimal' "Unexpected metadata parameter value: " + this.metadataParameterValue); " is 147.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldIncludeFeedMetadata,The length of the statement  "            Debug.Assert(this.metadataParameterValue == MetadataParameterValue.Minimal' "Unexpected metadata parameter value: " + this.metadataParameterValue); " is 147.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldIncludeOperationMetadata,The length of the statement  "            Debug.Assert(kind == PayloadMetadataKind.Operation.Title || kind == PayloadMetadataKind.Operation.Target' "Unexpected metadata kind: " + kind); " is 143.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldIncludeOperationMetadata,The length of the statement  "            // Operation metadata is generated based on conventions and should be left out by default' unless it was changed by the user. " is 125.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldSpecifyTypeNameAnnotation,The length of the statement  "                Debug.Assert(primitiveValue == null || actualType.ResourceTypeKind == ResourceTypeKind.Primitive' "If value is ODataPrimitiveValue' actualType must also be primitive."); " is 169.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataParameterInterpreter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataParameterInterpreter.cs,ShouldSpecifyTypeNameAnnotation,The length of the statement  "                if (primitiveValue != null && JsonSharedUtils.ValueTypeMatchesJsonType(primitiveValue' MetadataProviderUtils.CreatePrimitiveTypeReference(actualType))) " is 151.
Long Statement,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,SerializeOperations,The length of the statement  "                if (this.TrySerializeOperation(entityToSerialize' resourceInstanceInFeed' actionNameHasCollision' wrapper' out odataAction)) " is 124.
Long Statement,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,TrySerializeOperation,The length of the statement  "            Uri metadata = this.operationLinkBuilder.BuildMetadataLink(serviceOperationWrapper' entityHasMultipleActionsWithSameName); " is 122.
Long Statement,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,TrySerializeOperation,The length of the statement  "            // If the action has OperationParameterBindingKind set to "Always" then we advertise the action without calling "AdvertiseServiceAction". " is 137.
Long Statement,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,TrySerializeOperation,The length of the statement  "            // There is some subtlety to the interaction between action advertisement and whether or not to include title/target on the wire. " is 129.
Long Statement,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,TrySerializeOperation,The length of the statement  "            SimpleLazy<Uri> lazyActionTargetUri = new SimpleLazy<Uri>(() => this.operationLinkBuilder.BuildTargetLink(entityToSerialize' serviceOperationWrapper' entityHasMultipleActionsWithSameName)); " is 189.
Long Statement,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,TrySerializeOperation,The length of the statement  "            return this.AskProviderIfActionShouldBeAdvertised(entityToSerialize' resourceInstanceInFeed' serviceOperationWrapper' lazyActionTargetUri' entityHasMultipleActionsWithSameName' ref odataAction); " is 194.
Long Statement,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,AskProviderIfActionShouldBeAdvertised,The length of the statement  "            if (this.advertiseServiceAction(serviceOperationWrapper' entityToSerialize.Entity' resourceInstanceInFeed' ref odataAction)) " is 124.
Long Statement,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,AskProviderIfActionShouldBeAdvertised,The length of the statement  "                    throw new DataServiceException(500' Microsoft.OData.Service.Strings.DataServiceActionProviderWrapper_AdvertiseServiceActionCannotReturnNullActionToSerialize); " is 158.
Long Statement,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,MakeOperationTargetRelativeFromMetadataUriIfJsonLight,The length of the statement  "            if (this.format == ODataFormat.Json && targetLink != null && targetLink.IsAbsoluteUri && this.metadataUri.IsBaseOf(targetLink)) " is 127.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataPropertyManager,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataPropertyManager.cs,SetNextPageLink,The length of the statement  "            Debug.Assert(absoluteServiceUri != null && absoluteServiceUri.IsAbsoluteUri' "absoluteServiceUri != null && absoluteServiceUri.IsAbsoluteUri"); " is 143.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataPropertyManager,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataPropertyManager.cs,SetNextPageLink,The length of the statement  "            Debug.Assert(absoluteNextPageLinkUri != null && absoluteNextPageLinkUri.IsAbsoluteUri' "absoluteNextPageLinkUri != null && absoluteNextPageLinkUri.IsAbsoluteUri"); " is 163.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataPropertyManager,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataPropertyManager.cs,SetNextPageLink,The length of the statement  "                UriUtil.UriToString(absoluteNextPageLinkUri).StartsWith(UriUtil.UriToString(absoluteServiceUri)' StringComparison.OrdinalIgnoreCase)' " is 133.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataPropertyManager,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataPropertyManager.cs,SetNextPageLink,The length of the statement  "                "UriUtil.UriToString(absoluteNextPageLinkUri).StartsWith(UriUtil.UriToString(absoluteServiceUri)' StringComparison.OrdinalIgnoreCase)"); " is 136.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataPropertyManager,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataPropertyManager.cs,SetTypeName,The length of the statement  "            Debug.Assert(collectionValue == null || !String.IsNullOrEmpty(collectionValue.TypeName)' "Type name must be specified in ODataCollectionValue since ODL needs it for validation."); " is 179.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataPropertyManager,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataPropertyManager.cs,SetTitle,The length of the statement  "            if (!isAlwaysAvailable || this.interpreter.ShouldIncludeOperationMetadata(PayloadMetadataKind.Operation.Title' () => false)) " is 124.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataPropertyManager,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataPropertyManager.cs,SetTarget,The length of the statement  "            if (!isAlwaysAvailable || this.interpreter.ShouldIncludeOperationMetadata(PayloadMetadataKind.Operation.Target' () => false)) " is 125.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataPropertyManager,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataPropertyManager.cs,CheckForUnmodifiedTitle,The length of the statement  "            if (!this.interpreter.ShouldIncludeOperationMetadata(PayloadMetadataKind.Operation.Title' () => action.Title != originalTitle)) " is 127.
Long Statement,Microsoft.OData.Service.Serializers,PayloadMetadataPropertyManager,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PayloadMetadataPropertyManager.cs,CheckForUnmodifiedTarget,The length of the statement  "            if (!this.interpreter.ShouldIncludeOperationMetadata(PayloadMetadataKind.Operation.Target' () => !ReferenceEquals(action.Target' computeOriginalTarget()))) " is 155.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,Read,The length of the statement  "            Debug.Assert(segmentInfo.TargetKind == RequestTargetKind.Resource' "The EntityDeserializer only supports Resource target kinds."); " is 130.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,Read,The length of the statement  "            Debug.Assert(expectedResourceType != null' "To read an entity we must know the expected resource type of the entity to read."); " is 127.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,Read,The length of the statement  "            Debug.Assert(expectedResourceType.ResourceTypeKind == ResourceTypeKind.EntityType' "Only entity types can be used as types for entities."); " is 139.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,Read,The length of the statement  "            Debug.Assert(metadataProviderEdmModel.Mode == MetadataProviderEdmModelMode.Serialization' "Model expected to be in serialization mode."); " is 137.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,Read,The length of the statement  "            IEdmEntitySet expectedEntitySet = WebUtil.GetEntitySet(this.Service.Provider' metadataProviderEdmModel' segmentInfo.TargetResourceSet); " is 135.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,Read,The length of the statement  "            // Due to the fact that the payload order on the wire is arbitrary' but we always set all non-navigation properties first " is 121.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                // Don't let the item stack grow larger than we can process later. Also lets us to fail and report the recursion depth limit error before ODL does. " is 147.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                            // and we need to report that failure rather then potential other failures caused by the properties in the entry in question. " is 125.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                                Debug.Assert(parentNavigationLinkAnnotation != null' "Every navigation link we added to the stack should have the navigation link annotation on it."); " is 150.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                                Debug.Assert(parentNavigationLink.IsCollection == false' "Only singleton navigation properties can contain entry as their child."); " is 131.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                                Debug.Assert(parentNavigationLinkAnnotation.Count == 0' "Each navigation property can contain only one entry as its direct child."); " is 132.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                        Debug.Assert(itemsStack.Count > 0 && itemsStack.Peek() == odataReader.Item' "The entry which is ending should be on the top of the items stack."); " is 146.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                            Debug.Assert(parentEntryAnnotation != null' "Every entry we added to the stack should have the navigation link annotation on it."); " is 131.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                        Debug.Assert(itemsStack.Count > 0 && itemsStack.Peek() == odataReader.Item' "The navigation link which is ending should be on the top of the items stack."); " is 156.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                        Debug.Assert(itemsStack.Count > 0' "Since we always start reading entry' we should never get a feed as the top-level item."); " is 125.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                            Debug.Assert(parentNavigationLinkAnnotation != null' "Every navigation link we added to the stack should have the navigation link annotation on it."); " is 150.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                            Debug.Assert(parentNavigationLink.IsCollection == true' "Only collection navigation properties can contain feed as their child."); " is 130.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                        Debug.Assert(itemsStack.Count > 0 && itemsStack.Peek() == odataReader.Item' "The feed which is ending should be on the top of the items stack."); " is 145.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ReadEntry,The length of the statement  "                            Debug.Assert(parentNavigationLinkAnnotation != null' "Every navigation link we added to the stack should have the navigation link annotation on it."); " is 150.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,CreateEntityResource,The length of the statement  "            Debug.Assert(entry != null' "Null entries should not be tried to translated to entity instances' instead they should be handled separately."); " is 142.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,CreateEntityResource,The length of the statement  "            // It is going to be called when reading the top-level entry during entry reading (in which case it would count 1' and not fail anyway) " is 135.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,CreateEntityResource,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.OpenNavigationPropertiesNotSupportedOnOpenTypes(segmentInfo.Identifier)); " is 154.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,CreateEntityResource,The length of the statement  "                    // [Astoria-ODataLib-Integration] WCF DS Server doesn't check ETags if an ATOM payload entry has no content and no links (and it's a V1 entry) " is 142.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,CreateEntityResource,The length of the statement  "                    entityResource = this.Updatable.CreateResource(segmentInfo.TargetResourceSet == null ? null : segmentInfo.TargetResourceSet.Name' entityResourceType.FullName); " is 159.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,CreateEntityResource,The length of the statement  "                entityResource = this.Updatable.CreateResource(segmentInfo.TargetResourceSet == null ? null : segmentInfo.TargetResourceSet.Name' entityResourceType.FullName); " is 159.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyEntityProperties,The length of the statement  "            Debug.Assert(entry != null' "Null entries should not be tried to translated to entity instances' instead they should be handled separately."); " is 142.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyEntityProperties,The length of the statement  "            // We need this since we need to call it around the entire CreateEntryResource + ApplyEntityProperties combo for the nested entries " is 131.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,GetEntryResourceType,The length of the statement  "                    || expectedType.ResourceTypeKind == ResourceTypeKind.ComplexType' "Expected type for entities must be an structured type."); " is 124.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,GetEntryResourceType,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.BadRequest_TypeInformationMustBeSpecifiedForInhertiance); " is 138.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,GetEntryResourceType,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.BadRequest_InvalidTypeName(payloadTypeName)); " is 126.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,GetEntryResourceType,The length of the statement  "                    throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.BadRequest_InvalidTypeSpecified(payloadTypeName' expectedType.FullName)); " is 154.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyValueProperties,The length of the statement  "                || entityResourceType.ResourceTypeKind == ResourceTypeKind.ComplexType' "Only entity types can be specified for entities."); " is 124.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyValueProperties,The length of the statement  "            Debug.Assert(entry.Properties != null' "The ODataLib reader should always populate the ODataResource.Properties collection."); " is 126.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyNavigationProperties,The length of the statement  "                || entityResourceType.ResourceTypeKind == ResourceTypeKind.ComplexType' "Only entity types can be specified for entities."); " is 124.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyNavigationProperties,The length of the statement  "                ResourceProperty navigationProperty = entityResourceType.TryResolvePropertyName(navigationLink.Name' exceptKind: ResourcePropertyKind.Stream); " is 142.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyNavigationProperties,The length of the statement  "                    Debug.Assert(navigationProperty != null' "ODataLib reader should have already validated that all navigation properties are declared and none is open."); " is 152.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyNavigationProperties,The length of the statement  "                        && navigationProperty.ResourceType.ElementType().ResourceTypeKind == ResourceTypeKind.ComplexType)' "Navigation properties should already be validated by ODataLib to be of entity types."); " is 188.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyNavigationProperties,The length of the statement  "                        this.ApplyNavigationProperty(navigationLink' entityResourceSet' entityResourceType' navigationProperty' entityResource); " is 120.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyComplexProperties,The length of the statement  "                || entityResourceType.ResourceTypeKind == ResourceTypeKind.EntityType' "Only entity types can be specified for entities."); " is 123.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyComplexProperties,The length of the statement  "                ResourceProperty navigationProperty = entityResourceType.TryResolvePropertyName(navigationLink.Name' exceptKind: ResourcePropertyKind.Stream); " is 142.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyNavigationProperty,The length of the statement  "                || entityResourceType.ResourceTypeKind == ResourceTypeKind.ComplexType' "Only entity types can be specified for entities."); " is 124.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyNavigationProperty,The length of the statement  "            Debug.Assert(navigationLink.Name == navigationProperty.Name' "The navigationProperty must have the same name as the navigationLink to apply."); " is 143.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyNavigationProperty,The length of the statement  "                "If the navigation link is a singleton' then there must be exactly one child in it and the property must be a singleton as well."); " is 131.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyNavigationProperty,The length of the statement  "                    // Get the target resource set for the navigation property' this also causes validation of the resource set and thus migth fail. " is 128.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyNavigationProperty,The length of the statement  "                    // WCF DS Used to do this in ATOM only if the link was expanded' which was a security issue we decided to fix' so now we do it always. " is 134.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyNavigationProperty,The length of the statement  "                    targetResourceSet = this.GetNavigationPropertyTargetResourceSet(entityResourceSet' entityResourceType' navigationProperty); " is 123.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyComplexProperty,The length of the statement  "            entityResourceType.ResourceTypeKind == ResourceTypeKind.EntityType' "Only entity types can be specified for entities."); " is 120.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyComplexProperty,The length of the statement  "            Debug.Assert(navigationProperty == null || navigationLink.Name == navigationProperty.Name' "The navigationProperty must have the same name as the navigationLink to apply."); " is 173.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyComplexProperty,The length of the statement  "                "If the navigation link is a singleton' then there must be exactly one child in it and the property must be a singleton as well."); " is 131.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyComplexProperty,The length of the statement  "                navigationLink.IsCollection == false || (navigationProperty == null || navigationProperty.Kind == ResourcePropertyKind.ResourceSetReference || navigationProperty.Kind == ResourcePropertyKind.Collection)' " is 203.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyEntityReferenceLinkInNavigationProperty,The length of the statement  "            // Ignore entity reference links without any URL (this is effectively ATOM only since in JSON there always has to be some " is 121.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyFeedInNavigationProperty,The length of the statement  "            SegmentInfo propertySegmentInfo = CreateSegment(navigationProperty' navigationProperty.Name' targetResourceSet' false /* singleResult */); " is 138.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyFeedInNavigationProperty,The length of the statement  "            Debug.Assert(propertySegmentInfo.TargetKind != RequestTargetKind.OpenProperty' "Open navigation properties are not supported on OpenTypes."); " is 141.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyFeedInCollectionProperty,The length of the statement  "            Debug.Assert(propertySegmentInfo.TargetKind != RequestTargetKind.OpenProperty' "Open navigation properties are not supported on OpenTypes."); " is 141.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyFeedInCollectionProperty,The length of the statement  "            var collection = Deserializer.GetReadOnlyCollection(collectionList' navigationProperty.ResourceType as CollectionResourceType); " is 127.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyEntryInNavigationProperty,The length of the statement  "                navigationProperty != null && (navigationProperty.TypeKind == ResourceTypeKind.EntityType || navigationProperty.TypeKind == ResourceTypeKind.ComplexType)' " is 154.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyEntryInNavigationProperty,The length of the statement  "                SegmentInfo propertySegmentInfo = CreateSegment(navigationProperty' navigationProperty.Name' targetResourceSet' true /* singleResult */); " is 137.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyEntryInNavigationProperty,The length of the statement  "                Debug.Assert(propertySegmentInfo.TargetKind != RequestTargetKind.OpenProperty' "Open navigation properties are not supported on OpenTypes."); " is 141.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,ApplyEntryInComplexProperty,The length of the statement  "                complexProperty != null && (complexProperty.TypeKind == ResourceTypeKind.EntityType || complexProperty.TypeKind == ResourceTypeKind.ComplexType)' " is 145.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,SetResourceReferenceToNull,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.BadRequest_CannotSetCollectionsToNull(navigationProperty.Name)); " is 145.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,SetResourceReferenceToNull,The length of the statement  "                || navigationProperty.Kind == ResourcePropertyKind.ComplexType' "Only navigation properties are allowed in this method."); " is 122.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,SetResourceReferenceToUrl,The length of the statement  "            RequestDescription requestDescription = RequestUriProcessor.ProcessRequestUri(referencedUri' this.Service' true /*internalQuery*/); " is 131.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,SetResourceReferenceToUrl,The length of the statement  "            object referencedResource = this.Service.GetResource(requestDescription' requestDescription.SegmentInfos.Count - 1' null); " is 122.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,SetResourceReferenceToUrl,The length of the statement  "                Debug.Assert(navigationProperty.Kind == ResourcePropertyKind.ResourceSetReference' "Only navigation properties are allowed in this method."); " is 141.
Long Statement,Microsoft.OData.Service.Serializers,EntityDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityDeserializer.cs,SetResourceReferenceToUrl,The length of the statement  "                // If we are to set the resource to a collection property it must not be null (so check for nulls)' otherwise do allow nulls for backward compatibility. " is 152.
Long Statement,Microsoft.OData.Service.Serializers,ParameterDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ParameterDeserializer.cs,Read,The length of the statement  "                        Debug.Assert(parameterResourceType.ResourceTypeKind == ResourceTypeKind.Collection' "parameterResourceType.ResourceTypeKind == ResourceTypeKind.Collection"); " is 157.
Long Statement,Microsoft.OData.Service.Serializers,ParameterDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ParameterDeserializer.cs,Read,The length of the statement  "                        convertedParameterValue = this.ConvertValue(ParameterDeserializer.ReadCollectionParameterValue(collectionReader)' ref parameterResourceType); " is 141.
Long Statement,Microsoft.OData.Service.Serializers,ParameterDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ParameterDeserializer.cs,Read,The length of the statement  "            // ODataLib allows nullable parameters to be missing from the payload. When that happens' we use null for the parameter value. " is 126.
Long Statement,Microsoft.OData.Service.Serializers,ParameterDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ParameterDeserializer.cs,Read,The length of the statement  "                    Debug.Assert(parameterMetadata.Type.IsNullable' "ODataParameterReader should only allows nullable parameters to be missing from the payload."); " is 143.
Long Statement,Microsoft.OData.Service.Serializers,ParameterDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ParameterDeserializer.cs,ReadCollectionParameterValue,The length of the statement  "            Debug.Assert(collectionReader.State == ODataCollectionReaderState.Start' "The collection reader should not have been used."); " is 125.
Long Statement,Microsoft.OData.Service.Serializers,DataStringEscapeBuilder,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Serialization\DataStringEscapeBuilder.cs,Build,The length of the statement  "            Debug.Assert(this.index == 0' "Expected this.index to be 0' because Build can only be called once for an instance of DataStringEscapeBuilder."); " is 144.
Long Statement,Microsoft.OData.Service.Serializers,DataStringEscapeBuilder,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Serialization\DataStringEscapeBuilder.cs,Build,The length of the statement  "            Debug.Assert(this.output.Length == 0' "Expected this.output.Length to be 0' because Build can only be called once for an instance of DataStringEscapeBuilder."); " is 160.
Long Statement,Microsoft.OData.Service.Serializers,DataStringEscapeBuilder,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Serialization\DataStringEscapeBuilder.cs,ReadQuotedString,The length of the statement  "                Debug.Assert(this.quotedDataBuilder.Length == 0' "Expected quotedDataBuilder to have been cleared by previous call to ReadQuotedString"); " is 137.
Long Statement,Microsoft.OData.Service.Serializers,EntityReferenceLinkDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityReferenceLinkDeserializer.cs,Read,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.BadRequest_MissingUriForLinkOperation); " is 120.
Long Statement,Microsoft.OData.Service.Serializers,EntityReferenceLinkDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntityReferenceLinkDeserializer.cs,Read,The length of the statement  "            return RequestUriProcessor.GetAbsoluteUriFromReference(entityReferenceUri' this.Service.OperationContext.AbsoluteServiceUri); " is 125.
Long Statement,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,ConvertPrimitiveValue,The length of the statement  "            Debug.Assert(resourceType == null || resourceType.ResourceTypeKind == ResourceTypeKind.Primitive' "Only primitive types are supported by this method."); " is 152.
Long Statement,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,ConvertPrimitiveValue,The length of the statement  "                        Debug.Assert(stringValue != null' "If the property is of type System.Xml.Linq.XElement then ODataLib should ahve read it as string."); " is 134.
Long Statement,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,ConvertPrimitiveValue,The length of the statement  "                        Debug.Assert(byteArray != null' "If the property is of type System.Data.Linq.Binary then ODataLib should have read it as byte[]."); " is 131.
Long Statement,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,ConvertPrimitiveValue,The length of the statement  "                // It might be the case that store type is DateTime/DateTime? in which case the ResourceType is DateTimeOffset/DateTimeOffset?. " is 127.
Long Statement,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,Deserialize,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.DataServiceException_GeneralError' exception); " is 127.
Long Statement,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,Deserialize,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.DataServiceException_GeneralError' exception); " is 127.
Long Statement,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,ApplyProperty,The length of the statement  "                Debug.Assert(resourceType.IsOpenType' "ODataLib reader should have already failed on undefined properties on non-open types."); " is 127.
Long Statement,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,ConvertCollection,The length of the statement  "                Debug.Assert(!string.IsNullOrEmpty(collection.TypeName)' "ODataLib should have verified that open collection property value has a type name since we provided metadata."); " is 170.
Long Statement,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,ConvertCollection,The length of the statement  "                Debug.Assert(resourceType.ResourceTypeKind == ResourceTypeKind.Collection' "ODataLib should have verified that collection value has a collection resource type."); " is 162.
Long Statement,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,ConvertCollection,The length of the statement  "                "We don't support any inheritance in collections' so the type of the collection should exactly match the type in the metadata."); " is 129.
Long Statement,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,ConvertCollection,The length of the statement  "            Debug.Assert(collection.Items != null' "The ODataLib reader should always populate the ODataCollectionValue.Items collection."); " is 128.
Long Statement,Microsoft.OData.Service.Serializers,PropertyDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PropertyDeserializer.cs,Read,The length of the statement  "                // WCF DS server allows null values for primitive properties. For non top-level properties' custom annotations are added  " is 120.
Long Statement,Microsoft.OData.Service.Serializers,PropertyDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PropertyDeserializer.cs,Read,The length of the statement  "                // to ensure ODataLib does not perform any validation. The provider can choose to throw in which case' the response code will be 500. The " is 137.
Long Statement,Microsoft.OData.Service.Serializers,PropertyDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PropertyDeserializer.cs,Read,The length of the statement  "                // same applies to top-level primitive properties. So' we ensure the type reference carries the correct value for the nullability facet. " is 136.
Long Statement,Microsoft.OData.Service.Serializers,PropertyDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PropertyDeserializer.cs,Read,The length of the statement  "                    && MetadataProviderUtils.ShouldDisablePrimitivePropertyNullValidation(resourceProperty' (IEdmPrimitiveTypeReference)propertyTypeReference)) " is 139.
Long Statement,Microsoft.OData.Service.Serializers,PropertyDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PropertyDeserializer.cs,Read,The length of the statement  "                // to ensure ODataLib does not perform any validation. The provider can choose to throw in which case' the response code will be 500. The " is 137.
Long Statement,Microsoft.OData.Service.Serializers,PropertyDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PropertyDeserializer.cs,Read,The length of the statement  "                // same applies to top-level complex properties. So' we ensure the type reference carries the correct value for the nullability facet. " is 134.
Long Statement,Microsoft.OData.Service.Serializers,PropertyDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PropertyDeserializer.cs,Read,The length of the statement  "                if (resourceProperty.Kind == ResourcePropertyKind.ComplexType && this.Service.Provider.HasReflectionOrEFProviderQueryBehavior && !propertyTypeReference.IsNullable) " is 163.
Long Statement,Microsoft.OData.Service.Serializers,PropertyDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PropertyDeserializer.cs,Read,The length of the statement  "            //  For backward compat reasons we must not fail if the property name doesn't match and the value is null or it's an open property (in XML case). " is 145.
Long Statement,Microsoft.OData.Service.Serializers,PropertyDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PropertyDeserializer.cs,Read,The length of the statement  "            // V2 Server reads JSON complex values without property wrapper' ODataLib will report these as ODataProperty with empty name' so for those " is 138.
Long Statement,Microsoft.OData.Service.Serializers,PropertyDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\PropertyDeserializer.cs,Read,The length of the statement  "                Debug.Assert(segmentInfo.TargetResourceType.FullName == propertyResourceType.FullName' "segmentInfo.TargetResourceType == propertyResourceType"); " is 145.
Long Statement,Microsoft.OData.Service.Serializers,RawValueDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\RawValueDeserializer.cs,Read,The length of the statement  "                segmentInfo.TargetKind == RequestTargetKind.PrimitiveValue || segmentInfo.TargetKind == RequestTargetKind.OpenPropertyValue' " is 124.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetResourceToModify,The length of the statement  "                Debug.Assert(segmentInfo.TargetKind != RequestTargetKind.Resource' "segmentInfo.TargetKind != RequestTargetKind.Resource"); " is 123.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetResourceToModify,The length of the statement  "            if (checkETag && !WebUtil.IsCrossReferencedSegment(description.SegmentInfos[modifyingResourceIndex]' service) && description.TargetKind != RequestTargetKind.MediaResource) " is 171.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,SetStreamPropertyValue,The length of the statement  "            // 2. This is a PUT default/named stream' so target kind is MediaResource but resourceType can be either an MLE or non-MLE. " is 123.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,SetStreamPropertyValue,The length of the statement  "            // If target kind is MediaResource and this is not a named stream' the current endpoint is /entity/$value. We need to verify that " is 129.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,SetStreamPropertyValue,The length of the statement  "            // resourceType is an MLE. At URI processing time' we don't have the actual entity instance to test whether it is an MLE or not' so " is 131.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,SetStreamPropertyValue,The length of the statement  "            if (description.TargetKind == RequestTargetKind.MediaResource && !description.IsNamedStream && !resourceType.IsMediaLinkEntry) " is 126.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,SetStreamPropertyValue,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.BadRequest_InvalidUriForMediaResource(service.OperationContext.AbsoluteRequestUri)); " is 141.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,SetStreamPropertyValue,The length of the statement  "                (service.OperationContext.RequestMessage.HttpVerb == HttpVerbs.PUT && description.TargetKind == RequestTargetKind.MediaResource)' " is 129.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,SetStreamPropertyValue,The length of the statement  "            using (Stream writeStream = service.StreamProvider.GetWriteStream(resourceToBeModified' streamProperty' service.OperationContext)) " is 130.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,HandleBindOperation,The length of the statement  "            object entityGettingModified = Deserializer.GetEntityResourceToModify(description' service' true /*allowCrossReference*/' out container); " is 137.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetReadOnlyCollection,The length of the statement  "            Debug.Assert(collection.GetType() == typeof(List<object>)' "The collection was not created by CreateNewCollectionProperty."); " is 125.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetIndexOfEntityResourceToModify,The length of the statement  "            Debug.Assert(description.TargetSource == RequestTargetSource.Property' "description.TargetSource == RequestTargetSource.Property"); " is 131.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetIndexOfEntityResourceToModify,The length of the statement  "                    description.SegmentInfos[description.SegmentInfos.Count - 3].TargetKind == RequestTargetKind.Resource && description.SegmentInfos[description.SegmentInfos.Count - 3].SingleResult' " is 179.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetIndexOfEntityResourceToModify,The length of the statement  "            Debug.Assert(entityResourceIndex != -1' "This method should never be called for request that doesn't have a parent resource"); " is 126.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,ReadPayloadParameters,The length of the statement  "            RequestDescription requestDescription = new RequestDescription(new SegmentInfo[] { actionSegment }' RequestUriProcessor.GetResultUri(dataService.OperationContext)); " is 164.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,ReadPayloadParameters,The length of the statement  "            using (Deserializer parameterDeserializer = Deserializer.CreateDeserializer(requestDescription' dataService' false /*update*/' UpdateTracker.CreateUpdateTracker(dataService))) " is 175.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,ReadEntity,The length of the statement  "                Debug.Assert(requestDescription.LastSegmentInfo.TargetResourceSet != null' "requestDescription.LastSegmentInfo.TargetContainer != null"); " is 137.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,HandlePostRequest,The length of the statement  "                    DataServiceConfiguration.CheckResourceRights(requestDescription.LastSegmentInfo.TargetResourceSet' EntitySetRights.WriteAppend); " is 128.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,HandlePostRequest,The length of the statement  "                    Debug.Assert(requestDescription.Property.Kind == ResourcePropertyKind.ResourceSetReference' "Expecting POST resource set property"); " is 132.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,HandlePostRequest,The length of the statement  "                    this.Tracker.TrackAction(resourceInPayload' requestDescription.LastSegmentInfo.TargetResourceSet' UpdateOperations.Add); " is 120.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,HandlePutRequest,The length of the statement  "                        throw DataServiceException.CreateBadRequestError(Strings.BadRequest_CannotSetTopLevelResourceToNull(requestDescription.ResultUri.AbsoluteUri)); " is 143.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,HandlePutRequest,The length of the statement  "                    requestDescription' this.Service' false /*allowCrossReferencing*/' out entityGettingModified' out container' true /*checkETag*/); " is 129.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,UpdateObjectCount,The length of the statement  "            Debug.Assert(value <= this.Service.Configuration.MaxObjectCountOnInsert' "On initialize' the value should be less than max object count"); " is 138.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetTargetResourceToBind,The length of the statement  "            // (Dev10) sometime we check for null and sometimes we don't. We decided not to fix this and thus we need to keep the parameter. " is 128.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetTargetResourceToBind,The length of the statement  "            // (Dev10) sometime we check for null and sometimes we don't. We decided not to fix this and thus we need to keep the parameter. " is 128.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetTargetResourceToBind,The length of the statement  "            RequestDescription requestDescription = RequestUriProcessor.ProcessRequestUri(referencedUri' this.Service' true /*internalQuery*/); " is 131.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetObjectFromSegmentInfo,The length of the statement  "            Debug.Assert(resourceType == null && !verifyETag || resourceType != null' "For etag verification' resource type must be specified"); " is 132.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,CheckAndIncrementObjectCount,The length of the statement  "            Debug.Assert(this.objectCount <= this.Service.Configuration.MaxObjectCountOnInsert' "The object count should never exceed the limit"); " is 134.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,CheckAndIncrementObjectCount,The length of the statement  "                    throw new DataServiceException(413' Strings.BadRequest_ExceedsMaxObjectCountOnInsert(this.Service.Configuration.MaxObjectCountOnInsert)); " is 137.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,UpdateAndCheckRequestResponseDSV,The length of the statement  "            Debug.Assert(resourceType.ResourceTypeKind == ResourceTypeKind.EntityType || resourceType.ResourceTypeKind == ResourceTypeKind.ComplexType' "resourceType is structured type"); " is 175.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,UpdateAndCheckRequestResponseDSV,The length of the statement  "            Debug.Assert(this.RequestDescription.LastSegmentInfo.TargetResourceSet != null' "this.RequestDescription.LastSegmentInfo.TargetContainer != null"); " is 147.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetEntityResourceToModify,The length of the statement  "            Debug.Assert(entityResourceIndex != -1' "This method should never be called for request that doesn't have a parent resource"); " is 126.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetEntityResourceToModify,The length of the statement  "                DataServiceConfiguration.CheckResourceRights(entityContainer' EntitySetRights.WriteMerge | EntitySetRights.WriteReplace); " is 121.
Long Statement,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetEntityResourceToModify,The length of the statement  "                throw DataServiceException.CreateBadRequestError(Strings.BadRequest_DereferencingNullPropertyValue(description.SegmentInfos[entityResourceIndex].Identifier)); " is 158.
Long Statement,Microsoft.OData.Service.Serializers,MetadataSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\MetadataSerializer.cs,ValidateModel,The length of the statement  "                throw new DataServiceException(500' Microsoft.OData.Service.Strings.MetadataSerializer_ModelValidationErrors(builder.ToString())); " is 130.
Long Statement,Microsoft.OData.Service.Serializers,MetadataSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\MetadataSerializer.cs,PrepareModelForSerialization,The length of the statement  "            // even though there may not be user annotations there may be an annotation for Azure key url' this must always be called " is 121.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,Flush,The length of the statement  "            // Astoria-ODataLib-Integration: Astoria does not call flush before calling the IDataServiceHost.ProcessException method " is 120.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,Flush,The length of the statement  "            // If the request is for an entry/feed and the data source throws an error while these results are being enumerated and written' " is 128.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,Flush,The length of the statement  "            // To handle this case' we'll make the EntitySerializer expose a method that calls Flush on the underlying ODL writer instance. " is 127.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,WriteTopLevelElement,The length of the statement  "                element != null || this.RequestDescription.TargetResourceType != null || this.RequestDescription.TargetKind == RequestTargetKind.OpenProperty' " is 142.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,WriteTopLevelElement,The length of the statement  "                "element != null || this.RequestDescription.TargetResourceType != null || this.RequestDescription.TargetKind == RequestTargetKind.OpenProperty"); " is 145.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,WriteTopLevelElement,The length of the statement  "                    throw new InvalidOperationException(Microsoft.OData.Service.Strings.Serializer_UnsupportedTopLevelType(element.GetType())); " is 123.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,WriteTopLevelElement,The length of the statement  "                    resource.Resource.SetSerializationInfo(new ODataResourceSerializationInfo() { ExpectedTypeName = resourceType.FullName }); " is 122.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,WriteTopLevelElement,The length of the statement  "                    resourceSet.ResourceSet.SetSerializationInfo(new ODataResourceSerializationInfo() { ExpectedTypeName = resourceType.FullName }); " is 128.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,WriteTopLevelElement,The length of the statement  "                var odataValue = this.GetPropertyValue(propertyName' resourceType' element' this.RequestDescription.TargetKind == RequestTargetKind.OpenProperty /*openProperty*/); " is 163.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,WriteTopLevelElements,The length of the statement  "                this.collectionWriter = this.writer.CreateODataCollectionWriter(isJsonLightResponse ? null : collectionType.ElementType()); " is 123.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,WriteTopLevelElements,The length of the statement  "                collectionStart.SetSerializationInfo(new ODataCollectionStartSerializationInfo { CollectionTypeName = collectionType.FullName() }); " is 131.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,WriteTopLevelElements,The length of the statement  "                        throw new InvalidOperationException(Microsoft.OData.Service.Strings.Serializer_UnsupportedTopLevelType(element.GetType())); " is 123.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,WriteTopLevelElements,The length of the statement  "                    this.collectionWriter.WriteItem(this.GetPropertyValue(XmlConstants.XmlCollectionItemElementName' resourceType' element' false /*openProperty*/).FromODataValue()); " is 162.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,GetLinksCollection,The length of the statement  "                linksCollection.NextPageLink = this.GetNextLinkUri(lastObject' lastExpandedSkipToken' this.RequestDescription.ResultUri); " is 121.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,GetEntityEditLink,The length of the statement  "            EntityToSerialize entity = EntityToSerialize.Create(element' resourceType' this.CurrentContainer' this.Provider' this.AbsoluteServiceUri); " is 138.
Long Statement,Microsoft.OData.Service.Serializers,NonEntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\NonEntitySerializer.cs,ComputeContainerName,The length of the statement  "                return this.Provider.GetNameFromContainerQualifiedName(this.RequestDescription.ContainerName' out nameIsContainerQualified); " is 124.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetCollectionEnumerable,The length of the statement  "                throw new InvalidOperationException(Microsoft.OData.Service.Strings.Serializer_CollectionPropertyValueMustImplementIEnumerable(propertyName)); " is 142.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetExpandedProperty,The length of the statement  "                property.IsOfKind(ResourcePropertyKind.ResourceReference) || property.IsOfKind(ResourcePropertyKind.ResourceSetReference)' " is 122.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetNextLinkUri,The length of the statement  "                        skipTokenBuilder = new SkipTokenBuilderFromExpandedResult(skipTokenExpandedResult' this.RequestDescription.SkipTokenExpressionCount); " is 133.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetNextLinkUri,The length of the statement  "                        Debug.Assert(this.RequestDescription.SkipTokenProperties.Count > 0' "Must have some valid ordered properties in the skip token properties collection"); " is 151.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetNextLinkUri,The length of the statement  "                        skipTokenBuilder = new SkipTokenBuilderFromProperties(lastObject' this.Provider' this.RequestDescription.SkipTokenProperties); " is 126.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetNextLinkUri,The length of the statement  "                    skipTokenBuilder = new SkipTokenBuilderFromProperties(lastObject' this.Provider' this.CurrentContainer.ResourceType.KeyProperties); " is 131.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetNextLinkUri,The length of the statement  "                builder.Query = this.GetNextPageQueryParametersForExpandedContainer().Append(skipTokenBuilder.GetSkipToken()).ToString(); " is 121.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,NeedNextPageLink,The length of the statement  "            if (this.CurrentContainer != null && !this.RequestDescription.IsServiceActionRequest && !this.RequestDescription.IsRequestForEnumServiceOperation) " is 146.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,NeedNextPageLink,The length of the statement  "                            Debug.Assert(topQueryParameter.Value >= this.segmentInfo.CurrentResultCount' "$top must be the upper limits of the number of results returned."); " is 145.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,IncrementSegmentResultCount,The length of the statement  "                Debug.Assert(this.segmentInfo.Count > 0' "this.segmentResultCounts.Count > 0 -- otherwise we didn't PushSegmentForRoot"); " is 121.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,PushSegmentForProperty,The length of the statement  "                Debug.Assert(expandedProjectionNode == this.segmentInfo.CurrentExpandedNode.FindExpandedNode(property' currentResourceType)' "the node must match"); " is 148.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,RemoveFromComplexTypeCollection,The length of the statement  "            Debug.Assert(this.complexTypeCollection.Contains(complexTypeInstance)' "this.complexTypeCollection.Contains(complexTypeInstance)"); " is 131.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetNavigationPropertyInfo,The length of the statement  "            Debug.Assert(property.ResourceType.ResourceTypeKind == ResourceTypeKind.EntityType' "Nav property must be of entity type"); " is 123.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetPropertyValue,The length of the statement  "            throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.OpenNavigationPropertiesNotSupportedOnOpenTypes(propertyName)); " is 144.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetPropertyResourceOrResourceSet,The length of the statement  "            throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.OpenNavigationPropertiesNotSupportedOnOpenTypes(propertyName)); " is 144.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetComplexResource,The length of the statement  "            complexResource.SetSerializationInfo(new ODataResourceSerializationInfo { ExpectedTypeName = valueResourceType.FullName }); " is 123.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetCollection,The length of the statement  "                propertyResourceType.ItemType.ResourceTypeKind == ResourceTypeKind.ComplexType || propertyResourceType.ItemType.ResourceTypeKind == ResourceTypeKind.Primitive' " is 159.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetComplexResourceSet,The length of the statement  "                propertyResourceType.ItemType.ResourceTypeKind == ResourceTypeKind.ComplexType || propertyResourceType.ItemType.ResourceTypeKind == ResourceTypeKind.Primitive' " is 159.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetPropertiesOfComplexType,The length of the statement  "            Debug.Assert(resourceType.ResourceTypeKind == ResourceTypeKind.ComplexType' "resourceType.ResourceTypeKind == ResourceTypeKind.ComplexType"); " is 141.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetPropertiesOfComplexType,The length of the statement  "                throw new InvalidOperationException(Microsoft.OData.Service.Strings.Serializer_LoopsNotAllowedInComplexTypes(propertyName)); " is 124.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetPropertiesOfComplexType,The length of the statement  "                    || resourceProperty.TypeKind == ResourceTypeKind.Collection && resourceProperty.ResourceType.ElementType().ResourceTypeKind == ResourceTypeKind.ComplexType) " is 156.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetPropertiesOfComplexType,The length of the statement  "                ODataValue odataValue = this.GetPropertyValue(resourceProperty.Name' resourceProperty.ResourceType' propertyValue' false /*openProperty*/); " is 139.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetAllNestedComplexProperties,The length of the statement  "            List<ODataNestedResourceInfoWrapper> properties = new List<ODataNestedResourceInfoWrapper>(resourceType.Properties.Count); " is 122.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetAllNestedComplexProperties,The length of the statement  "                    || property.TypeKind == ResourceTypeKind.Collection && property.ResourceType.ElementType().ResourceTypeKind == ResourceTypeKind.ComplexType) " is 140.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetAllNestedComplexProperties,The length of the statement  "            //            throw new DataServiceException(500' Microsoft.OData.Service.Strings.Syndication_InvalidOpenPropertyName(entityToSerialize.ResourceType.FullName)); " is 160.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetODataNestedResourceForComplexProperty,The length of the statement  "            Debug.Assert(property != null && resourceType.Properties.Contains(property)' "property != null && currentResourceType.Properties.Contains(property)"); " is 150.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetODataNestedResourceForComplexProperty,The length of the statement  "            odataPropertyResourceWrapper = this.GetPropertyResourceOrResourceSet(property.Name' property.ResourceType' propertyValue' false /*openProperty*/); " is 146.
Long Statement,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,GetNextPageQueryParametersForRootContainer,The length of the statement  "                    string escapedQueryStringItem = DataStringEscapeBuilder.EscapeDataString(this.service.OperationContext.RequestMessage.GetQueryStringItem(parameter.Name)); " is 154.
Long Statement,Microsoft.OData.Service.Serializers,ResourcePropertyInfo,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,CreateResourcePropertyInfo,The length of the statement  "                Debug.Assert(resourceProperty != null && resourceProperty.ResourceType.ResourceTypeKind == ResourceTypeKind.EntityType' "resourceProperty != null && resourceProperty.ResourceType.ResourceTypeKind == ResourceTypeKind.EntityType"); " is 229.
Long Statement,Microsoft.OData.Service.Serializers,ResourcePropertyInfo,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,CreateResourcePropertyInfo,The length of the statement  "                Debug.Assert(expand || value == null && expandedNode == null' "for non-expanded properties' the value and expanded node must be null"); " is 135.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,Flush,The length of the statement  "            // Astoria-ODataLib-Integration: Astoria does not call flush before calling the IDataServiceHost.ProcessException method " is 120.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,Flush,The length of the statement  "            // If the request is for an entry/feed and the data source throws an error while these results are being enumerated and written' " is 128.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,Flush,The length of the statement  "            // To handle this case' we'll make the EntitySerializer expose a method that calls Flush on the underlying ODL writer instance. " is 127.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteTopLevelElement,The length of the statement  "            Debug.Assert(this.RequestDescription.TargetKind == RequestTargetKind.Resource' "this.RequestDescription.TargetKind == RequestTargetKind.Resource"); " is 147.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteTopLevelElement,The length of the statement  "                Debug.Assert(this.RequestDescription.Property != null' "this.RequestDescription.Property - otherwise Property source set with no Property specified."); " is 151.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetAssociationLinkUrl,The length of the statement  "            Uri associationLinkUri = RequestUriProcessor.AppendUnescapedSegment(entityToSerialize.SerializedKey.RelativeEditLink' navigationProperty.Name); " is 143.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteEntry,The length of the statement  "            Debug.Assert(expectedType != null && expectedType.ResourceTypeKind == ResourceTypeKind.EntityType' "expectedType != null && expectedType.ResourceTypeKind == ResourceTypeKind.EntityType"); " is 187.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteEntry,The length of the statement  "                entry.SetSerializationInfo(new ODataResourceSerializationInfo { NavigationSourceName = this.CurrentContainer.Name' NavigationSourceEntityTypeName = this.CurrentContainer.ResourceType.FullName' ExpectedTypeName = expectedType.FullName }); " is 237.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteEntry,The length of the statement  "                throw new DataServiceException(500' Microsoft.OData.Service.Strings.BadProvider_InconsistentEntityOrComplexTypeUsage(actualResourceType.FullName)); " is 147.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteEntry,The length of the statement  "            this.PayloadMetadataPropertyManager.SetTypeName(entry' this.CurrentContainer.ResourceType.FullName' actualResourceType.FullName); " is 129.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteEntry,The length of the statement  "                projectionNodes = projectionNodes.Where(projectionNode => projectionNode.TargetResourceType.IsAssignableFrom(actualResourceType)); " is 130.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetMediaResource,The length of the statement  "            Debug.Assert(entityToSerialize.ResourceType != null && entityToSerialize.ResourceType.ResourceTypeKind == ResourceTypeKind.EntityType' "type != null && type.ResourceTypeKind == ResourceTypeKind.EntityType"); " is 207.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetMediaResource,The length of the statement  "                Debug.Assert(entityToSerialize.ResourceType.ResourceTypeKind == ResourceTypeKind.EntityType' "type.ResourceTypeKind == ResourceTypeKind.EntityType"); " is 149.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetMediaResource,The length of the statement  "                this.Service.StreamProvider.GetStreamDescription(entityToSerialize.Entity' null /*null for MLE*/' this.Service.OperationContext' out mediaETag' out readStreamUri' out mediaContentType); " is 185.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetMediaResource,The length of the statement  "                SimpleLazy<Uri> lazyStreamEditLink = new SimpleLazy<Uri>(() => RequestUriProcessor.AppendEscapedSegment(entityToSerialize.SerializedKey.RelativeEditLink' XmlConstants.UriValueSegment)); " is 185.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetNamedStreamPropertyValue,The length of the statement  "            Debug.Assert(namedStreamProperty.IsOfKind(ResourcePropertyKind.Stream)' "namedStreamProperty.IsOfKind(ResourcePropertyKind.Stream)"); " is 133.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetNamedStreamPropertyValue,The length of the statement  "            this.Service.StreamProvider.GetStreamDescription(entityToSerialize.Entity' namedStreamProperty' this.Service.OperationContext' out mediaETag' out readStreamUri' out mediaContentType); " is 183.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteFeedElements,The length of the statement  "            Debug.Assert(expectedType != null && expectedType.ResourceTypeKind == ResourceTypeKind.EntityType' "expectedType != null && expectedType.ResourceTypeKind == ResourceTypeKind.EntityType"); " is 187.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteFeedElements,The length of the statement  "            feed.SetSerializationInfo(new ODataResourceSerializationInfo { NavigationSourceName = this.CurrentContainer.Name' NavigationSourceEntityTypeName = this.CurrentContainer.ResourceType.FullName' ExpectedTypeName = expectedType.FullName }); " is 236.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetEntityProperties,The length of the statement  "                projectionNodesForCurrentResourceType.All(projectionNode => projectionNode.TargetResourceType.IsAssignableFrom(entityToSerialize.ResourceType))' " is 144.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetAllEntityProperties,The length of the statement  "            foreach (ResourceProperty property in this.Provider.GetResourceSerializableProperties(this.CurrentContainer' entityToSerialize.ResourceType)) " is 141.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetAllEntityProperties,The length of the statement  "                    && !(property.TypeKind == ResourceTypeKind.Collection && property.ResourceType.ElementType().ResourceTypeKind == ResourceTypeKind.ComplexType)) " is 143.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetAllEntityProperties,The length of the statement  "                        throw new DataServiceException(500' Microsoft.OData.Service.Strings.Syndication_InvalidOpenPropertyName(entityToSerialize.ResourceType.FullName)); " is 146.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetProjectedEntityProperties,The length of the statement  "                projectionNodesForCurrentResourceType.All(projectionNode => projectionNode.TargetResourceType.IsAssignableFrom(entityToSerialize.ResourceType))' " is 144.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetProjectedEntityProperties,The length of the statement  "                    if (resourceProperty.TypeKind != ResourceTypeKind.EntityType && resourceProperty.TypeKind != ResourceTypeKind.ComplexType " is 121.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetProjectedEntityProperties,The length of the statement  "                        && !(resourceProperty.TypeKind == ResourceTypeKind.Collection && resourceProperty.ResourceType.ElementType().ResourceTypeKind == ResourceTypeKind.ComplexType)) " is 159.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetProjectedEntityProperties,The length of the statement  "                    object propertyValue = WebUtil.GetPropertyValue(this.Provider' entityToSerialize.Entity' entityToSerialize.ResourceType' null' propertyName); " is 141.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteAllNestedComplexProperties,The length of the statement  "                    || (property.TypeKind == ResourceTypeKind.Collection && property.ResourceType.ElementType().ResourceTypeKind == ResourceTypeKind.ComplexType))) " is 143.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteAllNestedComplexProperties,The length of the statement  "                    ODataWriterHelper.WriteNestedResourceInfo(this.dataServicesODataWriter.InnerWriter' this.GetODataNestedResourceForComplexProperty(entityToSerialize' property)); " is 160.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteNavigationProperties,The length of the statement  "                projectionNodesForCurrentResourceType.All(projectionNode => projectionNode.TargetResourceType.IsAssignableFrom(entityToSerialize.ResourceType))' " is 144.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteNavigationProperties,The length of the statement  "                ? this.Provider.GetResourceSerializableProperties(this.CurrentContainer' entityToSerialize.ResourceType).Where(p => p.TypeKind == ResourceTypeKind.EntityType) " is 158.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteNavigationProperties,The length of the statement  "                : projectionNodesForCurrentResourceType.Where(p => p.Property != null && p.Property.TypeKind == ResourceTypeKind.EntityType).Select(p1 => p1.Property); " is 151.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteNavigationProperties,The length of the statement  "                ResourcePropertyInfo navProperty = this.GetNavigationPropertyInfo(expanded' entityToSerialize.Entity' entityToSerialize.ResourceType' property); " is 144.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteNavigationProperties,The length of the statement  "                    bool needPop = this.PushSegmentForProperty(navProperty.Property' entityToSerialize.ResourceType' navProperty.ExpandedNode); " is 123.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteNavigationProperties,The length of the statement  "                            Debug.Assert(collection' "metadata loading must have ensured that navigation set properties must implement IEnumerable"); " is 121.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteNavigationProperties,The length of the statement  "                                Func<Uri> getNavPropertyRelativeUri = () => RequestUriProcessor.AppendUnescapedSegment(entityToSerialize.SerializedKey.RelativeEditLink' navLink.Name); " is 151.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteNavigationProperties,The length of the statement  "                                Func<Uri> getNavPropertyAbsoluteUri = () => RequestUriProcessor.AppendUnescapedSegment(entityToSerialize.SerializedKey.AbsoluteEditLink' navLink.Name); " is 151.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteNavigationProperties,The length of the statement  "                                this.WriteFeedElements(navPropertyExpandedResult' queryResults' navProperty.Property.ResourceType' navLink.Name' getNavPropertyRelativeUri' getNavPropertyAbsoluteUri' false); " is 174.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteNavigationProperties,The length of the statement  "                            this.WriteEntry(navPropertyExpandedResult' expandedPropertyValue' resourceInstanceInFeed' navProperty.Property.ResourceType); " is 125.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetNavigationLink,The length of the statement  "            this.PayloadMetadataPropertyManager.SetUrl(navLink' () => RequestUriProcessor.AppendUnescapedSegment(entityToSerialize.SerializedKey.RelativeEditLink' navLinkName)); " is 165.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetNavigationLink,The length of the statement  "                this.PayloadMetadataPropertyManager.SetAssociationLinkUrl(navLink' () => GetAssociationLinkUrl(entityToSerialize' navigationProperty)); " is 135.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetODataPropertyForEntityProperty,The length of the statement  "            Debug.Assert(property != null && entityToSerialize.ResourceType.Properties.Contains(property)' "property != null && currentResourceType.Properties.Contains(property)"); " is 168.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetODataPropertyForEntityProperty,The length of the statement  "                object propertyValue = WebUtil.GetPropertyValue(this.Provider' entityToSerialize.Entity' entityToSerialize.ResourceType' property' null); " is 137.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetODataPropertyForEntityProperty,The length of the statement  "                odataPropertyValue = this.GetPropertyValue(property.Name' property.ResourceType' propertyValue' false /*openProperty*/); " is 120.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetODataPropertyForEntityProperty,The length of the statement  "            ODataPropertyKind kind = property.IsOfKind(ResourcePropertyKind.Key) ? ODataPropertyKind.Key : property.IsOfKind(ResourcePropertyKind.ETag) ? ODataPropertyKind.ETag : ODataPropertyKind.Unspecified; " is 197.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetODataNestedResourceForComplexProperty,The length of the statement  "            Debug.Assert(property != null && entityToSerialize.ResourceType.Properties.Contains(property)' "property != null && currentResourceType.Properties.Contains(property)"); " is 168.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetODataNestedResourceForComplexProperty,The length of the statement  "            object propertyValue = WebUtil.GetPropertyValue(this.Provider' entityToSerialize.Entity' entityToSerialize.ResourceType' property' null); " is 137.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetODataNestedResourceForComplexProperty,The length of the statement  "            odataPropertyResourceWrapper = this.GetPropertyResourceOrResourceSet(property.Name' property.ResourceType' propertyValue' false /*openProperty*/); " is 146.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,TryGetAdvertisedActions,The length of the statement  "                serviceOperationWrapperList = this.Service.ActionProvider.GetServiceActionsByBindingParameterType(entityToSerialize.ResourceType); " is 130.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,TryGetAdvertisedActions,The length of the statement  "                serviceOperationWrapperList = expandedProjectionNode.SelectedOperations.GetSelectedOperations(entityToSerialize.ResourceType); " is 126.
Long Statement,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,TryGetAdvertisedActions,The length of the statement  "            actions = this.OperationSerializer.SerializeOperations(entityToSerialize' resourceInstanceInFeed' serviceOperationWrapperList); " is 127.
Long Statement,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,GetProjectedWrapperType,The length of the statement  "            return projectedPropertyCount < precreatedProjectedWrapperTypes.Length ? precreatedProjectedWrapperTypes[projectedPropertyCount] : typeof(ProjectedWrapperMany); " is 160.
Long Statement,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,Bind,The length of the statement  "            Debug.Assert(bindingExpressions.Length >= 2' "At least the ResourceTypeName and PropertyNameList properties must be bound."); " is 125.
Long Statement,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,BindResourceTypeAndPropertyNameList,The length of the statement  "            Debug.Assert(typeof(ProjectedWrapper).IsAssignableFrom(projectedWrapperType)' "Can't bind to type which is not a projected wrapper."); " is 134.
Long Statement,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,BindToProjectedWrapperMany,The length of the statement  "            for (; propertyIndex < precreatedProjectedWrapperTypes.Length - 1 && propertyIndex + expressionStartIndex < bindingExpressions.Length; propertyIndex++) " is 151.
Long Statement,Microsoft.OData.Service.Caching,MetadataCache<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Caching\MetadataCache.cs,AddCacheItem,The length of the statement  "                "Object.ReferenceEquals(result' TryLookup(serviceType' dataContextInstance)) -- instance from cache is being returned."); " is 121.
Long Statement,Microsoft.OData.Service.Caching,ResourceTypeCacheItem,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Caching\ProviderMetadataCacheItem.cs,GetResourcePropertyCacheItem,The length of the statement  "                throw new DataServiceException((int)HttpStatusCode.InternalServerError' Strings.ObjectContext_PublicPropertyNotDefinedOnType(this.resourceType.FullName' property.Name)); " is 169.
Complex Conditional,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The conditional expression  "(value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E')"  is complex.
Complex Conditional,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The conditional expression  "(value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E')"  is complex.
Complex Conditional,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,AddSecondsPaddingIfMissing,The conditional expression  "indexOfT > 0 &&                  (text.Length == indexOfColonBeforeSeconds || text.Length > indexOfColonBeforeSeconds && text[indexOfColonBeforeSeconds] != ':')"  is complex.
Complex Conditional,Microsoft.OData.Service,CommonUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Common.cs,GetCollectionItemTypeName,The conditional expression  "typeName != null && typeName.StartsWith(XmlConstants.CollectionTypeQualifier + "("' StringComparison.Ordinal) && typeName[typeName.Length - 1] == ')' && typeName.Length != (XmlConstants.CollectionTypeQualifier + "()").Length"  is complex.
Complex Conditional,Microsoft.OData.Service,CommonUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Common.cs,TryReadVersion,The conditional expression  "CommonUtil.IsCatchableExceptionType(e) &&                      (e is FormatException || e is OverflowException || e is ArgumentException)"  is complex.
Complex Conditional,Microsoft.OData.Service,ODataPathToSegmentInfoConverter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ODataPathToSegmentInfoConverter.cs,ThrowIfMustBeLeafSegment,The conditional expression  "previous.TargetKind == RequestTargetKind.Batch || previous.TargetKind == RequestTargetKind.Metadata || previous.TargetKind == RequestTargetKind.PrimitiveValue || previous.TargetKind == RequestTargetKind.VoidOperation || previous.TargetKind == RequestTargetKind.OpenPropertyValue || previous.TargetKind == RequestTargetKind.MediaResource || previous.TargetKind == RequestTargetKind.Collection"  is complex.
Complex Conditional,Microsoft.OData.Service,ClientPreference,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ClientPreference.cs,InterpretClientPreference,The conditional expression  "(verb.IsInsert()) || ((verb.IsUpdate()) && (requestDescription.TargetKind == RequestTargetKind.Resource || requestDescription.IsRequestForNonEntityProperty))"  is complex.
Complex Conditional,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchOperation,The conditional expression  "string.CompareOrdinal(XmlConstants.HttpMethodPost' method) == 0 ||                          string.CompareOrdinal(XmlConstants.HttpMethodPut' method) == 0 ||                          string.CompareOrdinal(XmlConstants.HttpMethodDelete' method) == 0 ||                          string.CompareOrdinal(XmlConstants.HttpMethodPatch' method) == 0"  is complex.
Complex Conditional,Microsoft.OData.Service,HttpContextServiceHost,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\HttpContextServiceHost.cs,VerifyQueryParameters,The conditional expression  "name != XmlConstants.HttpQueryStringExpand &&                          name != XmlConstants.HttpQueryStringFilter &&                          name != XmlConstants.HttpQueryStringOrderBy &&                          name != XmlConstants.HttpQueryStringSkip &&                          name != XmlConstants.HttpQueryStringSkipToken &&                          name != XmlConstants.HttpQueryStringQueryCount &&                          name != XmlConstants.HttpQueryStringTop &&                          name != XmlConstants.HttpQueryStringSelect &&                          name != XmlConstants.HttpQueryStringFormat &&                          name != XmlConstants.HttpQueryStringCallback &&                          name != XmlConstants.HttpQueryStringId"  is complex.
Complex Conditional,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ProcessRequestUri,The conditional expression  "resultDescription.TargetKind == RequestTargetKind.MediaResource &&                      resultDescription.IsNamedStream &&                      service.OperationContext.RequestMessage.HttpVerb.IsChange() &&                      service.OperationContext.RequestMessage.HttpVerb != HttpVerbs.PUT"  is complex.
Complex Conditional,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForSegments,The conditional expression  "isCrossReferencingUri                          && (segment.TargetKind != RequestTargetKind.PrimitiveValue                          && segment.TargetKind != RequestTargetKind.OpenPropertyValue                          && segment.TargetKind != RequestTargetKind.MediaResource)"  is complex.
Complex Conditional,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,ResponseBodyWriter,The conditional expression  "this.PayloadKind == ODataPayloadKind.Resource ||                  this.PayloadKind == ODataPayloadKind.ResourceSet ||                  this.PayloadKind == ODataPayloadKind.Property ||                  this.PayloadKind == ODataPayloadKind.Collection ||                  this.PayloadKind == ODataPayloadKind.EntityReferenceLink ||                  this.PayloadKind == ODataPayloadKind.EntityReferenceLinks ||                  this.PayloadKind == ODataPayloadKind.Error ||                  this.PayloadKind == ODataPayloadKind.ServiceDocument ||                  this.PayloadKind == ODataPayloadKind.Parameter"  is complex.
Complex Conditional,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,IsValidMimeType,The conditional expression  "c < '\x20' || c > '\x7F' || c == ' ' || Tspecials.IndexOf(c) >= 0"  is complex.
Complex Conditional,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,CheckEmptyQueryArguments,The conditional expression  "(!checkForOnlyV2QueryParameters &&                   (!String.IsNullOrEmpty(host.GetQueryStringItem(XmlConstants.HttpQueryStringExpand)) ||                    !String.IsNullOrEmpty(host.GetQueryStringItem(XmlConstants.HttpQueryStringFilter)) ||                    !String.IsNullOrEmpty(host.GetQueryStringItem(XmlConstants.HttpQueryStringOrderBy)) ||                    !String.IsNullOrEmpty(host.GetQueryStringItem(XmlConstants.HttpQueryStringSkip)) ||                    !String.IsNullOrEmpty(host.GetQueryStringItem(XmlConstants.HttpQueryStringTop)))) ||                  !String.IsNullOrEmpty(host.GetQueryStringItem(XmlConstants.HttpQueryStringQueryCount)) ||                  !String.IsNullOrEmpty(host.GetQueryStringItem(XmlConstants.HttpQueryStringSelect)) ||                  !String.IsNullOrEmpty(host.GetQueryStringItem(XmlConstants.HttpQueryStringSkipToken))"  is complex.
Complex Conditional,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,CheckEmptySetQueryArguments,The conditional expression  "!String.IsNullOrEmpty(host.GetQueryStringItem(XmlConstants.HttpQueryStringOrderBy)) ||                  !String.IsNullOrEmpty(host.GetQueryStringItem(XmlConstants.HttpQueryStringSkip)) ||                  !String.IsNullOrEmpty(host.GetQueryStringItem(XmlConstants.HttpQueryStringTop)) ||                  !String.IsNullOrEmpty(host.GetQueryStringItem(XmlConstants.HttpQueryStringQueryCount))"  is complex.
Complex Conditional,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,PromoteExpression,The conditional expression  "(type == typeof(DateTime) || type == typeof(DateTime?)) &&                                   (expr.Type == typeof(DateTimeOffset) || expr.Type == typeof(DateTimeOffset?))"  is complex.
Complex Conditional,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,PromoteExpression,The conditional expression  "type.IsValueType || exact && (type != typeof(object) || expr.Type.IsValueType)"  is complex.
Complex Conditional,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,MakeBestGuessOnNoSuffixStr,The conditional expression  "(doubleCanBeDecimalR && doubleToDecimalR != tmpDecimal) || (!doubleCanBeDecimalR && doubleCanBeDecimalN && doubleToDecimalN != tmpDecimal)"  is complex.
Complex Conditional,Microsoft.OData.Service.Providers,EntityFrameworkDataServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\EntityFrameworkDataServiceProvider.cs,GetService,The conditional expression  "typeof(IDataServiceMetadataProvider) == serviceType ||                  typeof(IDataServiceQueryProvider) == serviceType ||                  typeof(IDataServiceUpdateProvider2) == serviceType ||                  typeof(IDataServiceUpdateProvider) == serviceType ||                  typeof(IUpdatable) == serviceType ||                  typeof(IDataServiceProviderBehavior) == serviceType ||                  typeof(IDataServiceEntityFrameworkProvider) == serviceType"  is complex.
Complex Conditional,Microsoft.OData.Service.Providers,ServiceOperation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceOperation.cs,GetReturnTypeFromResultType,The conditional expression  "(resultKind == ServiceOperationResultKind.Void && resultType != null) ||                  (resultKind != ServiceOperationResultKind.Void && resultType == null)"  is complex.
Complex Conditional,Microsoft.OData.Service.Providers,ServiceOperation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ServiceOperation.cs,GetReturnTypeFromResultType,The conditional expression  "(resultType.ResourceTypeKind == ResourceTypeKind.Primitive || resultType.ResourceTypeKind == ResourceTypeKind.ComplexType) && (resultKind == ServiceOperationResultKind.Enumeration || resultKind == ServiceOperationResultKind.QueryWithMultipleResults)"  is complex.
Complex Conditional,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetResourceAssociationSet,The conditional expression  "thisEnd.ResourceSet != resourceSet.ResourceSet ||                          thisEnd.ResourceType != resourceType ||                          thisEnd.ResourceProperty != resourceProperty ||                          relatedEnd.ResourceSet != relatedSet.ResourceSet ||                          relatedEnd.ResourceType != relatedType ||                          relatedEnd.ResourceProperty != relatedProperty"  is complex.
Complex Conditional,Microsoft.OData.Service.Providers,ResourceAssociationSet,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceAssociationSet.cs,GetResourceAssociationSetEnd,The conditional expression  "(end.ResourceProperty == null && resourceProperty == null) ||                          (end.ResourceProperty != null && resourceProperty != null && end.ResourceProperty.Name == resourceProperty.Name)"  is complex.
Complex Conditional,Microsoft.OData.Service.Providers,OperationWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\OperationWrapper.cs,ApplyConfiguration,The conditional expression  "(this.Kind == OperationKind.ServiceOperation && (this.serviceOperationRights & ~ServiceOperationRights.OverrideEntitySetRights) != ServiceOperationRights.None) ||                  (this.Kind == OperationKind.Action && this.serviceActionRights != Service.ServiceActionRights.None)"  is complex.
Complex Conditional,Microsoft.OData.Service.Providers,ReflectionServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionServiceProvider.cs,IsComplexType,The conditional expression  "!type.IsVisible || type.IsArray || type.IsPointer || type.IsCOMObject || type.IsInterface ||                  type == typeof(IntPtr) || type == typeof(UIntPtr) || type == typeof(char) ||                  type == typeof(TimeSpan) || type == typeof(DateTimeOffset) || type == typeof(Uri) ||                  type.IsEnum"  is complex.
Complex Conditional,Microsoft.OData.Service.Providers,ResourceProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceProperty.cs,CheckResourcePropertyKind,The conditional expression  "kind != ResourcePropertyKind.ResourceReference &&                  kind != ResourcePropertyKind.ResourceSetReference &&                  kind != ResourcePropertyKind.ComplexType &&                  kind != ResourcePropertyKind.Primitive &&                  kind != ResourcePropertyKind.Collection &&                  kind != ResourcePropertyKind.Stream &&                  kind != (ResourcePropertyKind.Primitive | ResourcePropertyKind.Key) &&                  kind != (ResourcePropertyKind.Primitive | ResourcePropertyKind.ETag)"  is complex.
Complex Conditional,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,ValidateConstructorArguments,The conditional expression  "resultSet == null && resultSetPathExpression == null || resultSet != null && !resultSet.ResourceType.IsAssignableFrom(resultType)"  is complex.
Complex Conditional,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,MakeOperationTargetRelativeFromMetadataUriIfJsonLight,The conditional expression  "this.format == ODataFormat.Json && targetLink != null && targetLink.IsAbsoluteUri && this.metadataUri.IsBaseOf(targetLink)"  is complex.
Complex Conditional,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,CreateDeserializer,The conditional expression  "description.TargetKind == RequestTargetKind.Primitive ||                  description.TargetKind == RequestTargetKind.ComplexObject ||                  description.TargetKind == RequestTargetKind.Collection ||                  description.TargetKind == RequestTargetKind.OpenProperty"  is complex.
Complex Conditional,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,IsQueryRequired,The conditional expression  "requestDescription.TargetKind == RequestTargetKind.PrimitiveValue ||                  requestDescription.TargetKind == RequestTargetKind.Primitive ||                  requestDescription.TargetKind == RequestTargetKind.OpenPropertyValue ||                  requestDescription.TargetKind == RequestTargetKind.MediaResource ||                  requestDescription.TargetKind == RequestTargetKind.ComplexObject ||                  requestDescription.TargetKind == RequestTargetKind.Collection"  is complex.
Complex Conditional,Microsoft.OData.Service.Serializers,Serializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Serializer.cs,PushSegment,The conditional expression  "this.service.Configuration.MaxResultsPerCollection != Int32.MaxValue ||                  (container != null && container.PageSize != 0) || // Complex types have null container ' paging should force a push                  (this.requestDescription.RootProjectionNode != null) ||                  this.IsCustomPaged"  is complex.
Complex Conditional,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetAllEntityProperties,The conditional expression  "property.TypeKind != ResourceTypeKind.EntityType                      && property.TypeKind != ResourceTypeKind.ComplexType                      && !(property.TypeKind == ResourceTypeKind.Collection && property.ResourceType.ElementType().ResourceTypeKind == ResourceTypeKind.ComplexType)"  is complex.
Complex Conditional,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetProjectedEntityProperties,The conditional expression  "resourceProperty.TypeKind != ResourceTypeKind.EntityType && resourceProperty.TypeKind != ResourceTypeKind.ComplexType                          && !(resourceProperty.TypeKind == ResourceTypeKind.Collection && resourceProperty.ResourceType.ElementType().ResourceTypeKind == ResourceTypeKind.ComplexType)"  is complex.
Complex Conditional,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteAllNestedComplexProperties,The conditional expression  "property != null && (property.TypeKind == ResourceTypeKind.ComplexType                      || (property.TypeKind == ResourceTypeKind.Collection && property.ResourceType.ElementType().ResourceTypeKind == ResourceTypeKind.ComplexType))"  is complex.
Virtual Method Call from Constructor,Microsoft.OData.Service.Providers,EntityFrameworkDataServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\EntityFrameworkDataServiceProvider.cs,EntityFrameworkDataServiceProvider,The constructor "EntityFrameworkDataServiceProvider" calls a virtual method "FinalizeMetadataModel".
Virtual Method Call from Constructor,Microsoft.OData.Service.Providers,ReflectionDataServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ReflectionDataServiceProvider.cs,ReflectionDataServiceProvider,The constructor "ReflectionDataServiceProvider" calls a virtual method "FinalizeMetadataModel".
Empty Catch Block,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,GetErrorResponseContentType,The method has an empty catch block.
Empty Catch Block,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,GetEncodingForError,The method has an empty catch block.
Empty Catch Block,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,EncodingFromAcceptCharset,The method has an empty catch block.
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBinary,The following statement contains a magic number: if (value.Length % 2 != 0)              {                  result = null;                  return false;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBinary,The following statement contains a magic number: for (int i = 0; i < value.Length; ++i)              {                  byte h;                  if (!TryParseCharAsBinary(value[i]' out h))                  {                      result = null;                      return false;                  }                    byte l;                  if (!TryParseCharAsBinary(value[++i]' out l))                  {                      result = null;                      return false;                  }                    result[i >> 1] = (byte)((h << 4) | l);              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following statement contains a magic number: switch (value.Length)              {                  case 4:                      if ((value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E'))                      {                          result = true;                          return true;                      }                        break;                    case 5:                      if ((value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E'))                      {                          result = false;                          return true;                      }                        break;                    case 1:                      switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }                        break;                    default:                      break;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following statement contains a magic number: switch (value.Length)              {                  case 4:                      if ((value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E'))                      {                          result = true;                          return true;                      }                        break;                    case 5:                      if ((value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E'))                      {                          result = false;                          return true;                      }                        break;                    case 1:                      switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }                        break;                    default:                      break;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following statement contains a magic number: switch (value.Length)              {                  case 4:                      if ((value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E'))                      {                          result = true;                          return true;                      }                        break;                    case 5:                      if ((value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E'))                      {                          result = false;                          return true;                      }                        break;                    case 1:                      switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }                        break;                    default:                      break;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following statement contains a magic number: switch (value.Length)              {                  case 4:                      if ((value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E'))                      {                          result = true;                          return true;                      }                        break;                    case 5:                      if ((value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E'))                      {                          result = false;                          return true;                      }                        break;                    case 1:                      switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }                        break;                    default:                      break;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following statement contains a magic number: switch (value.Length)              {                  case 4:                      if ((value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E'))                      {                          result = true;                          return true;                      }                        break;                    case 5:                      if ((value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E'))                      {                          result = false;                          return true;                      }                        break;                    case 1:                      switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }                        break;                    default:                      break;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following statement contains a magic number: switch (value.Length)              {                  case 4:                      if ((value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E'))                      {                          result = true;                          return true;                      }                        break;                    case 5:                      if ((value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E'))                      {                          result = false;                          return true;                      }                        break;                    case 1:                      switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }                        break;                    default:                      break;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following statement contains a magic number: switch (value.Length)              {                  case 4:                      if ((value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E'))                      {                          result = true;                          return true;                      }                        break;                    case 5:                      if ((value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E'))                      {                          result = false;                          return true;                      }                        break;                    case 1:                      switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }                        break;                    default:                      break;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following statement contains a magic number: switch (value.Length)              {                  case 4:                      if ((value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E'))                      {                          result = true;                          return true;                      }                        break;                    case 5:                      if ((value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E'))                      {                          result = false;                          return true;                      }                        break;                    case 1:                      switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }                        break;                    default:                      break;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following statement contains a magic number: switch (value.Length)              {                  case 4:                      if ((value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E'))                      {                          result = true;                          return true;                      }                        break;                    case 5:                      if ((value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E'))                      {                          result = false;                          return true;                      }                        break;                    case 1:                      switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }                        break;                    default:                      break;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following statement contains a magic number: switch (value.Length)              {                  case 4:                      if ((value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E'))                      {                          result = true;                          return true;                      }                        break;                    case 5:                      if ((value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E'))                      {                          result = false;                          return true;                      }                        break;                    case 1:                      switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }                        break;                    default:                      break;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following statement contains a magic number: switch (value.Length)              {                  case 4:                      if ((value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E'))                      {                          result = true;                          return true;                      }                        break;                    case 5:                      if ((value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E'))                      {                          result = false;                          return true;                      }                        break;                    case 1:                      switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }                        break;                    default:                      break;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following statement contains a magic number: switch (value.Length)              {                  case 4:                      if ((value[0] == 't' || value[0] == 'T') &&                          (value[1] == 'r' || value[1] == 'R') &&                          (value[2] == 'u' || value[2] == 'U') &&                          (value[3] == 'e' || value[3] == 'E'))                      {                          result = true;                          return true;                      }                        break;                    case 5:                      if ((value[0] == 'f' || value[0] == 'F') &&                          (value[1] == 'a' || value[1] == 'A') &&                          (value[2] == 'l' || value[2] == 'L') &&                          (value[3] == 's' || value[3] == 'S') &&                          (value[4] == 'e' || value[4] == 'E'))                      {                          result = false;                          return true;                      }                        break;                    case 1:                      switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }                        break;                    default:                      break;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseCharAsBinary,The following statement contains a magic number: if (v >= 0 && v <= 9)              {                  b = (byte)v;                  return true;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseCharAsBinary,The following statement contains a magic number: if (v < 0 || v > 5)              {                  v = (uint)c - (uint)'a';              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseCharAsBinary,The following statement contains a magic number: if (v >= 0 && v <= 5)              {                  b = (byte)(v + 10);                  return true;              }
Magic Number,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseCharAsBinary,The following statement contains a magic number: if (v >= 0 && v <= 5)              {                  b = (byte)(v + 10);                  return true;              }
Magic Number,Microsoft.OData.Service,EdmValueWriter,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueWriter.cs,BinaryAsXml,The following statement contains a magic number: var chars = new char[binary.Length * 2];
Magic Number,Microsoft.OData.Service,EdmValueWriter,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueWriter.cs,BinaryAsXml,The following statement contains a magic number: for (int i = 0; i < binary.Length; ++i)              {                  chars[i << 1] = Hex[binary[i] >> 4];                  chars[i << 1 | 1] = Hex[binary[i] & 0x0F];              }
Magic Number,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,ValidateTimeZoneInformationInDateTimeOffsetString,The following statement contains a magic number: const int timeZoneSignOffset = 6;
Magic Number,Microsoft.OData.Service,PlatformHelper,C:\repos\OData_odata.net\src\PlatformHelper.cs,AddSecondsPaddingIfMissing,The following statement contains a magic number: const int ColonBeforeSecondsOffset = 6;
Magic Number,Microsoft.OData.Service,UriUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\UriUtil.cs,CreateBaseComparableUri,The following statement contains a magic number: builder.Port = 80;
Magic Number,Microsoft.OData.Service,CommonUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Common.cs,ConvertToODataVersion,The following statement contains a magic number: Debug.Assert(version.Major == 4 && (version.Minor == 0 || version.Minor == 1)' "Major version should be 4 and minor version should be 0 or 1");
Magic Number,Microsoft.OData.Service,CommonUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Common.cs,ConvertToODataVersion,The following statement contains a magic number: if (version.Major == 4 && version.Minor == 1)              {                  return ODataVersion.V401;              }              else              {                  return ODataVersion.V4;              }
Magic Number,Microsoft.OData.Service,CommonUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\Common.cs,GetModelTypeName,The following statement contains a magic number: if (type.IsGenericType)  #endif              {                  Type[] genericArguments = type.GetGenericArguments();                  StringBuilder builder = new StringBuilder(type.Name.Length * 2 * (1 + genericArguments.Length));                  if (type.IsNested)                  {                      Debug.Assert(type.DeclaringType != null' "type.DeclaringType != null");                      builder.Append(GetModelTypeName(type.DeclaringType));                      builder.Append('_');                  }                    builder.Append(type.Name);                  builder.Append('[');                  for (int i = 0; i < genericArguments.Length; i++)                  {                      if (i > 0)                      {                          builder.Append(' ');                      }                        if (genericArguments[i].IsGenericParameter)                      {                          builder.Append(genericArguments[i].Name);                      }                      else                      {                          string genericNamespace = GetModelTypeNamespace(genericArguments[i]);                          if (!String.IsNullOrEmpty(genericNamespace))                          {                              builder.Append(genericNamespace);                              builder.Append('.');                          }                            builder.Append(GetModelTypeName(genericArguments[i]));                      }                  }                    builder.Append(']');                  return builder.ToString();              }              else if (type.IsNested)              {                  Debug.Assert(type.DeclaringType != null' "type.DeclaringType != null");                  return GetModelTypeName(type.DeclaringType) + "_" + type.Name;              }              else              {                  return type.Name;              }
Magic Number,Microsoft.OData.Service,DataServiceStaticConfiguration,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceStaticConfiguration.cs,RegisterCallbacks,The following statement contains a magic number: while (dataServiceType != null)              {                  MethodInfo[] methods = dataServiceType.GetMethods(Flags);                  for (int i = 0; i < methods.Length; i++)                  {                      MethodInfo method = methods[i];                      QueryInterceptorAttribute[] queryAttributes = (QueryInterceptorAttribute[])                          method.GetCustomAttributes(typeof(QueryInterceptorAttribute)' true /* inherit */);                      foreach (QueryInterceptorAttribute attribute in queryAttributes)                      {                          ResourceSet container;                          if (!this.provider.TryResolveResourceSet(attribute.EntitySetName' out container) || container == null)                          {                              string message = Strings.DataService_AttributeEntitySetNotFound(                                  attribute.EntitySetName'                                  method.Name'                                  dataServiceType.FullName);                              throw new InvalidOperationException(message);                          }                            CheckQueryInterceptorSignature(dataServiceType' method' container);                          if (!method.IsAbstract)                          {                              if (!this.readAuthorizationMethods.ContainsKey(container.Name))                              {                                  this.readAuthorizationMethods[container.Name] = new List<MethodInfo>();                              }                                this.readAuthorizationMethods[container.Name].Add(method);                          }                      }                        ChangeInterceptorAttribute[] changeAttributes = (ChangeInterceptorAttribute[])                          method.GetCustomAttributes(typeof(ChangeInterceptorAttribute)' true /* inherit */);                      foreach (ChangeInterceptorAttribute attribute in changeAttributes)                      {                          ResourceSet container;                          if (!this.provider.TryResolveResourceSet(attribute.EntitySetName' out container) || container == null)                          {                              string message = Strings.DataService_AttributeEntitySetNotFound(                                  attribute.EntitySetName'                                  method.Name'                                  dataServiceType.FullName);                              throw new InvalidOperationException(message);                          }                            // Check the signature.                          ParameterInfo[] parameters = method.GetParameters();                          if (parameters.Length != 2)                          {                              string message = Strings.DataService_ChangeInterceptorIncorrectParameterCount(                                  method.Name'                                  dataServiceType.FullName'                                  parameters.Length);                              throw new InvalidOperationException(message);                          }                            CheckParameterIsNotOut(method' parameters[0]);                          CheckParameterIsNotOut(method' parameters[1]);                          Type elementParameterType = parameters[0].ParameterType;                          if (!elementParameterType.IsAssignableFrom(container.ResourceType.InstanceType))                          {                              string message = Strings.DataService_AuthorizationParameterNotAssignable(                                  parameters[0].Name'                                  method.Name'                                  dataServiceType.FullName'                                  elementParameterType.FullName'                                  container.ResourceType.InstanceType);                              throw new InvalidOperationException(message);                          }                            Type actionParameterType = parameters[1].ParameterType;                          if (actionParameterType != typeof(UpdateOperations))                          {                              string message = Strings.DataService_AuthorizationParameterNotResourceAction(                                  parameters[1].Name'                                  method.Name'                                  dataServiceType.FullName'                                  typeof(UpdateOperations).FullName);                              throw new InvalidOperationException(message);                          }                            Type returnType = method.ReturnType;                          if (returnType != typeof(void))                          {                              string message = Strings.DataService_AuthorizationMethodNotVoid(                                  method.Name'                                  dataServiceType.FullName'                                  returnType.FullName);                              throw new InvalidOperationException(message);                          }                            if (!method.IsAbstract)                          {                              if (!this.writeAuthorizationMethods.ContainsKey(container.Name))                              {                                  this.writeAuthorizationMethods[container.Name] = new List<MethodInfo>();                              }                                this.writeAuthorizationMethods[container.Name].Add(method);                          }                      }                  }                    dataServiceType = dataServiceType.BaseType;              }
Magic Number,Microsoft.OData.Service,CallbackQueryOptionHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\CallbackQueryOptionHandler.cs,HandleCallbackQueryOption,The following statement contains a magic number: if (functionName != null)              {                  // The verb must be GET (not IsQuery()' GET specifically)                  if (message.HttpVerb != HttpVerbs.GET)                  {                      throw new DataServiceException(400' Strings.CallbackQueryOptionHandler_GetRequestsOnly);                  }                    // If conneg didn't get a format' that means that there was some error that we will fail at later' or                  // it is going end up being a 204' 304' or something else with no body. For all of these cases we are OK                  // with 'pretending' that $callback was not there' since the other errors are probably more important than                  // ours' and in the non-error cases we really should not be throwing (think 204).                  if (format == null)                  {                      return null;                  }                    // JSON and text/plain are the only things allowed with $callback                  if (format.Format != ODataFormat.Json && format.Format != ODataFormat.RawValue)                  {                      throw new DataServiceException(400' Strings.CallbackQueryOptionHandler_UnsupportedContentType(format.Format.ToString()));                  }              }
Magic Number,Microsoft.OData.Service,CallbackQueryOptionHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\CallbackQueryOptionHandler.cs,HandleCallbackQueryOption,The following statement contains a magic number: if (functionName != null)              {                  // The verb must be GET (not IsQuery()' GET specifically)                  if (message.HttpVerb != HttpVerbs.GET)                  {                      throw new DataServiceException(400' Strings.CallbackQueryOptionHandler_GetRequestsOnly);                  }                    // If conneg didn't get a format' that means that there was some error that we will fail at later' or                  // it is going end up being a 204' 304' or something else with no body. For all of these cases we are OK                  // with 'pretending' that $callback was not there' since the other errors are probably more important than                  // ours' and in the non-error cases we really should not be throwing (think 204).                  if (format == null)                  {                      return null;                  }                    // JSON and text/plain are the only things allowed with $callback                  if (format.Format != ODataFormat.Json && format.Format != ODataFormat.RawValue)                  {                      throw new DataServiceException(400' Strings.CallbackQueryOptionHandler_UnsupportedContentType(format.Format.ToString()));                  }              }
Magic Number,Microsoft.OData.Service,ResponseContentTypeNegotiator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseContentTypeNegotiator.cs,DetermineResponseFormat,The following statement contains a magic number: try              {                  using (ODataMessageWriter writer = new ODataMessageWriter(responseMessage' settings))                  {                      ODataFormat format = ODataUtils.SetHeadersForPayload(writer' payloadKind);                      return new ODataFormatWithParameters(format' responseMessage.ContentType);                  }              }              catch (ODataContentTypeException exception)              {                  if (this.throwIfNoMatch)                  {                      throw new DataServiceException(415' null' Microsoft.OData.Service.Strings.DataServiceException_UnsupportedMediaType' null' exception);                  }                    return null;              }
Magic Number,Microsoft.OData.Service,ExpandAndSelectParseResult,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ExpandAndSelectParseResult.cs,ExpandAndSelectParseResult,The following statement contains a magic number: try              {                  Debug.Assert(model.Mode == MetadataProviderEdmModelMode.Serialization' "Model expected to be in serialization mode by default");                  model.Mode = MetadataProviderEdmModelMode.SelectAndExpandParsing;                  this.Clause = uriParser.ParseSelectAndExpand();              }              catch (ODataException ex)              {                  throw new DataServiceException(400' null' ex.Message' null' ex);              }              finally              {                  model.Mode = MetadataProviderEdmModelMode.Serialization;              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessIncomingRequest,The following statement contains a magic number: int statusCode = 200;
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessIncomingRequest,The following statement contains a magic number: if (description.TargetSource != RequestTargetSource.ServiceOperation)              {                  if (requestMessage.HttpVerb.IsInsert())                  {                      newDescription = HandlePostOperation(description' dataService);                        if (description.ShouldWriteResponseBodyOrETag && !newDescription.Preference.ShouldNotIncludeResponseBody)                      {                          statusCode = 201; // 201 - Created.                      }                      else                      {                          statusCode = 204; // 204 - No Content                      }                  }                  else if (requestMessage.HttpVerb.IsUpdate())                  {                      if (lastSegmentContainer != null && !description.LinkUri)                      {                          if (requestMessage.HttpVerb == HttpVerbs.PUT)                          {                              DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteReplace);                          }                          else                          {                              DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteMerge);                          }                      }                        newDescription = HandlePutOperation(description' dataService);                        // For update requests' we need to write responses for requests targetting entity                      if (newDescription.Preference.ShouldIncludeResponseBody)                      {                          statusCode = 200; // 200 - OK                      }                      else                      {                          statusCode = 204; // 204 - No Content                      }                  }                  else if (requestMessage.HttpVerb.IsDelete())                  {                      if (lastSegmentContainer != null && !description.LinkUri)                      {                          DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteDelete);                      }                        HandleDeleteOperation(description' dataService);                        statusCode = 204; // 204 - No Content                  }              }              else              {                  if (description.IsServiceActionRequest)                  {                      HandleServiceAction(description' dataService);                  }                    if (description.TargetKind == RequestTargetKind.VoidOperation)                  {                      statusCode = 204; // No Content                  }              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessIncomingRequest,The following statement contains a magic number: if (description.TargetSource != RequestTargetSource.ServiceOperation)              {                  if (requestMessage.HttpVerb.IsInsert())                  {                      newDescription = HandlePostOperation(description' dataService);                        if (description.ShouldWriteResponseBodyOrETag && !newDescription.Preference.ShouldNotIncludeResponseBody)                      {                          statusCode = 201; // 201 - Created.                      }                      else                      {                          statusCode = 204; // 204 - No Content                      }                  }                  else if (requestMessage.HttpVerb.IsUpdate())                  {                      if (lastSegmentContainer != null && !description.LinkUri)                      {                          if (requestMessage.HttpVerb == HttpVerbs.PUT)                          {                              DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteReplace);                          }                          else                          {                              DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteMerge);                          }                      }                        newDescription = HandlePutOperation(description' dataService);                        // For update requests' we need to write responses for requests targetting entity                      if (newDescription.Preference.ShouldIncludeResponseBody)                      {                          statusCode = 200; // 200 - OK                      }                      else                      {                          statusCode = 204; // 204 - No Content                      }                  }                  else if (requestMessage.HttpVerb.IsDelete())                  {                      if (lastSegmentContainer != null && !description.LinkUri)                      {                          DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteDelete);                      }                        HandleDeleteOperation(description' dataService);                        statusCode = 204; // 204 - No Content                  }              }              else              {                  if (description.IsServiceActionRequest)                  {                      HandleServiceAction(description' dataService);                  }                    if (description.TargetKind == RequestTargetKind.VoidOperation)                  {                      statusCode = 204; // No Content                  }              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessIncomingRequest,The following statement contains a magic number: if (description.TargetSource != RequestTargetSource.ServiceOperation)              {                  if (requestMessage.HttpVerb.IsInsert())                  {                      newDescription = HandlePostOperation(description' dataService);                        if (description.ShouldWriteResponseBodyOrETag && !newDescription.Preference.ShouldNotIncludeResponseBody)                      {                          statusCode = 201; // 201 - Created.                      }                      else                      {                          statusCode = 204; // 204 - No Content                      }                  }                  else if (requestMessage.HttpVerb.IsUpdate())                  {                      if (lastSegmentContainer != null && !description.LinkUri)                      {                          if (requestMessage.HttpVerb == HttpVerbs.PUT)                          {                              DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteReplace);                          }                          else                          {                              DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteMerge);                          }                      }                        newDescription = HandlePutOperation(description' dataService);                        // For update requests' we need to write responses for requests targetting entity                      if (newDescription.Preference.ShouldIncludeResponseBody)                      {                          statusCode = 200; // 200 - OK                      }                      else                      {                          statusCode = 204; // 204 - No Content                      }                  }                  else if (requestMessage.HttpVerb.IsDelete())                  {                      if (lastSegmentContainer != null && !description.LinkUri)                      {                          DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteDelete);                      }                        HandleDeleteOperation(description' dataService);                        statusCode = 204; // 204 - No Content                  }              }              else              {                  if (description.IsServiceActionRequest)                  {                      HandleServiceAction(description' dataService);                  }                    if (description.TargetKind == RequestTargetKind.VoidOperation)                  {                      statusCode = 204; // No Content                  }              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessIncomingRequest,The following statement contains a magic number: if (description.TargetSource != RequestTargetSource.ServiceOperation)              {                  if (requestMessage.HttpVerb.IsInsert())                  {                      newDescription = HandlePostOperation(description' dataService);                        if (description.ShouldWriteResponseBodyOrETag && !newDescription.Preference.ShouldNotIncludeResponseBody)                      {                          statusCode = 201; // 201 - Created.                      }                      else                      {                          statusCode = 204; // 204 - No Content                      }                  }                  else if (requestMessage.HttpVerb.IsUpdate())                  {                      if (lastSegmentContainer != null && !description.LinkUri)                      {                          if (requestMessage.HttpVerb == HttpVerbs.PUT)                          {                              DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteReplace);                          }                          else                          {                              DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteMerge);                          }                      }                        newDescription = HandlePutOperation(description' dataService);                        // For update requests' we need to write responses for requests targetting entity                      if (newDescription.Preference.ShouldIncludeResponseBody)                      {                          statusCode = 200; // 200 - OK                      }                      else                      {                          statusCode = 204; // 204 - No Content                      }                  }                  else if (requestMessage.HttpVerb.IsDelete())                  {                      if (lastSegmentContainer != null && !description.LinkUri)                      {                          DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteDelete);                      }                        HandleDeleteOperation(description' dataService);                        statusCode = 204; // 204 - No Content                  }              }              else              {                  if (description.IsServiceActionRequest)                  {                      HandleServiceAction(description' dataService);                  }                    if (description.TargetKind == RequestTargetKind.VoidOperation)                  {                      statusCode = 204; // No Content                  }              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessIncomingRequest,The following statement contains a magic number: if (description.TargetSource != RequestTargetSource.ServiceOperation)              {                  if (requestMessage.HttpVerb.IsInsert())                  {                      newDescription = HandlePostOperation(description' dataService);                        if (description.ShouldWriteResponseBodyOrETag && !newDescription.Preference.ShouldNotIncludeResponseBody)                      {                          statusCode = 201; // 201 - Created.                      }                      else                      {                          statusCode = 204; // 204 - No Content                      }                  }                  else if (requestMessage.HttpVerb.IsUpdate())                  {                      if (lastSegmentContainer != null && !description.LinkUri)                      {                          if (requestMessage.HttpVerb == HttpVerbs.PUT)                          {                              DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteReplace);                          }                          else                          {                              DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteMerge);                          }                      }                        newDescription = HandlePutOperation(description' dataService);                        // For update requests' we need to write responses for requests targetting entity                      if (newDescription.Preference.ShouldIncludeResponseBody)                      {                          statusCode = 200; // 200 - OK                      }                      else                      {                          statusCode = 204; // 204 - No Content                      }                  }                  else if (requestMessage.HttpVerb.IsDelete())                  {                      if (lastSegmentContainer != null && !description.LinkUri)                      {                          DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteDelete);                      }                        HandleDeleteOperation(description' dataService);                        statusCode = 204; // 204 - No Content                  }              }              else              {                  if (description.IsServiceActionRequest)                  {                      HandleServiceAction(description' dataService);                  }                    if (description.TargetKind == RequestTargetKind.VoidOperation)                  {                      statusCode = 204; // No Content                  }              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,ProcessIncomingRequest,The following statement contains a magic number: if (description.TargetSource != RequestTargetSource.ServiceOperation)              {                  if (requestMessage.HttpVerb.IsInsert())                  {                      newDescription = HandlePostOperation(description' dataService);                        if (description.ShouldWriteResponseBodyOrETag && !newDescription.Preference.ShouldNotIncludeResponseBody)                      {                          statusCode = 201; // 201 - Created.                      }                      else                      {                          statusCode = 204; // 204 - No Content                      }                  }                  else if (requestMessage.HttpVerb.IsUpdate())                  {                      if (lastSegmentContainer != null && !description.LinkUri)                      {                          if (requestMessage.HttpVerb == HttpVerbs.PUT)                          {                              DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteReplace);                          }                          else                          {                              DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteMerge);                          }                      }                        newDescription = HandlePutOperation(description' dataService);                        // For update requests' we need to write responses for requests targetting entity                      if (newDescription.Preference.ShouldIncludeResponseBody)                      {                          statusCode = 200; // 200 - OK                      }                      else                      {                          statusCode = 204; // 204 - No Content                      }                  }                  else if (requestMessage.HttpVerb.IsDelete())                  {                      if (lastSegmentContainer != null && !description.LinkUri)                      {                          DataServiceConfiguration.CheckResourceRights(lastSegmentContainer' EntitySetRights.WriteDelete);                      }                        HandleDeleteOperation(description' dataService);                        statusCode = 204; // 204 - No Content                  }              }              else              {                  if (description.IsServiceActionRequest)                  {                      HandleServiceAction(description' dataService);                  }                    if (description.TargetKind == RequestTargetKind.VoidOperation)                  {                      statusCode = 204; // No Content                  }              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,SerializeResponseBody,The following statement contains a magic number: if (description.TargetSource == RequestTargetSource.ServiceOperation ||                  description.TargetSource == RequestTargetSource.None ||                  !description.IsSingleResult)              {                  // For service operations returning single result' etag checks must be performed by the service operation itself.                  Debug.Assert(                      (String.IsNullOrEmpty(requestMessage.GetRequestIfMatchHeader()) && String.IsNullOrEmpty(requestMessage.GetRequestIfNoneMatchHeader())) || description.TargetSource == RequestTargetSource.ServiceOperation'                      "No etag can be specified for collection or it must be a service operation");                    SegmentInfo lastSegmentInfo = description.LastSegmentInfo;                  Debug.Assert(lastSegmentInfo != null' "lastSegmentInfo != null");                    if (lastSegmentInfo.IsServiceActionSegment)                  {                      DataServiceActionProviderWrapper.ResolveActionResult(lastSegmentInfo);                      if (lastSegmentInfo.RequestEnumerable == null)                      {                          // If the service action returns null' we will respond with 204 (No content).                          // If the service action returns an empty collection on the other hand' the                          // response status code would be 200.                          dataService.OperationContext.ResponseMessage.StatusCode = 204;                          return WebUtil.GetEmptyStreamWriter();                      }                  }                    QueryResultInfo queryResults = new QueryResultInfo(lastSegmentInfo.RequestEnumerable);                    try                  {                      queryResults.MoveNext();                        if (description.IsSingleResult)                      {                          if (!queryResults.HasMoved || queryResults.Current == null)                          {                              throw DataServiceException.CreateResourceNotFound(lastSegmentInfo.Identifier);                          }                            // If the service action returns a single entity' we need to set the response etag header.                          if (description.TargetSource == RequestTargetSource.ServiceOperation && description.TargetKind == RequestTargetKind.Resource && description.IsETagHeaderAllowed)                          {                              object resourceInstance = queryResults.Current;                              ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' resourceInstance);                              Debug.Assert(resourceType != null' "resourceType != null");                              string etag = WebUtil.GetETagValue(dataService' resourceInstance' resourceType' lastSegmentInfo.TargetResourceSet);                              WebUtil.WriteETagValueInResponseHeader(description' etag' dataService.OperationContext.ResponseMessage);                          }                      }                        return CreateResponseBodyWriter(description' dataService' queryResults' responseMessage).Write;                  }                  catch                  {                      WebUtil.Dispose(queryResults);                      throw;                  }              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleDeleteOperation,The following statement contains a magic number: if (description.IsSingleResult && description.LinkUri)              {                  HandleUnbindOperation(description' dataService);              }              else if (description.IsSingleResult && description.TargetKind == RequestTargetKind.Resource)              {                  Debug.Assert(description.LastSegmentInfo.TargetResourceSet != null' "description.LastSegmentInfo.TargetResourceSet != null");                    if (description.RequestExpression == null)                  {                      throw DataServiceException.CreateBadRequestError(Strings.BadRequest_ResourceCanBeCrossReferencedOnlyForBindOperation);                  }                    // TODO: move this check to start of the method once this bug is approved                  if (!String.IsNullOrEmpty(host.GetRequestIfNoneMatchHeader()))                  {                      throw DataServiceException.CreateBadRequestError(Strings.DataService_IfNoneMatchHeaderNotSupportedInDelete);                  }                    // Get the single entity result                  // We have to query for the delete case' since we don't know the type of the resource                  object entity = Deserializer.GetResource(description.LastSegmentInfo' null' dataService' true /*checkForNull*/);                  ResourceSetWrapper container = description.LastSegmentInfo.TargetResourceSet;                    // Need to check etag for DELETE operation                  dataService.Updatable.SetETagValues(entity' container);                    // TODO: we need to fix this: with the new etag design' we will have type information in the etag.                  // For etag properties' we need the type of the resource. Hence we need to resolve it always.                  object actualEntity = dataService.Updatable.ResolveResource(entity);                    ResourceType resourceType = dataService.Provider.GetResourceType(actualEntity);                  if (description.Property != null)                  {                      Debug.Assert(container != null' "container != null");                      DataServiceConfiguration.CheckResourceRights(container' EntitySetRights.WriteDelete);                  }                    dataService.Updatable.DeleteResource(entity);                    if (resourceType != null && (resourceType.IsMediaLinkEntry || resourceType.HasNamedStreams))                  {                      dataService.StreamProvider.DeleteStream(actualEntity' dataService.OperationContext);                  }                    UpdateTracker.FireNotification(dataService' actualEntity' container' UpdateOperations.Delete);              }              else if (description.TargetKind == RequestTargetKind.PrimitiveValue)              {                  Debug.Assert(description.TargetSource == RequestTargetSource.Property' "description.TargetSource == RequestTargetSource.Property");                  Debug.Assert(description.IsSingleResult' "description.IsSingleResult");                    // TODO: move this check to start of the method once this bug is approved                  if (!String.IsNullOrEmpty(host.GetRequestIfNoneMatchHeader()))                  {                      throw DataServiceException.CreateBadRequestError(Strings.DataService_IfNoneMatchHeaderNotSupportedInDelete);                  }                    if (description.Property != null && description.Property.IsOfKind(ResourcePropertyKind.Key))                  {                      throw DataServiceException.CreateBadRequestError(Strings.DataService_CannotUpdateKeyProperties(description.Property.Name));                  }                  else if (!WebUtil.IsNullableType(description.Property.Type) && description.Property.Type.IsValueType())                  {                      // 403 - Forbidden                      throw new DataServiceException(403' Strings.BadRequest_CannotNullifyValueTypeProperty);                  }                    // We have to issue the query to get the resource                  object securityResource;        // Resource on which security check can be made (possibly entity parent of 'resource').                  ResourceSetWrapper container;    // resource set to which the parent entity belongs to.                  object resource = Deserializer.GetResourceToModify(description' dataService' false /*allowCrossReference*/' out securityResource' out container' true /*checkETag*/);                    object actualEntity = dataService.Updatable.ResolveResource(securityResource);                    // Doesn't matter which content format we pass here' since the value we are setting to is null                  Deserializer.ModifyResource(description' resource' null' dataService);                    UpdateTracker.FireNotification(dataService' actualEntity' container' UpdateOperations.Change);              }              else if (description.TargetKind == RequestTargetKind.OpenProperty)              {                  // Open navigation properties are not supported on OpenTypes.                  throw DataServiceException.CreateBadRequestError(Strings.OpenNavigationPropertiesNotSupportedOnOpenTypes(description.LastSegmentInfo.Identifier));              }              else if (description.TargetKind == RequestTargetKind.OpenPropertyValue)              {                  // TODO: move this check to start of the method once this bug is approved                  if (!String.IsNullOrEmpty(host.GetRequestIfNoneMatchHeader()))                  {                      throw DataServiceException.CreateBadRequestError(Strings.DataService_IfNoneMatchHeaderNotSupportedInDelete);                  }                    object securityResource;                  ResourceSetWrapper container;                  object resource = Deserializer.GetResourceToModify(description' dataService' false /*allowCrossReference*/' out securityResource' out container' true /*checkETag*/);                    object actualEntity = dataService.Updatable.ResolveResource(securityResource);                    // Doesn't matter which content format we pass here' since the value we are setting to is null                  Deserializer.ModifyResource(description' resource' null' dataService);                    UpdateTracker.FireNotification(dataService' actualEntity' container' UpdateOperations.Change);              }              else              {                  throw DataServiceException.CreateMethodNotAllowed(                      Strings.BadRequest_InvalidUriForDeleteOperation(host.AbsoluteRequestUri)'                      DataServiceConfiguration.GetAllowedMethods(dataService.Configuration' description));              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The following statement contains a magic number: try              {                  if (requestMessage.HttpVerb.IsQuery())                  {                      bool writeResponse = true;                        // Get the index of the last resource in the request uri                      int parentResourceIndex = description.GetIndexOfTargetEntityResource();                      Debug.Assert(parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count' "parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count");                        SegmentInfo parentEntitySegment = description.SegmentInfos[parentResourceIndex];                      queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(parentEntitySegment);                      object resource = queryResults.Current;                      string etagValue = null;                        if (description.LinkUri)                      {                          // This must be already checked in SerializeResponseBody method.                          Debug.Assert(String.IsNullOrEmpty(requestMessage.GetRequestIfMatchHeader()) && String.IsNullOrEmpty(requestMessage.GetRequestIfNoneMatchHeader())' "ETag cannot be specified for $link requests");                          if (resource == null)                          {                              throw DataServiceException.CreateResourceNotFound(description.LastSegmentInfo.Identifier);                          }                      }                      else if (description.IsETagHeaderAllowed && description.TargetKind != RequestTargetKind.MediaResource)                      {                          // Media Resources have their own ETags' we let the Stream Provider handle it. No need to compare the MLE ETag here.                          ResourceSetWrapper container = parentEntitySegment.TargetResourceSet;                          Debug.Assert(container != null' "container != null");                            etagValue = WebUtil.CompareAndGetETag(resource' resource' container' dataService' out writeResponse);                      }                        if (resource == null && description.TargetKind == RequestTargetKind.Resource)                      {                          Debug.Assert(description.Property != null' "non-open type property");                            WebUtil.Dispose(queryResults);                          queryResults = null;                            // If you are querying reference nav property and the value is null'                           // return 204 - No Content e.g. /Customers(1)/BestFriend                          dataService.OperationContext.ResponseStatusCode = 204; // No Content                          return WebUtil.GetEmptyStreamWriter();                      }                        if (writeResponse)                      {                          return WriteSingleElementResponse(description' queryResults' parentResourceIndex' etagValue' dataService' responseMessage);                      }                      else                      {                          WebUtil.Dispose(queryResults);                          queryResults = null;                          WebUtil.WriteETagValueInResponseHeader(description' etagValue' dataService.OperationContext.ResponseMessage);                          dataService.OperationContext.ResponseStatusCode = 304; // Not Modified                          return WebUtil.GetEmptyStreamWriter();                      }                  }                  else if (requestMessage.HttpVerb == HttpVerbs.PUT || requestMessage.HttpVerb == HttpVerbs.PATCH)                  {                      ResourceSetWrapper container;                      object actualEntity = GetContainerAndActualEntityInstance(dataService' description' out container);                        // We should only write etag in the response' if the type has one or more etag properties defined.                      // WriteETagValueInResponseHeader checks for null etag value (which means that no etag properties are defined)                      // that before calling the responseMessage.                      string etag;                      if (description.TargetKind == RequestTargetKind.MediaResource)                      {                          etag = dataService.StreamProvider.GetStreamETag(actualEntity' description.StreamProperty' dataService.OperationContext);                      }                      else                      {                          ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' actualEntity);                          etag = WebUtil.GetETagValue(dataService' actualEntity' resourceType' container);                      }                        // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response                      // Hence for media resource' we will not write anything in the response.                      if (description.Preference.ShouldIncludeResponseBody)                      {                          Debug.Assert(dataService.OperationContext.ResponseStatusCode == 200' "Ensuring that status code is 200 for update requests");                          queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(description.LastSegmentInfo);                          return WriteSingleElementResponse(description' queryResults' description.GetIndexOfTargetEntityResource()' etag' dataService' responseMessage);                      }                      else                      {                          Debug.Assert(dataService.OperationContext.ResponseStatusCode == 204' "Ensuring that status code is 204");                            WebUtil.WriteETagValueInResponseHeader(description' etag' dataService.OperationContext.ResponseMessage);                          return WebUtil.GetEmptyStreamWriter();                      }                  }                  else                  {                      Debug.Assert(requestMessage.HttpVerb == HttpVerbs.POST' "Must be POST method");                      ResourceSetWrapper container;                      object actualEntity = GetContainerAndActualEntityInstance(dataService' description' out container);                      ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' actualEntity);                      EntityToSerialize entityToSerialize = EntityToSerialize.Create(actualEntity' resourceType' container' dataService.Provider' requestMessage.AbsoluteServiceUri);                      dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpResponseLocation' entityToSerialize.SerializedKey.AbsoluteEditLink.AbsoluteUri);                      string etagValue = WebUtil.GetETagValue(dataService' actualEntity' resourceType' container);                        // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response                      // Hence for media resource' we will not write anything in the response.                      if (!description.Preference.ShouldNotIncludeResponseBody)                      {                          Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 201' "Ensuring that status code is 201 is for insert requests");                          queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(description.LastSegmentInfo);                          return WriteSingleElementResponse(description' queryResults' description.SegmentInfos.Count - 1' etagValue' dataService' responseMessage);                      }                      else                      {                          Debug.Assert(                              description.Preference.ShouldNotIncludeResponseBody && description.ResponseVersion >= VersionUtil.Version4Dot0'                              "The preference no-content should be applied which means the response version must be at least 4.0");                          Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 204' "Ensuring that status code is 204");                            // Write the OData-EntityId header from the entity's id.                          dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpODataEntityId' UriUtil.UriToString(entityToSerialize.SerializedKey.Identity));                          WebUtil.WriteETagValueInResponseHeader(description' etagValue' dataService.OperationContext.ResponseMessage);                          return WebUtil.GetEmptyStreamWriter();                      }                  }              }              catch              {                  WebUtil.Dispose(queryResults);                  throw;              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The following statement contains a magic number: try              {                  if (requestMessage.HttpVerb.IsQuery())                  {                      bool writeResponse = true;                        // Get the index of the last resource in the request uri                      int parentResourceIndex = description.GetIndexOfTargetEntityResource();                      Debug.Assert(parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count' "parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count");                        SegmentInfo parentEntitySegment = description.SegmentInfos[parentResourceIndex];                      queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(parentEntitySegment);                      object resource = queryResults.Current;                      string etagValue = null;                        if (description.LinkUri)                      {                          // This must be already checked in SerializeResponseBody method.                          Debug.Assert(String.IsNullOrEmpty(requestMessage.GetRequestIfMatchHeader()) && String.IsNullOrEmpty(requestMessage.GetRequestIfNoneMatchHeader())' "ETag cannot be specified for $link requests");                          if (resource == null)                          {                              throw DataServiceException.CreateResourceNotFound(description.LastSegmentInfo.Identifier);                          }                      }                      else if (description.IsETagHeaderAllowed && description.TargetKind != RequestTargetKind.MediaResource)                      {                          // Media Resources have their own ETags' we let the Stream Provider handle it. No need to compare the MLE ETag here.                          ResourceSetWrapper container = parentEntitySegment.TargetResourceSet;                          Debug.Assert(container != null' "container != null");                            etagValue = WebUtil.CompareAndGetETag(resource' resource' container' dataService' out writeResponse);                      }                        if (resource == null && description.TargetKind == RequestTargetKind.Resource)                      {                          Debug.Assert(description.Property != null' "non-open type property");                            WebUtil.Dispose(queryResults);                          queryResults = null;                            // If you are querying reference nav property and the value is null'                           // return 204 - No Content e.g. /Customers(1)/BestFriend                          dataService.OperationContext.ResponseStatusCode = 204; // No Content                          return WebUtil.GetEmptyStreamWriter();                      }                        if (writeResponse)                      {                          return WriteSingleElementResponse(description' queryResults' parentResourceIndex' etagValue' dataService' responseMessage);                      }                      else                      {                          WebUtil.Dispose(queryResults);                          queryResults = null;                          WebUtil.WriteETagValueInResponseHeader(description' etagValue' dataService.OperationContext.ResponseMessage);                          dataService.OperationContext.ResponseStatusCode = 304; // Not Modified                          return WebUtil.GetEmptyStreamWriter();                      }                  }                  else if (requestMessage.HttpVerb == HttpVerbs.PUT || requestMessage.HttpVerb == HttpVerbs.PATCH)                  {                      ResourceSetWrapper container;                      object actualEntity = GetContainerAndActualEntityInstance(dataService' description' out container);                        // We should only write etag in the response' if the type has one or more etag properties defined.                      // WriteETagValueInResponseHeader checks for null etag value (which means that no etag properties are defined)                      // that before calling the responseMessage.                      string etag;                      if (description.TargetKind == RequestTargetKind.MediaResource)                      {                          etag = dataService.StreamProvider.GetStreamETag(actualEntity' description.StreamProperty' dataService.OperationContext);                      }                      else                      {                          ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' actualEntity);                          etag = WebUtil.GetETagValue(dataService' actualEntity' resourceType' container);                      }                        // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response                      // Hence for media resource' we will not write anything in the response.                      if (description.Preference.ShouldIncludeResponseBody)                      {                          Debug.Assert(dataService.OperationContext.ResponseStatusCode == 200' "Ensuring that status code is 200 for update requests");                          queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(description.LastSegmentInfo);                          return WriteSingleElementResponse(description' queryResults' description.GetIndexOfTargetEntityResource()' etag' dataService' responseMessage);                      }                      else                      {                          Debug.Assert(dataService.OperationContext.ResponseStatusCode == 204' "Ensuring that status code is 204");                            WebUtil.WriteETagValueInResponseHeader(description' etag' dataService.OperationContext.ResponseMessage);                          return WebUtil.GetEmptyStreamWriter();                      }                  }                  else                  {                      Debug.Assert(requestMessage.HttpVerb == HttpVerbs.POST' "Must be POST method");                      ResourceSetWrapper container;                      object actualEntity = GetContainerAndActualEntityInstance(dataService' description' out container);                      ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' actualEntity);                      EntityToSerialize entityToSerialize = EntityToSerialize.Create(actualEntity' resourceType' container' dataService.Provider' requestMessage.AbsoluteServiceUri);                      dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpResponseLocation' entityToSerialize.SerializedKey.AbsoluteEditLink.AbsoluteUri);                      string etagValue = WebUtil.GetETagValue(dataService' actualEntity' resourceType' container);                        // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response                      // Hence for media resource' we will not write anything in the response.                      if (!description.Preference.ShouldNotIncludeResponseBody)                      {                          Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 201' "Ensuring that status code is 201 is for insert requests");                          queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(description.LastSegmentInfo);                          return WriteSingleElementResponse(description' queryResults' description.SegmentInfos.Count - 1' etagValue' dataService' responseMessage);                      }                      else                      {                          Debug.Assert(                              description.Preference.ShouldNotIncludeResponseBody && description.ResponseVersion >= VersionUtil.Version4Dot0'                              "The preference no-content should be applied which means the response version must be at least 4.0");                          Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 204' "Ensuring that status code is 204");                            // Write the OData-EntityId header from the entity's id.                          dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpODataEntityId' UriUtil.UriToString(entityToSerialize.SerializedKey.Identity));                          WebUtil.WriteETagValueInResponseHeader(description' etagValue' dataService.OperationContext.ResponseMessage);                          return WebUtil.GetEmptyStreamWriter();                      }                  }              }              catch              {                  WebUtil.Dispose(queryResults);                  throw;              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The following statement contains a magic number: try              {                  if (requestMessage.HttpVerb.IsQuery())                  {                      bool writeResponse = true;                        // Get the index of the last resource in the request uri                      int parentResourceIndex = description.GetIndexOfTargetEntityResource();                      Debug.Assert(parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count' "parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count");                        SegmentInfo parentEntitySegment = description.SegmentInfos[parentResourceIndex];                      queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(parentEntitySegment);                      object resource = queryResults.Current;                      string etagValue = null;                        if (description.LinkUri)                      {                          // This must be already checked in SerializeResponseBody method.                          Debug.Assert(String.IsNullOrEmpty(requestMessage.GetRequestIfMatchHeader()) && String.IsNullOrEmpty(requestMessage.GetRequestIfNoneMatchHeader())' "ETag cannot be specified for $link requests");                          if (resource == null)                          {                              throw DataServiceException.CreateResourceNotFound(description.LastSegmentInfo.Identifier);                          }                      }                      else if (description.IsETagHeaderAllowed && description.TargetKind != RequestTargetKind.MediaResource)                      {                          // Media Resources have their own ETags' we let the Stream Provider handle it. No need to compare the MLE ETag here.                          ResourceSetWrapper container = parentEntitySegment.TargetResourceSet;                          Debug.Assert(container != null' "container != null");                            etagValue = WebUtil.CompareAndGetETag(resource' resource' container' dataService' out writeResponse);                      }                        if (resource == null && description.TargetKind == RequestTargetKind.Resource)                      {                          Debug.Assert(description.Property != null' "non-open type property");                            WebUtil.Dispose(queryResults);                          queryResults = null;                            // If you are querying reference nav property and the value is null'                           // return 204 - No Content e.g. /Customers(1)/BestFriend                          dataService.OperationContext.ResponseStatusCode = 204; // No Content                          return WebUtil.GetEmptyStreamWriter();                      }                        if (writeResponse)                      {                          return WriteSingleElementResponse(description' queryResults' parentResourceIndex' etagValue' dataService' responseMessage);                      }                      else                      {                          WebUtil.Dispose(queryResults);                          queryResults = null;                          WebUtil.WriteETagValueInResponseHeader(description' etagValue' dataService.OperationContext.ResponseMessage);                          dataService.OperationContext.ResponseStatusCode = 304; // Not Modified                          return WebUtil.GetEmptyStreamWriter();                      }                  }                  else if (requestMessage.HttpVerb == HttpVerbs.PUT || requestMessage.HttpVerb == HttpVerbs.PATCH)                  {                      ResourceSetWrapper container;                      object actualEntity = GetContainerAndActualEntityInstance(dataService' description' out container);                        // We should only write etag in the response' if the type has one or more etag properties defined.                      // WriteETagValueInResponseHeader checks for null etag value (which means that no etag properties are defined)                      // that before calling the responseMessage.                      string etag;                      if (description.TargetKind == RequestTargetKind.MediaResource)                      {                          etag = dataService.StreamProvider.GetStreamETag(actualEntity' description.StreamProperty' dataService.OperationContext);                      }                      else                      {                          ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' actualEntity);                          etag = WebUtil.GetETagValue(dataService' actualEntity' resourceType' container);                      }                        // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response                      // Hence for media resource' we will not write anything in the response.                      if (description.Preference.ShouldIncludeResponseBody)                      {                          Debug.Assert(dataService.OperationContext.ResponseStatusCode == 200' "Ensuring that status code is 200 for update requests");                          queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(description.LastSegmentInfo);                          return WriteSingleElementResponse(description' queryResults' description.GetIndexOfTargetEntityResource()' etag' dataService' responseMessage);                      }                      else                      {                          Debug.Assert(dataService.OperationContext.ResponseStatusCode == 204' "Ensuring that status code is 204");                            WebUtil.WriteETagValueInResponseHeader(description' etag' dataService.OperationContext.ResponseMessage);                          return WebUtil.GetEmptyStreamWriter();                      }                  }                  else                  {                      Debug.Assert(requestMessage.HttpVerb == HttpVerbs.POST' "Must be POST method");                      ResourceSetWrapper container;                      object actualEntity = GetContainerAndActualEntityInstance(dataService' description' out container);                      ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' actualEntity);                      EntityToSerialize entityToSerialize = EntityToSerialize.Create(actualEntity' resourceType' container' dataService.Provider' requestMessage.AbsoluteServiceUri);                      dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpResponseLocation' entityToSerialize.SerializedKey.AbsoluteEditLink.AbsoluteUri);                      string etagValue = WebUtil.GetETagValue(dataService' actualEntity' resourceType' container);                        // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response                      // Hence for media resource' we will not write anything in the response.                      if (!description.Preference.ShouldNotIncludeResponseBody)                      {                          Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 201' "Ensuring that status code is 201 is for insert requests");                          queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(description.LastSegmentInfo);                          return WriteSingleElementResponse(description' queryResults' description.SegmentInfos.Count - 1' etagValue' dataService' responseMessage);                      }                      else                      {                          Debug.Assert(                              description.Preference.ShouldNotIncludeResponseBody && description.ResponseVersion >= VersionUtil.Version4Dot0'                              "The preference no-content should be applied which means the response version must be at least 4.0");                          Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 204' "Ensuring that status code is 204");                            // Write the OData-EntityId header from the entity's id.                          dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpODataEntityId' UriUtil.UriToString(entityToSerialize.SerializedKey.Identity));                          WebUtil.WriteETagValueInResponseHeader(description' etagValue' dataService.OperationContext.ResponseMessage);                          return WebUtil.GetEmptyStreamWriter();                      }                  }              }              catch              {                  WebUtil.Dispose(queryResults);                  throw;              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The following statement contains a magic number: try              {                  if (requestMessage.HttpVerb.IsQuery())                  {                      bool writeResponse = true;                        // Get the index of the last resource in the request uri                      int parentResourceIndex = description.GetIndexOfTargetEntityResource();                      Debug.Assert(parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count' "parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count");                        SegmentInfo parentEntitySegment = description.SegmentInfos[parentResourceIndex];                      queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(parentEntitySegment);                      object resource = queryResults.Current;                      string etagValue = null;                        if (description.LinkUri)                      {                          // This must be already checked in SerializeResponseBody method.                          Debug.Assert(String.IsNullOrEmpty(requestMessage.GetRequestIfMatchHeader()) && String.IsNullOrEmpty(requestMessage.GetRequestIfNoneMatchHeader())' "ETag cannot be specified for $link requests");                          if (resource == null)                          {                              throw DataServiceException.CreateResourceNotFound(description.LastSegmentInfo.Identifier);                          }                      }                      else if (description.IsETagHeaderAllowed && description.TargetKind != RequestTargetKind.MediaResource)                      {                          // Media Resources have their own ETags' we let the Stream Provider handle it. No need to compare the MLE ETag here.                          ResourceSetWrapper container = parentEntitySegment.TargetResourceSet;                          Debug.Assert(container != null' "container != null");                            etagValue = WebUtil.CompareAndGetETag(resource' resource' container' dataService' out writeResponse);                      }                        if (resource == null && description.TargetKind == RequestTargetKind.Resource)                      {                          Debug.Assert(description.Property != null' "non-open type property");                            WebUtil.Dispose(queryResults);                          queryResults = null;                            // If you are querying reference nav property and the value is null'                           // return 204 - No Content e.g. /Customers(1)/BestFriend                          dataService.OperationContext.ResponseStatusCode = 204; // No Content                          return WebUtil.GetEmptyStreamWriter();                      }                        if (writeResponse)                      {                          return WriteSingleElementResponse(description' queryResults' parentResourceIndex' etagValue' dataService' responseMessage);                      }                      else                      {                          WebUtil.Dispose(queryResults);                          queryResults = null;                          WebUtil.WriteETagValueInResponseHeader(description' etagValue' dataService.OperationContext.ResponseMessage);                          dataService.OperationContext.ResponseStatusCode = 304; // Not Modified                          return WebUtil.GetEmptyStreamWriter();                      }                  }                  else if (requestMessage.HttpVerb == HttpVerbs.PUT || requestMessage.HttpVerb == HttpVerbs.PATCH)                  {                      ResourceSetWrapper container;                      object actualEntity = GetContainerAndActualEntityInstance(dataService' description' out container);                        // We should only write etag in the response' if the type has one or more etag properties defined.                      // WriteETagValueInResponseHeader checks for null etag value (which means that no etag properties are defined)                      // that before calling the responseMessage.                      string etag;                      if (description.TargetKind == RequestTargetKind.MediaResource)                      {                          etag = dataService.StreamProvider.GetStreamETag(actualEntity' description.StreamProperty' dataService.OperationContext);                      }                      else                      {                          ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' actualEntity);                          etag = WebUtil.GetETagValue(dataService' actualEntity' resourceType' container);                      }                        // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response                      // Hence for media resource' we will not write anything in the response.                      if (description.Preference.ShouldIncludeResponseBody)                      {                          Debug.Assert(dataService.OperationContext.ResponseStatusCode == 200' "Ensuring that status code is 200 for update requests");                          queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(description.LastSegmentInfo);                          return WriteSingleElementResponse(description' queryResults' description.GetIndexOfTargetEntityResource()' etag' dataService' responseMessage);                      }                      else                      {                          Debug.Assert(dataService.OperationContext.ResponseStatusCode == 204' "Ensuring that status code is 204");                            WebUtil.WriteETagValueInResponseHeader(description' etag' dataService.OperationContext.ResponseMessage);                          return WebUtil.GetEmptyStreamWriter();                      }                  }                  else                  {                      Debug.Assert(requestMessage.HttpVerb == HttpVerbs.POST' "Must be POST method");                      ResourceSetWrapper container;                      object actualEntity = GetContainerAndActualEntityInstance(dataService' description' out container);                      ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' actualEntity);                      EntityToSerialize entityToSerialize = EntityToSerialize.Create(actualEntity' resourceType' container' dataService.Provider' requestMessage.AbsoluteServiceUri);                      dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpResponseLocation' entityToSerialize.SerializedKey.AbsoluteEditLink.AbsoluteUri);                      string etagValue = WebUtil.GetETagValue(dataService' actualEntity' resourceType' container);                        // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response                      // Hence for media resource' we will not write anything in the response.                      if (!description.Preference.ShouldNotIncludeResponseBody)                      {                          Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 201' "Ensuring that status code is 201 is for insert requests");                          queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(description.LastSegmentInfo);                          return WriteSingleElementResponse(description' queryResults' description.SegmentInfos.Count - 1' etagValue' dataService' responseMessage);                      }                      else                      {                          Debug.Assert(                              description.Preference.ShouldNotIncludeResponseBody && description.ResponseVersion >= VersionUtil.Version4Dot0'                              "The preference no-content should be applied which means the response version must be at least 4.0");                          Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 204' "Ensuring that status code is 204");                            // Write the OData-EntityId header from the entity's id.                          dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpODataEntityId' UriUtil.UriToString(entityToSerialize.SerializedKey.Identity));                          WebUtil.WriteETagValueInResponseHeader(description' etagValue' dataService.OperationContext.ResponseMessage);                          return WebUtil.GetEmptyStreamWriter();                      }                  }              }              catch              {                  WebUtil.Dispose(queryResults);                  throw;              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The following statement contains a magic number: try              {                  if (requestMessage.HttpVerb.IsQuery())                  {                      bool writeResponse = true;                        // Get the index of the last resource in the request uri                      int parentResourceIndex = description.GetIndexOfTargetEntityResource();                      Debug.Assert(parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count' "parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count");                        SegmentInfo parentEntitySegment = description.SegmentInfos[parentResourceIndex];                      queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(parentEntitySegment);                      object resource = queryResults.Current;                      string etagValue = null;                        if (description.LinkUri)                      {                          // This must be already checked in SerializeResponseBody method.                          Debug.Assert(String.IsNullOrEmpty(requestMessage.GetRequestIfMatchHeader()) && String.IsNullOrEmpty(requestMessage.GetRequestIfNoneMatchHeader())' "ETag cannot be specified for $link requests");                          if (resource == null)                          {                              throw DataServiceException.CreateResourceNotFound(description.LastSegmentInfo.Identifier);                          }                      }                      else if (description.IsETagHeaderAllowed && description.TargetKind != RequestTargetKind.MediaResource)                      {                          // Media Resources have their own ETags' we let the Stream Provider handle it. No need to compare the MLE ETag here.                          ResourceSetWrapper container = parentEntitySegment.TargetResourceSet;                          Debug.Assert(container != null' "container != null");                            etagValue = WebUtil.CompareAndGetETag(resource' resource' container' dataService' out writeResponse);                      }                        if (resource == null && description.TargetKind == RequestTargetKind.Resource)                      {                          Debug.Assert(description.Property != null' "non-open type property");                            WebUtil.Dispose(queryResults);                          queryResults = null;                            // If you are querying reference nav property and the value is null'                           // return 204 - No Content e.g. /Customers(1)/BestFriend                          dataService.OperationContext.ResponseStatusCode = 204; // No Content                          return WebUtil.GetEmptyStreamWriter();                      }                        if (writeResponse)                      {                          return WriteSingleElementResponse(description' queryResults' parentResourceIndex' etagValue' dataService' responseMessage);                      }                      else                      {                          WebUtil.Dispose(queryResults);                          queryResults = null;                          WebUtil.WriteETagValueInResponseHeader(description' etagValue' dataService.OperationContext.ResponseMessage);                          dataService.OperationContext.ResponseStatusCode = 304; // Not Modified                          return WebUtil.GetEmptyStreamWriter();                      }                  }                  else if (requestMessage.HttpVerb == HttpVerbs.PUT || requestMessage.HttpVerb == HttpVerbs.PATCH)                  {                      ResourceSetWrapper container;                      object actualEntity = GetContainerAndActualEntityInstance(dataService' description' out container);                        // We should only write etag in the response' if the type has one or more etag properties defined.                      // WriteETagValueInResponseHeader checks for null etag value (which means that no etag properties are defined)                      // that before calling the responseMessage.                      string etag;                      if (description.TargetKind == RequestTargetKind.MediaResource)                      {                          etag = dataService.StreamProvider.GetStreamETag(actualEntity' description.StreamProperty' dataService.OperationContext);                      }                      else                      {                          ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' actualEntity);                          etag = WebUtil.GetETagValue(dataService' actualEntity' resourceType' container);                      }                        // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response                      // Hence for media resource' we will not write anything in the response.                      if (description.Preference.ShouldIncludeResponseBody)                      {                          Debug.Assert(dataService.OperationContext.ResponseStatusCode == 200' "Ensuring that status code is 200 for update requests");                          queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(description.LastSegmentInfo);                          return WriteSingleElementResponse(description' queryResults' description.GetIndexOfTargetEntityResource()' etag' dataService' responseMessage);                      }                      else                      {                          Debug.Assert(dataService.OperationContext.ResponseStatusCode == 204' "Ensuring that status code is 204");                            WebUtil.WriteETagValueInResponseHeader(description' etag' dataService.OperationContext.ResponseMessage);                          return WebUtil.GetEmptyStreamWriter();                      }                  }                  else                  {                      Debug.Assert(requestMessage.HttpVerb == HttpVerbs.POST' "Must be POST method");                      ResourceSetWrapper container;                      object actualEntity = GetContainerAndActualEntityInstance(dataService' description' out container);                      ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' actualEntity);                      EntityToSerialize entityToSerialize = EntityToSerialize.Create(actualEntity' resourceType' container' dataService.Provider' requestMessage.AbsoluteServiceUri);                      dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpResponseLocation' entityToSerialize.SerializedKey.AbsoluteEditLink.AbsoluteUri);                      string etagValue = WebUtil.GetETagValue(dataService' actualEntity' resourceType' container);                        // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response                      // Hence for media resource' we will not write anything in the response.                      if (!description.Preference.ShouldNotIncludeResponseBody)                      {                          Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 201' "Ensuring that status code is 201 is for insert requests");                          queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(description.LastSegmentInfo);                          return WriteSingleElementResponse(description' queryResults' description.SegmentInfos.Count - 1' etagValue' dataService' responseMessage);                      }                      else                      {                          Debug.Assert(                              description.Preference.ShouldNotIncludeResponseBody && description.ResponseVersion >= VersionUtil.Version4Dot0'                              "The preference no-content should be applied which means the response version must be at least 4.0");                          Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 204' "Ensuring that status code is 204");                            // Write the OData-EntityId header from the entity's id.                          dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpODataEntityId' UriUtil.UriToString(entityToSerialize.SerializedKey.Identity));                          WebUtil.WriteETagValueInResponseHeader(description' etagValue' dataService.OperationContext.ResponseMessage);                          return WebUtil.GetEmptyStreamWriter();                      }                  }              }              catch              {                  WebUtil.Dispose(queryResults);                  throw;              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,CompareETagAndWriteResponse,The following statement contains a magic number: try              {                  if (requestMessage.HttpVerb.IsQuery())                  {                      bool writeResponse = true;                        // Get the index of the last resource in the request uri                      int parentResourceIndex = description.GetIndexOfTargetEntityResource();                      Debug.Assert(parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count' "parentResourceIndex >= 0 && parentResourceIndex < description.SegmentInfos.Count");                        SegmentInfo parentEntitySegment = description.SegmentInfos[parentResourceIndex];                      queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(parentEntitySegment);                      object resource = queryResults.Current;                      string etagValue = null;                        if (description.LinkUri)                      {                          // This must be already checked in SerializeResponseBody method.                          Debug.Assert(String.IsNullOrEmpty(requestMessage.GetRequestIfMatchHeader()) && String.IsNullOrEmpty(requestMessage.GetRequestIfNoneMatchHeader())' "ETag cannot be specified for $link requests");                          if (resource == null)                          {                              throw DataServiceException.CreateResourceNotFound(description.LastSegmentInfo.Identifier);                          }                      }                      else if (description.IsETagHeaderAllowed && description.TargetKind != RequestTargetKind.MediaResource)                      {                          // Media Resources have their own ETags' we let the Stream Provider handle it. No need to compare the MLE ETag here.                          ResourceSetWrapper container = parentEntitySegment.TargetResourceSet;                          Debug.Assert(container != null' "container != null");                            etagValue = WebUtil.CompareAndGetETag(resource' resource' container' dataService' out writeResponse);                      }                        if (resource == null && description.TargetKind == RequestTargetKind.Resource)                      {                          Debug.Assert(description.Property != null' "non-open type property");                            WebUtil.Dispose(queryResults);                          queryResults = null;                            // If you are querying reference nav property and the value is null'                           // return 204 - No Content e.g. /Customers(1)/BestFriend                          dataService.OperationContext.ResponseStatusCode = 204; // No Content                          return WebUtil.GetEmptyStreamWriter();                      }                        if (writeResponse)                      {                          return WriteSingleElementResponse(description' queryResults' parentResourceIndex' etagValue' dataService' responseMessage);                      }                      else                      {                          WebUtil.Dispose(queryResults);                          queryResults = null;                          WebUtil.WriteETagValueInResponseHeader(description' etagValue' dataService.OperationContext.ResponseMessage);                          dataService.OperationContext.ResponseStatusCode = 304; // Not Modified                          return WebUtil.GetEmptyStreamWriter();                      }                  }                  else if (requestMessage.HttpVerb == HttpVerbs.PUT || requestMessage.HttpVerb == HttpVerbs.PATCH)                  {                      ResourceSetWrapper container;                      object actualEntity = GetContainerAndActualEntityInstance(dataService' description' out container);                        // We should only write etag in the response' if the type has one or more etag properties defined.                      // WriteETagValueInResponseHeader checks for null etag value (which means that no etag properties are defined)                      // that before calling the responseMessage.                      string etag;                      if (description.TargetKind == RequestTargetKind.MediaResource)                      {                          etag = dataService.StreamProvider.GetStreamETag(actualEntity' description.StreamProperty' dataService.OperationContext);                      }                      else                      {                          ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' actualEntity);                          etag = WebUtil.GetETagValue(dataService' actualEntity' resourceType' container);                      }                        // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response                      // Hence for media resource' we will not write anything in the response.                      if (description.Preference.ShouldIncludeResponseBody)                      {                          Debug.Assert(dataService.OperationContext.ResponseStatusCode == 200' "Ensuring that status code is 200 for update requests");                          queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(description.LastSegmentInfo);                          return WriteSingleElementResponse(description' queryResults' description.GetIndexOfTargetEntityResource()' etag' dataService' responseMessage);                      }                      else                      {                          Debug.Assert(dataService.OperationContext.ResponseStatusCode == 204' "Ensuring that status code is 204");                            WebUtil.WriteETagValueInResponseHeader(description' etag' dataService.OperationContext.ResponseMessage);                          return WebUtil.GetEmptyStreamWriter();                      }                  }                  else                  {                      Debug.Assert(requestMessage.HttpVerb == HttpVerbs.POST' "Must be POST method");                      ResourceSetWrapper container;                      object actualEntity = GetContainerAndActualEntityInstance(dataService' description' out container);                      ResourceType resourceType = WebUtil.GetNonPrimitiveResourceType(dataService.Provider' actualEntity);                      EntityToSerialize entityToSerialize = EntityToSerialize.Create(actualEntity' resourceType' container' dataService.Provider' requestMessage.AbsoluteServiceUri);                      dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpResponseLocation' entityToSerialize.SerializedKey.AbsoluteEditLink.AbsoluteUri);                      string etagValue = WebUtil.GetETagValue(dataService' actualEntity' resourceType' container);                        // Since we write out the etag header of the media resource for update requests' we cannot write out the resource in the response                      // Hence for media resource' we will not write anything in the response.                      if (!description.Preference.ShouldNotIncludeResponseBody)                      {                          Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 201' "Ensuring that status code is 201 is for insert requests");                          queryResults = DataServiceExecutionProviderWrapper.GetSingleResultFromRequest(description.LastSegmentInfo);                          return WriteSingleElementResponse(description' queryResults' description.SegmentInfos.Count - 1' etagValue' dataService' responseMessage);                      }                      else                      {                          Debug.Assert(                              description.Preference.ShouldNotIncludeResponseBody && description.ResponseVersion >= VersionUtil.Version4Dot0'                              "The preference no-content should be applied which means the response version must be at least 4.0");                          Debug.Assert(dataService.OperationContext.ResponseMessage.StatusCode == 204' "Ensuring that status code is 204");                            // Write the OData-EntityId header from the entity's id.                          dataService.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpODataEntityId' UriUtil.UriToString(entityToSerialize.SerializedKey.Identity));                          WebUtil.WriteETagValueInResponseHeader(description' etagValue' dataService.OperationContext.ResponseMessage);                          return WebUtil.GetEmptyStreamWriter();                      }                  }              }              catch              {                  WebUtil.Dispose(queryResults);                  throw;              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleRequest,The following statement contains a magic number: try              {                  this.EnsureProviderAndConfigForRequest();              }              catch (Exception ex)              {  #if DEBUG                  // We've hit an error' some of the processing pipeline events will not get fired. Setting this flag to skip validation.                  this.ProcessingPipeline.SkipDebugAssert = true;  #endif                  int responseStatusCode = 500;                  if (!CommonUtil.IsCatchableExceptionType(ex))                  {                      throw;                  }                    // if Exception been thrown is DSE' we keep the exception's status code                  // otherwise' the status code is 500.                  DataServiceException dse = ex as DataServiceException;                  if (dse != null)                  {                      responseStatusCode = dse.StatusCode;                  }                    // safe handling of initialization time error                  this.operationContext.ResponseStatusCode = responseStatusCode;                    // The DataServiceConfiguration may not have been initialized here. So' it is not possible to compute the response version based on MPV.                  // Hence' return default DSV                  this.operationContext.ResponseMessage.SetHeader(XmlConstants.HttpODataVersion' XmlConstants.ODataVersion4Dot0 + ";");                  throw;              }
Magic Number,Microsoft.OData.Service,DataService<T>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,HandleBatchRequest,The following statement contains a magic number: this.operationContext.ResponseStatusCode = 202;
Magic Number,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,IncreaseBatchCount,The following statement contains a magic number: if (this.batchElementCount > this.dataService.Configuration.MaxBatchCount)                  {                      this.batchLimitExceeded = true;                      throw new DataServiceException(400' Strings.DataService_BatchExceedMaxBatchCount(this.dataService.Configuration.MaxBatchCount));                  }
Magic Number,Microsoft.OData.Service,BatchDataService,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataService.cs,IncreaseChangeSetCount,The following statement contains a magic number: if (this.changeSetElementCount > this.dataService.Configuration.MaxChangesetCount)                  {                      throw new DataServiceException(400' Strings.DataService_BatchExceedMaxChangeSetCount(this.dataService.Configuration.MaxChangesetCount));                  }
Magic Number,Microsoft.OData.Service,DataServiceException,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceException.cs,CreateForbidden,The following statement contains a magic number: return new DataServiceException(403' Strings.RequestUriProcessor_Forbidden);
Magic Number,Microsoft.OData.Service,DataServiceException,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceException.cs,CreateResourceNotFound,The following statement contains a magic number: return new DataServiceException(404' Strings.RequestUriProcessor_ResourceNotFound(identifier));
Magic Number,Microsoft.OData.Service,DataServiceException,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceException.cs,ResourceNotFoundError,The following statement contains a magic number: return new DataServiceException(404' errorMessage);
Magic Number,Microsoft.OData.Service,DataServiceException,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceException.cs,CreatePreConditionFailedError,The following statement contains a magic number: return new DataServiceException(412' message);
Magic Number,Microsoft.OData.Service,DataServiceException,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceException.cs,CreatePreConditionFailedError,The following statement contains a magic number: return new DataServiceException(412' null' message' null' innerException);
Magic Number,Microsoft.OData.Service,DataServiceException,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceException.cs,CreateBadRequestError,The following statement contains a magic number: return new DataServiceException(400' message);
Magic Number,Microsoft.OData.Service,DataServiceException,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceException.cs,CreateBadRequestError,The following statement contains a magic number: return new DataServiceException(400' null' message' null' innerException);
Magic Number,Microsoft.OData.Service,DataServiceException,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceException.cs,CreateMethodNotAllowed,The following statement contains a magic number: DataServiceException result = new DataServiceException(405' message);
Magic Number,Microsoft.OData.Service,DataServiceException,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\DataServiceException.cs,CreateMethodNotImplemented,The following statement contains a magic number: return new DataServiceException(501' message);
Magic Number,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleBatchOperationError,The following statement contains a magic number: if (requestMessage != null && responseMessage != null)              {                  responseMessage.SetHeader(XmlConstants.HttpODataVersion' handler.responseVersion.ToString(2) + ";");                  requestMessage.ProcessException(handler.exceptionArgs);                    // if ProcessBenignException returns anything' we can safely not write to the stream.                  if (ProcessBenignException(exception' service) != null)                  {                      return;                  }              }
Magic Number,Microsoft.OData.Service,ErrorHandler,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ErrorHandler.cs,HandleBeforeWritingException,The following statement contains a magic number: service.OperationContext.ResponseMessage.SetHeader(XmlConstants.HttpODataVersion' handler.responseVersion.ToString(2) + ";");
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,SelectRequiredMimeType,The following statement contains a magic number: if (!acceptable && !acceptTypesEmpty)              {                  throw Error.HttpHeaderFailure(415' Strings.DataServiceException_UnsupportedMediaType);              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadContentType,The following statement contains a magic number: if (String.IsNullOrEmpty(contentType))              {                  throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_ContentTypeMissing);              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,EncodingFromName,The following statement contains a magic number: try              {                  return Encoding.GetEncoding(name);              }              catch (ArgumentException)              {                  // 400 - Bad Request                  throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_EncodingNotSupported(name));              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,CreateParsingException,The following statement contains a magic number: return Error.HttpHeaderFailure(400' message);
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,MimeTypesFromAcceptHeader,The following statement contains a magic number: while (!SkipWhitespace(text' ref textIndex))              {                  string type;                  string subType;                  ReadMediaTypeAndSubtype(text' ref textIndex' out type' out subType);                    MediaParameter[] parameters = null;                  while (!SkipWhitespace(text' ref textIndex))                  {                      if (text[textIndex] == ''')                      {                          textIndex++;                          break;                      }                        if (text[textIndex] != ';')                      {                          throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_MediaTypeRequiresSemicolonBeforeParameter);                      }                        textIndex++;                      if (SkipWhitespace(text' ref textIndex))                      {                          // ';' should be a leading separator' but we choose to be a                          // bit permissive and allow it as a final delimiter as well.                          break;                      }                        ReadMediaTypeParameter(text' ref textIndex' ref parameters);                  }                    mediaTypes.Add(new MediaType(type' subType' parameters));              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadQualityValue,The following statement contains a magic number: if (textIndex < text.Length && text[textIndex] == '.')              {                  textIndex++;                    int adjustFactor = 1000;                  while (adjustFactor > 1 && textIndex < text.Length)                  {                      char c = text[textIndex];                      int charValue = DigitToInt32(c);                      if (charValue >= 0)                      {                          textIndex++;                          adjustFactor /= 10;                          qualityValue *= 10;                          qualityValue += charValue;                      }                      else                      {                          break;                      }                  }                    qualityValue *= adjustFactor;                  if (qualityValue > 1000)                  {                      // Too high of a value in qvalue.                      throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                  }              }              else              {                  qualityValue *= 1000;              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadQualityValue,The following statement contains a magic number: if (textIndex < text.Length && text[textIndex] == '.')              {                  textIndex++;                    int adjustFactor = 1000;                  while (adjustFactor > 1 && textIndex < text.Length)                  {                      char c = text[textIndex];                      int charValue = DigitToInt32(c);                      if (charValue >= 0)                      {                          textIndex++;                          adjustFactor /= 10;                          qualityValue *= 10;                          qualityValue += charValue;                      }                      else                      {                          break;                      }                  }                    qualityValue *= adjustFactor;                  if (qualityValue > 1000)                  {                      // Too high of a value in qvalue.                      throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                  }              }              else              {                  qualityValue *= 1000;              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadQualityValue,The following statement contains a magic number: if (textIndex < text.Length && text[textIndex] == '.')              {                  textIndex++;                    int adjustFactor = 1000;                  while (adjustFactor > 1 && textIndex < text.Length)                  {                      char c = text[textIndex];                      int charValue = DigitToInt32(c);                      if (charValue >= 0)                      {                          textIndex++;                          adjustFactor /= 10;                          qualityValue *= 10;                          qualityValue += charValue;                      }                      else                      {                          break;                      }                  }                    qualityValue *= adjustFactor;                  if (qualityValue > 1000)                  {                      // Too high of a value in qvalue.                      throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                  }              }              else              {                  qualityValue *= 1000;              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadQualityValue,The following statement contains a magic number: if (textIndex < text.Length && text[textIndex] == '.')              {                  textIndex++;                    int adjustFactor = 1000;                  while (adjustFactor > 1 && textIndex < text.Length)                  {                      char c = text[textIndex];                      int charValue = DigitToInt32(c);                      if (charValue >= 0)                      {                          textIndex++;                          adjustFactor /= 10;                          qualityValue *= 10;                          qualityValue += charValue;                      }                      else                      {                          break;                      }                  }                    qualityValue *= adjustFactor;                  if (qualityValue > 1000)                  {                      // Too high of a value in qvalue.                      throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                  }              }              else              {                  qualityValue *= 1000;              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadQualityValue,The following statement contains a magic number: if (textIndex < text.Length && text[textIndex] == '.')              {                  textIndex++;                    int adjustFactor = 1000;                  while (adjustFactor > 1 && textIndex < text.Length)                  {                      char c = text[textIndex];                      int charValue = DigitToInt32(c);                      if (charValue >= 0)                      {                          textIndex++;                          adjustFactor /= 10;                          qualityValue *= 10;                          qualityValue += charValue;                      }                      else                      {                          break;                      }                  }                    qualityValue *= adjustFactor;                  if (qualityValue > 1000)                  {                      // Too high of a value in qvalue.                      throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                  }              }              else              {                  qualityValue *= 1000;              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,AcceptCharsetParts,The following statement contains a magic number: while (headerIndex < headerValue.Length)              {                  if (SkipWhitespace(headerValue' ref headerIndex))                  {                      yield break;                  }                    if (headerValue[headerIndex] == ''')                  {                      commaRequired = false;                      headerIndex++;                      continue;                  }                    if (commaRequired)                  {                      // Comma missing between charset elements.                      throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                  }                    headerStart = headerIndex;                  headerNameEnd = headerStart;                    bool endReached = ReadToken(headerValue' ref headerNameEnd);                  if (headerNameEnd == headerIndex)                  {                      // Invalid charset name.                      throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                  }                    if (endReached)                  {                      qualityValue = 1000;                      headerEnd = headerNameEnd;                  }                  else                  {                      char afterNameChar = headerValue[headerNameEnd];                      if (IsHttpSeparator(afterNameChar))                      {                          if (afterNameChar == ';')                          {                              if (ReadLiteral(headerValue' headerNameEnd' ";q="))                              {                                  // Unexpected end of qvalue.                                  throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                              }                                headerEnd = headerNameEnd + 3;                              ReadQualityValue(headerValue' ref headerEnd' out qualityValue);                          }                          else                          {                              qualityValue = 1000;                              headerEnd = headerNameEnd;                          }                      }                      else                      {                          // Invalid separator character.                          throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                      }                  }                    yield return new CharsetPart(headerValue.Substring(headerStart' headerNameEnd - headerStart)' qualityValue);                    // Prepare for next charset; we require at least one comma before we process it.                  commaRequired = true;                  headerIndex = headerEnd;              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,AcceptCharsetParts,The following statement contains a magic number: while (headerIndex < headerValue.Length)              {                  if (SkipWhitespace(headerValue' ref headerIndex))                  {                      yield break;                  }                    if (headerValue[headerIndex] == ''')                  {                      commaRequired = false;                      headerIndex++;                      continue;                  }                    if (commaRequired)                  {                      // Comma missing between charset elements.                      throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                  }                    headerStart = headerIndex;                  headerNameEnd = headerStart;                    bool endReached = ReadToken(headerValue' ref headerNameEnd);                  if (headerNameEnd == headerIndex)                  {                      // Invalid charset name.                      throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                  }                    if (endReached)                  {                      qualityValue = 1000;                      headerEnd = headerNameEnd;                  }                  else                  {                      char afterNameChar = headerValue[headerNameEnd];                      if (IsHttpSeparator(afterNameChar))                      {                          if (afterNameChar == ';')                          {                              if (ReadLiteral(headerValue' headerNameEnd' ";q="))                              {                                  // Unexpected end of qvalue.                                  throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                              }                                headerEnd = headerNameEnd + 3;                              ReadQualityValue(headerValue' ref headerEnd' out qualityValue);                          }                          else                          {                              qualityValue = 1000;                              headerEnd = headerNameEnd;                          }                      }                      else                      {                          // Invalid separator character.                          throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                      }                  }                    yield return new CharsetPart(headerValue.Substring(headerStart' headerNameEnd - headerStart)' qualityValue);                    // Prepare for next charset; we require at least one comma before we process it.                  commaRequired = true;                  headerIndex = headerEnd;              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,AcceptCharsetParts,The following statement contains a magic number: while (headerIndex < headerValue.Length)              {                  if (SkipWhitespace(headerValue' ref headerIndex))                  {                      yield break;                  }                    if (headerValue[headerIndex] == ''')                  {                      commaRequired = false;                      headerIndex++;                      continue;                  }                    if (commaRequired)                  {                      // Comma missing between charset elements.                      throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                  }                    headerStart = headerIndex;                  headerNameEnd = headerStart;                    bool endReached = ReadToken(headerValue' ref headerNameEnd);                  if (headerNameEnd == headerIndex)                  {                      // Invalid charset name.                      throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                  }                    if (endReached)                  {                      qualityValue = 1000;                      headerEnd = headerNameEnd;                  }                  else                  {                      char afterNameChar = headerValue[headerNameEnd];                      if (IsHttpSeparator(afterNameChar))                      {                          if (afterNameChar == ';')                          {                              if (ReadLiteral(headerValue' headerNameEnd' ";q="))                              {                                  // Unexpected end of qvalue.                                  throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                              }                                headerEnd = headerNameEnd + 3;                              ReadQualityValue(headerValue' ref headerEnd' out qualityValue);                          }                          else                          {                              qualityValue = 1000;                              headerEnd = headerNameEnd;                          }                      }                      else                      {                          // Invalid separator character.                          throw CreateParsingException(Strings.HttpContextServiceHost_MalformedHeaderValue);                      }                  }                    yield return new CharsetPart(headerValue.Substring(headerStart' headerNameEnd - headerStart)' qualityValue);                    // Prepare for next charset; we require at least one comma before we process it.                  commaRequired = true;                  headerIndex = headerEnd;              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadMediaTypeAndSubtype,The following statement contains a magic number: if (ReadToken(text' ref textIndex))              {                  throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_MediaTypeUnspecified);              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadMediaTypeAndSubtype,The following statement contains a magic number: if (text[textIndex] != '/')              {                  throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_MediaTypeRequiresSlash);              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadMediaTypeAndSubtype,The following statement contains a magic number: if (textIndex == subTypeStart)              {                  throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_MediaTypeRequiresSubType);              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadMediaType,The following statement contains a magic number: while (!SkipWhitespace(text' ref textIndex))              {                  if (text[textIndex] != ';')                  {                      throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_MediaTypeRequiresSemicolonBeforeParameter);                  }                    textIndex++;                  if (SkipWhitespace(text' ref textIndex))                  {                      // ';' should be a leading separator' but we choose to be a                      // bit permissive and allow it as a final delimiter as well.                      break;                  }                    ReadMediaTypeParameter(text' ref textIndex' ref parameters);              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadMediaTypeParameter,The following statement contains a magic number: if (ReadToken(text' ref textIndex))              {                  throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_MediaTypeMissingValue);              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadMediaTypeParameter,The following statement contains a magic number: if (text[textIndex] != '=')              {                  throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_MediaTypeMissingValue);              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadQuotedParameterValue,The following statement contains a magic number: while (textIndex < headerText.Length)              {                  char currentChar = headerText[textIndex];                    if (currentChar == '\\' || currentChar == '\"')                  {                      if (!valueIsQuoted)                      {                          throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_EscapeCharWithoutQuotes(parameterName));                      }                        textIndex++;                        // End of quoted parameter value.                      if (currentChar == '\"')                      {                          valueIsQuoted = false;                          break;                      }                        if (textIndex >= headerText.Length)                      {                          throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_EscapeCharAtEnd(parameterName));                      }                        currentChar = headerText[textIndex];                  }                  else                  if (!IsHttpToken(currentChar))                  {                      // If the given character is special' we stop processing.                      break;                  }                    parameterValue.Append(currentChar);                  textIndex++;              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadQuotedParameterValue,The following statement contains a magic number: while (textIndex < headerText.Length)              {                  char currentChar = headerText[textIndex];                    if (currentChar == '\\' || currentChar == '\"')                  {                      if (!valueIsQuoted)                      {                          throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_EscapeCharWithoutQuotes(parameterName));                      }                        textIndex++;                        // End of quoted parameter value.                      if (currentChar == '\"')                      {                          valueIsQuoted = false;                          break;                      }                        if (textIndex >= headerText.Length)                      {                          throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_EscapeCharAtEnd(parameterName));                      }                        currentChar = headerText[textIndex];                  }                  else                  if (!IsHttpToken(currentChar))                  {                      // If the given character is special' we stop processing.                      break;                  }                    parameterValue.Append(currentChar);                  textIndex++;              }
Magic Number,Microsoft.OData.Service,ContentTypeUtil,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,ReadQuotedParameterValue,The following statement contains a magic number: if (valueIsQuoted)              {                  throw Error.HttpHeaderFailure(400' Strings.HttpProcessUtility_ClosingQuoteNotFound(parameterName));              }
Magic Number,Microsoft.OData.Service,CharsetPart,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,CharsetPart,The following statement contains a magic number: Debug.Assert(0 <= quality && quality <= 1000' "0 <= quality && quality <= 1000");
Magic Number,Microsoft.OData.Service,MediaType,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,GetMatchingParts,The following statement contains a magic number: if (candidate != null)                  {                      if (this.type == "*")                      {                          result = 0;                      }                      else                      {                          if (candidate.subType != null)                          {                              string candidateType = candidate.type;                              if (CompareMimeType(this.type' candidateType))                              {                                  if (this.subType == "*")                                  {                                      result = 1;                                  }                                  else                                  {                                      string candidateSubType = candidate.subType;                                      if (CompareMimeType(this.subType' candidateSubType))                                      {                                          if (String.Equals(this.GetParameterValue(XmlConstants.MimeODataParameterName)' candidate.GetParameterValue(XmlConstants.MimeODataParameterName)' StringComparison.OrdinalIgnoreCase))                                          {                                              result = 2;                                          }                                      }                                  }                              }                          }                      }                  }
Magic Number,Microsoft.OData.Service,MediaType,C:\repos\OData_odata.net\src\Microsoft.OData.Client\ContentTypeUtil.cs,SelectQualityValue,The following statement contains a magic number: if (qvalueText == null)                  {                      return 1000;                  }
Magic Number,Microsoft.OData.Service,AstoriaRequestMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaRequestMessage.cs,GetHeader,The following statement contains a magic number: switch (headerName)              {                  case XmlConstants.HttpContentType:                      return this.ContentType;                  case XmlConstants.HttpODataVersion:                      Debug.Assert(this.requestVersionString != null' "this.requestVersionString != null");                      return this.requestVersionString;                  case XmlConstants.HttpRequestIfMatch:                      return this.requestIfMatch;                  case XmlConstants.HttpRequestIfNoneMatch:                      return this.requestIfNoneMatch;                  case XmlConstants.HttpRequestAcceptCharset:                      return this.requestAcceptCharSet;                  case XmlConstants.HttpPrefer:                      return this.GetCustomHeaderIfAvailable(headerName);                  default:                      Debug.Assert(false' "Invalid header name encountered: " + headerName);                      throw new DataServiceException(500' Strings.DataServiceException_GeneralError);              }
Magic Number,Microsoft.OData.Service,AstoriaRequestMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaRequestMessage.cs,SetHeader,The following statement contains a magic number: throw new DataServiceException(500' Strings.DataServiceException_GeneralError);
Magic Number,Microsoft.OData.Service,AstoriaRequestMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaRequestMessage.cs,GetAcceptableContentTypes,The following statement contains a magic number: Version mdsv = this.RequestMaxVersion ?? new Version(4' 0);
Magic Number,Microsoft.OData.Service,AstoriaRequestMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaRequestMessage.cs,InitializeRequestVersionHeaders,The following statement contains a magic number: if (this.requestVersion == null)              {                  // In request headers' if the OData-Version header is not specified and OData-MaxVersion is specified'                  // we should ideally set the OData-Version header to whatever the value was specified in OData-MaxVersion                  // header has.                  if (this.RequestMaxVersion != null)                  {                      // set the OData-Version to minimum of OData-MaxVersion and ProtocolVersion.                      this.RequestVersion = (this.RequestMaxVersion < maxProtocolVersion) ? this.RequestMaxVersion : maxProtocolVersion;                  }                  else                  {                      // If both request DSV and request MaxDSV is not specified' then set the request DSV to the MPV                      this.RequestVersion = maxProtocolVersion;                  }                    this.requestVersionString = this.RequestVersion.ToString(2);              }              else              {                                  if (this.RequestVersion > maxRequestVersionAllowed)                  {                      throw DataServiceException.CreateBadRequestError(Strings.DataService_RequestVersionMustBeLessThanMPV(this.RequestVersion' maxProtocolVersion));                  }                    // Verify that the request DSV is a known version number.                  if (!VersionUtil.IsKnownRequestVersion(this.RequestVersion))                  {                      string message = Strings.DataService_InvalidRequestVersion(                          this.RequestVersion.ToString(2)'                          KnownODataVersionsToString(maxRequestVersionAllowed));                      throw DataServiceException.CreateBadRequestError(message);                  }              }
Magic Number,Microsoft.OData.Service,AstoriaRequestMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaRequestMessage.cs,InitializeRequestVersionHeaders,The following statement contains a magic number: if (this.requestVersion == null)              {                  // In request headers' if the OData-Version header is not specified and OData-MaxVersion is specified'                  // we should ideally set the OData-Version header to whatever the value was specified in OData-MaxVersion                  // header has.                  if (this.RequestMaxVersion != null)                  {                      // set the OData-Version to minimum of OData-MaxVersion and ProtocolVersion.                      this.RequestVersion = (this.RequestMaxVersion < maxProtocolVersion) ? this.RequestMaxVersion : maxProtocolVersion;                  }                  else                  {                      // If both request DSV and request MaxDSV is not specified' then set the request DSV to the MPV                      this.RequestVersion = maxProtocolVersion;                  }                    this.requestVersionString = this.RequestVersion.ToString(2);              }              else              {                                  if (this.RequestVersion > maxRequestVersionAllowed)                  {                      throw DataServiceException.CreateBadRequestError(Strings.DataService_RequestVersionMustBeLessThanMPV(this.RequestVersion' maxProtocolVersion));                  }                    // Verify that the request DSV is a known version number.                  if (!VersionUtil.IsKnownRequestVersion(this.RequestVersion))                  {                      string message = Strings.DataService_InvalidRequestVersion(                          this.RequestVersion.ToString(2)'                          KnownODataVersionsToString(maxRequestVersionAllowed));                      throw DataServiceException.CreateBadRequestError(message);                  }              }
Magic Number,Microsoft.OData.Service,AstoriaRequestMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaRequestMessage.cs,InitializeRequestVersionHeaders,The following statement contains a magic number: if (this.RequestMaxVersion == null)              {                  this.RequestMaxVersion = maxProtocolVersion;              }              else if (this.RequestMaxVersion < VersionUtil.DataServiceDefaultResponseVersion)              {                  // We need to make sure the MaxDSV is at least 1.0. This was the V1 behavior.                  // Verified that this was checked both in batch and non-batch cases.                  string message = Strings.DataService_MaxDSVTooLow(                      this.RequestMaxVersion.ToString(2)'                      VersionUtil.DataServiceDefaultResponseVersion.Major'                      VersionUtil.DataServiceDefaultResponseVersion.Minor);                  throw DataServiceException.CreateBadRequestError(message);              }
Magic Number,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,VerifyAndRaiseResponseVersion,The following statement contains a magic number: if (this.requestMaxVersion < this.ResponseVersion)              {                  string message = Strings.DataService_MaxDSVTooLow(                      this.requestMaxVersion.ToString(2)'                      this.ResponseVersion.Major'                      this.ResponseVersion.Minor);                  throw DataServiceException.CreateBadRequestError(message);              }
Magic Number,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,InferContainerNameFromSegments,The following statement contains a magic number: if (segmentInfos.Count < 2)              {                  return null;              }
Magic Number,Microsoft.OData.Service,RequestDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestDescription.cs,InferContainerNameFromSegments,The following statement contains a magic number: return segmentInfos[segmentInfos.Count - 2].Identifier;
Magic Number,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GenerateQueryResult,The following statement contains a magic number: if (this.description.CountOption == RequestQueryCountOption.CountSegment)              {                  // set query result to Count                  this.queryExpression = this.queryExpression.QueryableLongCount();              }              else if (this.rootProjectionNode != null)              {  #pragma warning disable 618 // Disable "obsolete" warning for the IExpandProvider interface. Used for backwards compatibilty.                  IExpandProvider expandProvider = this.service.Provider.GetService<IExpandProvider>();  #pragma warning restore 618                    if (expandProvider != null)                  {                      // If top level result is paged' then we can not perform the operation since that would require                      // passing in the ordering expressions for $skiptoken generation for top level results which                      // the IExpandProvider interface does not support and thus we would get wrong results                      if (this.IsStandardPaged)                      {                          throw new DataServiceException(500' Strings.DataService_SDP_TopLevelPagedResultWithOldExpandProvider);                      }                        // If there's projection we can't perform the operation since that would require                      // passing the projection info into the IExpandProvider' which it doesn't support                      // and thus would not perform the projection.                      if (this.rootProjectionNode.ProjectionsSpecified)                      {                          throw new DataServiceException(500' Strings.DataService_Projections_ProjectionsWithOldExpandProvider);                      }                        if (this.rootProjectionNode.ExpansionOnDerivedTypesSpecified)                      {                          throw new DataServiceException(500' Strings.DataService_DerivedExpansions_OldExpandProvider);                      }                        // V1 behaviour of expand in this case' although this is semantically incorrect' since we are doing                      // a select after orderby and skip top' which could mess up the results' assuming here that count                      // has already been processed                      this.ProcessOrderBy();                      this.ProcessSkipAndTop();                      this.queryExpression = Expression.Call(                          Expression.Constant(expandProvider)'                          RequestQueryProcessor.ApplyExpansionsMethodInfo'                          this.queryExpression'                          Expression.Constant(this.rootProjectionNode.ExpandPaths));                        // We need to mark the ExpandPaths as "possibly modified" and make serializer use those instead.                      this.rootProjectionNode.UseExpandPathsForSerialization = true;                  }                  else                  {                      IProjectionProvider projectionProvider = this.service.Provider.ProjectionProvider;                        // We already have the parameter information                      // * Ordering expressions through ObtainOrderingExpressions                      // * Skip & Top through ObtainSkipTopCounts                      if (projectionProvider == null)                      {                          Debug.Assert(!this.service.Provider.HasReflectionOrEFProviderQueryBehavior' "Reflection and EF Providers should implement the IProjectionProvider interface.");                            // We are to run a query against IDSQP. Since the IProjectionProvider interface is not public                          //   the provider will have to be able to handle queries generated by our BasicExpandProvider                          //   so we should make only minimalistic assumptions about the provider's abilities.                          // In here we will assume that:                          //   - the provider doesn't expand on demand' that is we need to generate projections for all expansions in the query                          //   - the provider requires correct casting to "System.Object" when we assign a value to a property of type "System.Object"                          // A side effect of these assumptions is that if the provider just propagates the calls (with small modifications) to Linq to Objects                          //   the query should just work (nice property' as this might be rather common).                          projectionProvider = new BasicExpandProvider(this.service.Provider' false' true);                      }                        this.queryExpression = Expression.Call(                          null'                          DataServiceExecutionProviderMethods.ApplyProjectionsMethodInfo'                          Expression.Constant(projectionProvider' typeof(object))'                          this.queryExpression'                          Expression.Constant(this.rootProjectionNode' typeof(object)));                  }              }              else              {                  // Special case where although there were expand expressions' they were ignored because they did not refer to entity sets                  if (!String.IsNullOrEmpty(this.service.OperationContext.RequestMessage.GetQueryStringItem(XmlConstants.HttpQueryStringExpand)))                  {                      this.ProjectSkipTokenForNonExpand();                      this.ProcessOrderBy();                      this.ProcessSkipAndTop();                  }              }
Magic Number,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GenerateQueryResult,The following statement contains a magic number: if (this.description.CountOption == RequestQueryCountOption.CountSegment)              {                  // set query result to Count                  this.queryExpression = this.queryExpression.QueryableLongCount();              }              else if (this.rootProjectionNode != null)              {  #pragma warning disable 618 // Disable "obsolete" warning for the IExpandProvider interface. Used for backwards compatibilty.                  IExpandProvider expandProvider = this.service.Provider.GetService<IExpandProvider>();  #pragma warning restore 618                    if (expandProvider != null)                  {                      // If top level result is paged' then we can not perform the operation since that would require                      // passing in the ordering expressions for $skiptoken generation for top level results which                      // the IExpandProvider interface does not support and thus we would get wrong results                      if (this.IsStandardPaged)                      {                          throw new DataServiceException(500' Strings.DataService_SDP_TopLevelPagedResultWithOldExpandProvider);                      }                        // If there's projection we can't perform the operation since that would require                      // passing the projection info into the IExpandProvider' which it doesn't support                      // and thus would not perform the projection.                      if (this.rootProjectionNode.ProjectionsSpecified)                      {                          throw new DataServiceException(500' Strings.DataService_Projections_ProjectionsWithOldExpandProvider);                      }                        if (this.rootProjectionNode.ExpansionOnDerivedTypesSpecified)                      {                          throw new DataServiceException(500' Strings.DataService_DerivedExpansions_OldExpandProvider);                      }                        // V1 behaviour of expand in this case' although this is semantically incorrect' since we are doing                      // a select after orderby and skip top' which could mess up the results' assuming here that count                      // has already been processed                      this.ProcessOrderBy();                      this.ProcessSkipAndTop();                      this.queryExpression = Expression.Call(                          Expression.Constant(expandProvider)'                          RequestQueryProcessor.ApplyExpansionsMethodInfo'                          this.queryExpression'                          Expression.Constant(this.rootProjectionNode.ExpandPaths));                        // We need to mark the ExpandPaths as "possibly modified" and make serializer use those instead.                      this.rootProjectionNode.UseExpandPathsForSerialization = true;                  }                  else                  {                      IProjectionProvider projectionProvider = this.service.Provider.ProjectionProvider;                        // We already have the parameter information                      // * Ordering expressions through ObtainOrderingExpressions                      // * Skip & Top through ObtainSkipTopCounts                      if (projectionProvider == null)                      {                          Debug.Assert(!this.service.Provider.HasReflectionOrEFProviderQueryBehavior' "Reflection and EF Providers should implement the IProjectionProvider interface.");                            // We are to run a query against IDSQP. Since the IProjectionProvider interface is not public                          //   the provider will have to be able to handle queries generated by our BasicExpandProvider                          //   so we should make only minimalistic assumptions about the provider's abilities.                          // In here we will assume that:                          //   - the provider doesn't expand on demand' that is we need to generate projections for all expansions in the query                          //   - the provider requires correct casting to "System.Object" when we assign a value to a property of type "System.Object"                          // A side effect of these assumptions is that if the provider just propagates the calls (with small modifications) to Linq to Objects                          //   the query should just work (nice property' as this might be rather common).                          projectionProvider = new BasicExpandProvider(this.service.Provider' false' true);                      }                        this.queryExpression = Expression.Call(                          null'                          DataServiceExecutionProviderMethods.ApplyProjectionsMethodInfo'                          Expression.Constant(projectionProvider' typeof(object))'                          this.queryExpression'                          Expression.Constant(this.rootProjectionNode' typeof(object)));                  }              }              else              {                  // Special case where although there were expand expressions' they were ignored because they did not refer to entity sets                  if (!String.IsNullOrEmpty(this.service.OperationContext.RequestMessage.GetQueryStringItem(XmlConstants.HttpQueryStringExpand)))                  {                      this.ProjectSkipTokenForNonExpand();                      this.ProcessOrderBy();                      this.ProcessSkipAndTop();                  }              }
Magic Number,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GenerateQueryResult,The following statement contains a magic number: if (this.description.CountOption == RequestQueryCountOption.CountSegment)              {                  // set query result to Count                  this.queryExpression = this.queryExpression.QueryableLongCount();              }              else if (this.rootProjectionNode != null)              {  #pragma warning disable 618 // Disable "obsolete" warning for the IExpandProvider interface. Used for backwards compatibilty.                  IExpandProvider expandProvider = this.service.Provider.GetService<IExpandProvider>();  #pragma warning restore 618                    if (expandProvider != null)                  {                      // If top level result is paged' then we can not perform the operation since that would require                      // passing in the ordering expressions for $skiptoken generation for top level results which                      // the IExpandProvider interface does not support and thus we would get wrong results                      if (this.IsStandardPaged)                      {                          throw new DataServiceException(500' Strings.DataService_SDP_TopLevelPagedResultWithOldExpandProvider);                      }                        // If there's projection we can't perform the operation since that would require                      // passing the projection info into the IExpandProvider' which it doesn't support                      // and thus would not perform the projection.                      if (this.rootProjectionNode.ProjectionsSpecified)                      {                          throw new DataServiceException(500' Strings.DataService_Projections_ProjectionsWithOldExpandProvider);                      }                        if (this.rootProjectionNode.ExpansionOnDerivedTypesSpecified)                      {                          throw new DataServiceException(500' Strings.DataService_DerivedExpansions_OldExpandProvider);                      }                        // V1 behaviour of expand in this case' although this is semantically incorrect' since we are doing                      // a select after orderby and skip top' which could mess up the results' assuming here that count                      // has already been processed                      this.ProcessOrderBy();                      this.ProcessSkipAndTop();                      this.queryExpression = Expression.Call(                          Expression.Constant(expandProvider)'                          RequestQueryProcessor.ApplyExpansionsMethodInfo'                          this.queryExpression'                          Expression.Constant(this.rootProjectionNode.ExpandPaths));                        // We need to mark the ExpandPaths as "possibly modified" and make serializer use those instead.                      this.rootProjectionNode.UseExpandPathsForSerialization = true;                  }                  else                  {                      IProjectionProvider projectionProvider = this.service.Provider.ProjectionProvider;                        // We already have the parameter information                      // * Ordering expressions through ObtainOrderingExpressions                      // * Skip & Top through ObtainSkipTopCounts                      if (projectionProvider == null)                      {                          Debug.Assert(!this.service.Provider.HasReflectionOrEFProviderQueryBehavior' "Reflection and EF Providers should implement the IProjectionProvider interface.");                            // We are to run a query against IDSQP. Since the IProjectionProvider interface is not public                          //   the provider will have to be able to handle queries generated by our BasicExpandProvider                          //   so we should make only minimalistic assumptions about the provider's abilities.                          // In here we will assume that:                          //   - the provider doesn't expand on demand' that is we need to generate projections for all expansions in the query                          //   - the provider requires correct casting to "System.Object" when we assign a value to a property of type "System.Object"                          // A side effect of these assumptions is that if the provider just propagates the calls (with small modifications) to Linq to Objects                          //   the query should just work (nice property' as this might be rather common).                          projectionProvider = new BasicExpandProvider(this.service.Provider' false' true);                      }                        this.queryExpression = Expression.Call(                          null'                          DataServiceExecutionProviderMethods.ApplyProjectionsMethodInfo'                          Expression.Constant(projectionProvider' typeof(object))'                          this.queryExpression'                          Expression.Constant(this.rootProjectionNode' typeof(object)));                  }              }              else              {                  // Special case where although there were expand expressions' they were ignored because they did not refer to entity sets                  if (!String.IsNullOrEmpty(this.service.OperationContext.RequestMessage.GetQueryStringItem(XmlConstants.HttpQueryStringExpand)))                  {                      this.ProjectSkipTokenForNonExpand();                      this.ProcessOrderBy();                      this.ProcessSkipAndTop();                  }              }
Magic Number,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ProjectSkipTokenForNonExpand,The following statement contains a magic number: if (this.IsStandardPaged && this.description.SkipTokenProperties == null)              {                  Type queryElementType = this.queryExpression.ElementType();                    ParameterExpression expandParameter = Expression.Parameter(queryElementType' "p");                    StringBuilder skipTokenDescription = new StringBuilder();                    Type skipTokenWrapperType = this.GetSkipTokenWrapperTypeAndDescription(skipTokenDescription);                    MemberBinding[] skipTokenBindings = this.GetSkipTokenBindings(skipTokenWrapperType' skipTokenDescription.ToString()' expandParameter);                    Type resultWrapperType = WebUtil.GetWrapperType(new Type[] { queryElementType' skipTokenWrapperType }' null);                    MemberBinding[] resultWrapperBindings = new MemberBinding[3];                  resultWrapperBindings[0] = Expression.Bind(resultWrapperType.GetProperty("ExpandedElement")' expandParameter);                  resultWrapperBindings[1] = Expression.Bind(resultWrapperType.GetProperty("Description")' Expression.Constant(XmlConstants.HttpQueryStringSkipToken));                  resultWrapperBindings[2] = Expression.Bind(                                                  resultWrapperType.GetProperty("ProjectedProperty0")'                                                  Expression.MemberInit(Expression.New(skipTokenWrapperType)' skipTokenBindings));                    Expression resultBody = Expression.MemberInit(Expression.New(resultWrapperType)' resultWrapperBindings);                  LambdaExpression selector = Expression.Lambda(resultBody' expandParameter);                    Debug.Assert(resultWrapperType == selector.Body.Type' "resultWrapperType == selector.Body.Type");                  this.queryExpression = this.queryExpression.QueryableSelect(selector);                    // Updates the ordering expressions with the ones that take the result wrapper type as parameter                   // and dereference the ExpandedElement property                  this.UpdateOrderingInfoWithSkipTokenWrapper(resultWrapperType);              }
Magic Number,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,ProjectSkipTokenForNonExpand,The following statement contains a magic number: if (this.IsStandardPaged && this.description.SkipTokenProperties == null)              {                  Type queryElementType = this.queryExpression.ElementType();                    ParameterExpression expandParameter = Expression.Parameter(queryElementType' "p");                    StringBuilder skipTokenDescription = new StringBuilder();                    Type skipTokenWrapperType = this.GetSkipTokenWrapperTypeAndDescription(skipTokenDescription);                    MemberBinding[] skipTokenBindings = this.GetSkipTokenBindings(skipTokenWrapperType' skipTokenDescription.ToString()' expandParameter);                    Type resultWrapperType = WebUtil.GetWrapperType(new Type[] { queryElementType' skipTokenWrapperType }' null);                    MemberBinding[] resultWrapperBindings = new MemberBinding[3];                  resultWrapperBindings[0] = Expression.Bind(resultWrapperType.GetProperty("ExpandedElement")' expandParameter);                  resultWrapperBindings[1] = Expression.Bind(resultWrapperType.GetProperty("Description")' Expression.Constant(XmlConstants.HttpQueryStringSkipToken));                  resultWrapperBindings[2] = Expression.Bind(                                                  resultWrapperType.GetProperty("ProjectedProperty0")'                                                  Expression.MemberInit(Expression.New(skipTokenWrapperType)' skipTokenBindings));                    Expression resultBody = Expression.MemberInit(Expression.New(resultWrapperType)' resultWrapperBindings);                  LambdaExpression selector = Expression.Lambda(resultBody' expandParameter);                    Debug.Assert(resultWrapperType == selector.Body.Type' "resultWrapperType == selector.Body.Type");                  this.queryExpression = this.queryExpression.QueryableSelect(selector);                    // Updates the ordering expressions with the ones that take the result wrapper type as parameter                   // and dereference the ExpandedElement property                  this.UpdateOrderingInfoWithSkipTokenWrapper(resultWrapperType);              }
Magic Number,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GetSkipTokenBindings,The following statement contains a magic number: MemberBinding[] skipTokenBindings = new MemberBinding[this.topLevelOrderingInfo.OrderingExpressions.Count + 2];
Magic Number,Microsoft.OData.Service,RequestQueryProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestQueryProcessor.cs,GetSkipTokenBindings,The following statement contains a magic number: foreach (var ordering in this.topLevelOrderingInfo.OrderingExpressions)              {                  LambdaExpression sourceLambda = (LambdaExpression)ordering.Expression;                  Expression source = ParameterReplacerVisitor.Replace(sourceLambda.Body' sourceLambda.Parameters[0]' expandParameter);                  MemberInfo member = skipTokenWrapperType.GetProperty("ProjectedProperty" + i.ToString(System.Globalization.CultureInfo.InvariantCulture));                  skipTokenBindings[i + 2] = Expression.Bind(member' source);                  i++;              }
Magic Number,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,GetResultUri,The following statement contains a magic number: if (resultBuilder.Path.EndsWith("()"' StringComparison.Ordinal))              {                  resultBuilder.Path = resultBuilder.Path.Substring(0' resultBuilder.Path.Length - 2);              }
Magic Number,Microsoft.OData.Service,RequestUriProcessor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\RequestUriProcessor.cs,ComposeExpressionForSegments,The following statement contains a magic number: if (lastSegment.Operation != null && lastSegment.Operation.Kind == OperationKind.Action)              {                  for (int i = segments.Count - 2; i > -1; i--)                  {                      // Since we don't check rights for type name segments' find the segment before                      // the service action that is not a type name segment.                      if (!segments[i].IsTypeIdentifierSegment)                      {                          segmentIdxToSkipRightsCheck = i;                          break;                      }                  }              }
Magic Number,Microsoft.OData.Service,ResponseBodyWriter,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\ResponseBodyWriter.cs,ResponseBodyWriter,The following statement contains a magic number: if (this.requestDescription.TargetKind == RequestTargetKind.MediaResource)              {                  Debug.Assert(this.PayloadKind == ODataPayloadKind.BinaryValue' "payloadKind == ODataPayloadKind.BinaryValue");                    // Note that GetReadStream will set the ResponseETag before it returns                  this.mediaResourceStream = service.StreamProvider.GetReadStream(                      this.queryResults.Current'                      this.requestDescription.StreamProperty'                      this.service.OperationContext);              }              else if (this.PayloadKind != ODataPayloadKind.BinaryValue)              {                  IEdmModel model;                  if (this.PayloadKind == ODataPayloadKind.MetadataDocument)                  {                      model = MetadataSerializer.PrepareModelForSerialization(this.service.Provider' this.service.Configuration);                  }                  else                  {                      model = this.GetModelFromService();                  }                    // Create the message writer using which the response needs to be written.                  this.messageWriterBuilder = MessageWriterBuilder.ForNormalRequest(                      this.service'                      this.requestDescription'                      this.actualResponseMessageWhoseHeadersMayBeOverridden'                      model);                                    this.messageWriter = this.messageWriterBuilder.CreateWriter();                    try                  {                      // Make sure all the headers are written before the method returns.                      this.contentFormat = ODataUtils.SetHeadersForPayload(this.messageWriter' this.PayloadKind);                  }                  catch (ODataContentTypeException contentTypeException)                  {                      throw new DataServiceException(415' null' Strings.DataServiceException_UnsupportedMediaType' null' contentTypeException);                  }                    Debug.Assert(requestDescription.ResponseFormat != null' "Response format should already have been determined.");                  Debug.Assert(ReferenceEquals(this.contentFormat' requestDescription.ResponseFormat.Format)' "Response format in request description did not match format when writing.");                    if (this.PayloadKind == ODataPayloadKind.Value && !String.IsNullOrEmpty(this.requestDescription.MimeType))                  {                      this.actualResponseMessageWhoseHeadersMayBeOverridden.SetHeader(XmlConstants.HttpContentType' this.requestDescription.MimeType);                  }                    // EPM is currently removed' but this doesn't seem to be used for EPM only. The old comment was saying:                  // In astoria' there is a bug in V1/V2 that while computing response version' we did not take                  // epm into account. Hence while creating the writer' we need to pass the RequestDescription.ActualResponseVersion                  // so that ODataLib can do the correct payload validation. But we need to write the response version without                  // the epm into the response headers because of backward-compat issue. Hence over-writing the response version                  // header with the wrong version value.                  string responseVersion = this.requestDescription.ResponseVersion.ToString() + ";";                  this.actualResponseMessageWhoseHeadersMayBeOverridden.SetHeader(XmlConstants.HttpODataVersion' responseVersion);              }
Magic Number,Microsoft.OData.Service,UpdateTracker,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\UpdateTracker.cs,FireNotification,The following statement contains a magic number: if (methods != null)              {                  object[] parameters = new object[2];                  parameters[0] = target;                  parameters[1] = action;                  for (int i = 0; i < methods.Length; i++)                  {                      try                      {                          methods[i].Invoke(service.Instance' parameters);                      }                      catch (TargetInvocationException exception)                      {                          ErrorHandler.HandleTargetInvocationException(exception);                          throw;                      }                  }              }
Magic Number,Microsoft.OData.Service,UpdateTracker,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\UpdateTracker.cs,FireNotifications,The following statement contains a magic number: object[] parameters = new object[2];
Magic Number,Microsoft.OData.Service,VersionUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\VersionUtil.cs,CheckRequestVersion,The following statement contains a magic number: if (actualRequestVersion < requiredRequestVersion)              {                  string message = Strings.DataService_DSVTooLow(                      actualRequestVersion.ToString(2)'                      requiredRequestVersion.Major'                      requiredRequestVersion.Minor);                  throw DataServiceException.CreateBadRequestError(message);              }
Magic Number,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,CopyStream,The following statement contains a magic number: const int DefaultBufferSize = 65536;
Magic Number,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,GetNonPrimitiveResourceType,The following statement contains a magic number: if (resourceType == null)              {                  CollectionPropertyValueEnumerable collectionValueEnumerable = obj as CollectionPropertyValueEnumerable;                  if (collectionValueEnumerable != null)                  {                      return collectionValueEnumerable.ResourceType;                  }                    throw new DataServiceException(500' Strings.BadProvider_InvalidTypeSpecified(obj.GetType().FullName));              }
Magic Number,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,IsETagValueValid,The following statement contains a magic number: if (etag.StartsWith(XmlConstants.HttpWeakETagPrefix' StringComparison.Ordinal) && etag[etag.Length - 1] == '"')              {                  etagValueStartIndex = 3;              }              else if (!allowStrongEtag || etag[0] != '"' || etag[etag.Length - 1] != '"')              {                  return false;              }
Magic Number,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,GetRequestEnumerator,The following statement contains a magic number: try              {                  return enumerable.GetEnumerator();              }              catch (NotImplementedException e)              {                  // 501: Not Implemented                  throw new DataServiceException(501' null' Strings.DataService_NotImplementedException' null' e);              }              catch (NotSupportedException e)              {                  // 501: Not Implemented                  throw new DataServiceException(501' null' Strings.DataService_NotImplementedException' null' e);              }
Magic Number,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,GetRequestEnumerator,The following statement contains a magic number: try              {                  return enumerable.GetEnumerator();              }              catch (NotImplementedException e)              {                  // 501: Not Implemented                  throw new DataServiceException(501' null' Strings.DataService_NotImplementedException' null' e);              }              catch (NotSupportedException e)              {                  // 501: Not Implemented                  throw new DataServiceException(501' null' Strings.DataService_NotImplementedException' null' e);              }
Magic Number,Microsoft.OData.Service,WebUtil,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\WebUtil.cs,GetWrapperType,The following statement contains a magic number: if (wrapperParameters.Length - 1 > 12)              {                  throw DataServiceException.CreateBadRequestError(errorGenerator(wrapperParameters.Length - 1));              }
Magic Number,Microsoft.OData.Service,WebConvert,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\WebConvert.cs,TryRemoveQuotes,The following statement contains a magic number: if (text.Length < 2)              {                  return false;              }
Magic Number,Microsoft.OData.Service,WebConvert,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\WebConvert.cs,TryRemoveQuotes,The following statement contains a magic number: string s = text.Substring(1' text.Length - 2);
Magic Number,Microsoft.OData.Service,AstoriaResponseMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaResponseMessage.cs,GetHeader,The following statement contains a magic number: switch (headerName)              {                  case XmlConstants.HttpContentType:                      return this.host.ResponseContentType;                  case XmlConstants.HttpResponseETag:                      return this.host.ResponseETag;                  case XmlConstants.HttpODataVersion:                      return this.host.ResponseVersion;                  case XmlConstants.HttpResponseLocation:                      return this.host.ResponseLocation;                  case XmlConstants.HttpResponseCacheControl:                      return this.host.ResponseCacheControl;                  case XmlConstants.HttpPreferenceApplied:                      // this.ResponseHeadersWebCollection will throw if host2 is null. We just want to return null as if the header is missing.                      return this.host2 == null ? null : this.ResponseHeadersWebCollection[headerName];                  default:                      Debug.Fail("AstoriaResponseMessage.GetHeader called with an unknown header name: " + headerName);                      throw new DataServiceException(500' Strings.DataServiceException_GeneralError);              }
Magic Number,Microsoft.OData.Service,AstoriaResponseMessage,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\AstoriaResponseMessage.cs,SetHeader,The following statement contains a magic number: switch (headerName)              {                  case XmlConstants.HttpContentType:                      this.host.ResponseContentType = headerValue;                      break;                  case XmlConstants.HttpODataVersion:                      this.host.ResponseVersion = headerValue;                      break;                  case XmlConstants.HttpResponseCacheControl:                      this.host.ResponseCacheControl = headerValue;                      break;                  case XmlConstants.HttpResponseLocation:                      this.host.ResponseLocation = headerValue;                      break;                  case XmlConstants.HttpResponseETag:                      this.host.ResponseETag = headerValue;                      break;                    // For headers not on the first ISDH                  case XmlConstants.HttpPreferenceApplied:                  case XmlConstants.HttpODataEntityId:                  case XmlConstants.HttpContentID:                      this.ResponseHeadersWebCollection.Add(headerName' headerValue);                      break;                  default:                      // It would be OK to just do hot2.ResponseHeaders.Add like above.                      // This is just here to help us keep track of what headers we could possibly set.                      Debug.Fail("We are trying to set unknown header " + headerName);                      throw new DataServiceException(500' Strings.DataServiceException_GeneralError);              }
Magic Number,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,GetString,The following statement contains a magic number: if (args != null && args.Length > 0) {                  for (int i = 0; i < args.Length; i ++) {                      String value = args[i] as String;                      if (value != null && value.Length > 1024) {                          args[i] = value.Substring(0' 1024 - 3) + "...";                      }                  }                  return String.Format(CultureInfo.CurrentCulture' res' args);              }              else {                  return res;              }
Magic Number,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,GetString,The following statement contains a magic number: if (args != null && args.Length > 0) {                  for (int i = 0; i < args.Length; i ++) {                      String value = args[i] as String;                      if (value != null && value.Length > 1024) {                          args[i] = value.Substring(0' 1024 - 3) + "...";                      }                  }                  return String.Format(CultureInfo.CurrentCulture' res' args);              }              else {                  return res;              }
Magic Number,Microsoft.OData.Service,TextRes,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft.OData.Service.cs,GetString,The following statement contains a magic number: if (args != null && args.Length > 0) {                  for (int i = 0; i < args.Length; i ++) {                      String value = args[i] as String;                      if (value != null && value.Length > 1024) {                          args[i] = value.Substring(0' 1024 - 3) + "...";                      }                  }                  return String.Format(CultureInfo.CurrentCulture' res' args);              }              else {                  return res;              }
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexerUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\ExpressionLexerUtils.cs,IsInfinityOrNaNDouble,The following statement contains a magic number: if (tokenText.Length == 3)              {                  if (tokenText[0] == ExpressionConstants.InfinityLiteral[0])                  {                      return IsInfinityLiteralDouble(tokenText);                  }                  else                  {                      if (tokenText[0] == ExpressionConstants.NaNLiteral[0])                      {                          return String.CompareOrdinal(tokenText' 0' ExpressionConstants.NaNLiteral' 0' 3) == 0;                      }                  }              }
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexerUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\ExpressionLexerUtils.cs,IsInfinityOrNaNDouble,The following statement contains a magic number: if (tokenText.Length == 3)              {                  if (tokenText[0] == ExpressionConstants.InfinityLiteral[0])                  {                      return IsInfinityLiteralDouble(tokenText);                  }                  else                  {                      if (tokenText[0] == ExpressionConstants.NaNLiteral[0])                      {                          return String.CompareOrdinal(tokenText' 0' ExpressionConstants.NaNLiteral' 0' 3) == 0;                      }                  }              }
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexerUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\ExpressionLexerUtils.cs,IsInfinityOrNanSingle,The following statement contains a magic number: if (tokenText.Length == 4)              {                  if (tokenText[0] == ExpressionConstants.InfinityLiteral[0])                  {                      return IsInfinityLiteralSingle(tokenText);                  }                  else if (tokenText[0] == ExpressionConstants.NaNLiteral[0])                  {                      return (tokenText[3] == SingleSuffixLower || tokenText[3] == SingleSuffixUpper) &&                              String.CompareOrdinal(tokenText' 0' ExpressionConstants.NaNLiteral' 0' 3) == 0;                  }              }
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexerUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\ExpressionLexerUtils.cs,IsInfinityOrNanSingle,The following statement contains a magic number: if (tokenText.Length == 4)              {                  if (tokenText[0] == ExpressionConstants.InfinityLiteral[0])                  {                      return IsInfinityLiteralSingle(tokenText);                  }                  else if (tokenText[0] == ExpressionConstants.NaNLiteral[0])                  {                      return (tokenText[3] == SingleSuffixLower || tokenText[3] == SingleSuffixUpper) &&                              String.CompareOrdinal(tokenText' 0' ExpressionConstants.NaNLiteral' 0' 3) == 0;                  }              }
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexerUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\ExpressionLexerUtils.cs,IsInfinityOrNanSingle,The following statement contains a magic number: if (tokenText.Length == 4)              {                  if (tokenText[0] == ExpressionConstants.InfinityLiteral[0])                  {                      return IsInfinityLiteralSingle(tokenText);                  }                  else if (tokenText[0] == ExpressionConstants.NaNLiteral[0])                  {                      return (tokenText[3] == SingleSuffixLower || tokenText[3] == SingleSuffixUpper) &&                              String.CompareOrdinal(tokenText' 0' ExpressionConstants.NaNLiteral' 0' 3) == 0;                  }              }
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexerUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\ExpressionLexerUtils.cs,IsInfinityOrNanSingle,The following statement contains a magic number: if (tokenText.Length == 4)              {                  if (tokenText[0] == ExpressionConstants.InfinityLiteral[0])                  {                      return IsInfinityLiteralSingle(tokenText);                  }                  else if (tokenText[0] == ExpressionConstants.NaNLiteral[0])                  {                      return (tokenText[3] == SingleSuffixLower || tokenText[3] == SingleSuffixUpper) &&                              String.CompareOrdinal(tokenText' 0' ExpressionConstants.NaNLiteral' 0' 3) == 0;                  }              }
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexerUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\ExpressionLexerUtils.cs,IsInfinityLiteralSingle,The following statement contains a magic number: return text.Length == 4 &&                     (text[3] == SingleSuffixLower || text[3] == SingleSuffixUpper) &&                     String.CompareOrdinal(text' 0' ExpressionConstants.InfinityLiteral' 0' 3) == 0;
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexerUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\ExpressionLexerUtils.cs,IsInfinityLiteralSingle,The following statement contains a magic number: return text.Length == 4 &&                     (text[3] == SingleSuffixLower || text[3] == SingleSuffixUpper) &&                     String.CompareOrdinal(text' 0' ExpressionConstants.InfinityLiteral' 0' 3) == 0;
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexerUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\ExpressionLexerUtils.cs,IsInfinityLiteralSingle,The following statement contains a magic number: return text.Length == 4 &&                     (text[3] == SingleSuffixLower || text[3] == SingleSuffixUpper) &&                     String.CompareOrdinal(text' 0' ExpressionConstants.InfinityLiteral' 0' 3) == 0;
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexerUtils,C:\repos\OData_odata.net\src\Microsoft.OData.Core\UriParser\ExpressionLexerUtils.cs,IsInfinityLiteralSingle,The following statement contains a magic number: return text.Length == 4 &&                     (text[3] == SingleSuffixLower || text[3] == SingleSuffixUpper) &&                     String.CompareOrdinal(text' 0' ExpressionConstants.InfinityLiteral' 0' 3) == 0;
Magic Number,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,FindBestMethod,The following statement contains a magic number: if (applicable.Length == 1)              {                  // If we started off with all non-OpenType expressions and end with all-OpenType                  // expressions' we've been too aggresive - the transition from non-open-types                  // to open types should initially happen only as a result of accessing open properties.                  MethodData md = applicable[0];                  bool originalArgsDefined = true;                  bool promotedArgsOpen = true;                  for (int i = 0; i < args.Length; i++)                  {                      originalArgsDefined = originalArgsDefined && !OpenTypeMethods.IsOpenPropertyExpression(args[i]);                      promotedArgsOpen = promotedArgsOpen && md.Parameters[i].ParameterType == typeof(object);                      args[i] = md.Args[i];                  }                    method = (originalArgsDefined && promotedArgsOpen) ? null : md.MethodBase;                  result = (method == null) ? 0 : 1;              }              else if (applicable.Length > 1)              {                  // We may have the case for operators (which C# doesn't) in which we have a nullable operand                  // and a non-nullable operand. We choose to convert the one non-null operand to nullable in that                  // case (the binary expression will lift to null).                  if (args.Length == 2 && applicable.Length == 2 &&                      WebUtil.GetNonNullableType(applicable[0].Parameters[0].ParameterType) ==                      WebUtil.GetNonNullableType(applicable[1].Parameters[0].ParameterType))                  {                      MethodData nullableMethod =                          WebUtil.TypeAllowsNull(applicable[0].Parameters[0].ParameterType) ?                                                                                                applicable[0] :                                                                                                                  applicable[1];                      args[0] = nullableMethod.Args[0];                      args[1] = nullableMethod.Args[1];                      return this.FindBestMethod(methods' args' out method);                  }              }
Magic Number,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,FindBestMethod,The following statement contains a magic number: if (applicable.Length == 1)              {                  // If we started off with all non-OpenType expressions and end with all-OpenType                  // expressions' we've been too aggresive - the transition from non-open-types                  // to open types should initially happen only as a result of accessing open properties.                  MethodData md = applicable[0];                  bool originalArgsDefined = true;                  bool promotedArgsOpen = true;                  for (int i = 0; i < args.Length; i++)                  {                      originalArgsDefined = originalArgsDefined && !OpenTypeMethods.IsOpenPropertyExpression(args[i]);                      promotedArgsOpen = promotedArgsOpen && md.Parameters[i].ParameterType == typeof(object);                      args[i] = md.Args[i];                  }                    method = (originalArgsDefined && promotedArgsOpen) ? null : md.MethodBase;                  result = (method == null) ? 0 : 1;              }              else if (applicable.Length > 1)              {                  // We may have the case for operators (which C# doesn't) in which we have a nullable operand                  // and a non-nullable operand. We choose to convert the one non-null operand to nullable in that                  // case (the binary expression will lift to null).                  if (args.Length == 2 && applicable.Length == 2 &&                      WebUtil.GetNonNullableType(applicable[0].Parameters[0].ParameterType) ==                      WebUtil.GetNonNullableType(applicable[1].Parameters[0].ParameterType))                  {                      MethodData nullableMethod =                          WebUtil.TypeAllowsNull(applicable[0].Parameters[0].ParameterType) ?                                                                                                applicable[0] :                                                                                                                  applicable[1];                      args[0] = nullableMethod.Args[0];                      args[1] = nullableMethod.Args[1];                      return this.FindBestMethod(methods' args' out method);                  }              }
Magic Number,Microsoft.OData.Service.Parsing,RequestExpressionParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\RequestExpressionParser.cs,ParseFilter,The following statement contains a magic number: try              {                  return odataUriParser.ParseFilter();              }              catch (ODataException ex)              {                  throw new DataServiceException(400' null' ex.Message' null' ex);              }
Magic Number,Microsoft.OData.Service.Parsing,RequestExpressionParser,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\RequestExpressionParser.cs,ParseOrderBy,The following statement contains a magic number: try              {                  return odataUriParser.ParseOrderBy();              }              catch (ODataException ex)              {                  throw new DataServiceException(400' null' ex.Message' null' ex);              }
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,TryUriStringToGuid,The following statement contains a magic number: try              {                  // ABNF shows guidValue defined as                  // guidValue = 8HEXDIG "-" 4HEXDIG "-" 4HEXDIG "-" 4HEXDIG "-" 12HEXDIG                   // which comes to length of 36                   string trimmedText = text.Trim();                  if (trimmedText.Length != 36 || trimmedText.IndexOf('-') != 8)                  {                      targetValue = default(Guid);                      return false;                  }                    targetValue = XmlConvert.ToGuid(text);                  return true;              }              catch (FormatException)              {                  targetValue = default(Guid);                  return false;              }
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,TryUriStringToGuid,The following statement contains a magic number: try              {                  // ABNF shows guidValue defined as                  // guidValue = 8HEXDIG "-" 4HEXDIG "-" 4HEXDIG "-" 4HEXDIG "-" 12HEXDIG                   // which comes to length of 36                   string trimmedText = text.Trim();                  if (trimmedText.Length != 36 || trimmedText.IndexOf('-') != 8)                  {                      targetValue = default(Guid);                      return false;                  }                    targetValue = XmlConvert.ToGuid(text);                  return true;              }              catch (FormatException)              {                  targetValue = default(Guid);                  return false;              }
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,NextTokenImplementation,The following statement contains a magic number: switch (this.ch)              {                  case '(':                      this.NextChar();                      t = ExpressionTokenKind.OpenParen;                      break;                  case ')':                      this.NextChar();                      t = ExpressionTokenKind.CloseParen;                      break;                  case ''':                      this.NextChar();                      t = ExpressionTokenKind.Comma;                      break;                  case '-':                      bool hasNext = this.textPos + 1 < this.textLen;                      if (hasNext && Char.IsDigit(this.text[this.textPos + 1]))                      {                          // don't separate '-' and its following digits : -2147483648 is valid int.MinValue' but 2147483648 is long.                          t = this.ParseFromDigit();                          if (ExpressionLexerUtils.IsNumeric(t))                          {                              break;                          }                            // If it looked like a numeric but wasn't (because it was a binary 0x... value for example)'                           // we'll rewind and fall through to a simple '-' token.                          this.SetTextPos(tokenPos);                      }                      else if (hasNext && this.text[tokenPos + 1] == ExpressionConstants.InfinityLiteral[0])                      {                          this.NextChar();                          this.ParseIdentifier();                          string currentIdentifier = this.text.Substring(tokenPos + 1' this.textPos - tokenPos - 1);                            if (ExpressionLexerUtils.IsInfinityLiteralDouble(currentIdentifier))                          {                              t = ExpressionTokenKind.DoubleLiteral;                              break;                          }                            if (ExpressionLexerUtils.IsInfinityLiteralSingle(currentIdentifier))                          {                              t = ExpressionTokenKind.SingleLiteral;                              break;                          }                            // If it looked like '-INF' but wasn't we'll rewind and fall through to a simple '-' token.                          this.SetTextPos(tokenPos);                      }                        this.NextChar();                      t = ExpressionTokenKind.Minus;                      break;                  case '=':                      this.NextChar();                      t = ExpressionTokenKind.Equal;                      break;                  case '/':                      this.NextChar();                      t = ExpressionTokenKind.Slash;                      break;                  case '?':                      this.NextChar();                      t = ExpressionTokenKind.Question;                      break;                  case '.':                      this.NextChar();                      t = ExpressionTokenKind.Dot;                      break;                  case '\'':                      char quote = this.ch.Value;                      do                      {                          this.NextChar();                          while (this.textPos < this.textLen && this.ch != quote)                          {                              this.NextChar();                          }                            if (this.textPos == this.textLen)                          {                              throw ParseError(Strings.RequestQueryParser_UnterminatedStringLiteral(this.text));                          }                            this.NextChar();                      }                      while (this.ch == quote);                      t = ExpressionTokenKind.StringLiteral;                      break;                  case '*':                      this.NextChar();                      t = ExpressionTokenKind.Star;                      break;                  case ':':                      this.NextChar();                      t = ExpressionTokenKind.Colon;                      break;                  case ';':                      this.NextChar();                      t = ExpressionTokenKind.Semicolon;                      break;                  case '$':                      this.NextChar();                      if (this.ch == 'i')                      {                          this.ParseIdentifier();                            // check if this is the special $it parameter                          if (this.textPos - tokenPos == 3 && this.text[tokenPos + 2] == 't')                          {                              t = ExpressionTokenKind.Identifier;                              break;                          }                      }                        throw ParseError(Strings.RequestQueryParser_InvalidCharacter('$'));                  default:                      if (this.IsValidWhiteSpace)                      {                          Debug.Assert(!this.ignoreWhitespace' "should not hit ws while ignoring it");                          this.ParseWhitespace();                          t = ExpressionTokenKind.WhiteSpace;                          break;                      }                        if (this.IsValidStartingCharForIdentifier)                      {                          this.ParseIdentifier();                            // Guids will have '-' in them                          // guidValue = 8HEXDIG "-" 4HEXDIG "-" 4HEXDIG "-" 4HEXDIG "-" 12HEXDIG                           if (this.ch == '-'                              && this.TryParseGuid(tokenPos))                          {                              t = ExpressionTokenKind.GuidLiteral;                              break;                          }                            t = ExpressionTokenKind.Identifier;                          break;                      }                        if (this.IsValidDigit)                      {                          t = this.ParseFromDigit();                          break;                      }                        if (this.textPos == this.textLen)                      {                          t = ExpressionTokenKind.End;                          break;                      }                        throw ParseError(Strings.RequestQueryParser_InvalidCharacter(this.ch));              }
Magic Number,Microsoft.OData.Service.Parsing,ExpressionLexer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\ExpressionLexer.cs,NextTokenImplementation,The following statement contains a magic number: switch (this.ch)              {                  case '(':                      this.NextChar();                      t = ExpressionTokenKind.OpenParen;                      break;                  case ')':                      this.NextChar();                      t = ExpressionTokenKind.CloseParen;                      break;                  case ''':                      this.NextChar();                      t = ExpressionTokenKind.Comma;                      break;                  case '-':                      bool hasNext = this.textPos + 1 < this.textLen;                      if (hasNext && Char.IsDigit(this.text[this.textPos + 1]))                      {                          // don't separate '-' and its following digits : -2147483648 is valid int.MinValue' but 2147483648 is long.                          t = this.ParseFromDigit();                          if (ExpressionLexerUtils.IsNumeric(t))                          {                              break;                          }                            // If it looked like a numeric but wasn't (because it was a binary 0x... value for example)'                           // we'll rewind and fall through to a simple '-' token.                          this.SetTextPos(tokenPos);                      }                      else if (hasNext && this.text[tokenPos + 1] == ExpressionConstants.InfinityLiteral[0])                      {                          this.NextChar();                          this.ParseIdentifier();                          string currentIdentifier = this.text.Substring(tokenPos + 1' this.textPos - tokenPos - 1);                            if (ExpressionLexerUtils.IsInfinityLiteralDouble(currentIdentifier))                          {                              t = ExpressionTokenKind.DoubleLiteral;                              break;                          }                            if (ExpressionLexerUtils.IsInfinityLiteralSingle(currentIdentifier))                          {                              t = ExpressionTokenKind.SingleLiteral;                              break;                          }                            // If it looked like '-INF' but wasn't we'll rewind and fall through to a simple '-' token.                          this.SetTextPos(tokenPos);                      }                        this.NextChar();                      t = ExpressionTokenKind.Minus;                      break;                  case '=':                      this.NextChar();                      t = ExpressionTokenKind.Equal;                      break;                  case '/':                      this.NextChar();                      t = ExpressionTokenKind.Slash;                      break;                  case '?':                      this.NextChar();                      t = ExpressionTokenKind.Question;                      break;                  case '.':                      this.NextChar();                      t = ExpressionTokenKind.Dot;                      break;                  case '\'':                      char quote = this.ch.Value;                      do                      {                          this.NextChar();                          while (this.textPos < this.textLen && this.ch != quote)                          {                              this.NextChar();                          }                            if (this.textPos == this.textLen)                          {                              throw ParseError(Strings.RequestQueryParser_UnterminatedStringLiteral(this.text));                          }                            this.NextChar();                      }                      while (this.ch == quote);                      t = ExpressionTokenKind.StringLiteral;                      break;                  case '*':                      this.NextChar();                      t = ExpressionTokenKind.Star;                      break;                  case ':':                      this.NextChar();                      t = ExpressionTokenKind.Colon;                      break;                  case ';':                      this.NextChar();                      t = ExpressionTokenKind.Semicolon;                      break;                  case '$':                      this.NextChar();                      if (this.ch == 'i')                      {                          this.ParseIdentifier();                            // check if this is the special $it parameter                          if (this.textPos - tokenPos == 3 && this.text[tokenPos + 2] == 't')                          {                              t = ExpressionTokenKind.Identifier;                              break;                          }                      }                        throw ParseError(Strings.RequestQueryParser_InvalidCharacter('$'));                  default:                      if (this.IsValidWhiteSpace)                      {                          Debug.Assert(!this.ignoreWhitespace' "should not hit ws while ignoring it");                          this.ParseWhitespace();                          t = ExpressionTokenKind.WhiteSpace;                          break;                      }                        if (this.IsValidStartingCharForIdentifier)                      {                          this.ParseIdentifier();                            // Guids will have '-' in them                          // guidValue = 8HEXDIG "-" 4HEXDIG "-" 4HEXDIG "-" 4HEXDIG "-" 12HEXDIG                           if (this.ch == '-'                              && this.TryParseGuid(tokenPos))                          {                              t = ExpressionTokenKind.GuidLiteral;                              break;                          }                            t = ExpressionTokenKind.Identifier;                          break;                      }                        if (this.IsValidDigit)                      {                          t = this.ParseFromDigit();                          break;                      }                        if (this.textPos == this.textLen)                      {                          t = ExpressionTokenKind.End;                          break;                      }                        throw ParseError(Strings.RequestQueryParser_InvalidCharacter(this.ch));              }
Magic Number,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,CreateFunctions,The following statement contains a magic number: List<FunctionDescription> castSignatures = new List<FunctionDescription>(primitiveTypes.Length + 4);
Magic Number,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,Contains,The following statement contains a magic number: Debug.Assert(arguments.Length == 2' "arguments.Length == 2");
Magic Number,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryIsOfResourceType,The following statement contains a magic number: Debug.Assert(arguments.Length == 3' "arguments.Length == 3");
Magic Number,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryIsOfResourceType,The following statement contains a magic number: Debug.Assert(arguments[2].NodeType == ExpressionType.Constant' "Constant expression expected for argument[2]");
Magic Number,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryIsOfResourceType,The following statement contains a magic number: Debug.Assert(((ConstantExpression)arguments[2]).Type == typeof(bool)' "Constant expression type should be boolean");
Magic Number,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryIsOfResourceType,The following statement contains a magic number: bool callOpenTypeMethod = (bool)((ConstantExpression)arguments[2]).Value;
Magic Number,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryCast,The following statement contains a magic number: Debug.Assert(arguments.Length == 2' "arguments.Length == 2");
Magic Number,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryCastResourceType,The following statement contains a magic number: Debug.Assert(arguments.Length == 3' "arguments.Length == 3");
Magic Number,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryCastResourceType,The following statement contains a magic number: Debug.Assert(arguments[2].NodeType == ExpressionType.Constant' "Constant expression expected for argument[2]");
Magic Number,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryCastResourceType,The following statement contains a magic number: Debug.Assert(((ConstantExpression)arguments[2]).Type == typeof(bool)' "Constant expression type should be boolean");
Magic Number,Microsoft.OData.Service.Parsing,FunctionDescription,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionDescription.cs,BinaryCastResourceType,The following statement contains a magic number: bool callOpenTypeMethod = (bool)((ConstantExpression)arguments[2]).Value;
Magic Number,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,ValidateCanAdvertiseServiceAction,The following statement contains a magic number: if (existingOperations.Contains(serviceAction))              {                  throw new DataServiceException(500' Strings.DataServiceActionProviderWrapper_DuplicateAction(serviceAction.Name));              }
Magic Number,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,ValidateCanAdvertiseServiceAction,The following statement contains a magic number: if (bindingParameter == null)              {                  Debug.Assert(!String.IsNullOrEmpty(serviceAction.Name)' "The name of the service action was null or empty");                  throw new DataServiceException(500' Strings.DataServiceActionProviderWrapper_ServiceActionBindingParameterNull(serviceAction.Name));              }
Magic Number,Microsoft.OData.Service.Providers,DataServiceActionProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceActionProviderWrapper.cs,ValidateCanAdvertiseServiceAction,The following statement contains a magic number: if (!bindingParameterType.IsAssignableFrom(resourceType))              {                  throw new DataServiceException(500' Strings.DataServiceActionProviderWrapper_ResourceTypeMustBeAssignableToBindingParameterResourceType(serviceAction.Name' bindingParameterType.FullName' resourceType.FullName));              }
Magic Number,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,LoadAndValidateStreamProvider,The following statement contains a magic number: if (this.streamProvider == null)              {                  this.LoadStreamProvider();                  if (this.streamProvider == null)                  {                      throw new DataServiceException(500' Strings.DataServiceStreamProviderWrapper_MustImplementIDataServiceStreamProviderToSupportStreaming);                  }              }
Magic Number,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,GetReadStream,The following statement contains a magic number: try              {                  if (streamProperty == null)                  {                      // For default streams' we always expect GetReadStream() to return a non-null readable stream.                      if (readStream == null || !readStream.CanRead)                      {                          throw new InvalidOperationException(Strings.DataService_InvalidStreamFromGetReadStream);                      }                  }                  else                  {                      // For named streams' GetReadStream() can return null to indicate that the stream has not been created.                      if (readStream == null)                      {                          // 204 == no content                          operationContext.ResponseStatusCode = 204;                      }                      else if (!readStream.CanRead)                      {                          throw new InvalidOperationException(Strings.DataService_InvalidStreamFromGetReadStream);                      }                  }                    // GetStreamETag can throw and we need to catch and dispose the stream.                  WebUtil.WriteETagValueInResponseHeader(null' this.GetStreamETag(entity' streamProperty' operationContext)' operationContext.ResponseMessage);              }              catch              {                  WebUtil.Dispose(readStream);                  throw;              }
Magic Number,Microsoft.OData.Service.Providers,DataServiceStreamProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceStreamProviderWrapper.cs,InvokeApiCallAndValidateHeaders,The following statement contains a magic number: if (operationContext.ResponseStatusCode != 304 && (operationContext.ResponseMessage.GetHeader(XmlConstants.HttpContentType) != responseContentType || operationContext.ResponseMessage.GetHeader(XmlConstants.HttpResponseETag) != responseETag))              {                  throw new InvalidOperationException(Strings.DataServiceStreamProviderWrapper_MustNotSetContentTypeAndEtag(methodName));              }
Magic Number,Microsoft.OData.Service.Providers,DataServiceProviderMethods,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderMethods.cs,DataServiceProviderMethods,The following statement contains a magic number: Debug.Assert(methods.Length == 2' "There must be exactly 2 ofType methods declared");
Magic Number,Microsoft.OData.Service.Providers,DataServiceProviderMethods,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderMethods.cs,DataServiceProviderMethods,The following statement contains a magic number: Debug.Assert(parameters.Length == 2' "There must be exactly 2 parameters in both ofType methods");
Magic Number,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleOperations,The following statement contains a magic number: if (serviceOperations != null)              {                  foreach (ServiceOperation serviceOperation in serviceOperations)                  {                      if (serviceOperation != null && operations.Contains(serviceOperation))                      {                          throw new DataServiceException(500' s.Strings.DataServiceProviderWrapper_MultipleServiceOperationsWithSameName(serviceOperation.Name));                      }                        // For IDSP' we want to make sure the metadata object instance stay the same within                      // a request because we do reference comparisons.  Note the provider can return                       // different metadata instances within the same request.  The the Validate*() methods                      // will make sure to return the first cached instance.                      OperationWrapper serviceOperationWrapper = this.ValidateOperation(serviceOperation);                      if (serviceOperationWrapper != null)                      {                          operations.Add(serviceOperationWrapper);                          yield return serviceOperationWrapper;                      }                  }              }
Magic Number,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,GetVisibleOperations,The following statement contains a magic number: foreach (OperationWrapper serviceAction in this.dataService.ActionProvider.GetServiceActions())              {                  Debug.Assert(serviceAction != null' "serviceAction != null");                    if (operations.Contains(serviceAction.ServiceAction))                  {                      throw new DataServiceException(500' s.Strings.DataServiceActionProviderWrapper_DuplicateAction(serviceAction.Name));                  }                    operations.Add(serviceAction);                    List<ResourceSetWrapper> bindableSets = new List<ResourceSetWrapper>();                    // If the binding entity type is not reachable from any visible set' the service action is not visible.                  if (serviceAction.BindingParameter != null)                  {                      ResourceType bindingElementType = serviceAction.BindingParameter.ParameterType;                      if (bindingElementType.ResourceTypeKind == ResourceTypeKind.EntityCollection)                      {                          bindingElementType = ((EntityCollectionResourceType)bindingElementType).ItemType;                      }                        foreach (ResourceSetWrapper set in this.GetResourceSets())                      {                          if (set.ResourceType.IsAssignableFrom(bindingElementType))                          {                              bindableSets.Add(set);                          }                      }                        if (!bindableSets.Any())                      {                          throw new InvalidOperationException(s.Strings.DataServiceProviderWrapper_ActionHasNoBindableSet(serviceAction.Name' serviceAction.BindingParameter.ParameterType.FullName));                      }                  }                    Debug.Assert(                      serviceAction.ResultType == null || serviceAction.ResultType.ResourceTypeKind != ResourceTypeKind.EntityType || serviceAction.ResultSetPathExpression != null || serviceAction.ResourceSet.IsVisible'                      "When the action returns an entity or entity collection type' the action must have a path expression or its result set is visible.");                    // If the ResultSetPathExpression is not null' the service action is visible only if the path can yield                  // a visible result set.                  if (serviceAction.ResultSetPathExpression != null)                  {                      Debug.Assert(serviceAction.ResourceSet == null' "ResourceSet and ResultSetPathExpression are mutually exclusive.");                      if (bindableSets.All(set => serviceAction.ResultSetPathExpression.GetTargetSet(this' set) == null))                      {                          throw new InvalidOperationException(s.Strings.DataServiceProviderWrapper_ActionHasNoVisibleSetReachableFromPathExpression(serviceAction.Name' serviceAction.ResultSetPathExpression.PathExpression));                      }                  }                    yield return serviceAction;              }
Magic Number,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,ValidateResourceTypeReadOnly,The following statement contains a magic number: if (!resourceType.IsReadOnly)              {                  throw new DataServiceException(500' s.Strings.DataServiceProviderWrapper_ResourceTypeNotReadonly(resourceType.FullName));              }
Magic Number,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,AddUniqueNameToSet,The following statement contains a magic number: if (name != null)              {                  if (names.Contains(name))                  {                      throw new DataServiceException(500' exceptionString);                  }                    names.Add(name);              }
Magic Number,Microsoft.OData.Service.Providers,DataServiceProviderWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\DataServiceProviderWrapper.cs,ValidateCollectionResourceType,The following statement contains a magic number: if (collectionResourceType.ItemType.ResourceTypeKind == ResourceTypeKind.ComplexType)              {                  if (this.HasDerivedTypes(collectionResourceType.ItemType))                  {                      throw new DataServiceException(500' s.Strings.DataServiceProviderWrapper_CollectionOfComplexTypeWithDerivedTypes(collectionResourceType.ItemType.FullName));                  }              }
Magic Number,Microsoft.OData.Service.Providers,ResourceSetWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetWrapper.cs,ResourceSetWrapper,The following statement contains a magic number: if (!resourceSet.IsReadOnly)              {                  throw new DataServiceException(500' Strings.DataServiceProviderWrapper_ResourceContainerNotReadonly(resourceSet.Name));              }
Magic Number,Microsoft.OData.Service.Providers,ResourceSetWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceSetWrapper.cs,ApplyConfiguration,The following statement contains a magic number: if (this.pageSize < 0)              {                  throw new DataServiceException(500' Strings.DataService_SDP_PageSizeMustbeNonNegative(this.pageSize' this.Name));              }
Magic Number,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The following statement contains a magic number: MemberBinding[] bindings = new MemberBinding[this.children.Count + 3 + (this.needSkipToken ? 1 : 0)];
Magic Number,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The following statement contains a magic number: for (int i = 0; i < this.children.Count; i++)                  {                      ExpandNode node = this.children[i];                        if (i > 0)                      {                          propertyNameList.Append(''');                      }                        // Generate the type as expression only if its a derived property access                      Expression typeAsExpression = source;                      string typeQualifier = string.Empty;                      if (this.BaseResourceType != node.Node.TargetResourceType)                      {                          typeAsExpression = ExpressionGenerator.GenerateTypeAs(source' node.Node.TargetResourceType);                          typeQualifier = node.Node.TargetResourceType.FullName + "/";                          propertyNameList.Append(typeQualifier);                      }                        // If we need to perform null checks (null propagation is required) we need to do the null check                      //   on the outer level around any possible Select/OrderBy/ThenBy/Take calls possibly generated                      //   by the BuildProjectionExpression.                      Expression propertyAccess = node.BuildProjectionExpression(                          AccessProperty(                              typeAsExpression'                              node.Node.TargetResourceType'                              node.Node.Property'                              false));                        string propertyName = node.Node.PropertyName;                      propertyNameList.Append(propertyName);                      if (node.Node.Property.IsOfKind(ResourcePropertyKind.ResourceReference))                      {                          if (referencePropertyNameList == null)                          {                              referencePropertyNameList = new StringBuilder();                          }                          else                          {                              referencePropertyNameList.Append("'");                          }                            if (!string.IsNullOrEmpty(typeQualifier))                          {                              referencePropertyNameList.Append(typeQualifier);                          }                            referencePropertyNameList.Append(propertyName);                      }                        // We need to check for null in cases where the source can be null.                      // That is if the source represents a single result (in which case it represents a nav. property                      //   which may be null). It can also happen if the source is the root' in which case URI path                      //   may have specified single result wrapper in an enumerable' but that result can be null.                      //   (for example /Customers(0)/BestFriend?$expand...)                      // Note that it is possible to get null on !singleResult but only on the root level (this.isRoot).                      //   We don't perform the null check in that case since that is our behavior in V1                      //   and we want to remain 100% backward compatible.                      if (this.singleResult && this.ExpandProvider.Provider.NullPropagationRequired)                      {                          // Need to make sure the result type is nullable.                          // But expanded properties are always of entity type or projected/expanded wrappers which all                          //   are reference types and thus nullables.                          Debug.Assert(                              WebUtil.TypeAllowsNull(propertyAccess.Type)'                              "Expanded property should be projected into a nullable type.");                            // We are to project a null. Some providers don't support projecting null of arbitrary type                           //   (for example Linq to Entities) so we will assume that providers which require null propagation                           //   are able to project arbitrary typed nulls and providers which don't want null propagation                           //   don't support projecting arbitrary typed nulls.                          //   In this case the provider already requested null propagation' so it better support projecting                          //   arbitrary typed null.                          // We may end up projecting null as a value of ResourceSetReference property. This can in theory break                          //   the serializers as they expect a non-null (possibly empty) IEnumerable instead. But note that                          //   if we project null here' we also project null into the ExpandedElement property                          //   (see the same conditional expression in BuildProjectionExpressionForProjectedWrapper)                          //   and thus the serializers will recognize this value as null and won't try to expand its properties.                          //   (Note that there's an assert in the serializers which verifies' that for ResourceSetReference                           //   properties they do get non-null IEnumerable if they need to).                          propertyAccess = Expression.Condition(                              Expression.Equal(source' Expression.Constant(null' source.Type))'                              Expression.Constant(null' propertyAccess.Type)'                              propertyAccess);                      }                        // We might be doing expansion of derived navigation property. In that case' we need to check for null                      // since the property might not be present on the base type.                      if (typeAsExpression != source && this.ExpandProvider.Provider.NullPropagationRequired)                      {                          propertyAccess = Expression.Condition(                              Expression.Equal(typeAsExpression' Expression.Constant(null' typeAsExpression.Type))'                              Expression.Constant(null' propertyAccess.Type)'                              propertyAccess);                      }                        bindings[i + 3] = BindByName(                             this.elementType'                             "ProjectedProperty" + i.ToString(System.Globalization.CultureInfo.InvariantCulture)'                             propertyAccess);                  }
Magic Number,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The following statement contains a magic number: if (this.needSkipToken)                  {                      Debug.Assert(!this.singleResult' "We don't need sorting for single results");                      Debug.Assert(this.orderingInfo != null' "Must have ordering info to require skip token");                        Type projectedSkipTokenType = this.elementType.GetGenericArguments().Skip(this.children.Count + 1).First();                        MemberBinding[] skipTokenPropertyBindings = new MemberBinding[this.OrderingInfo.OrderingExpressions.Count + 2];                      skipTokenPropertyBindings[0] = BindByName(projectedSkipTokenType' "ExpandedElement"' Expression.Constant((string)null' typeof(string)));                      StringBuilder skipTokenDescription = new StringBuilder();                      for (int i = 0; i < this.OrderingInfo.OrderingExpressions.Count; i++)                      {                          skipTokenDescription.Append(XmlConstants.SkipTokenPropertyPrefix + i.ToString(System.Globalization.CultureInfo.InvariantCulture)).Append("'");                            LambdaExpression orderLamba = (LambdaExpression)this.OrderingInfo.OrderingExpressions[i].Expression;                          Expression orderExpression = ParameterReplacerVisitor.Replace(orderLamba.Body' orderLamba.Parameters[0]' source);                          MemberInfo member = projectedSkipTokenType.GetProperty("ProjectedProperty" + i.ToString(System.Globalization.CultureInfo.InvariantCulture));                          skipTokenPropertyBindings[i + 2] = Expression.Bind(member' orderExpression);                      }                        skipTokenPropertyBindings[1] = BindByName(projectedSkipTokenType' "Description"' Expression.Constant(skipTokenDescription.Remove(skipTokenDescription.Length - 1' 1).ToString()));                        Expression skipTokenBody = Expression.MemberInit(Expression.New(projectedSkipTokenType)' skipTokenPropertyBindings);                        if (propertyNameList.Length > 0)                      {                          propertyNameList.Append(''');                      }                        propertyNameList.Append(XmlConstants.HttpQueryStringSkipToken);                      bindings[this.children.Count + 3] = BindByName(this.elementType' "ProjectedProperty" + this.children.Count.ToString(System.Globalization.CultureInfo.InvariantCulture)' skipTokenBody);                  }
Magic Number,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The following statement contains a magic number: if (this.needSkipToken)                  {                      Debug.Assert(!this.singleResult' "We don't need sorting for single results");                      Debug.Assert(this.orderingInfo != null' "Must have ordering info to require skip token");                        Type projectedSkipTokenType = this.elementType.GetGenericArguments().Skip(this.children.Count + 1).First();                        MemberBinding[] skipTokenPropertyBindings = new MemberBinding[this.OrderingInfo.OrderingExpressions.Count + 2];                      skipTokenPropertyBindings[0] = BindByName(projectedSkipTokenType' "ExpandedElement"' Expression.Constant((string)null' typeof(string)));                      StringBuilder skipTokenDescription = new StringBuilder();                      for (int i = 0; i < this.OrderingInfo.OrderingExpressions.Count; i++)                      {                          skipTokenDescription.Append(XmlConstants.SkipTokenPropertyPrefix + i.ToString(System.Globalization.CultureInfo.InvariantCulture)).Append("'");                            LambdaExpression orderLamba = (LambdaExpression)this.OrderingInfo.OrderingExpressions[i].Expression;                          Expression orderExpression = ParameterReplacerVisitor.Replace(orderLamba.Body' orderLamba.Parameters[0]' source);                          MemberInfo member = projectedSkipTokenType.GetProperty("ProjectedProperty" + i.ToString(System.Globalization.CultureInfo.InvariantCulture));                          skipTokenPropertyBindings[i + 2] = Expression.Bind(member' orderExpression);                      }                        skipTokenPropertyBindings[1] = BindByName(projectedSkipTokenType' "Description"' Expression.Constant(skipTokenDescription.Remove(skipTokenDescription.Length - 1' 1).ToString()));                        Expression skipTokenBody = Expression.MemberInit(Expression.New(projectedSkipTokenType)' skipTokenPropertyBindings);                        if (propertyNameList.Length > 0)                      {                          propertyNameList.Append(''');                      }                        propertyNameList.Append(XmlConstants.HttpQueryStringSkipToken);                      bindings[this.children.Count + 3] = BindByName(this.elementType' "ProjectedProperty" + this.children.Count.ToString(System.Globalization.CultureInfo.InvariantCulture)' skipTokenBody);                  }
Magic Number,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The following statement contains a magic number: if (this.needSkipToken)                  {                      Debug.Assert(!this.singleResult' "We don't need sorting for single results");                      Debug.Assert(this.orderingInfo != null' "Must have ordering info to require skip token");                        Type projectedSkipTokenType = this.elementType.GetGenericArguments().Skip(this.children.Count + 1).First();                        MemberBinding[] skipTokenPropertyBindings = new MemberBinding[this.OrderingInfo.OrderingExpressions.Count + 2];                      skipTokenPropertyBindings[0] = BindByName(projectedSkipTokenType' "ExpandedElement"' Expression.Constant((string)null' typeof(string)));                      StringBuilder skipTokenDescription = new StringBuilder();                      for (int i = 0; i < this.OrderingInfo.OrderingExpressions.Count; i++)                      {                          skipTokenDescription.Append(XmlConstants.SkipTokenPropertyPrefix + i.ToString(System.Globalization.CultureInfo.InvariantCulture)).Append("'");                            LambdaExpression orderLamba = (LambdaExpression)this.OrderingInfo.OrderingExpressions[i].Expression;                          Expression orderExpression = ParameterReplacerVisitor.Replace(orderLamba.Body' orderLamba.Parameters[0]' source);                          MemberInfo member = projectedSkipTokenType.GetProperty("ProjectedProperty" + i.ToString(System.Globalization.CultureInfo.InvariantCulture));                          skipTokenPropertyBindings[i + 2] = Expression.Bind(member' orderExpression);                      }                        skipTokenPropertyBindings[1] = BindByName(projectedSkipTokenType' "Description"' Expression.Constant(skipTokenDescription.Remove(skipTokenDescription.Length - 1' 1).ToString()));                        Expression skipTokenBody = Expression.MemberInit(Expression.New(projectedSkipTokenType)' skipTokenPropertyBindings);                        if (propertyNameList.Length > 0)                      {                          propertyNameList.Append(''');                      }                        propertyNameList.Append(XmlConstants.HttpQueryStringSkipToken);                      bindings[this.children.Count + 3] = BindByName(this.elementType' "ProjectedProperty" + this.children.Count.ToString(System.Globalization.CultureInfo.InvariantCulture)' skipTokenBody);                  }
Magic Number,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,BuildProjectionExpressionForExpandedWrapper,The following statement contains a magic number: bindings[2] = BindByName(this.elementType' "ReferenceDescription"' Expression.Constant(referenceDescriptionString));
Magic Number,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,PrepareProjectionBindingForResourceType,The following statement contains a magic number: bindingExpressions = new Expression[this.projectedProperties.Count + 2];
Magic Number,Microsoft.OData.Service.Providers,ExpandNode,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\BasicExpandProvider.cs,PrepareProjectionBindingForResourceType,The following statement contains a magic number: for (int propertyIndex = 0; propertyIndex < this.projectedProperties.Count; propertyIndex++)                  {                      ProjectedProperty projectedProperty = this.projectedProperties[propertyIndex];                      Expression propertyAccess = null;                        // First' we need to check if the property needs to be projected for the given type                      if (projectedProperty.TargetResourceType.IsAssignableFrom(resourceType))                      {                          ResourceProperty resourceProperty = resourceType.TryResolvePropertyName(projectedProperty.Name' exceptKind: ResourcePropertyKind.Stream);                          Expression sourceExpression = source;                            // We had a bug in V2 where we always used Expression.TypeAs even for custom providers. Since its a breaking                          // change to fix it' leaving it as is and producing the wrong TypeAs expression for non-derived properties.                          if (projectedProperty.TargetResourceType == this.BaseResourceType)                          {                              sourceExpression = Expression.TypeAs(source' resourceType.InstanceType);                          }                            // Now we need to decide if we are going to project the property or not (for this type).                          // The rules are:                          // - If the projectedProperty is for a declared property (Property != null)                           //   - If we found "a" declared property of the same name on the current type                          //     - If the declared properties are the same -> project the property (non-open)                          //     - Else the properties are different and thus potentially of different types -> don't project                          //   - Else the type doesn't have such property' so don't project it                          // - Else the projectedProperty is for an open property (Property == null)                          //   - If we found "a" declared property of the same name on the current type -> don't project                          //     we will project that property as a declared property instead (it should be in the list already).                          //   - Else no such property declared on the type -> project it as an open property.                          if (projectedProperty.Property != null)                          {                              // Since the type belong to the same hierarchy' its okay to do reference equality on the property                              if (resourceProperty == projectedProperty.Property)                              {                                  // For projection cases' we need to make sure that we need to use TypeAs to check whether                                   // the result type is of the right type before we access the derived property.                                  // If the property is not a derived property' we produced the TypeAs already above.                                  if (projectedProperty.TargetResourceType != this.BaseResourceType)                                  {                                      Debug.Assert(this.BaseResourceType.IsAssignableFrom(projectedProperty.TargetResourceType)' "this.BaseResourceType.IsAssignableFrom(projectedProperty.TargetResourceType)");                                      sourceExpression = ExpressionGenerator.GenerateTypeAs(sourceExpression' projectedProperty.TargetResourceType);                                  }                                    // Project as declared property (non-open)                                  propertyAccess = AccessProperty(sourceExpression' resourceType' resourceProperty' false);                                    // We must cast to nullable as we don't always project the specified property                                  //   and thus we must be able to project a null for it instead.                                  if (!WebUtil.TypeAllowsNull(propertyAccess.Type))                                  {                                      propertyAccess = Expression.Convert(propertyAccess' WebUtil.GetTypeAllowingNull(resourceProperty.Type));                                  }                              }                          }                          else if (resourceProperty == null && resourceType.IsOpenType)                          {                              // Project as open property - if the type is open that is                              propertyAccess = AccessOpenProperty(sourceExpression' projectedProperty.Name);                          }                      }                        if (propertyIndex > 0)                      {                          propertyNameList.Append(''');                      }                        // If we haven't projected anything yet' project null instead                      if (propertyAccess == null)                      {                          if (projectedProperty.Property != null)                          {                              // Strongly typed null if we have a declared property                              propertyAccess = Expression.Constant(null' WebUtil.GetTypeAllowingNull(projectedProperty.Property.Type));                          }                          else                          {                              // Open type null for open properties                              propertyAccess = Expression.Constant(null' typeof(object));                          }                            // We haven't projected the property' so don't include it in the property name list (basically mark this                          //   ProjectedProperty as "not in use").                      }                      else                      {                          // We have projected the property' so include its name in the projected wrapper's property name list                          propertyNameList.Append(projectedProperty.Name);                      }                        // For some providers we need to cast to object now since we are projecting into a property of type object.                      if (this.ExpandProvider.castToObject && propertyAccess.Type != typeof(object))                      {                          propertyAccess = Expression.Convert(propertyAccess' typeof(object));                      }                        bindingExpressions[propertyIndex + 2] = propertyAccess;                  }
Magic Number,Microsoft.OData.Service.Providers,ObjectContextServiceProvider,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ObjectContextServiceProvider.cs,CreateBadRequestError,The following statement contains a magic number: return new DataServiceException(400' null' message' null' innerException);
Magic Number,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,GetPropertyInfoDecaredOnThisType,The following statement contains a magic number: if (!this.propertyInfosDeclaredOnThisType.TryGetValue(resourceProperty' out resourcePropertyInfo))              {                  lock (this.propertiesDeclaredOnThisType)                  {                      if (!this.propertyInfosDeclaredOnThisType.TryGetValue(resourceProperty' out resourcePropertyInfo))                      {                          PropertyInfo propertyInfo = this.InstanceType.GetProperty(resourceProperty.Name' BindingFlags);                          if (propertyInfo == null)                          {                              throw new DataServiceException(500' Strings.BadProvider_UnableToGetPropertyInfo(this.FullName' resourceProperty.Name));                          }                            resourcePropertyInfo = this.AddPropertyToResourceTypePropertyInfoCache(resourceProperty' propertyInfo);                      }                  }              }
Magic Number,Microsoft.OData.Service.Providers,Operation,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\Operation.cs,EnsureReadOnly,The following statement contains a magic number: if (!this.isReadOnly)              {                  throw new DataServiceException(500' Strings.DataServiceProviderWrapper_ServiceOperationNotReadonly(this.Name));              }
Magic Number,Microsoft.OData.Service.Serializers,OperationSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\OperationSerializer.cs,AskProviderIfActionShouldBeAdvertised,The following statement contains a magic number: if (this.advertiseServiceAction(serviceOperationWrapper' entityToSerialize.Entity' resourceInstanceInFeed' ref odataAction))              {                  if (odataAction == null)                  {                      throw new DataServiceException(500' Microsoft.OData.Service.Strings.DataServiceActionProviderWrapper_AdvertiseServiceActionCannotReturnNullActionToSerialize);                  }                    // Always set target and title if there are overloaded actions.                  if (!entityHasMultipleActionsWithSameName)                  {                      this.metadataPropertyManager.CheckForUnmodifiedTitle(odataAction' serviceOperationWrapper.Name);                      this.metadataPropertyManager.CheckForUnmodifiedTarget(odataAction' () => lazyActionTargetUri.Value);                  }                    // make the target link relative                  this.MakeOperationTargetRelativeFromMetadataUriIfJsonLight(odataAction);                    return true;              }
Magic Number,Microsoft.OData.Service.Serializers,ODataMessageReaderDeserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\ODataMessageReaderDeserializer.cs,Deserialize,The following statement contains a magic number: try              {                  return this.Read(segmentInfo);              }              catch (System.Xml.XmlException exception)              {                  throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.DataServiceException_GeneralError' exception);              }              catch (ODataContentTypeException exception)              {                  throw new DataServiceException(                      415'                      null'                      Microsoft.OData.Service.Strings.DataServiceException_UnsupportedMediaType'                      null'                      exception);              }              catch (ODataException exception)              {                  throw DataServiceException.CreateBadRequestError(Microsoft.OData.Service.Strings.DataServiceException_GeneralError' exception);              }
Magic Number,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,CreateDeserializer,The following statement contains a magic number: throw new DataServiceException(415' Strings.RequestUriProcessor_MethodNotAllowed);
Magic Number,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetResourceToModify,The following statement contains a magic number: if (                  description.TargetKind == RequestTargetKind.OpenPropertyValue ||                  description.TargetKind == RequestTargetKind.PrimitiveValue)              {                  modifyingResourceIndex = description.SegmentInfos.Count - 3;              }              else              {                  modifyingResourceIndex = description.SegmentInfos.Count - 2;              }
Magic Number,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetResourceToModify,The following statement contains a magic number: if (                  description.TargetKind == RequestTargetKind.OpenPropertyValue ||                  description.TargetKind == RequestTargetKind.PrimitiveValue)              {                  modifyingResourceIndex = description.SegmentInfos.Count - 3;              }              else              {                  modifyingResourceIndex = description.SegmentInfos.Count - 2;              }
Magic Number,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetIndexOfEntityResourceToModify,The following statement contains a magic number: if (description.LinkUri)              {                  Debug.Assert(                      description.SegmentInfos[description.SegmentInfos.Count - 2].TargetKind == RequestTargetKind.Link'                      "There should be only one segment allowed after $ref");                    Debug.Assert(                      description.SegmentInfos[description.SegmentInfos.Count - 3].TargetKind == RequestTargetKind.Resource && description.SegmentInfos[description.SegmentInfos.Count - 3].SingleResult'                      "The segment previous to the $ref segment must refer to a single resource");                    entityResourceIndex = description.SegmentInfos.Count - 3;              }              else              {                  for (int j = description.SegmentInfos.Count - 1; j >= 0; j--)                  {                      if (description.SegmentInfos[j].TargetKind == RequestTargetKind.Resource && description.SegmentInfos[j].SingleResult)                      {                          entityResourceIndex = j;                          break;                      }                  }              }
Magic Number,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetIndexOfEntityResourceToModify,The following statement contains a magic number: if (description.LinkUri)              {                  Debug.Assert(                      description.SegmentInfos[description.SegmentInfos.Count - 2].TargetKind == RequestTargetKind.Link'                      "There should be only one segment allowed after $ref");                    Debug.Assert(                      description.SegmentInfos[description.SegmentInfos.Count - 3].TargetKind == RequestTargetKind.Resource && description.SegmentInfos[description.SegmentInfos.Count - 3].SingleResult'                      "The segment previous to the $ref segment must refer to a single resource");                    entityResourceIndex = description.SegmentInfos.Count - 3;              }              else              {                  for (int j = description.SegmentInfos.Count - 1; j >= 0; j--)                  {                      if (description.SegmentInfos[j].TargetKind == RequestTargetKind.Resource && description.SegmentInfos[j].SingleResult)                      {                          entityResourceIndex = j;                          break;                      }                  }              }
Magic Number,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetIndexOfEntityResourceToModify,The following statement contains a magic number: if (description.LinkUri)              {                  Debug.Assert(                      description.SegmentInfos[description.SegmentInfos.Count - 2].TargetKind == RequestTargetKind.Link'                      "There should be only one segment allowed after $ref");                    Debug.Assert(                      description.SegmentInfos[description.SegmentInfos.Count - 3].TargetKind == RequestTargetKind.Resource && description.SegmentInfos[description.SegmentInfos.Count - 3].SingleResult'                      "The segment previous to the $ref segment must refer to a single resource");                    entityResourceIndex = description.SegmentInfos.Count - 3;              }              else              {                  for (int j = description.SegmentInfos.Count - 1; j >= 0; j--)                  {                      if (description.SegmentInfos[j].TargetKind == RequestTargetKind.Resource && description.SegmentInfos[j].SingleResult)                      {                          entityResourceIndex = j;                          break;                      }                  }              }
Magic Number,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetIndexOfEntityResourceToModify,The following statement contains a magic number: if (description.LinkUri)              {                  Debug.Assert(                      description.SegmentInfos[description.SegmentInfos.Count - 2].TargetKind == RequestTargetKind.Link'                      "There should be only one segment allowed after $ref");                    Debug.Assert(                      description.SegmentInfos[description.SegmentInfos.Count - 3].TargetKind == RequestTargetKind.Resource && description.SegmentInfos[description.SegmentInfos.Count - 3].SingleResult'                      "The segment previous to the $ref segment must refer to a single resource");                    entityResourceIndex = description.SegmentInfos.Count - 3;              }              else              {                  for (int j = description.SegmentInfos.Count - 1; j >= 0; j--)                  {                      if (description.SegmentInfos[j].TargetKind == RequestTargetKind.Resource && description.SegmentInfos[j].SingleResult)                      {                          entityResourceIndex = j;                          break;                      }                  }              }
Magic Number,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,CheckAndIncrementObjectCount,The following statement contains a magic number: if (!this.Update)              {                  this.objectCount++;                    if (this.objectCount > this.Service.Configuration.MaxObjectCountOnInsert)                  {                      throw new DataServiceException(413' Strings.BadRequest_ExceedsMaxObjectCountOnInsert(this.Service.Configuration.MaxObjectCountOnInsert));                  }              }
Magic Number,Microsoft.OData.Service.Serializers,Deserializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\Deserializer.cs,GetEntityResourceToModify,The following statement contains a magic number: Debug.Assert(description.SegmentInfos.Count >= 2' "description.SegmentInfos.Count >= 2");
Magic Number,Microsoft.OData.Service.Serializers,MetadataSerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\MetadataSerializer.cs,ValidateModel,The following statement contains a magic number: if (validationErrors != null && validationErrors.Any())              {                  StringBuilder builder = new StringBuilder();                  foreach (EdmError validationError in validationErrors)                  {                      builder.AppendLine(validationError.ToString());                  }                    throw new DataServiceException(500' Microsoft.OData.Service.Strings.MetadataSerializer_ModelValidationErrors(builder.ToString()));              }
Magic Number,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,WriteEntry,The following statement contains a magic number: if (actualResourceType.ResourceTypeKind != ResourceTypeKind.EntityType)              {                  // making sure that the actual resource type is an entity type                  throw new DataServiceException(500' Microsoft.OData.Service.Strings.BadProvider_InconsistentEntityOrComplexTypeUsage(actualResourceType.FullName));              }
Magic Number,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetAllEntityProperties,The following statement contains a magic number: if (entityToSerialize.ResourceType.IsOpenType)              {                  foreach (KeyValuePair<string' object> property in this.Provider.GetOpenPropertyValues(entityToSerialize.Entity))                  {                      string propertyName = property.Key;                      if (string.IsNullOrEmpty(propertyName))                      {                          throw new DataServiceException(500' Microsoft.OData.Service.Strings.Syndication_InvalidOpenPropertyName(entityToSerialize.ResourceType.FullName));                      }                        properties.Add(this.GetODataPropertyForOpenProperty(propertyName' property.Value));                  }              }
Magic Number,Microsoft.OData.Service.Serializers,EntitySerializer,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Serializers\EntitySerializer.cs,GetODataPropertyForOpenProperty,The following statement contains a magic number: if (WebUtil.IsNullValue(propertyValue))              {                  propertyResourceType = ResourceType.PrimitiveStringResourceType;              }              else              {                  propertyResourceType = WebUtil.GetResourceType(this.Provider' propertyValue);                    // A null ResourceType indicates a blacklisted type (eg' IntPtr or DateTimeOffset). So fail on it.                  if (propertyResourceType == null)                  {                      throw new DataServiceException(500' Microsoft.OData.Service.Strings.Syndication_InvalidOpenPropertyType(propertyName));                  }              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,Bind,The following statement contains a magic number: Debug.Assert(bindingExpressions.Length >= 2' "At least the ResourceTypeName and PropertyNameList properties must be bound.");
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,Bind,The following statement contains a magic number: Debug.Assert(                  GetProjectedWrapperType(bindingExpressions.Length - 2) == projectedWrapperType'                   "The projected wrapper type will not fit the required number of properties.");
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,Bind,The following statement contains a magic number: if (bindingsCount <= precreatedProjectedWrapperTypes.Length + 1)              {                  // The number of properties fits into a single projected wrapper instance                  bindings = new MemberBinding[bindingsCount];                  BindResourceTypeAndPropertyNameList(projectedWrapperType' bindings' bindingExpressions);                  for (int propertyIndex = 0; propertyIndex < bindingsCount - 2; propertyIndex++)                  {                      bindings[propertyIndex + 2] = BindToProjectedProperty(                          projectedWrapperType'                          propertyIndex'                          bindingExpressions[propertyIndex + 2]);                  }              }              else              {                  // The number of properties is too big - we need to use the linked list of ProjectedWrapperMany instances                  // So we return the number of properties we can bind + ResourceTypeName + Description + Next                  //   the rest of the bindings will be bound to the Next                  bindings = new MemberBinding[precreatedProjectedWrapperTypes.Length + 2];                    // Only fill the ResourceTypeName and Description on the first ProjectedWrapperMany                  //   the inner ones will never use it.                  BindResourceTypeAndPropertyNameList(projectedWrapperType' bindings' bindingExpressions);                    // And now call the recursive method to fill the rest.                  BindToProjectedWrapperMany(bindingExpressions' 2' bindings' 2);              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,Bind,The following statement contains a magic number: if (bindingsCount <= precreatedProjectedWrapperTypes.Length + 1)              {                  // The number of properties fits into a single projected wrapper instance                  bindings = new MemberBinding[bindingsCount];                  BindResourceTypeAndPropertyNameList(projectedWrapperType' bindings' bindingExpressions);                  for (int propertyIndex = 0; propertyIndex < bindingsCount - 2; propertyIndex++)                  {                      bindings[propertyIndex + 2] = BindToProjectedProperty(                          projectedWrapperType'                          propertyIndex'                          bindingExpressions[propertyIndex + 2]);                  }              }              else              {                  // The number of properties is too big - we need to use the linked list of ProjectedWrapperMany instances                  // So we return the number of properties we can bind + ResourceTypeName + Description + Next                  //   the rest of the bindings will be bound to the Next                  bindings = new MemberBinding[precreatedProjectedWrapperTypes.Length + 2];                    // Only fill the ResourceTypeName and Description on the first ProjectedWrapperMany                  //   the inner ones will never use it.                  BindResourceTypeAndPropertyNameList(projectedWrapperType' bindings' bindingExpressions);                    // And now call the recursive method to fill the rest.                  BindToProjectedWrapperMany(bindingExpressions' 2' bindings' 2);              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,Bind,The following statement contains a magic number: if (bindingsCount <= precreatedProjectedWrapperTypes.Length + 1)              {                  // The number of properties fits into a single projected wrapper instance                  bindings = new MemberBinding[bindingsCount];                  BindResourceTypeAndPropertyNameList(projectedWrapperType' bindings' bindingExpressions);                  for (int propertyIndex = 0; propertyIndex < bindingsCount - 2; propertyIndex++)                  {                      bindings[propertyIndex + 2] = BindToProjectedProperty(                          projectedWrapperType'                          propertyIndex'                          bindingExpressions[propertyIndex + 2]);                  }              }              else              {                  // The number of properties is too big - we need to use the linked list of ProjectedWrapperMany instances                  // So we return the number of properties we can bind + ResourceTypeName + Description + Next                  //   the rest of the bindings will be bound to the Next                  bindings = new MemberBinding[precreatedProjectedWrapperTypes.Length + 2];                    // Only fill the ResourceTypeName and Description on the first ProjectedWrapperMany                  //   the inner ones will never use it.                  BindResourceTypeAndPropertyNameList(projectedWrapperType' bindings' bindingExpressions);                    // And now call the recursive method to fill the rest.                  BindToProjectedWrapperMany(bindingExpressions' 2' bindings' 2);              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,Bind,The following statement contains a magic number: if (bindingsCount <= precreatedProjectedWrapperTypes.Length + 1)              {                  // The number of properties fits into a single projected wrapper instance                  bindings = new MemberBinding[bindingsCount];                  BindResourceTypeAndPropertyNameList(projectedWrapperType' bindings' bindingExpressions);                  for (int propertyIndex = 0; propertyIndex < bindingsCount - 2; propertyIndex++)                  {                      bindings[propertyIndex + 2] = BindToProjectedProperty(                          projectedWrapperType'                          propertyIndex'                          bindingExpressions[propertyIndex + 2]);                  }              }              else              {                  // The number of properties is too big - we need to use the linked list of ProjectedWrapperMany instances                  // So we return the number of properties we can bind + ResourceTypeName + Description + Next                  //   the rest of the bindings will be bound to the Next                  bindings = new MemberBinding[precreatedProjectedWrapperTypes.Length + 2];                    // Only fill the ResourceTypeName and Description on the first ProjectedWrapperMany                  //   the inner ones will never use it.                  BindResourceTypeAndPropertyNameList(projectedWrapperType' bindings' bindingExpressions);                    // And now call the recursive method to fill the rest.                  BindToProjectedWrapperMany(bindingExpressions' 2' bindings' 2);              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,Bind,The following statement contains a magic number: if (bindingsCount <= precreatedProjectedWrapperTypes.Length + 1)              {                  // The number of properties fits into a single projected wrapper instance                  bindings = new MemberBinding[bindingsCount];                  BindResourceTypeAndPropertyNameList(projectedWrapperType' bindings' bindingExpressions);                  for (int propertyIndex = 0; propertyIndex < bindingsCount - 2; propertyIndex++)                  {                      bindings[propertyIndex + 2] = BindToProjectedProperty(                          projectedWrapperType'                          propertyIndex'                          bindingExpressions[propertyIndex + 2]);                  }              }              else              {                  // The number of properties is too big - we need to use the linked list of ProjectedWrapperMany instances                  // So we return the number of properties we can bind + ResourceTypeName + Description + Next                  //   the rest of the bindings will be bound to the Next                  bindings = new MemberBinding[precreatedProjectedWrapperTypes.Length + 2];                    // Only fill the ResourceTypeName and Description on the first ProjectedWrapperMany                  //   the inner ones will never use it.                  BindResourceTypeAndPropertyNameList(projectedWrapperType' bindings' bindingExpressions);                    // And now call the recursive method to fill the rest.                  BindToProjectedWrapperMany(bindingExpressions' 2' bindings' 2);              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,Bind,The following statement contains a magic number: if (bindingsCount <= precreatedProjectedWrapperTypes.Length + 1)              {                  // The number of properties fits into a single projected wrapper instance                  bindings = new MemberBinding[bindingsCount];                  BindResourceTypeAndPropertyNameList(projectedWrapperType' bindings' bindingExpressions);                  for (int propertyIndex = 0; propertyIndex < bindingsCount - 2; propertyIndex++)                  {                      bindings[propertyIndex + 2] = BindToProjectedProperty(                          projectedWrapperType'                          propertyIndex'                          bindingExpressions[propertyIndex + 2]);                  }              }              else              {                  // The number of properties is too big - we need to use the linked list of ProjectedWrapperMany instances                  // So we return the number of properties we can bind + ResourceTypeName + Description + Next                  //   the rest of the bindings will be bound to the Next                  bindings = new MemberBinding[precreatedProjectedWrapperTypes.Length + 2];                    // Only fill the ResourceTypeName and Description on the first ProjectedWrapperMany                  //   the inner ones will never use it.                  BindResourceTypeAndPropertyNameList(projectedWrapperType' bindings' bindingExpressions);                    // And now call the recursive method to fill the rest.                  BindToProjectedWrapperMany(bindingExpressions' 2' bindings' 2);              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,BindResourceTypeAndPropertyNameList,The following statement contains a magic number: Debug.Assert(bindings.Length >= 2' "Must have at least two bindings.");
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,BindResourceTypeAndPropertyNameList,The following statement contains a magic number: Debug.Assert(bindingExpressions.Length >= 2' "Must have at least two expressions to bind.");
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,BindToProjectedWrapperMany,The following statement contains a magic number: if (bindingExpressions.Length > precreatedProjectedWrapperTypes.Length - 1 + expressionStartIndex)              {                  int nextCount = bindingExpressions.Length - (precreatedProjectedWrapperTypes.Length - 1 + expressionStartIndex);                  if (nextCount > precreatedProjectedWrapperTypes.Length - 1)                  {                      // If we're not going to fit into the next wrapper' we need one more for the Next property                      nextCount = precreatedProjectedWrapperTypes.Length;                  }                    // We need more still - so create the next link on the Next property                  MemberBinding[] nextBindings = new MemberBinding[precreatedProjectedWrapperTypes.Length + 2];                  nextBindings[0] = Expression.Bind(                      typeof(ProjectedWrapperMany).GetProperty("ResourceTypeName")'                       Expression.Constant(string.Empty' typeof(string)));                  nextBindings[1] = Expression.Bind(                      typeof(ProjectedWrapperMany).GetProperty("PropertyNameList")'                      Expression.Constant(string.Empty' typeof(string)));                  BindToProjectedWrapperMany(                      bindingExpressions'                      expressionStartIndex + precreatedProjectedWrapperTypes.Length - 1'                      nextBindings'                      2);                  Expression restProjectedWrapper = Expression.MemberInit(                      Expression.New(typeof(ProjectedWrapperMany))'                      nextBindings);                  bindings[bindingStartIndex + precreatedProjectedWrapperTypes.Length - 1] = Expression.Bind(                      typeof(ProjectedWrapperMany).GetProperty("Next")'                      restProjectedWrapper);              }              else              {                  // This is the last one. We need to project something to the remaining properties                  //   and then the special End instance to the Next property.                  //   This is necessary to make Linq to Entities work as it fails when the same type is initialized                  //   multiple times in the same query and the initializions don't set the same properties in the same order.                  for (; propertyIndex < precreatedProjectedWrapperTypes.Length - 1; propertyIndex++)                  {                      // Project empty strings for example (as they are very likely to easily round trip through and query system)                      bindings[bindingStartIndex + propertyIndex] = BindToProjectedProperty(                              typeof(ProjectedWrapperMany)'                              propertyIndex'                               Expression.Constant(string.Empty' typeof(string)));                  }                    // And then project the special End instance to the Next property                  //   we need to project something into the Next property' but we can't project ProjectedWrapperMany                  //   as Linq to Entities would require us to initialize all its properties (and thus we would end up in infinite loop).                  // Instead it is OK to project a different type (Since we never projected that one in this query yet).                  // Note that we need to initialize at least one property on the special type to avoid a problem                  // in Linq to Entities where it might fails with null-ref exception.                  bindings[bindingStartIndex + precreatedProjectedWrapperTypes.Length - 1] = Expression.Bind(                      typeof(ProjectedWrapperMany).GetProperty("Next")'                      Expression.MemberInit(                          Expression.New(typeof(ProjectedWrapperManyEnd))'                          Expression.Bind(                              typeof(ProjectedWrapperManyEnd).GetProperty("ResourceTypeName")'                              Expression.Constant(string.Empty' typeof(string)))));              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,BindToProjectedWrapperMany,The following statement contains a magic number: if (bindingExpressions.Length > precreatedProjectedWrapperTypes.Length - 1 + expressionStartIndex)              {                  int nextCount = bindingExpressions.Length - (precreatedProjectedWrapperTypes.Length - 1 + expressionStartIndex);                  if (nextCount > precreatedProjectedWrapperTypes.Length - 1)                  {                      // If we're not going to fit into the next wrapper' we need one more for the Next property                      nextCount = precreatedProjectedWrapperTypes.Length;                  }                    // We need more still - so create the next link on the Next property                  MemberBinding[] nextBindings = new MemberBinding[precreatedProjectedWrapperTypes.Length + 2];                  nextBindings[0] = Expression.Bind(                      typeof(ProjectedWrapperMany).GetProperty("ResourceTypeName")'                       Expression.Constant(string.Empty' typeof(string)));                  nextBindings[1] = Expression.Bind(                      typeof(ProjectedWrapperMany).GetProperty("PropertyNameList")'                      Expression.Constant(string.Empty' typeof(string)));                  BindToProjectedWrapperMany(                      bindingExpressions'                      expressionStartIndex + precreatedProjectedWrapperTypes.Length - 1'                      nextBindings'                      2);                  Expression restProjectedWrapper = Expression.MemberInit(                      Expression.New(typeof(ProjectedWrapperMany))'                      nextBindings);                  bindings[bindingStartIndex + precreatedProjectedWrapperTypes.Length - 1] = Expression.Bind(                      typeof(ProjectedWrapperMany).GetProperty("Next")'                      restProjectedWrapper);              }              else              {                  // This is the last one. We need to project something to the remaining properties                  //   and then the special End instance to the Next property.                  //   This is necessary to make Linq to Entities work as it fails when the same type is initialized                  //   multiple times in the same query and the initializions don't set the same properties in the same order.                  for (; propertyIndex < precreatedProjectedWrapperTypes.Length - 1; propertyIndex++)                  {                      // Project empty strings for example (as they are very likely to easily round trip through and query system)                      bindings[bindingStartIndex + propertyIndex] = BindToProjectedProperty(                              typeof(ProjectedWrapperMany)'                              propertyIndex'                               Expression.Constant(string.Empty' typeof(string)));                  }                    // And then project the special End instance to the Next property                  //   we need to project something into the Next property' but we can't project ProjectedWrapperMany                  //   as Linq to Entities would require us to initialize all its properties (and thus we would end up in infinite loop).                  // Instead it is OK to project a different type (Since we never projected that one in this query yet).                  // Note that we need to initialize at least one property on the special type to avoid a problem                  // in Linq to Entities where it might fails with null-ref exception.                  bindings[bindingStartIndex + precreatedProjectedWrapperTypes.Length - 1] = Expression.Bind(                      typeof(ProjectedWrapperMany).GetProperty("Next")'                      Expression.MemberInit(                          Expression.New(typeof(ProjectedWrapperManyEnd))'                          Expression.Bind(                              typeof(ProjectedWrapperManyEnd).GetProperty("ResourceTypeName")'                              Expression.Constant(string.Empty' typeof(string)))));              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper3,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper4,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper4,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper5,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper5,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper5,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper6,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper6,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper6,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper6,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper7,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper7,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper7,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper7,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper7,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper8,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper8,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper8,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper8,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper8,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapper8,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      throw Error.NotSupported();              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapperMany,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      if (this.Next == null || propertyIndex < 0)                      {                          throw Error.NotSupported();                      }                      else                      {                          return this.Next.InternalGetProjectedPropertyValue(propertyIndex - 8);                      }              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapperMany,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      if (this.Next == null || propertyIndex < 0)                      {                          throw Error.NotSupported();                      }                      else                      {                          return this.Next.InternalGetProjectedPropertyValue(propertyIndex - 8);                      }              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapperMany,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      if (this.Next == null || propertyIndex < 0)                      {                          throw Error.NotSupported();                      }                      else                      {                          return this.Next.InternalGetProjectedPropertyValue(propertyIndex - 8);                      }              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapperMany,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      if (this.Next == null || propertyIndex < 0)                      {                          throw Error.NotSupported();                      }                      else                      {                          return this.Next.InternalGetProjectedPropertyValue(propertyIndex - 8);                      }              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapperMany,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      if (this.Next == null || propertyIndex < 0)                      {                          throw Error.NotSupported();                      }                      else                      {                          return this.Next.InternalGetProjectedPropertyValue(propertyIndex - 8);                      }              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapperMany,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      if (this.Next == null || propertyIndex < 0)                      {                          throw Error.NotSupported();                      }                      else                      {                          return this.Next.InternalGetProjectedPropertyValue(propertyIndex - 8);                      }              }
Magic Number,Microsoft.OData.Service.Internal,ProjectedWrapperMany,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ProjectedWrapper.cs,InternalGetProjectedPropertyValue,The following statement contains a magic number: switch (propertyIndex)              {                  case 0: return this.ProjectedProperty0;                  case 1: return this.ProjectedProperty1;                  case 2: return this.ProjectedProperty2;                  case 3: return this.ProjectedProperty3;                  case 4: return this.ProjectedProperty4;                  case 5: return this.ProjectedProperty5;                  case 6: return this.ProjectedProperty6;                  case 7: return this.ProjectedProperty7;                  default:                      if (this.Next == null || propertyIndex < 0)                      {                          throw Error.NotSupported();                      }                      else                      {                          return this.Next.InternalGetProjectedPropertyValue(propertyIndex - 8);                      }              }
Magic Number,Microsoft.OData.Service.Internal,PropertyAccessVisitor,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\PropertyAccessVisitor.cs,VisitMethodCall,The following statement contains a magic number: if (propertyName != null)              {                  Expression operand = m.Arguments[0];                  Expression result = m;                  if (this.ProcessPropertyAccess(propertyName' ref operand' ref result))                  {                      if (result == null)                      {                          Debug.Assert(                              m.Arguments.Count == 2'                               "Right now all methods have 2 arguments. If it ever changes this code needs to be modified.");                          return Expression.Call(m.Object' m.Method' operand' m.Arguments[1]);                      }                                            return result;                  }              }
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 2) return this.ProjectedProperty2;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 2) return this.ProjectedProperty2;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 3) return this.ProjectedProperty3;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 2) return this.ProjectedProperty2;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 3) return this.ProjectedProperty3;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 4) return this.ProjectedProperty4;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 2) return this.ProjectedProperty2;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 3) return this.ProjectedProperty3;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 4) return this.ProjectedProperty4;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 5) return this.ProjectedProperty5;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 2) return this.ProjectedProperty2;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 3) return this.ProjectedProperty3;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 4) return this.ProjectedProperty4;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 5) return this.ProjectedProperty5;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 6) return this.ProjectedProperty6;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 2) return this.ProjectedProperty2;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 3) return this.ProjectedProperty3;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 4) return this.ProjectedProperty4;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 5) return this.ProjectedProperty5;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 6) return this.ProjectedProperty6;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 7) return this.ProjectedProperty7;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 2) return this.ProjectedProperty2;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 3) return this.ProjectedProperty3;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 4) return this.ProjectedProperty4;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 5) return this.ProjectedProperty5;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 6) return this.ProjectedProperty6;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 7) return this.ProjectedProperty7;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 8) return this.ProjectedProperty8;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 2) return this.ProjectedProperty2;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 3) return this.ProjectedProperty3;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 4) return this.ProjectedProperty4;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 5) return this.ProjectedProperty5;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 6) return this.ProjectedProperty6;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 7) return this.ProjectedProperty7;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 8) return this.ProjectedProperty8;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 9) return this.ProjectedProperty9;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 2) return this.ProjectedProperty2;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 3) return this.ProjectedProperty3;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 4) return this.ProjectedProperty4;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 5) return this.ProjectedProperty5;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 6) return this.ProjectedProperty6;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 7) return this.ProjectedProperty7;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 8) return this.ProjectedProperty8;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 9) return this.ProjectedProperty9;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 10) return this.ProjectedProperty10;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10;TProperty11>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 2) return this.ProjectedProperty2;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10;TProperty11>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 3) return this.ProjectedProperty3;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10;TProperty11>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 4) return this.ProjectedProperty4;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10;TProperty11>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 5) return this.ProjectedProperty5;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10;TProperty11>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 6) return this.ProjectedProperty6;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10;TProperty11>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 7) return this.ProjectedProperty7;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10;TProperty11>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 8) return this.ProjectedProperty8;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10;TProperty11>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 9) return this.ProjectedProperty9;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10;TProperty11>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 10) return this.ProjectedProperty10;
Magic Number,Microsoft.OData.Service.Internal,ExpandedWrapper<TExpandedElement;TProperty0;TProperty1;TProperty2;TProperty3;TProperty4;TProperty5;TProperty6;TProperty7;TProperty8;TProperty9;TProperty10;TProperty11>,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Internal\ExpandedWrapper.cs,InternalGetExpandedPropertyValue,The following statement contains a magic number: if (nameIndex == 11) return this.ProjectedProperty11;
Missing Default,Microsoft.OData.Service,EdmValueParser,C:\repos\OData_odata.net\src\Microsoft.OData.Edm\Csdl\EdmValueParser.cs,TryParseBool,The following switch statement is missing a default case: switch (value[0])                      {                          case '1':                              result = true;                              return true;                          case '0':                              result = false;                              return true;                      }
Missing Default,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,Visit,The following switch statement is missing a default case: switch (node.OperatorKind)              {                  case BinaryOperatorKind.Equal:                  case BinaryOperatorKind.NotEqual:                  case BinaryOperatorKind.GreaterThan:                  case BinaryOperatorKind.GreaterThanOrEqual:                  case BinaryOperatorKind.LessThan:                  case BinaryOperatorKind.LessThanOrEqual:                  case BinaryOperatorKind.Has:                      return this.TranslateComparison(node.OperatorKind' left' right);              }
Missing Default,Microsoft.OData.Service.Parsing,NodeToExpressionTranslator,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\NodeToExpressionTranslator.cs,TranslateComparison,The following switch statement is missing a default case: switch (operatorKind)              {                  case BinaryOperatorKind.Equal:                      left = ExpressionGenerator.GenerateEqual(left' right);                      break;                  case BinaryOperatorKind.NotEqual:                      left = ExpressionGenerator.GenerateNotEqual(left' right);                      break;                  case BinaryOperatorKind.GreaterThan:                      left = ExpressionGenerator.GenerateGreaterThan(left' right' comparisonMethodInfo);                      break;                  case BinaryOperatorKind.GreaterThanOrEqual:                      left = ExpressionGenerator.GenerateGreaterThanEqual(left' right' comparisonMethodInfo);                      break;                  case BinaryOperatorKind.LessThan:                      left = ExpressionGenerator.GenerateLessThan(left' right' comparisonMethodInfo);                      break;                  case BinaryOperatorKind.LessThanOrEqual:                      left = ExpressionGenerator.GenerateLessThanEqual(left' right' comparisonMethodInfo);                      break;              }
Missing Default,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,ParseNumber,The following switch statement is missing a default case: switch (tc)              {                  case TypeCode.SByte:                      sbyte sb;                      if (SByte.TryParse(text' out sb))                      {                          return sb;                      }                        break;                  case TypeCode.Byte:                      byte b;                      if (Byte.TryParse(text' out b))                      {                          return b;                      }                        break;                  case TypeCode.Int16:                      short s;                      if (Int16.TryParse(text' out s))                      {                          return s;                      }                        break;                  case TypeCode.Int32:                      int i;                      if (Int32.TryParse(text' out i))                      {                          return i;                      }                        break;                  case TypeCode.Int64:                      long l;                      if (Int64.TryParse(text' out l))                      {                          return l;                      }                        break;                  case TypeCode.Single:                      float f;                      if (Single.TryParse(text' out f))                      {                          return f;                      }                        break;                  case TypeCode.Double:                      double d;                      if (Double.TryParse(text' out d))                      {                          return d;                      }                        break;                  case TypeCode.Decimal:                      decimal e;                      if (Decimal.TryParse(text' out e))                      {                          return e;                      }                        break;              }
Missing Default,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (targetCode)                      {                          case TypeCode.SByte:                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (targetCode)                      {                          case TypeCode.Byte:                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (targetCode)                      {                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (targetCode)                      {                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (targetCode)                      {                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (targetCode)                      {                          case TypeCode.Single:                          case TypeCode.Double:                              return true;                      }
Missing Default,Microsoft.OData.Service.Parsing,FunctionExpressionBinder,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Parsing\FunctionExpressionBinder.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode(ce.Type))                              {                                  case TypeCode.Int32:                                  case TypeCode.Int64:                                      value = ParseNumber(text' target);                                      break;                                  case TypeCode.Double:                                      if (target == typeof(decimal))                                      {                                          value = ParseNumber(text' target);                                      }                                        break;                              }
Missing Default,Microsoft.OData.Service.Providers,MetadataProviderEdmSilentNavigationProperty,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\MetadataProviderEdmSilentNavigationProperty.cs,MetadataProviderEdmSilentNavigationProperty,The following switch statement is missing a default case: switch (multiplicity)              {                  case EdmMultiplicity.One:                      this.type = new EdmEntityTypeReference(this.partner.DeclaringEntityType()' false);                      break;                  case EdmMultiplicity.ZeroOrOne:                      this.type = new EdmEntityTypeReference(this.partner.DeclaringEntityType()' true);                      break;                  case EdmMultiplicity.Many:                      this.type = new EdmCollectionTypeReference(new EdmCollectionType(new EdmEntityTypeReference(this.partner.DeclaringEntityType()' false)));                      break;              }
Missing Default,Microsoft.OData.Service.Providers,ResourceType,C:\repos\OData_odata.net\test\FunctionalTests\Service\Microsoft\OData\Service\Providers\ResourceType.cs,ResourceType,The following switch statement is missing a default case: switch (resourceTypeKind)              {                  case ResourceTypeKind.Primitive:                      this.InitializeMetadataAndSchemaVersionForPrimitiveType();                      break;                  case ResourceTypeKind.Collection:                      this.InitializeMetadataAndSchemaVersionForCollectionType();                      break;                  case ResourceTypeKind.EntityCollection:                      this.InitializeMetadataAndSchemaVersionForEntityCollectionType();                      break;              }
