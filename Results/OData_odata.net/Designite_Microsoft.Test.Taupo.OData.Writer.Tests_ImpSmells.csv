Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The method has 298 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTestExpectedResults,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestExpectedResults.cs,GetComparer,The method has 102 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInHeaderTest,The method has 154 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInPayloadTest,The method has 241 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The method has 153 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteBatchPayload,The method has 104 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchResults,The method has 180 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The method has 117 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionErrorTest,The method has 128 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadTest,The method has 101 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionWriterTest,The method has 139 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The method has 171 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The method has 101 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveTest,The method has 175 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The method has 120 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests,WriterPayloads,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterPayloads.cs,EntryPayloads,The method has 122 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests,WriterPayloads,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterPayloads.cs,NamedStreamPayloads,The method has 109 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WritePayload,The method has 109 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,The method has 118 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The method has 270 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,ActionAndFunctionPayloadOrderTest,The method has 104 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,OpenPropertiesInEntryTest,The method has 107 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightPropertyWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightPropertyWriterTests.cs,WriteUntypedValueTest,The method has 172 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonWriterTests.cs,BasicJsonWriterTest,The method has 112 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterStatesTests.cs,ParameterWriterStateMachineErrorTests,The method has 139 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The method has 398 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The method has 134 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The method has 314 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The method has 127 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetHeadersForPayloadTest,The method has 242 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,CreateContentTypeHeaderTestCases,The method has 139 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,UriHandlingTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\UriHandlingTests.cs,BaseUriErrorTest,The method has 249 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,UriHandlingTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\UriHandlingTests.cs,ResolverUriTest,The method has 120 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The method has 183 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkTest,The method has 123 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The method has 122 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntrySerializationTypeNameAnnotationTest,The method has 127 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The method has 103 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The method has 133 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The method has 103 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,InferredTypeNamesTests,The method has 135 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyTypeNameTest,The method has 120 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The method has 107 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The method has 403 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicateNavigationLinkTest,The method has 336 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The method has 222 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The method has 264 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The method has 118 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidPropertyValueTypeTest,The method has 116 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidCollectionItemTypeTest,The method has 183 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,MissingPropertyTest,The method has 115 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The method has 371 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The method has 163 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The method has 157 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The method has 176 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The method has 465 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The method has 107 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The method has 101 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateCollectionPropertyDescriptors,The method has 106 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,ComplexValueODataTypeAnnotationTest,The method has 147 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The method has 168 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,ServiceDocumentErrorTests,The method has 106 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The method has 159 lines of code.
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,InvokeBatchWriterAction,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTestExpectedResults,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestExpectedResults.cs,GetChangeSet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTestExpectedResults,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestExpectedResults.cs,GetComparer,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteBatchPayload,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchResults,Cyclomatic complexity of the method is 28
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchOperations,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateBatchConfigurations,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTestDescriptor.cs,CreatePayloadItems,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterUtils.cs,WriteCollectionPayload,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterUtils.cs,CreateResultTemplates,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataPayloadKindUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataPayloadKindUtils.cs,IsSupported,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests,ObjectModelToMessageWriter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ObjectModelToMessageWriter.cs,WriteMessage,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WritePayload,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteWithStreamErrors,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.WriterCombinatorialEngine,WriterCombinatorialEngine,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterCombinatorialEngine\WriterCombinatiorialEngineProvider.cs,NextCombination,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,CreateContentTypeHeaderTestCases,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,CreateResultTemplates,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchPayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchPayloadWriterTestDescriptor.cs,BatchPayloadWriterTestDescriptor,The method has 5 parameters. Parameters: settings' payloadItem' rawValueAsString' rawBytes' expectedContentType
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchPayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchPayloadWriterTestDescriptor.cs,BatchPayloadWriterTestDescriptor,The method has 5 parameters. Parameters: settings' payloadItems' rawValueAsString' rawBytes' expectedContentType
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,InvokeBatchWriterAction,The method has 5 parameters. Parameters: writer' writerAction' testConfiguration' readOperationReady' setupResult
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetRequest,The method has 6 parameters. Parameters: method' uri' contentId' headers' payload' ignoreCrossReferencingRule
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetRequest,The method has 5 parameters. Parameters: method' uri' contentId' headers' payload
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteBatchPayload,The method has 5 parameters. Parameters: writer' flush' testDescriptor' testConfiguration' assert
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ValidateBatchResult,The method has 8 parameters. Parameters: stream' testConfiguration' payloadConfiguration' expectedResults' contentTypeHeader' exception' assert' exceptionVerifier
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WritePayloadToStream,The method has 5 parameters. Parameters: operationResponseMessage' testConfiguration' stringPayload' odataPayload' assert
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WritePayloadToStream,The method has 5 parameters. Parameters: operationRequestMessage' testConfiguration' stringPayload' odataPayload' assert
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteStringPayloadToStream,The method has 5 parameters. Parameters: syncStreamFunc' asyncStreamFunc' isAsync' stringPayload' assert
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchResults,The method has 6 parameters. Parameters: expectedResults' testConfiguration' batchBoundary' stream' assert' error
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchOperations,The method has 7 parameters. Parameters: reader' testConfiguration' operationDescriptor' boundary' endBoundary' lastOperation' error
Long Parameter List,Microsoft.Test.Taupo.OData.Tests.WriterTests.BatchWriter,BatchWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestDescriptor.cs,BatchWriterTestDescriptor,The method has 5 parameters. Parameters: settings' invocationsAndOperationDescriptors' expectedHeaders' baseUri' urlResolver
Long Parameter List,Microsoft.Test.Taupo.OData.Tests.WriterTests.BatchWriter,BatchWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestDescriptor.cs,BatchWriterTestDescriptor,The method has 5 parameters. Parameters: settings' invocationsAndOperationDescriptors' maxPartsPerBatch' maxOperationsPerChangeset' expectedException
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTestDescriptor.cs,CollectionWriterTestDescriptor,The method has 6 parameters. Parameters: settings' collectionName' collectionTypeName' payloadItems' expectedResultCallback' model
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTestDescriptor.cs,CollectionWriterTestDescriptor,The method has 5 parameters. Parameters: settings' collectionName' invocations' expectedExceptionFunc' collectionItem
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTestDescriptor.cs,CollectionWriterTestDescriptor,The method has 7 parameters. Parameters: settings' collectionName' invocations' expectedExceptionFunc' collectionItem' errorItem' model
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTestDescriptor.cs,CollectionWriterTestDescriptor,The method has 5 parameters. Parameters: settings' collectionName' payloadItems' expectedException' model
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTestDescriptor.cs,CollectionWriterTestDescriptor,The method has 5 parameters. Parameters: settings' collectionName' itemDescriptions' expectedException' model
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTestDescriptor.cs,CollectionWriterTestDescriptor,The method has 5 parameters. Parameters: settings' collectionName' payloadItems' expectedResultCallback' model
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTestDescriptor.cs,CreatePayloadItems,The method has 5 parameters. Parameters: invocations' payloadItem' errorItem' itemDescriptions' errorOnly
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.Common,NonDisposingStream,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\WriterTestDescriptor.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.Common,NonDisposingStream,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\WriterTestDescriptor.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.Common,PayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\PayloadWriterTestDescriptor.cs,PayloadWriterTestDescriptor,The method has 5 parameters. Parameters: settings' payloadItem' rawValueAsString' rawBytes' expectedContentType
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.Common,PayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\PayloadWriterTestDescriptor.cs,PayloadWriterTestDescriptor,The method has 5 parameters. Parameters: settings' payloadItems' rawValueAsString' rawBytes' expectedContentType
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.Common,PayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\PayloadWriterTestDescriptor.cs,PayloadWriterTestDescriptor,The method has 7 parameters. Parameters: settings' payloadItem' atomResult' jsonResult' atomExtractor' jsonExtractor' disableXmlNamespaceNormalization
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.Common,PayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\PayloadWriterTestDescriptor.cs,PayloadWriterTestDescriptor,The method has 7 parameters. Parameters: settings' payloadItems' atomResult' jsonResult' atomExtractor' jsonExtractor' disableXmlNamespaceNormalization
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,ObjectModelToMessageWriter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ObjectModelToMessageWriter.cs,WriteMessage,The method has 5 parameters. Parameters: messageWriter' payloadKind' payload' model' functionImport
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,ODataWriterTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ODataWriterTestCase.cs,WriteAndLogODataPayload,The method has 5 parameters. Parameters: originalPayload' message' odataVersion' format' writeToStream
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteActionAndVerifyODataPayload,The method has 5 parameters. Parameters: writeAction' descriptor' testConfiguration' assert' baselineLogger
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteAndVerifyODataParameterPayload,The method has 5 parameters. Parameters: descriptor' testConfiguration' assert' baselineLogger' functionImport
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteAndVerifyODataPayloadElement,The method has 6 parameters. Parameters: descriptor' testConfiguration' assert' payloadElementWriter' comparer' xmlConverter
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteAndVerifyTopLevelContent,The method has 6 parameters. Parameters: descriptor' testConfiguration' writerAction' assert' settings' baselineLogger
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,RunTopLevelPropertyPayload,The method has 5 parameters. Parameters: testDescriptor' testConfiguration' alwaysSpecifyOwningContainer' baselineLogger' writeAction
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,CreateMessageWriter,The method has 5 parameters. Parameters: stream' testConfiguration' assert' settings' model
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,CreateMessageWriter,The method has 7 parameters. Parameters: stream' testConfiguration' assert' testMessage' settings' model' urlResolver
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,CreateMessageWriter,The method has 5 parameters. Parameters: message' model' testConfiguration' assert' settings
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,CreateOutputMessageFromStream,The method has 5 parameters. Parameters: messageContent' testConfiguration' payloadKind' customContentTypeHeader' urlResolver
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WritePayload,The method has 5 parameters. Parameters: messageWriter' writer' flush' items' throwUserExceptionAt
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,The method has 8 parameters. Parameters: messageWriter' batchPayload' converter' writer' model' assert' config' flush
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteWithStreamErrors,The method has 5 parameters. Parameters: testCase' invalidSettingSelector' testConfiguration' writeAction' assert
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,ValidateResult,The method has 6 parameters. Parameters: stream' testConfiguration' expectedResults' exception' assert' exceptionVerifier
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,ValidateExceptionOrLogResult,The method has 7 parameters. Parameters: message' testConfiguration' expectedResults' exception' assert' exceptionVerifier' baselineLogger
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,Read,The method has 5 parameters. Parameters: expectedPayload' message' formatSelector' contentType' deserializer
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RunContentTypeTest,The method has 6 parameters. Parameters: item' payloadKind' model' entitySet' entityType' testCases
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RunTopLevelContentTypeTest,The method has 7 parameters. Parameters: value' payloadKind' model' modelContainer' writerFunc' testCases' onlyResponses
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RunCollectionContentTypeTest,The method has 6 parameters. Parameters: values' model' collectionName' collectionTypeName' collectionItemType' testCases
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,NonNullableEdmPrimitiveTypeWithValue,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,NonNullableEdmPrimitiveTypeWithValue,The method has 5 parameters. Parameters: type' value' atom' jsonLight' version
Long Parameter List,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,CreateResultTemplates,The method has 6 parameters. Parameters: baseUri' workspaceName' collections' singletons' xmlResultTemplate' jsonLightResultTemplate
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterHttpMethodTests,The length of the parameter createChangeSetRequestWithNullContentId is 39.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterHttpMethodTests,The length of the parameter changeSetOpWithNoContentIdTestCases is 35.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInPayloadTest,The length of the parameter entryPayloadExpectedAtomResultTemplate is 38.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInPayloadTest,The length of the parameter entryPayloadExpectedJsonResultTemplate is 38.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The length of the parameter entryPayloadExpectedJsonResult is 30.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The length of the parameter errorPayloadExpectedJsonResult is 30.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the parameter endBatchBeforeEndChangesetException is 35.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the parameter startChangesetWithoutBatchException is 35.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateBatchConfigurations,The length of the parameter batchConfigurationPermutations is 30.
Long Identifier,Microsoft.Test.Taupo.OData.Tests.WriterTests.BatchWriter,BatchWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestDescriptor.cs,BatchWriterTestDescriptor,The length of the parameter invocationsAndOperationDescriptors is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Tests.WriterTests.BatchWriter,BatchWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestDescriptor.cs,BatchWriterTestDescriptor,The length of the parameter invocationsAndOperationDescriptors is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Tests.WriterTests.BatchWriter,BatchWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestDescriptor.cs,BatchWriterTestDescriptor,The length of the parameter invocationsAndOperationDescriptors is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Tests.WriterTests.BatchWriter,BatchWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestDescriptor.cs,BatchWriterTestDescriptor,The length of the parameter invocationsAndOperationDescriptors is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Tests.WriterTests.BatchWriter,BatchWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestDescriptor.cs,BatchWriterTestDescriptor,The length of the parameter invocationsAndOperationDescriptors is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Tests.WriterTests.BatchWriter,BatchWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestDescriptor.cs,BatchWriterTestDescriptor,The length of the parameter invocationsAndOperationDescriptors is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Tests.WriterTests.BatchWriter,BatchWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestDescriptor.cs,CreateExpectedResultCallback,The length of the parameter invocationsAndOperationDescriptors is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Tests.WriterTests.BatchWriter,BatchWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestDescriptor.cs,,The length of the parameter invocationsAndOperationDescriptors is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadTest,The length of the parameter complexServiceOpFunctionImport is 30.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadTest,The length of the parameter geometryServiceOpFunctionImport is 31.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadTest,The length of the parameter geographyServiceOpFunctionImport is 32.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Common,WriterTestConfigurationProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\WriterTestConfigurationProvider.cs,CreateConfigurationsWithIndent,The length of the parameter configurationsWithDefaultSettings is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Common,PayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\PayloadWriterTestDescriptor.cs,PayloadWriterTestDescriptor,The length of the parameter disableXmlNamespaceNormalization is 32.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Common,PayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\PayloadWriterTestDescriptor.cs,PayloadWriterTestDescriptor,The length of the parameter disableXmlNamespaceNormalization is 32.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonWriterTests.cs,BasicJsonWriterTest,The length of the parameter expectedPositiveOffsetISOFormat is 31.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonWriterTests.cs,BasicJsonWriterTest,The length of the parameter expectedNegativeOffsetISOFormat is 31.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,GetComplexCollectionContainingCollectionItem,The length of the parameter complexWithCollectionItemCollectionStart is 40.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,GetComplexCollectionContainingCollectionItem,The length of the parameter complexWithCollectionItemAnnotation is 35.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the parameter complexWithNestedComplex_Nested is 31.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the parameter complexWithNestedComplex_NestdResourceAnnotation is 48.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the parameter complexWithNestedComplex_NestedInfo is 35.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the parameter complexWithNestedComplex_NestedInfoAnnotation is 45.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the parameter functionImport_PrimitiveCollection is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the parameter functionImport_NonNullablePrimitiveCollection is 45.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the parameter functionImport_ComplexCollection is 32.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the parameter iedmFunctionImport_PrimitiveTwoParameters is 41.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the parameter iedmFunctionImport_PrimitiveInt is 31.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the parameter iedmFunctionImport_PrimitiveDouble is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetHeadersForPayloadTest,The length of the parameter multipleTypesWithQualityValues is 30.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkTest,The length of the parameter edmNavigationPropertyAssociationLinkOne is 39.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkTest,The length of the parameter edmNavigationPropertyAssociationLinkTwo is 39.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the parameter edmNavigationPropertyAssociationLinkOne is 39.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the parameter edmNavigationPropertyAssociationLinkTwo is 39.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkMetadataValidationTest,The length of the parameter edmNavigationPropertyAssociationLinkOne is 39.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkMetadataValidationTest,The length of the parameter edmNavigationPropertyAssociationLinkTwo is 39.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter ApplicationJsonODataLightStreaming is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter ApplicationJsonODataLightStreamingAndDefaultMetadata is 52.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter ApplicationJsonODataLightNonStreaming is 37.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter ApplicationJsonODataLightNonStreamingAndDefaultMetadata is 55.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter ApplicationJsonAndJsonLightStreaming is 36.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter ApplicationJsonAndJsonStreaming is 31.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter ApplicationJsonStreamingAndJsonNonStreaming is 43.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter ApplicationJsonLightNonStreamingAndJsonStreaming is 48.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter ApplicationJsonLightNonStreamingAndJsonLightStreaming is 53.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter ApplicationJsonAndAtomXmlWithQuality is 36.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter ApplicationJsonWithQualityAndAtomXml is 36.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter AcceptHeaderWithQualityValues1 is 30.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter AcceptHeaderWithQualityValues2 is 30.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter AcceptHeaderWithQualityValues3 is 30.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter AcceptHeaderWithUnsupportedParameter is 36.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter AcceptHeaderWithMultipleSupportedEntryTypes is 43.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter AcceptHeaderWithMultipleSupportedFeedTypes is 42.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter AcceptHeaderWithMultipleAcceptParameters is 40.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter AcceptHeaderWithInvalidValueEntry is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,,The length of the parameter AcceptHeaderWithInvalidValueFeed is 32.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryDefaultStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryDefaultStreamTests.cs,,The length of the parameter JsonDefaultStreamMetadataPropertyNames is 38.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The length of the parameter depthOverHalfButStillBelowLimit is 31.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The length of the parameter belowLimitForSinglePropertyEntry is 32.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The length of the parameter belowLimitForSinglePropertyInCollectionEntry is 44.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the parameter primitivePropertiesJsonResultLines is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the parameter collectionWithoutTypeNameAtomPayload is 36.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the parameter collectionWithoutTypeNameJsonPayload is 36.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the parameter complexCollectionWithoutTypeName is 32.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the parameter collectionPropertiesJsonResult is 30.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertiesOnOpenTypes,The length of the parameter entityWithNullUndeclaredProperty is 32.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter policeStationLinkIsCollectionNull is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter policeStationLinkIsCollectionTrue is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter policeStationLinkIsCollectionFalse is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter expandedEntryLinkWithFeedContentError is 37.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter expandedFeedLinkWithEntryContentError is 37.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter expandedFeedLinkWithEntryMetadataError is 38.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter expandedEntryLinkWithFeedMetadataErrorResponse is 46.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter expandedFeedLinkPayloadWithEntryMetadataErrorRequest is 52.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter expandedFeedLinkPayloadWithEntryMetadataErrorResponse is 53.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter expandedEntryLinkPayloadWithFeedMetadataErrorResponse is 53.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter expandedEntryLinkPayloadWithFeedMetadataError is 45.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter multipleItemsInExpandedLinkError is 32.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the parameter entityReferenceLinkInResponseError is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinkValidationTest,The length of the parameter entityReferenceLinkTestDescriptor is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinkValidationTest,The length of the parameter entityReferenceLinksTestDescriptor is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidPropertyValueTypeTest,The length of the parameter entityTypeWithCollectionProperty is 32.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidCollectionItemTypeTest,The length of the parameter entityTypeWithComplexCollectionProperty is 39.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidCollectionItemTypeTest,The length of the parameter entityTypeWithPrimitiveCollectionProperty is 41.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,NullCollectionTest,The length of the parameter entityTypeWithComplexCollectionProperty is 39.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,NullCollectionTest,The length of the parameter entityTypeWithPrimitiveCollectionProperty is 41.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the parameter policeStationLinkIsCollectionNull is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the parameter policeStationLinkIsCollectionTrue is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the parameter policeStationLinkIsCollectionFalse is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the parameter expandedFeedLinkWithEntryMetadataError is 38.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the parameter expandedEntryLinkWithFeedMetadataError is 38.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the parameter propertiesJsonLightRequestResultLines is 37.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the parameter propertiesJsonLightResponseResultLines is 38.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the parameter propertyJsonLightWithMetadataAnnotationResult is 45.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateComplexPropertyDescriptors,The length of the parameter propertiesJsonLightResultsFunc is 30.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateComplexPropertyDescriptors,The length of the parameter propertiesJsonLightRequestResults is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateComplexPropertyDescriptors,The length of the parameter propertiesJsonLightResponseResults is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateCollectionPropertyDescriptors,The length of the parameter propertiesJsonLightResultsFunc is 30.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateCollectionPropertyDescriptors,The length of the parameter propertiesJsonLightRequestResults is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateCollectionPropertyDescriptors,The length of the parameter propertiesJsonLightResponseResults is 34.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateComplexCollectionPropertyDescriptors,The length of the parameter propertiesJsonLightResultsFunc is 30.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,PropertyWithInvalidNameOnComplexValueTest,The length of the parameter nonNullablePrimitiveTypeWithValue is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,PropertyWithInvalidNameOnEntryTest,The length of the parameter nonNullablePrimitiveTypeWithValue is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,ComplexValueODataTypeAnnotationTest,The length of the parameter ODataJsonLightValueSerializer_MissingTypeNameOnComplex is 54.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNonNullPropertyOnComplexValueTestDescriptor,The length of the parameter nonNullablePrimitiveTypeWithValue is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNonNullPropertyOnEntryTestDescriptor,The length of the parameter nonNullablePrimitiveTypeWithValue is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,,The length of the parameter MissingTypeNameSentinelTextAtom is 31.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,,The length of the parameter MissingTypeNameSentinelTextJson is 31.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,,The length of the parameter MissingTypeNameSentinelXElement is 31.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,,The length of the parameter MissingTypeNameSentinelJsonProperty is 35.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,,The length of the parameter InvalidCharactersInPropertyNames is 32.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,,The length of the parameter NonNullableEdmPrimitiveTypesWithValues is 38.
Long Identifier,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,,The length of the parameter ApplicationOctetStreamContentType is 33.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Atom,TestAtomUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Atom\TestAtomUtils.cs,ExtractNamedStreamLinksFromEntry,The length of the statement  "                .SingleOrDefault(l => l.Attribute(TestAtomConstants.AtomLinkRelationAttributeName).Value == TestAtomConstants.ODataStreamPropertyMediaResourceRelatedLinkRelationPrefix + streamName); " is 182.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Atom,TestAtomUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Atom\TestAtomUtils.cs,ExtractNamedStreamLinksFromEntry,The length of the statement  "                .SingleOrDefault(l => l.Attribute(TestAtomConstants.AtomLinkRelationAttributeName).Value == TestAtomConstants.ODataStreamPropertyEditMediaRelatedLinkRelationPrefix + streamName); " is 178.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchPayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchPayloadWriterTestDescriptor.cs,RunTest,The length of the statement  "            ExceptionUtilities.Assert(expectedResult != null' "The expected result could not be determined for the test. Did you specify it?"); " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchPayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchPayloadWriterTestDescriptor.cs,RunTest,The length of the statement  "                // We create a new test configuration for batch because the payload indicates whether we are dealing with a request or a response and the configuration won't know that in advance " is 178.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchPayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchPayloadWriterTestDescriptor.cs,RunTest,The length of the statement  "                var newTestConfig = new WriterTestConfiguration(testConfiguration.Format' testConfiguration.MessageWriterSettings' this.PayloadElement is BatchRequestPayload' testConfiguration.Synchronous); " is 190.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchPayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchPayloadWriterTestDescriptor.cs,RunTest,The length of the statement  "                using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(message' model' newTestConfig' this.settings.Assert' null)) " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchPayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchPayloadWriterTestDescriptor.cs,CreateOutputMessage,The length of the statement  "            // We create a new test configuration for batch because the payload indicates whether we are dealing with a request or a response and the configuration won't know that in advance " is 178.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchPayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchPayloadWriterTestDescriptor.cs,CreateOutputMessage,The length of the statement  "            var newTestConfig = new WriterTestConfiguration(testConfiguration.Format' testConfiguration.MessageWriterSettings' this.PayloadElement is BatchRequestPayload' testConfiguration.Synchronous); " is 190.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchPayloadWriterTestDescriptor<T>,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchPayloadWriterTestDescriptor.cs,CreateOutputMessage,The length of the statement  "            TestMessage testMessage = TestWriterUtils.CreateOutputMessageFromStream(messageStream' newTestConfig' this.PayloadKind' boundary.BatchBoundaryInHeader' this.UrlResolver); " is 170.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromStart") }' " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotCompleteChangeSetWithoutActiveChangeSet") }' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromBatchStarted") }' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotCompleteChangeSetWithoutActiveChangeSet") }' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromChangeSetStarted") }' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotCompleteBatchWithActiveChangeSet") }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotStartChangeSetWithActiveChangeSet") }' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                            return new BatchWriterStatesTestSetupResult { Message = w.CreateOperationRequestMessage("GET"' new Uri("http://odata.org")) }; " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationCreated") }' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotCompleteChangeSetWithoutActiveChangeSet") }' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamRequested") }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamRequested") }' " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamRequested") }' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamRequested") }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.Operation' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamRequested") }' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.GetOperationStream' ODataExpectedExceptions.ODataException("ODataBatchOperationMessage_VerifyNotCompleted") }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamDisposed") }' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotCompleteChangeSetWithoutActiveChangeSet") }' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.GetOperationStream' ODataExpectedExceptions.ODataException("ODataBatchOperationMessage_VerifyNotCompleted") }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                            return new BatchWriterStatesTestSetupResult { Message = w.CreateOperationRequestMessage("POST"' new Uri("http://odata.org")' "1") }; " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationCreated") }' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotCompleteBatchWithActiveChangeSet") }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotStartChangeSetWithActiveChangeSet") }' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamRequested") }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamRequested") }' " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamRequested") }' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamRequested") }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.Operation' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamRequested") }' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.GetOperationStream' ODataExpectedExceptions.ODataException("ODataBatchOperationMessage_VerifyNotCompleted") }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamDisposed") }' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotCompleteBatchWithActiveChangeSet") }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotStartChangeSetWithActiveChangeSet") }' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.GetOperationStream' ODataExpectedExceptions.ODataException("ODataBatchOperationMessage_VerifyNotCompleted") }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromChangeSetCompleted") }' " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotCompleteChangeSetWithoutActiveChangeSet") }' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromBatchCompleted") }' " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndBatch' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromBatchCompleted") }' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromBatchCompleted") }' " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotCompleteChangeSetWithoutActiveChangeSet") }' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.Operation' ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromBatchCompleted") }' " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartBatch' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromError"' "Error"' "BatchStarted") }' " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndBatch' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromError"' "Error"' "BatchCompleted") }' " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.StartChangeset' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromError"' "Error"' "ChangesetStarted") }' " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.EndChangeset' ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotCompleteChangeSetWithoutActiveChangeSet") }' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,BatchWriterStatesTest,The length of the statement  "                        { BatchWriterAction.Operation' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromError"' "Error"' "OperationCreated") }' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterSyncAsyncMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterSyncAsyncMismatchTests.cs,SyncAsyncMismatchTest,The length of the statement  "                                "A synchronous operation was called on an asynchronous batch writer. Calls on a batch writer instance must be either all synchronous or all asynchronous." : " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterSyncAsyncMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterSyncAsyncMismatchTests.cs,SyncAsyncMismatchTest,The length of the statement  "                                "An asynchronous operation was called on a synchronous batch writer. Calls on a batch writer instance must be either all synchronous or all asynchronous."); " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTestExpectedResults,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestExpectedResults.cs,GetChangeSet,The length of the statement  "                if (this.InvocationsAndOperationDescriptors[i].Invocation == BatchWriterTestDescriptor.WriterInvocations.WriteStartChangeSet) " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTestExpectedResults,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestExpectedResults.cs,GetChangeSet,The length of the statement  "                if (this.InvocationsAndOperationDescriptors[i].Invocation == BatchWriterTestDescriptor.WriterInvocations.WriteEndChangeSet) " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTestExpectedResults,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestExpectedResults.cs,GetChangeSet,The length of the statement  "                else if (this.InvocationsAndOperationDescriptors[i].Invocation == BatchWriterTestDescriptor.WriterInvocations.WriteChangeSetOperation) " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTestExpectedResults,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestExpectedResults.cs,GetQueryOperation,The length of the statement  "                if (this.InvocationsAndOperationDescriptors[i].Invocation == BatchWriterTestDescriptor.WriterInvocations.WriteQueryOperation) " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTestExpectedResults,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestExpectedResults.cs,GetComparer,The length of the statement  "                        throw new InvalidOperationException("Found unsupported operation descriptor of type " + operationDescriptor.GetType().FullName + "."); " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTestExpectedResults,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestExpectedResults.cs,GetOperationCount,The length of the statement  "                if (this.InvocationsAndOperationDescriptors[i].Invocation == BatchWriterTestDescriptor.WriterInvocations.WriteStartChangeSet) " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTestExpectedResults,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestExpectedResults.cs,GetOperationCount,The length of the statement  "                else if (this.InvocationsAndOperationDescriptors[i].Invocation == BatchWriterTestDescriptor.WriterInvocations.WriteEndChangeSet) " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTestExpectedResults,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestExpectedResults.cs,GetOperationCount,The length of the statement  "                else if (!inChangeSet && this.InvocationsAndOperationDescriptors[i].Invocation == BatchWriterTestDescriptor.WriterInvocations.WriteQueryOperation) " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterRequestTests,The length of the statement  "            IEnumerable<BatchWriterTestDescriptor> testDescriptors = testCases.Select(tc => new BatchWriterTestDescriptor(this.Settings' tc' (Dictionary<string' string>)null' baseUri)); " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterResponseTests,The length of the statement  "            var testDescriptors = testCases.Select(tc => new BatchWriterTestDescriptor(this.Settings' tc' (Dictionary<string' string>)null' baseUri)); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterBaseUriTests,The length of the statement  "                        ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchUtils_RelativeUriUsedWithoutBaseUriSpecified"' "/OData/OData.svc") " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterHttpMethodTests,The length of the statement  "                    BatchWriterUtils.ChangeSetRequest(method' new Uri("http://www.odata.org/OData/OData.svc/Products")' "1"' null' "First sample payload.")' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterHttpMethodTests,The length of the statement  "                    BatchWriterUtils.ChangeSetRequest(method' new Uri("http://www.odata.org/OData/OData.svc/Products")' string.Empty' null' "First sample payload.")' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterHttpMethodTests,The length of the statement  "                    ? new { Method = "GET"' ExpectedErrorMessage = "An invalid HTTP method 'GET' was detected for a request in a change set. Requests in change sets only support the HTTP methods 'POST'' 'PUT'' 'DELETE'' and 'PATCH'." } " is 215.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterHttpMethodTests,The length of the statement  "                    ? new { Method = "GET"' ExpectedErrorMessage = "An invalid HTTP method 'GET' was detected for a request in a change set. Requests in change sets only support the HTTP methods 'POST'' 'PUT'' 'DELETE'' and 'PATCH'." } " is 215.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterHttpMethodTests,The length of the statement  "                    : new { Method = method' ExpectedErrorMessage = "The header with name 'Content-ID' was not present in the header collection of the batch operation." }); " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterHttpMethodTests,The length of the statement  "                .Concat(changeSetOpWithNoContentIdTestCases.Select(tc => createChangeSetRequestWithNullContentId(tc.Method' tc.ExpectedErrorMessage))); " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInHeaderTest,The length of the statement  "                            BatchWriterUtils.ChangeSetRequest("POST"' new Uri("$NonExisting"' UriKind.Relative)' "2"' /*headers*/ null' payloadString' true)' " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInHeaderTest,The length of the statement  "                        ExpectedExceptionNoBaseUri = ODataExpectedExceptions.ODataException("ODataBatchUtils_RelativeUriStartingWithDollarUsedWithoutBaseUriSpecified"' "$NonExisting")' " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInHeaderTest,The length of the statement  "                        ExpectedExceptionNoBaseUri = ODataExpectedExceptions.ODataException("ODataBatchUtils_RelativeUriStartingWithDollarUsedWithoutBaseUriSpecified"' "$2")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInHeaderTest,The length of the statement  "                        ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_DuplicateContentIDsNotAllowed"' "Duplicate")' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInHeaderTest,The length of the statement  "                        ExpectedExceptionNoBaseUri = ODataExpectedExceptions.ODataException("ODataBatchWriter_DuplicateContentIDsNotAllowed"' "Duplicate")' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInHeaderTest,The length of the statement  "                        ExpectedExceptionNoBaseUri = ODataExpectedExceptions.ODataException("ODataBatchUtils_RelativeUriStartingWithDollarUsedWithoutBaseUriSpecified"' "$1")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInHeaderTest,The length of the statement  "                        ExpectedExceptionNoBaseUri = ODataExpectedExceptions.ODataException("ODataBatchUtils_RelativeUriStartingWithDollarUsedWithoutBaseUriSpecified"' "$2")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInHeaderTest,The length of the statement  "            IEnumerable<CrossReferencingTestCase> testCases = payloadStrings.SelectMany(payloadString => testCasesFunc(payloadString)); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInHeaderTest,The length of the statement  "                        ? new BatchWriterTestDescriptor(this.Settings' invocations.ToArray()' (Dictionary<string' string>)null' testCase.BaseUri) " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInPayloadTest,The length of the statement  "                @"<entry {0}xmlns=""" + TestAtomConstants.AtomNamespace + @""" xmlns:d=""" + TestAtomConstants.ODataNamespace + @""" xmlns:m=""" + TestAtomConstants.ODataMetadataNamespace + @""" xmlns:georss=""" + TestAtomConstants.GeoRssNamespace + @""" xmlns:gml=""" + TestAtomConstants.GmlNamespace + @""">"' " is 295.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInPayloadTest,The length of the statement  "            Func<Uri' string' WriterTestConfiguration' BatchWriterUtils.ODataPayload> createODataPayload = (uri' expectedUri' testConfig) => " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInPayloadTest,The length of the statement  "            IEnumerable<Func<WriterTestConfiguration' Uri' string' CrossReferencingTestCase>> testCaseFuncs = new Func<WriterTestConfiguration' Uri' string' CrossReferencingTestCase>[] " is 172.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInPayloadTest,The length of the statement  "                        ExpectedExceptionNoBaseUri = ODataExpectedExceptions.ODataException("ODataWriter_RelativeUriUsedWithoutBaseUriSpecified"' "$NonExisting")' " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInPayloadTest,The length of the statement  "                        ExpectedExceptionNoBaseUri = ODataExpectedExceptions.ODataException("ODataWriter_RelativeUriUsedWithoutBaseUriSpecified"' "$2")' " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInPayloadTest,The length of the statement  "                        ExpectedExceptionNoBaseUri = ODataExpectedExceptions.ODataException("ODataWriter_RelativeUriUsedWithoutBaseUriSpecified"' "$1")' " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterCrossReferencingLinksInPayloadTest,The length of the statement  "                        ExpectedExceptionNoBaseUri = ODataExpectedExceptions.ODataException("ODataWriter_RelativeUriUsedWithoutBaseUriSpecified"' "$2")' " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterUserExceptionInRequestTests,The length of the statement  "                    BatchWriterUtils.ChangeSetRequest("POST"' new Uri("http://www.odata.org/OData/OData.svc/Products")' "1"' null' "First sample payload.")' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterUserExceptionInRequestTests,The length of the statement  "                    BatchWriterUtils.ChangeSetRequest("POST"' new Uri("http://www.odata.org/OData/OData.svc/Products")' "1"' null' "First sample payload.")' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterUserExceptionInRequestTests,The length of the statement  "                    BatchWriterUtils.ChangeSetRequest("POST"' new Uri("http://www.odata.org/OData/OData.svc/Products")' "1"' null' "First sample payload.")' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The length of the statement  "                                new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }' " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The length of the statement  "                                new BatchWriterUtils.ODataPayload() { Items = feedPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }' " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The length of the statement  "                                new BatchWriterUtils.ODataPayload() { Items = errorPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }' " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The length of the statement  "                                new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }' " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The length of the statement  "                                new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }' " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The length of the statement  "                                new BatchWriterUtils.ODataPayload() { Items = errorPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }' " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The length of the statement  "                    var testDescriptor = new BatchWriterTestDescriptor(this.Settings' testWithDirection.Batch' (Dictionary<string' string>)null); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterChangeSetSizeTests,The length of the statement  "            var testDescriptors = testCases.Select(tc => createChangeSetBatch(tc.ChangeSetCount' tc.OperationsPerChangeSet' tc.MaxOperationsPerChangeSet' tc.ExpectedException)); " is 165.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterBatchSizeTests,The length of the statement  "            var testDescriptors = testCases.Select(tc => createQueryBatch(tc.QueryCount' tc.MaxPartsPerBatch' tc.ExpectedException)); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWithPayloadTests,The length of the statement  "                    currentPayload.AddAnnotation(new ODataBatchResponseRequestAnnotation() { BatchRequest = this.RequestGenerator.GenerateRequestPayload((BatchResponsePayload)currentPayload' payloadDescriptor.PayloadModel) }); " is 206.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWithPayloadTests,The length of the statement  "                testDescriptors.Add(new BatchPayloadWriterTestDescriptor<ODataPayloadElement>(this.PayloadWriterSettings' currentPayload) " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWithPayloadTests,The length of the statement  "               this.WriterTestConfigurationProvider.DefaultFormatConfigurationsWithIndent.Where(tc => tc.MessageWriterSettings.EnableMessageStreamDisposal == true)' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "            var callStartTwiceException = ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromBatchStarted"); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "            var callEndTwiceException = ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromBatchCompleted"); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "            var nestedChangeset = ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotStartChangeSetWithActiveChangeSet"); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "            var endBatchBeforeEndChangesetException = ODataExpectedExceptions.ODataException("ODataBatchWriter_CannotCompleteBatchWithActiveChangeSet"); " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "            var streamDisposedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromOperationContentStreamRequested"); " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "            var startChangesetWithoutBatchException = ODataExpectedExceptions.ODataException("ODataBatchWriter_InvalidTransitionFromStart"); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "            Tuple<ExpectedException' Action<WriterTestConfiguration' TestMessage>>[] cases = new Tuple<ExpectedException' Action<WriterTestConfiguration' TestMessage>>[] " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "                new Tuple<ExpectedException' Action<WriterTestConfiguration' TestMessage>>(callStartTwiceException' this.CallWriteStartTwice)' " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "                new Tuple<ExpectedException' Action<WriterTestConfiguration' TestMessage>>(callEndTwiceException' this.CallWriteEndTwice)' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "                new Tuple<ExpectedException' Action<WriterTestConfiguration' TestMessage>>(nestedChangeset' this.CallWriteStartChangesetTwice)' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "                new Tuple<ExpectedException' Action<WriterTestConfiguration' TestMessage>>(endBatchBeforeEndChangesetException' this.CallEndBatchBeforeEndChangeset)' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "                new Tuple<ExpectedException' Action<WriterTestConfiguration' TestMessage>>(streamDisposedException' this.WriteWhenSetToStreamDispose)' " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "                new Tuple<ExpectedException' Action<WriterTestConfiguration' TestMessage>>(startChangesetWithoutBatchException' this.StartChangesetWithoutStartingBatch) " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "                    TestMessage testMessage = TestWriterUtils.CreateOutputMessageFromStream(messageStream' testConfig' ODataPayloadKind.Batch' "batchboundary"' new TestUrlResolver()); " is 163.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterErrorTests,The length of the statement  "                    var match = testCase.Item1.ExpectedMessage.Verifier.IsMatch(testCase.Item1.ExpectedMessage.ResourceIdentifier' exception.Message' testCase.Item1.ExpectedMessage.Arguments); " is 172.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ReuseMessage,The length of the statement  "            using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(testMessage' null' config' this.Assert' null)) " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,CallWriteStartTwice,The length of the statement  "            using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(testMessage' null' config' this.Assert' null)) " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,CallWriteEndTwice,The length of the statement  "            using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(testMessage' null' config' this.Assert' null)) " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,CallWriteStartChangesetTwice,The length of the statement  "            using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(testMessage' null' config' this.Assert' null)) " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,CallEndBatchBeforeEndChangeset,The length of the statement  "            using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(testMessage' null' config' this.Assert' null)) " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,WriteWhenSetToStreamDispose,The length of the statement  "            using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(testMessage' null' config' this.Assert' null)) " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,WriteWhenSetToStreamDispose,The length of the statement  "                var messageConfig = new WriterTestConfiguration(ODataFormat.Json' messageWriterSettings' config.IsRequest' config.Synchronous); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,WriteWhenSetToStreamDispose,The length of the statement  "                using (ODataMessageWriterTestWrapper opWriterWrapper = TestWriterUtils.CreateMessageWriter(opmessage1.GetStream()' messageConfig' this.Assert' messageWriterSettings' null)) " is 172.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,StartChangesetWithoutStartingBatch,The length of the statement  "            using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(testMessage' null' config' this.Assert' null)) " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetRequests,The length of the statement  "            BatchWriterTestDescriptor.InvocationAndOperationDescriptor[] updateOperations1 = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[] " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetRequests,The length of the statement  "            BatchWriterTestDescriptor.InvocationAndOperationDescriptor[] updateOperations2 = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[] " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetRequests,The length of the statement  "            BatchWriterTestDescriptor.InvocationAndOperationDescriptor[] updateOperations3 = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[] " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetRequests,The length of the statement  "            BatchWriterTestDescriptor.InvocationAndOperationDescriptor[] updateOperations4 = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[] " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetRequests,The length of the statement  "            BatchWriterTestDescriptor.InvocationAndOperationDescriptor[] updateOperations5 = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[] " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetRequests,The length of the statement  "                ChangeSetRequest("DELETE"' new Uri("http://www.odata.org/OData/OData.svc/Products")' "3"' null' "Fourth sample payload")' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetRequests,The length of the statement  "            // NOTE: must not filter the operations since they may depend on each (cross-referencing) and subsetting would result in invalid payloads. " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetRequests,The length of the statement  "            return new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[][] { updateOperations1' updateOperations2' updateOperations3' updateOperations4' updateOperations5 }; " is 172.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetResponses,The length of the statement  "                ChangeSetResponse(200' "Sample response payload 4."' new Dictionary<string'string>() { { "Created-Date"' "Today" }' { "A"' "B" }' { "C"' "D" } })' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateDefaultChangeSetBatch,The length of the statement  "            Debug.Assert(changeSetSizes.Length == changeSetCount' "Size of the batch must match the length of the change set sizes array!"); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateDefaultChangeSetBatch,The length of the statement  "                    result.Add(ChangeSetRequest("POST"' new Uri("http://www.odata.org/OData/OData.svc/Products")' j.ToString()' null' "Sample payload.")); " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteBatchPayload,The length of the statement  "            foreach (BatchWriterTestDescriptor.InvocationAndOperationDescriptor invocationAndOperationDescriptor in testDescriptor.InvocationsAndOperationDescriptors) " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteBatchPayload,The length of the statement  "                                (BatchWriterTestDescriptor.BatchWriterQueryOperationTestDescriptor)invocationAndOperationDescriptor.OperationDescriptor; " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteBatchPayload,The length of the statement  "                            ODataBatchOperationRequestMessage queryOperationMessage = writer.CreateOperationRequestMessage(queryOperationDescriptor.Method' queryOperationDescriptor.Uri); " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteBatchPayload,The length of the statement  "                                (BatchWriterTestDescriptor.BatchWriterResponseOperationTestDescriptor)invocationAndOperationDescriptor.OperationDescriptor; " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteBatchPayload,The length of the statement  "                            WritePayloadToStream(queryOperationMessage' testConfiguration' responseOperationDescriptor.Payload' responseOperationDescriptor.ODataPayload' assert); " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteBatchPayload,The length of the statement  "                                    (BatchWriterTestDescriptor.BatchWriterChangeSetOperationTestDescriptor)invocationAndOperationDescriptor.OperationDescriptor; " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteBatchPayload,The length of the statement  "                                ODataBatchOperationRequestMessage changeSetOperation = writer.CreateOperationRequestMessage(changeSetOperationDescriptor.Method' changeSetOperationDescriptor.Uri' changeSetOperationDescriptor.ContentId); " is 203.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteBatchPayload,The length of the statement  "                                    (BatchWriterTestDescriptor.BatchWriterResponseOperationTestDescriptor)invocationAndOperationDescriptor.OperationDescriptor; " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteBatchPayload,The length of the statement  "                        throw new NotSupportedException("WriterInvocation kind " + invocationAndOperationDescriptor.ToString() + "is not supported."); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ValidateBatchResult,The length of the statement  "            assert.IsTrue(testConfiguration.Format == null || testConfiguration.Format == ODataFormat.Batch' "testConfiguration.Format == null || testConfiguration.Format == ODataFormat.Batch"); " is 182.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ValidateBatchResult,The length of the statement  "            bool success = CompareBatchResults(batchExpectedResults' payloadConfiguration' batchBoundary' stream' assert' out error); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteAndVerifyBatchPayload,The length of the statement  "                    using (var messageWriter = TestWriterUtils.CreateMessageWriter(testStream' batchConfiguration' assert' out testMessage' batchConfiguration.MessageWriterSettings' null' descriptor.UrlResolver)) " is 192.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteAndVerifyBatchPayload,The length of the statement  "                BatchWriterTestExpectedResults expectedResults = (BatchWriterTestExpectedResults)descriptor.ExpectedResultCallback(batchConfiguration); " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WritePayloadToStream,The length of the statement  "                WriteODataPayloadToStream(() => new ODataMessageWriter(operationResponseMessage' testConfiguration.MessageWriterSettings)' testConfiguration' odataPayload' assert); " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WritePayloadToStream,The length of the statement  "                WriteODataPayloadToStream(() => new ODataMessageWriter(operationRequestMessage' testConfiguration.MessageWriterSettings)' testConfiguration' odataPayload' assert); " is 163.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteODataPayloadToStream,The length of the statement  "            assert.IsTrue(testConfiguration.MessageWriterSettings.EnableMessageStreamDisposal' "The batch writer will fail if the batch operation stream doesn't get disposed after use."); " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,WriteODataPayloadToStream,The length of the statement  "            using (ODataMessageWriterTestWrapper messageWriterWrapper = new ODataMessageWriterTestWrapper(messageWriter' testConfiguration)) " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchResults,The length of the statement  "            // NOTE: this is not strictly necessary when using the TestStream but this utility can be used with different streams as well. " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchResults,The length of the statement  "                        BatchWriterTestDescriptor.BatchWriterOperationTestDescriptor[] changeSetOperations = expectedResults.GetChangeSet(changeSetIndex); " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchResults,The length of the statement  "                            var operationDescriptor = (BatchWriterTestDescriptor.BatchWriterOperationTestDescriptor)changeSetOperations[cOperationIndex]; " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchResults,The length of the statement  "                            if (!CompareBatchOperations(reader' testConfiguration' operationDescriptor' changesetBoundary' changesetEndBoundary' out lastOperation' out error)) " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchResults,The length of the statement  "                        BatchWriterTestDescriptor.BatchWriterOperationTestDescriptor queryOperation = expectedResults.GetQueryOperation(operationIndex); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchResults,The length of the statement  "                        if (!CompareBatchOperations(reader' testConfiguration' queryOperation' batchBoundary' batchEndBoundary' out lastOperation' out error)) " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchOperations,The length of the statement  "                var requestOperationDescriptor = (BatchWriterTestDescriptor.BatchWriterRequestOperationTestDescriptor)operationDescriptor; " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchOperations,The length of the statement  "                if (!TestHttpUtils.ValidateRequestLine(reader.ReadLine()' requestOperationDescriptor.Method' expectedRequestUri' out error)) " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchOperations,The length of the statement  "                var responseOperationDescriptor = (BatchWriterTestDescriptor.BatchWriterResponseOperationTestDescriptor)operationDescriptor; " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchOperations,The length of the statement  "                if (!TestHttpUtils.ValidateResponseLine(reader.ReadLine()' TestHttpUtils.HttpVersionInBatching' responseOperationDescriptor.StatusCode' out error)) " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,IsEmptyBatch,The length of the statement  "                expectedResults.InvocationsAndOperationDescriptors[0].Invocation == BatchWriterTestDescriptor.WriterInvocations.WriteStartBatch && " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,IsEmptyBatch,The length of the statement  "                expectedResults.InvocationsAndOperationDescriptors[1].Invocation == BatchWriterTestDescriptor.WriterInvocations.WriteEndBatch; " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Tests.WriterTests.BatchWriter,BatchWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTestDescriptor.cs,CreateExpectedResultCallback,The length of the statement  "                    throw new NotSupportedException("Unsupported format " + testConfiguration.Format.ToString() + " for writing batch messages found."); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Item' "Cannot transition from state 'Start' to state 'Item'. The only valid actions in state 'Start' are to write the collection or to write nothing at all." }' " is 185.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Start'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Start' "Cannot transition from state 'Collection' to state 'Collection'. The only valid actions in state 'Collection' are to write an item or to write the end of the collection." }' " is 206.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Start' "Cannot transition from state 'Item' to state 'Collection'. The only valid actions in state 'Item' are to write an item or the end of the collection." }' " is 185.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Start' "Cannot transition from state 'Completed' to state 'Collection'. Nothing further can be written once the writer has completed." }' " is 162.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Item' "Cannot transition from state 'Completed' to state 'Item'. Nothing further can be written once the writer has completed." }' " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Completed'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }' " is 183.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Error' "Cannot transition from state 'Completed' to state 'Error'. Nothing further can be written once the writer has completed." }' " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Start' "Cannot transition from state 'Error' to state 'Collection'. Nothing can be written once the writer entered the error state." }' " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Item' "Cannot transition from state 'Error' to state 'Item'. Nothing can be written once the writer entered the error state." }' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Error'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Start' "Cannot transition from state 'Error' to state 'Collection'. Nothing can be written once the writer entered the error state." }' " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Item' "Cannot transition from state 'Error' to state 'Item'. Nothing can be written once the writer entered the error state." }' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Error'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Start' "Cannot transition from state 'Error' to state 'Collection'. Nothing can be written once the writer entered the error state." }' " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Item' "Cannot transition from state 'Error' to state 'Item'. Nothing can be written once the writer entered the error state." }' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Error'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The length of the statement  "                        { CollectionWriterAction.Error' "The WriteError method or the WriteErrorAsync method on the ODataMessageWriter has already been called to write an error payload. Only a single error payload can be written with each ODataMessageWriter instance." }' " is 247.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionErrorTest,The length of the statement  "                        ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_UnrecognizedTypeName"' "TestNS.UnknownType")' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionErrorTest,The length of the statement  "                        ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.String"' "True"' "Edm.Int32"' "False")' " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionErrorTest,The length of the statement  "                        ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_PropertyDoesNotExistOnType"' "Street2"' "TestNS.AddressType")' " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionErrorTest,The length of the statement  "                        ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_PropertyDoesNotExistOnType"' "Street2"' "TestNS.AddressType")' " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionErrorTest,The length of the statement  "                        ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_PropertyDoesNotExistOnType"' "Street"' "OtherTestNamespace.AddressType")' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadTest,The length of the statement  "            EdmFunction stringServiceOp = new EdmFunction("TestNS"' "GetStringCollection"' EdmCoreModel.GetCollection(stringTypeRef)); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadTest,The length of the statement  "            EdmFunction complexServiceOp = new EdmFunction("TestNS"' "GetComplexCollection"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(addressType' true))); " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadTest,The length of the statement  "            EdmFunction geometryServiceOp = new EdmFunction("TestNS"' "GetGeometryCollection"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.Geometry' true))); " is 182.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadTest,The length of the statement  "            EdmFunction geographyServiceOp = new EdmFunction("TestNS"' "GetGeographyCollection"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.Geography' true))); " is 185.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadTest,The length of the statement  "                    CollectionWriterTestDescriptor testDescriptor = new CollectionWriterTestDescriptor(this.Settings' testCase.FunctionImport.Name' testCase.Items' withModel ? model : null) " is 169.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadErrorTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.String"' "Edm.Int32")' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadErrorTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadErrorTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadErrorTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.GeometryPoint"' "Edm.String")' " is 161.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadErrorTest,The length of the statement  "                    CollectionWriterTestDescriptor testDescriptor = new CollectionWriterTestDescriptor(this.Settings' collectionName' testCase.Items' testCase.ExpectedException' /*model*/ null); " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadErrorTest,The length of the statement  "                    testDescriptor = new CollectionWriterTestDescriptor(this.Settings' collectionName' testCase.Items' testCase.ExpectedException' model); " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HomogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                new CollectionWriterTestDescriptor.ItemDescription[] { complexItem("TestNS.AddressType")' complexItem("TestNS.AddressType") }' " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HomogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                new CollectionWriterTestDescriptor.ItemDescription[] { complexItem("TestNS.AddressType")' nullItem' complexItem("TestNS.AddressType") }' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HomogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                new CollectionWriterTestDescriptor.ItemDescription[] { complexItem(/*typeName*/null)' nullItem' complexItem(/*typeName*/null) }' " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HomogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    CollectionWriterTestDescriptor testDescriptor = new CollectionWriterTestDescriptor(this.Settings' collectionName' collection' null); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    Items = new CollectionWriterTestDescriptor.ItemDescription[] { stringItem(string.Empty)' complexItem(/*typeName*/null) }' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    Items = new CollectionWriterTestDescriptor.ItemDescription[] { nullItem' stringItem(string.Empty)' nullItem' intItem(2)' nullItem }' " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    Items = new CollectionWriterTestDescriptor.ItemDescription[] { complexItem("TestModel.SomeComplexType")' complexItem("TestModel.OtherComplexType") }' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "TestModel.OtherComplexType"' "TestModel.SomeComplexType")' " is 185.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                // Collection where item type names don't match (TestModel.SomeComplexType and TestModel.OtherComplexType); including some null items " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    Items = new CollectionWriterTestDescriptor.ItemDescription[] { nullItem' complexItem("TestModel.SomeComplexType")' nullItem' complexItem("TestModel.OtherComplexType")' nullItem }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "TestModel.OtherComplexType"' "TestModel.SomeComplexType")' " is 185.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    Items = new CollectionWriterTestDescriptor.ItemDescription[] { stringItem("Foo")' complexItem("TestModel.SomeComplexType")' stringItem("Perth") }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.GeographyMultiLineString"' "Edm.String")' " is 172.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.GeometryPoint"' "Edm.String")' " is 161.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.GeometryPoint"' "Edm.GeographyPoint")' " is 169.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    Items = new CollectionWriterTestDescriptor.ItemDescription[] { complexItem(/*typename*/ null)' GetGeometryPointItem() }' " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    Items = new CollectionWriterTestDescriptor.ItemDescription[] { complexItem(/*typename*/ null)' GetGeometryPointItem() }' " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The length of the statement  "                    CollectionWriterTestDescriptor testDescriptor = new CollectionWriterTestDescriptor(this.Settings' collectionName' collection.Items' collection.ExpectedException' null); " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionWriterTest,The length of the statement  "                    ExpectedExceptionFunc = tc => ODataExpectedExceptions.ODataException("ODataCollectionWriterCore_InvalidTransitionFromCollection"' "Collection"' "Collection") " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionWriterTest,The length of the statement  "            var testDescriptors = itemsAndOutput.Select(iao => new CollectionWriterTestDescriptor(this.Settings' collectionName' iao.Invocations' iao.ExpectedExceptionFunc' collectionItem' topLevelErrorItem' null)); " is 203.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,DuplicatePropertyNamesTest,The length of the statement  "            ODataProperty complexProperty = new ODataProperty { Name = "Foo"' Value = new ODataComplexValue { Properties = new[] { new ODataProperty() { Name = "StringProperty"' Value = "xyz" } } } }; " is 188.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,DuplicatePropertyNamesTest,The length of the statement  "            ODataProperty collectionProperty = new ODataProperty { Name = "Foo"' Value = new ODataCollectionValue { Items = new object[] { 1' 2 } } }; " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,DuplicatePropertyNamesTest,The length of the statement  "            ExpectedException expectedException = ODataExpectedExceptions.ODataException("DuplicatePropertyNamesNotAllowed"' "Foo"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,DuplicatePropertyNamesTest,The length of the statement  "            Func<WriterTestConfiguration' ExpectedException> expectedExceptionFunc = (tc) => tc.MessageWriterSettings.GetAllowDuplicatePropertyNames() ? null : expectedException; " is 166.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,DuplicatePropertyNamesTest,The length of the statement  "                    CollectionItem = new ODataComplexValue() { Properties = new ODataProperty[] { primitiveProperty' collectionProperty } }' " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,DuplicatePropertyNamesTest,The length of the statement  "                    CollectionItem = new ODataComplexValue() { Properties = new ODataProperty[] { collectionProperty' collectionProperty } }' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionWriterWithTypeProvidedTest,The length of the statement  "                    ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.String"' "True")' null) " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,GetGeometryPointItem,The length of the statement  "                ExpectedJsonLightLines = JsonUtils.GetJsonLines(SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryPointValue))' " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,GetGeometryPolygonItem,The length of the statement  "                ExpectedJsonLightLines = JsonUtils.GetJsonLines(SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryPolygonValue))' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,GetGeometryCollectionItem,The length of the statement  "                ExpectedJsonLightLines = JsonUtils.GetJsonLines(SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryCollectionValue))' " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,GetGeometryMultiLineStringItem,The length of the statement  "                ExpectedJsonLightLines = JsonUtils.GetJsonLines(SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryMultiLineStringValue))' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,GetGeographyPointItem,The length of the statement  "                ExpectedJsonLightLines = JsonUtils.GetJsonLines(SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPointValue))' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,GetGeographyPolygonItem,The length of the statement  "                ExpectedJsonLightLines = JsonUtils.GetJsonLines(SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPolygonValue))' " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,GetGeographyCollectionItem,The length of the statement  "                ExpectedJsonLightLines = JsonUtils.GetJsonLines(SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyCollectionValue))' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,GetGeographyMultiLineStringItem,The length of the statement  "                ExpectedJsonLightLines = JsonUtils.GetJsonLines(SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiLineStringValue))' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterUtils.cs,WriteAndVerifyCollectionPayload,The length of the statement  "                    using (var messageWriter = TestWriterUtils.CreateMessageWriter(testMemoryStream' testConfiguration' assert' out testMessage' null' descriptor.Model)) " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterUtils.cs,WriteAndVerifyCollectionPayload,The length of the statement  "                TestWriterUtils.ValidateExceptionOrLogResult(testMessage' testConfiguration' expectedResults' exception' assert' descriptor.TestDescriptorSettings.ExpectedResultSettings.ExceptionVerifier' baselineLogger); " is 205.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterUtils.cs,NormalizeNamespacePrefixes,The length of the statement  "                    XElement normalizedChild = new XElement(TestAtomConstants.ODataXNamespace + TestAtomConstants.ODataCollectionItemElementName); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterUtils.cs,NormalizeNamespacePrefixes,The length of the statement  "                    XAttribute metdataNamespaceAttribute = child.Attributes().Where(a => a.Value == TestAtomConstants.ODataMetadataNamespace).SingleOrDefault(); " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterUtils.cs,NormalizeNamespacePrefixes,The length of the statement  "                        normalizedChild.Add(new XAttribute(XNamespace.Xmlns + TestAtomConstants.ODataMetadataNamespacePrefix' TestAtomConstants.ODataMetadataNamespace)); " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,BatchPayloadNormalizingVisitor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\BatchPayloadNormalizer.cs,Visit,The length of the statement  "                    (e) => this.VisitBatch<IHttpRequest' BatchRequestChangeset' BatchRequestPayload>((BatchRequestPayload)e' this.VisitRequestOperation)); " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,BatchPayloadNormalizingVisitor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\BatchPayloadNormalizer.cs,Visit,The length of the statement  "                    (e) => this.VisitBatch<HttpResponseData' BatchResponseChangeset' BatchResponsePayload>((BatchResponsePayload)e' this.VisitResponseOperation)); " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,BatchPayloadNormalizingVisitor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\BatchPayloadNormalizer.cs,Visit,The length of the statement  "                    observed.Add(new DataTypeAnnotation { DataType = DataTypes.Integer.WithPrimitiveClrType(payloadElement.ClrValue.GetType()) }); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,BatchPayloadNormalizingVisitor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\BatchPayloadNormalizer.cs,VisitBatch,The length of the statement  "                this.Assert.AreEqual(batchPayload.Parts.Count()' observed.Parts.Count()' "Parts count for expected and observed do not match"); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,BatchPayloadNormalizingVisitor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\BatchPayloadNormalizer.cs,VisitRequestOperation,The length of the statement  "                        observed.Body = new ODataPayloadBody(observed.Body.SerializedValue' this.ContentTypeSpecificNormalize(observedRootElement' operation.Headers)); " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,BatchPayloadNormalizingVisitor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\BatchPayloadNormalizer.cs,GetNextObservedElement,The length of the statement  "                this.Assert.IsTrue(typeof(TElement).IsAssignableFrom(observed.GetType())' "Unexpected element type: " + observed.GetType().Name); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataEntityModelSchemaComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataEntityModelSchemaComparer.cs,CompareFunctionImport,The length of the statement  "            // We have overridden the base method because we wanted to minimize the impact of this change to other existing Taupo test cases. " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataEntityModelSchemaComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataEntityModelSchemaComparer.cs,CompareFunctionImport,The length of the statement  "                 expectedFunctionImport.Annotations.OfType<AttributeAnnotation>().Count() == actualFunctionImport.Annotations.OfType<AttributeAnnotation>().Count()' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataEntityModelSchemaComparer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataEntityModelSchemaComparer.cs,CompareFunctionImport,The length of the statement  "                    if (!this.WriteErrorIfFalse(actualAnnotation != null' "The expected annotation named '{0}' was not found in the FunctionImport."' expectedAnnotation.Content.Name.LocalName)) " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataParameterWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataParameterWriterTestWrapper.cs,WriteStart,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataParameterWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataParameterWriterTestWrapper.cs,WriteValue,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataParameterWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataParameterWriterTestWrapper.cs,CreateCollectionWriter,The length of the statement  "                return new ODataCollectionWriterTestWrapper(this.parameterWriter.CreateCollectionWriter(parameterName)' this.testConfiguration); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataParameterWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataParameterWriterTestWrapper.cs,CreateCollectionWriter,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataParameterWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataParameterWriterTestWrapper.cs,CreateCollectionWriter,The length of the statement  "                    .ContinueWith(task => new ODataCollectionWriterTestWrapper(task.Result' this.testConfiguration)' TaskContinuationOptions.ExecuteSynchronously) " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataParameterWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataParameterWriterTestWrapper.cs,CreateResourceWriter,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataParameterWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataParameterWriterTestWrapper.cs,CreateResourceWriter,The length of the statement  "                    .ContinueWith(task => new ODataWriterTestWrapper(task.Result' this.testConfiguration)' TaskContinuationOptions.ExecuteSynchronously) " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataParameterWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataParameterWriterTestWrapper.cs,CreateResourceSetWriter,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataParameterWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataParameterWriterTestWrapper.cs,CreateResourceSetWriter,The length of the statement  "                    .ContinueWith(task => new ODataWriterTestWrapper(task.Result' this.testConfiguration)' TaskContinuationOptions.ExecuteSynchronously) " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataParameterWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataParameterWriterTestWrapper.cs,WriteEnd,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataParameterWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataParameterWriterTestWrapper.cs,Flush,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,WriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\WriterTestDescriptor.cs,RunTest,The length of the statement  "            ExceptionUtilities.Assert(expectedResult != null' "The expected result could not be determined for the test. Did you specify it?"); " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,WriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\WriterTestDescriptor.cs,RunTest,The length of the statement  "                using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(message' model' testConfiguration' this.settings.Assert)) " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,WriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\WriterTestDescriptor.cs,CreateOutputMessage,The length of the statement  "            TestMessage testMessage = TestWriterUtils.CreateOutputMessageFromStream(messageStream' testConfiguration' this.PayloadKind' this.ContentType' this.UrlResolver); " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataBatchWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataBatchWriterTestWrapper.cs,WriteStartBatch,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataBatchWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataBatchWriterTestWrapper.cs,WriteEndBatch,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataBatchWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataBatchWriterTestWrapper.cs,WriteStartChangeset,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataBatchWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataBatchWriterTestWrapper.cs,WriteEndChangeset,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataBatchWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataBatchWriterTestWrapper.cs,CreateOperationRequestMessage,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataBatchWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataBatchWriterTestWrapper.cs,CreateOperationResponseMessage,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataBatchWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataBatchWriterTestWrapper.cs,Flush,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataCollectionWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataCollectionWriterTestWrapper.cs,WriteStart,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataCollectionWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataCollectionWriterTestWrapper.cs,WriteItem,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataCollectionWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataCollectionWriterTestWrapper.cs,WriteEnd,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataCollectionWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataCollectionWriterTestWrapper.cs,Flush,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataMessageWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataMessageWriterTestWrapper.cs,CreateODataResourceSetWriter,The length of the statement  "                return new ODataWriterTestWrapper(this.messageWriter.CreateODataResourceSetWriter(entitySet' entityType)' this.testConfiguration); " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataMessageWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataMessageWriterTestWrapper.cs,CreateODataResourceWriter,The length of the statement  "                return new ODataWriterTestWrapper(this.messageWriter.CreateODataResourceWriter(entitySet' entityType)' this.testConfiguration); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataMessageWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataMessageWriterTestWrapper.cs,CreateODataWriter,The length of the statement  "            return isFeed ? this.CreateODataResourceSetWriter(entitySet' entityType) : this.CreateODataResourceWriter(entitySet' entityType); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataMessageWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataMessageWriterTestWrapper.cs,CreateODataCollectionWriter,The length of the statement  "                return new ODataCollectionWriterTestWrapper(this.messageWriter.CreateODataCollectionWriter(itemTypeReference)' this.testConfiguration); " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataMessageWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataMessageWriterTestWrapper.cs,CreateODataParameterWriter,The length of the statement  "                return new ODataParameterWriterTestWrapper(this.messageWriter.CreateODataParameterWriter(operation)' this.testConfiguration); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataMessageWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataMessageWriterTestWrapper.cs,CreateODataParameterWriter,The length of the statement  "                    .ContinueWith(task => new ODataParameterWriterTestWrapper(task.Result' this.testConfiguration)' TaskContinuationOptions.ExecuteSynchronously) " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataMessageWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataMessageWriterTestWrapper.cs,Dispose,The length of the statement  "                    this.assert.AreEqual(1' message.TestStream.DisposeCount' "Dispose method on the stream must be called when EnableMessageStreamDisposal is set to true."); " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataMessageWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataMessageWriterTestWrapper.cs,Dispose,The length of the statement  "                    this.assert.AreEqual(0' message.TestStream.DisposeCount' "Dispose method on the stream must not be called exactly once when EnableMessageStreamDisposal is set to false."); " is 171.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataWriterTestWrapper.cs,WriteStart,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataWriterTestWrapper.cs,WriteStart,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataWriterTestWrapper.cs,WriteStart,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataWriterTestWrapper.cs,WriteEnd,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataWriterTestWrapper.cs,WriteEntityReferenceLink,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataWriterTestWrapper.cs,Flush,The length of the statement  "                throw new TaupoNotSupportedException("This test is not supported in asynchronous mode in Silverlight or Windows Phone"); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,WriterTestConfigurationProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\WriterTestConfigurationProvider.cs,CreateConfigurationsWithIndent,The length of the statement  "                // AtomConfigurations = CreateConfigurationsWithIndent(runKind' combinatorialEngine' ODataFormat.Atom' defaultConfigurations.AtomConfigurations)' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,WriterTestConfigurationProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\WriterTestConfigurationProvider.cs,CreateConfigurationsWithIndent,The length of the statement  "                JsonLightConfigurations = CreateConfigurationsWithIndent(runKind' combinatorialEngine' ODataFormat.Json' defaultConfigurations.JsonLightConfigurations)' " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,WriterTestConfigurationProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\WriterTestConfigurationProvider.cs,CreateConfigurationsWithIndent,The length of the statement  "                DefaultFormatConfigurations = CreateConfigurationsWithIndent(runKind' combinatorialEngine' /*format*/ null' defaultConfigurations.DefaultFormatConfigurations)' " is 159.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,PayloadWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\PayloadWriterTestDescriptor.cs,WritePayload,The length of the statement  "            ODataPayloadElementToObjectModelConverter converter = new ODataPayloadElementToObjectModelConverter(!testConfiguration.IsRequest); " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,PayloadWriterTestDescriptor,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\PayloadWriterTestDescriptor.cs,ShouldSkipForTestConfiguration,The length of the statement  "            if (this.PayloadDescriptor.SkipTestConfiguration != null && this.PayloadDescriptor.SkipTestConfiguration(testConfiguration)) " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,WriterTestExpectedResults,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\WriterTestExpectedResults.cs,VerifyException,The length of the statement  "                this.settings.Assert.IsTrue(ODataObjectModelValidationUtils.AreEqual(this.ExpectedODataErrorException.Error' ((ODataErrorException)exception).Error)' "Expected ODataError instances to be equal."); " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddKeys(entryWithPrimitiveProperties.AddStructuralProperty("Id"' EdmCoreModel.Instance.GetInt32(isNullable: false))); " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("DateTimeOffset1"' EdmCoreModel.Instance.GetDateTimeOffset(isNullable: false)); " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("DateTimeOffset2"' EdmCoreModel.Instance.GetDateTimeOffset(isNullable: false)); " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("DateTimeOffset3"' EdmCoreModel.Instance.GetDateTimeOffset(isNullable: false)); " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("Geography"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.Geography' false)); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeographyPoint"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyPoint' false)); " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeographyLineString"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyLineString' false)); " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeographyPolygon"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyPolygon' false)); " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeographyCollection"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyCollection' false)); " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeographyMultiPoint"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyMultiPoint' false)); " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeographyMultiLineString"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyMultiLineString' false)); " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeographyMultiPolygon"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyMultiPolygon' false)); " is 161.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("Geometry"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.Geometry' false)); " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeometryPoint"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryPoint' false)); " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeometryLineString"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryLineString' false)); " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeometryPolygon"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryPolygon' false)); " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeometryCollection"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryCollection' false)); " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeometryMultiPoint"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryMultiPoint' false)); " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeometryMultiLineString"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryMultiLineString' false)); " is 165.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("GeometryMultiPolygon"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryMultiPolygon' false)); " is 159.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullableDouble"' EdmCoreModel.Instance.GetDouble(isNullable: true)); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullableSingle"' EdmCoreModel.Instance.GetSingle(isNullable: true)); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullableBoolean"' EdmCoreModel.Instance.GetBoolean(isNullable: true)); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullableDateTimeOffset1"' EdmCoreModel.Instance.GetDateTimeOffset(isNullable: true)); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullableDateTimeOffset2"' EdmCoreModel.Instance.GetDateTimeOffset(isNullable: true)); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullableDateTimeOffset3"' EdmCoreModel.Instance.GetDateTimeOffset(isNullable: true)); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullableDecimal"' EdmCoreModel.Instance.GetDecimal(isNullable: true)); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullableString"' EdmCoreModel.Instance.GetString(isNullable: true)); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullableDuration"' EdmCoreModel.Instance.GetDuration(isNullable: true)); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullDateTimeOffset1"' EdmCoreModel.Instance.GetDateTimeOffset(isNullable: true)); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullDateTimeOffset2"' EdmCoreModel.Instance.GetDateTimeOffset(isNullable: true)); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullDateTimeOffset3"' EdmCoreModel.Instance.GetDateTimeOffset(isNullable: true)); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullDuration"' EdmCoreModel.Instance.GetDuration(isNullable: true)); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeography"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.Geography' true)); " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeographyPoint"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyPoint' true)); " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeographyLineString"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyLineString' true)); " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeographyPolygon"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyPolygon' true)); " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeographyCollection"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyCollection' true)); " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeographyMultiPoint"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyMultiPoint' true)); " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeographyMultiLineString"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyMultiLineString' true)); " is 170.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeographyMultiPolygon"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyMultiPolygon' true)); " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeometry"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.Geometry' true)); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeometryPoint"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryPoint' true)); " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeometryLineString"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryLineString' true)); " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeometryPolygon"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryPolygon' true)); " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeometryCollection"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryCollection' true)); " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeometryMultiPoint"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryMultiPoint' true)); " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeometryMultiLineString"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryMultiLineString' true)); " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                entryWithPrimitiveProperties.AddStructuralProperty("NullGeometryMultiPolygon"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeometryMultiPolygon' true)); " is 162.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                new ODataProperty() { Name = "NullableDateTimeOffset1"' Value = (DateTimeOffset?)DateTimeOffset.Parse("2010-10-10T10:10:10Z") }' " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                new ODataProperty() { Name = "NullableDateTimeOffset2"' Value = (DateTimeOffset?)DateTimeOffset.Parse("2010-10-10T10:10:10+01:00") }' " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The length of the statement  "                new ODataProperty() { Name = "NullableDateTimeOffset3"' Value = (DateTimeOffset?)DateTimeOffset.Parse("2010-10-10T10:10:10-08:00") }' " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The length of the statement  "                    .Property("EmptyCollection"' new EdmCollectionTypeReference(new EdmCollectionType(EdmCoreModel.Instance.GetString(false)))) " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The length of the statement  "                    .Property("PrimitiveCollection"' new EdmCollectionTypeReference(new EdmCollectionType(EdmCoreModel.Instance.GetInt32(false)))) " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The length of the statement  "                    .Property("IntCollectionNoTypeName"' new EdmCollectionTypeReference(new EdmCollectionType(EdmCoreModel.Instance.GetInt32(false)))) " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The length of the statement  "                    .Property("StringCollectionNoTypeName"' new EdmCollectionTypeReference(new EdmCollectionType(EdmCoreModel.Instance.GetString(false)))) " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The length of the statement  "                    .Property("GeographyCollectionNoTypeName"' new EdmCollectionTypeReference(new EdmCollectionType(EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.Geography' false)))); " is 171.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The length of the statement  "                    //.Property("ComplexCollection"' new EdmCollectionTypeReference(new EdmCollectionType(new EdmComplexTypeReference(addressType' true)))); " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,MetadataWriterTestExpectedResult,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\MetadataWriterTestExpectedResult.cs,VerifyResult,The length of the statement  "            this.settings.Assert.IsTrue(payloadKind == ODataPayloadKind.MetadataDocument' "Only metadata payload kind is supported."); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ObjectModelToMessageWriter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ObjectModelToMessageWriter.cs,WriteMessage,The length of the statement  "                    ExceptionUtilities.Assert(false' "The payload kind '{0}' is not yet supported by MessageToObjectModelReader."' payloadKind); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ObjectModelToMessageWriter,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ObjectModelToMessageWriter.cs,WriteNavigationLink,The length of the statement  "                        ExceptionUtilities.Assert(expanded.ExpandedItem is ODataEntityReferenceLink' "Content of a nav. link can only be a feed' entry or entity reference link."); " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The length of the statement  "                    Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()' " is 172.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The length of the statement  "                    ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"' " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The length of the statement  "                    Parameter = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build()' " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The length of the statement  "                    Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()' " is 176.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The length of the statement  "                    ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"' " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralCollectionTest,The length of the statement  "                    Parameter = new ODataCollectionValue() { TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")' Items = new string[] { "value" } }' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralCollectionTest,The length of the statement  "                    Parameter = new ODataCollectionValue() { TypeName = EntityModelUtils.GetCollectionTypeName("Edm.GeographyPoint")' Items = new[] { GeographyFactory.Point(5.0' -10.0).Build() } }' " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralCollectionTest,The length of the statement  "                    ExpectedValue = "[{\"type\":\"Point\"'\"coordinates\":[-10.0'5.0]'\"crs\":{\"type\":\"name\"'\"properties\":{\"name\":\"EPSG:4326\"}}}]"' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralCollectionTest,The length of the statement  "                    Parameter = new ODataCollectionValue() { TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int64")' Items = new object[] { Int64.MinValue' Int64.MaxValue } }' " is 163.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralErrorTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataUriUtils_ConvertToUriLiteralUnsupportedType"' "System.Char")' " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralErrorTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataUriUtils_ConvertToUriLiteralUnsupportedType"' "Microsoft.OData.ODataResourceSet")' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralErrorTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataUriUtils_ConvertToUriLiteralUnsupportedType"' "System.IO.MemoryStream")' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralModelTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataUriUtils_ConvertToUriLiteralUnsupportedType"' "System.UInt16")' " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralModelTest,The length of the statement  "                    Parameter = new ODataCollectionValue() { TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")' Items = new string[] { "value" } }' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ODataMessageWriterSettingsInspector,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ODataMessageWriterSettingsInspector.cs,GetAtomStartResourceXmlCustomizationCallback,The length of the statement  "            return (Func<ODataResource' XmlWriter' XmlWriter>)ReflectionUtils.GetProperty(settings' "AtomStartResourceXmlCustomizationCallback"); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ODataMessageWriterSettingsInspector,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ODataMessageWriterSettingsInspector.cs,GetAtomEndResourceXmlCustomizationCallback,The length of the statement  "            return (Action<ODataResource' XmlWriter' XmlWriter>)ReflectionUtils.GetProperty(settings' "AtomEndResourceXmlCustomizationCallback"); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ODataWriterTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ODataWriterTestCase.cs,WriteAndVerifyODataPayloadElement,The length of the statement  "                    this.WriteAndLogODataPayload(originalPayload' messageWriter.Message' testConfiguration.Version' testConfiguration.Format' writeToStream); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ODataWriterTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ODataWriterTestCase.cs,WriteAndVerifyODataProperty,The length of the statement  "                using (ODataMessageWriterTestWrapper writer = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' out testMessage' null' model)) " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ODataWriterTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ODataWriterTestCase.cs,WriteAndVerifyODataProperty,The length of the statement  "                    Action<ODataPayloadElement> writeElementToStream = payload => this.PropertyPayloadElementWriter.WriteProperty(writer.MessageWriter' payload); " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ODataWriterTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ODataWriterTestCase.cs,WriteAndVerifyODataProperty,The length of the statement  "                    this.WriteAndLogODataPayload(originalPayload' writer.Message' testConfiguration.Version' testConfiguration.Format' writeElementToStream); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,ODataWriterTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ODataWriterTestCase.cs,WriteAndLogODataPayload,The length of the statement  "            // This is needed because we may modify the payload in use but the same is used in another iteration of the combinatorial engine " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,WriterPayloads,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterPayloads.cs,PropertyPayloads,The length of the statement  "                // TODO: Add other interesting payloads for properties - more properties in an entry' inside a complex property' inside a collection of complex and so on " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,WriterPayloads,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterPayloads.cs,ValuePayloads,The length of the statement  "                        entry.Properties = new ODataProperty[] { new ODataProperty() { Name = "TestProperty"' Value = new ODataCollectionValue() { Items = new object[] { propertyValue } } } };  " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,WriterPayloads,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterPayloads.cs,NamedStreamPayloads,The length of the statement  "            ODataProperty namedStreamProperty = tempEntry.Properties.FirstOrDefault(p => p != null && p.Value is ODataStreamReferenceValue); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,WriterPayloads,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterPayloads.cs,NamedStreamPayloads,The length of the statement  "                            new ODataProperty { Name = "__Stream1"' Value = new ODataStreamReferenceValue { ReadLink = new Uri("http://odata.org/stream1/readlink") } }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,WriterPayloads,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterPayloads.cs,NamedStreamPayloads,The length of the statement  "                            new ODataProperty { Name = "__Stream2"' Value = new ODataStreamReferenceValue { EditLink = new Uri("http://odata.org/stream2/editlink") } }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,WriterPayloads,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterPayloads.cs,NamedStreamPayloads,The length of the statement  "                            new ODataProperty { Name = "__Stream3"' Value = new ODataStreamReferenceValue { ReadLink = new Uri("http://odata.org/stream3/readlink")' ContentType = "stream3:contenttype" } }' " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,WriterPayloads,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterPayloads.cs,NavigationLinkPayloads,The length of the statement  "                                .Where(linkElement => linkElement.Attribute(TestAtomConstants.AtomLinkRelationAttributeName).Value.StartsWith(TestAtomConstants.ODataNavigationPropertiesRelatedLinkRelationPrefix)) " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteActionAndVerifyODataPayload,The length of the statement  "                    using (var messageWriter = CreateMessageWriter(testMemoryStream' testConfiguration' assert' out testMessage' null' descriptor.GetMetadataProvider()' descriptor.UrlResolver)) " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteActionAndVerifyODataPayload,The length of the statement  "                ValidateExceptionOrLogResult(testMessage' testConfiguration' expectedResults' exception' assert' descriptor.TestDescriptorSettings.ExpectedResultSettings.ExceptionVerifier' baselineLogger); " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteAndVerifyODataPayloadElement,The length of the statement  "                Exception exception = TestExceptionUtils.RunCatching(() => payloadElementWriter.WritePayload(writer' descriptor.PayloadItems.First())); " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteAndVerifyTopLevelContent,The length of the statement  "                using (ODataMessageWriterTestWrapper messageWriter = CreateMessageWriter(testMemoryStream' testConfiguration' assert' out testMessage' settings' descriptor.GetMetadataProvider())) " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteAndVerifyTopLevelContent,The length of the statement  "                ValidateExceptionOrLogResult(testMessage' testConfiguration' expectedResults' exception' assert' descriptor.TestDescriptorSettings.ExpectedResultSettings.ExceptionVerifier' baselineLogger); " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteAndVerifyRawContent,The length of the statement  "                using (ODataMessageWriterTestWrapper messageWriter = CreateMessageWriter(testMemoryStream' testConfiguration' assert' out testMessage' null' descriptor.Model)) " is 159.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteAndVerifyRawContent,The length of the statement  "                ValidateExceptionOrLogResult(testMessage' testConfiguration' expectedResults' exception' assert' descriptor.TestDescriptorSettings.ExpectedResultSettings.ExceptionVerifier' baselineLogger); " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,CreateOutputMessageFromStream,The length of the statement  "                    requestMessage = new TestRequestMessageWithUrlResolver(messageContent' urlResolver' testConfiguration.Synchronous ? TestMessageFlags.NoAsynchronous : TestMessageFlags.NoSynchronous); " is 182.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,CreateOutputMessageFromStream,The length of the statement  "                    requestMessage = new TestRequestMessage(messageContent' testConfiguration.Synchronous ? TestMessageFlags.NoAsynchronous : TestMessageFlags.NoSynchronous); " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,CreateOutputMessageFromStream,The length of the statement  "                    responseMessage = new TestResponseMessageWithUrlResolver(messageContent' urlResolver' testConfiguration.Synchronous ? TestMessageFlags.NoAsynchronous : TestMessageFlags.NoSynchronous); " is 184.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,CreateOutputMessageFromStream,The length of the statement  "                    responseMessage = new TestResponseMessage(messageContent' testConfiguration.Synchronous ? TestMessageFlags.NoAsynchronous : TestMessageFlags.NoSynchronous); " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WritePayload,The length of the statement  "            Debug.Assert(writer != null || (items.Count == 1 && items[0] is ODataAnnotatedError)' "Expected either an ODataWriter or a top-level error payload."); " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,The length of the statement  "            ExceptionUtilities.Assert(batchPayload is BatchRequestPayload || batchPayload is BatchResponsePayload' "Payload must be a batch payload."); " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,The length of the statement  "                        var message = batchWriter.CreateOperationRequestMessage(operation.Body.Verb.ToString().ToUpper()' operation.Body.GetRequestUri()); " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,The length of the statement  "                                ODataFormat format = TestMediaTypeUtils.GetODataFormat(contentType' op.Body.RootElement.GetPayloadKindFromPayloadElement()); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,The length of the statement  "                                using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(TestWriterUtils.GetStream(message' messageConfig)' messageConfig' assert' messageWriterSettings' model)) " is 200.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,The length of the statement  "                                    writer.WriteMessage(messageWriterWrapper' op.Body.RootElement.GetPayloadKindFromPayloadElement()' converter.Convert(op.Body.RootElement)); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,The length of the statement  "                            ODataFormat format = TestMediaTypeUtils.GetODataFormat(contentType' operation.RootElement.GetPayloadKindFromPayloadElement()); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,The length of the statement  "                            using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(TestWriterUtils.GetStream(message' messageConfig)' messageConfig' assert' messageWriterSettings' model)) " is 200.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,The length of the statement  "                                writer.WriteMessage(messageWriterWrapper' operation.RootElement.GetPayloadKindFromPayloadElement()' converter.Convert(operation.RootElement)); " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,The length of the statement  "                                using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(TestWriterUtils.GetStream(message' messageConfig)' messageConfig' assert' messageWriterSettings' model)) " is 200.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteBatchPayload,The length of the statement  "                                    writer.WriteMessage(messageWriterWrapper' op.RootElement.GetPayloadKindFromPayloadElement()' converter.Convert(op.RootElement)); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteWithStreamErrors,The length of the statement  "            TestMessageFlags flags = testConfiguration.Synchronous ? TestMessageFlags.NoAsynchronous : TestMessageFlags.NoSynchronous; " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteWithStreamErrors,The length of the statement  "                        messageWriter = new ODataMessageWriterTestWrapper(new ODataMessageWriter(requestMessage' settings' testCase.GetMetadataProvider())' testConfiguration' requestMessage' assert); " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteWithStreamErrors,The length of the statement  "                        messageWriter = new ODataMessageWriterTestWrapper(new ODataMessageWriter(responseMessage' settings' testCase.GetMetadataProvider())' testConfiguration' responseMessage' assert); " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,WriteWithStreamErrors,The length of the statement  "                testCase.TestDescriptorSettings.ExpectedResultSettings.ExceptionVerifier.VerifyExceptionResult(expectedException' exception); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,ValidateReportedError,The length of the statement  "                    (expectedResults.ExpectedException2.ExpectedMessage == null ? "<null>" : expectedResults.ExpectedException2.ExpectedMessage.ResourceIdentifier)); " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,ValidateReportedError,The length of the statement  "                assert.IsNotNull(reportedException' "The test was expected to fail with an error of type " + expectedException.GetType().FullName + " and error message: " + expectedResults.ExpectedException.Message); " is 200.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,ValidateReportedError,The length of the statement  "                assert.IsTrue(expectedException.GetType().IsAssignableFrom(reportedException.GetType())' "Expected exception type compatible to " + expectedException.GetType().FullName + " but found exception of type " + reportedException.GetType().FullName + "."); " is 249.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,ValidateReportedError,The length of the statement  "                assert.IsNotNull(reportedException' "The test was expected to fail with error message: " + expectedResults.ExpectedODataExceptionMessage); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,ValidateReportedError,The length of the statement  "                assert.IsTrue(reportedException is ODataException' "Expected an ODataException instance but got a " + reportedException.GetType().FullName + "."); " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,ValidateHeaders,The length of the statement  "                assert.IsTrue(expectedHeaders == null || expectedHeaders.Count == 0' "Did not find any headers but expected " + expectedHeaders.Count + "."); " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,SetPayloadKindAndVerifyContentType,The length of the statement  "            if (expectedResults.ExpectedODataExceptionMessage != null || expectedResults.ExpectedException != null || expectedResults.ExpectedException2 != null) " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,SetPayloadKindAndVerifyContentType,The length of the statement  "                    // We skip message stream disposal validation because this test doesn't write to the stream' so GetStream() would not be called on the message. " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,SetPayloadKindAndVerifyContentType,The length of the statement  "                    using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' assert' out testMessage' testConfiguration.MessageWriterSettings' null)) " is 194.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,CompareJsonResults,The length of the statement  "            // For now just compare the strings as they are; we trim the leading/trailing whitespace here again since the fragment extractor " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,CompareJsonResults,The length of the statement  "            // trims it in some cases but not in others. For comparison we strip leading/trailing whitespace from the expected and actual results. " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests,TestWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\TestWriterUtils.cs,CompareRawResults,The length of the statement  "                    error = "Nothing was written to the stream but the following raw value was expected: " + expectedResults.ToText() + "."; " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Fixups,RemoveFeedIDFixup,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Fixups\RemoveFeedIDFixup.cs,Visit,The length of the statement  "                .Where(a => a is XmlTreeAnnotation && ((XmlTreeAnnotation)a).LocalName == TestAtomConstants.AtomIdElementName).SingleOrDefault(); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Fixups,ODataPayloadElementAddDefaultAtomMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Fixups\ODataPayloadElementAddDefaultAtomMetadata.cs,Visit,The length of the statement  "            XmlTreeAnnotation updated = XmlTreeAnnotation.Atom(TestAtomConstants.AtomUpdatedElementName' "2013-08-13T01:03:16.7800000"); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Fixups,AddFeedIDFixup,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Fixups\AddFeedIDFixup.cs,Visit,The length of the statement  "            var hasID = payloadElement.Annotations.Where(a => a is XmlTreeAnnotation && (a as XmlTreeAnnotation).LocalName == TestAtomConstants.AtomIdElementName).SingleOrDefault(); " is 169.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightNavigationLinkWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightNavigationLinkWriterTests.cs,WriteEntityReferenceLinkAfterFeedJsonLightErrorTest,The length of the statement  "            var orderNavProp = customerType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "Orders"' Target = orderType' TargetMultiplicity = EdmMultiplicity.Many }); " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightNavigationLinkWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightNavigationLinkWriterTests.cs,WriteEntityReferenceLinkAfterFeedJsonLightErrorTest,The length of the statement  "            var bestFriendNavProp = customerType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "BestFriend"' Target = customerType' TargetMultiplicity = EdmMultiplicity.One }); " is 185.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightNavigationLinkWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightNavigationLinkWriterTests.cs,WriteEntityReferenceLinkAfterFeedJsonLightErrorTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataJsonLightWriter_EntityReferenceLinkAfterResourceSetInRequest") " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightNavigationLinkWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightNavigationLinkWriterTests.cs,WriteEntityReferenceLinkAfterFeedJsonLightErrorTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataJsonLightWriter_EntityReferenceLinkAfterResourceSetInRequest") " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightNavigationLinkWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightNavigationLinkWriterTests.cs,WriteEntityReferenceLinkAfterFeedJsonLightErrorTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataJsonLightWriter_EntityReferenceLinkAfterResourceSetInRequest") " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightNavigationLinkWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightNavigationLinkWriterTests.cs,WriteEntityReferenceLinkAfterFeedJsonLightErrorTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataJsonLightWriter_EntityReferenceLinkAfterResourceSetInRequest") " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "            var nonMLENav = nonMLEType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "NavProp"' Target = otherType' TargetMultiplicity = EdmMultiplicity.Many }); " is 170.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "            var mleNav = mleType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "NavProp"' Target = otherType' TargetMultiplicity = EdmMultiplicity.Many }); " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.NonMLEType\"{0}"' " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                    DebugDescription = "TypeName at the beginning' changes at the end - the one from the beginning is used (also for validation)."' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.MLEType\"{0}'\"ID\":\"42\"'\"Name\":\"test\""' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.NonMLEType\"'" + " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"urn:id\"'" + " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataETagAnnotationName + "\":\"etag\"{0}"' " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                    DebugDescription = "TypeName at the beginning' ID and ETag at the end' ID and ETag are not written and are ignored at the end"' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.NonMLEType\"{0}"' " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.MLEType\"'" + " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"urn:id\"'" + " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataETagAnnotationName + "\":\"etag\"'" + " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataEditLinkAnnotationName + "\":\"http://odata.org/editlink\"'" + " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"http://odata.org/readlink\"'" + " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaEditLinkAnnotationName + "\":\"http://odata.org/mediaeditlink\"'" + " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaReadLinkAnnotationName + "\":\"http://odata.org/mediareadlink\"'" + " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaContentTypeAnnotationName + "\":\"media/contenttype\"'" + " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaETagAnnotationName + "\":\"mediaetag\"{0}'" + " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.MLEType\"'" + " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"urn:id\"'" + " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataETagAnnotationName + "\":\"etag\"'" + " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"http://odata.org/readlink\"'" + " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaReadLinkAnnotationName + "\":\"http://odata.org/mediareadlink\"{0}'" + " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataEditLinkAnnotationName + "\":\"http://odata.org/editlink\"'" + " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaEditLinkAnnotationName + "\":\"http://odata.org/mediaeditlink\"'" + " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaContentTypeAnnotationName + "\":\"media/contenttype\"'" + " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaETagAnnotationName + "\":\"mediaetag\"'" + " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                                "'\"" + JsonLightUtils.GetPropertyAnnotationName("NavProp"' JsonLightConstants.ODataBindAnnotationName) + "\":[$(NL)\"http://odata.org/navprop/uri\"$(NL)]" : " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                                "'\"" + JsonLightUtils.GetPropertyAnnotationName("NavProp"' JsonLightConstants.ODataNavigationLinkUrlAnnotationName) + "\":\"http://odata.org/navprop/uri\""' " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                                "'\"" + JsonLightUtils.GetPropertyAnnotationName("NavProp"' JsonLightConstants.ODataBindAnnotationName) + "\":[$(NL)\"http://odata.org/navprop/uri\"$(NL)]" : " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                                "'\"" + JsonLightUtils.GetPropertyAnnotationName("NavProp"' JsonLightConstants.ODataNavigationLinkUrlAnnotationName) + "\":\"http://odata.org/navprop/uri\"" + " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                                "'\"" + JsonLightUtils.GetPropertyAnnotationName("NavProp"' JsonLightConstants.ODataAssociationLinkUrlAnnotationName) + "\":\"http://odata.org/assoclink\""' " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The length of the statement  "                    TestWriterUtils.WriteAndVerifyODataEdmPayload(testDescriptor.DeferredLinksToEntityReferenceLinksInRequest(testConfiguration)' testConfiguration' this.Assert' this.Logger); " is 171.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,ActionAndFunctionPayloadOrderTest,The length of the statement  "            nonMLEType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "NavProp"' Target = otherType' TargetMultiplicity = EdmMultiplicity.Many }); " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,ActionAndFunctionPayloadOrderTest,The length of the statement  "                "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"#TestModel.NonMLEType\"{0}'\"#defaultAction\":{{"' " is 162.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,ActionAndFunctionPayloadOrderTest,The length of the statement  "                                "'\"" + JsonLightUtils.GetPropertyAnnotationName("NavProp"' JsonLightConstants.ODataNavigationLinkUrlAnnotationName) + "\":\"http://odata.org/navprop/uri\""' " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,ActionAndFunctionPayloadOrderTest,The length of the statement  "                    TestWriterUtils.WriteAndVerifyODataEdmPayload(testDescriptor.DeferredLinksToEntityReferenceLinksInRequest(testConfiguration)' testConfiguration' this.Assert' this.Logger); " is 171.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,OpenPropertiesInEntryTest,The length of the statement  "                        "{0}\"" + JsonLightUtils.GetPropertyAnnotationName("Age"' JsonLightConstants.ODataTypeAnnotationName) + "\":\"Edm.Int64\"'\"Age\":\"42\""' " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,OpenPropertiesInEntryTest,The length of the statement  "                        "\"" + JsonLightUtils.GetPropertyAnnotationName("Location"' JsonLightConstants.ODataTypeAnnotationName) + "\":\"Edm.GeographyPoint\"'" + " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,OpenPropertiesInEntryTest,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.AddressType\""' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,SpatialPropertiesInEntryTest,The length of the statement  "            customerType.AddStructuralProperty("Location1"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.Geography' false)); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,SpatialPropertiesInEntryTest,The length of the statement  "            customerType.AddStructuralProperty("Location2"' EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyPoint' false)); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,SpatialPropertiesInEntryTest,The length of the statement  "                        "\"" + JsonLightUtils.GetPropertyAnnotationName("Location1"' JsonLightConstants.ODataTypeAnnotationName) + "\":\"GeographyPoint\"'" + " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightWriterUtils.cs,GetTopLevelFeedItemsArray,The length of the statement  "            ExceptionUtilities.CheckObjectNotNull(feed' "The specified JSON Lite payload is not wrapped in the expected \"value\": wrapper."); " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightWriterUtils.cs,GetMetadataUrlPropertyForEntry,The length of the statement  "            return "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + metadataUrl + "#" + fragment + "/$entity\""; " is 170.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightWriterUtils.cs,GetMetadataUrlPropertyForFeed,The length of the statement  "            return "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + metadataUrl + "#" + fragment + "\""; " is 162.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightWriterUtils.cs,GetMetadataUrlPropertyForProperty,The length of the statement  "            return "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + metadataUrl + "#" + propertyType + "\""; " is 166.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonValueUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonValueUtilsTests.cs,WriteValue,The length of the statement  "{ ReflectionUtils.InvokeMethod(classType' "WriteValue"' writer' value' ReflectionUtils.GetEnumerationValue(formatEnumType' dateTimeFormat.ToString())); }" is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonValueUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonValueUtilsTests.cs,WriteValue,The length of the statement  "{ ReflectionUtils.InvokeMethod(classType' "WriteValue"' writer' value' ReflectionUtils.GetEnumerationValue(formatEnumType' dateTimeFormat.ToString())); }" is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonValueUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonValueUtilsTests.cs,WriteValue,The length of the statement  "{ char[] buffer = null; ReflectionUtils.InvokeMethod(classType' "WriteValue"' new Type[] { typeof(TextWriter)' typeof(string)' typeof(ODataStringEscapeOption)' typeof(char[]).MakeByRefType()' typeof(ICharArrayPool) }' writer' value' ODataStringEscapeOption.EscapeNonAscii' buffer' null); }" is 289.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonUtils.cs,UnwrapTopLevelValue,The length of the statement  "                ExceptionUtilities.CheckObjectNotNull(value' "The specified JSON payload is not wrapped in the expected \"d\":{{}} wrapper."); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonUtils.cs,GetFeedItemsArray,The length of the statement  "                ExceptionUtilities.CheckObjectNotNull(feed' "The specified JSON payload is not wrapped in the expected \"results\": wrapper."); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterStatesTests.cs,ParameterWriterStateMachineErrorTests,The length of the statement  "                // WriteValue and CreateCollectionWriter can only be called after WriteStart and before WriteEnd. And they cannot be called until the previously created sub-writer is completed. " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterStatesTests.cs,ParameterWriterStateMachineErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteInErrorOrCompletedState")' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterStatesTests.cs,ParameterWriterStateMachineErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteInErrorOrCompletedState")' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterStatesTests.cs,ParameterWriterStateMachineErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteInErrorOrCompletedState")' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterStatesTests.cs,ParameterWriterStateMachineErrorTests,The length of the statement  "                PayloadWriterTestDescriptor.WriterTestExpectedResultCallback resultCallback = testConfig => new JsonWriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = testCase.ExpectedException }; " is 216.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterStatesTests.cs,ParameterWriterStateMachineErrorTests,The length of the statement  "                var testDescriptor = new PayloadWriterTestDescriptor<ODataParameters>(this.Settings' ObjectModelUtils.CreateDefaultParameter()' resultCallback); " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,GetPrimitiveCollection,The length of the statement  "            ODataCollectionStart primitiveItemCollectionStart = new ODataCollectionStart() { Name = EntityModelUtils.GetCollectionTypeName(typeName) }; " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,CreateODataParameterWriterErrorTests,The length of the statement  "                            ExpectedException2 = ODataExpectedExceptions.ODataException("ODataParameterWriter_CannotCreateParameterWriterOnResponseMessage") " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,CreateODataParameterWriterErrorTests,The length of the statement  "            var testDescriptor = new PayloadWriterTestDescriptor<ODataParameters>(this.Settings' ObjectModelUtils.CreateDefaultParameter()' resultCallback); " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,CreateODataParameterWriterErrorTests,The length of the statement  "            IEdmOperationImport functionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Primitive").First(); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,CreateODataParameterWriterErrorTests,The length of the statement  "            testDescriptor = new PayloadWriterTestDescriptor<ODataParameters>(this.Settings' ObjectModelUtils.CreateDefaultParameter()' resultCallback); " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,CreateODataParameterWriterErrorTests,The length of the statement  "                    TestWriterUtils.WriteAndVerifyODataParameterPayload(testDescriptor' testConfiguration' this.Assert' this.Logger' functionImport); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the statement  "            ODataNestedResourceInfo nestedComplexInfo = new ODataNestedResourceInfo() { Name = "ComplexProperty"' IsCollection = false }; " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the statement  "            ODataResource entry = new ODataResource() { TypeName = "TestModel.TestEntityType"' Properties = new List<ODataProperty>() { new ODataProperty() { Name = "ID"' Value = 1 }' new ODataProperty() { Name = "Name"' Value = "TestName" } } }; " is 234.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the statement  "            ODataResource entry2 = new ODataResource() { TypeName = "TestModel.TestDerivedEntityType"' Properties = new List<ODataProperty>() { new ODataProperty() { Name = "ID"' Value = 1 }' new ODataProperty() { Name = "Name"' Value = "TestName" } } }; " is 242.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the statement  "                    JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"' " is 191.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the statement  "                    JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"' " is 200.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the statement  "                    JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the statement  "                    JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the statement  "                var testDescriptor = new PayloadWriterTestDescriptor<ODataParameters>(this.Settings' ObjectModelUtils.CreateDefaultParameter()' resultCallback) " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The length of the statement  "                        this.Settings.ObjectModelToMessageWriter.WriteMessage(messageWriter' ODataPayloadKind.Parameter' testCase.ParameterPayload); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The length of the statement  "            myComplex.AddStructuralProperty("OneCollectionProperty"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetInt32(false))); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The length of the statement  "                    JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"'\"4\"'\"collectionElement---5\"'null'\"\"'\"-8\"'\"This is collectionElement9\"'\"-collectionElement10-\"]}"' " is 170.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The length of the statement  "                    JsonLight = "{\"p1\":[{\"OneProperty\":1'\"OneCollectionProperty\":[15'20]}'{\"OneProperty\":2'\"OneCollectionProperty\":[25]}]}"' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The length of the statement  "                        new KeyValuePair<string' object>("p4"' new ODataResource(){ TypeName = "TestModel.ComplexType"' Properties = new[] { new ODataProperty() { Name = "One"' Value = 2 }}})' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The length of the statement  "                var testDescriptor = new PayloadWriterTestDescriptor<ODataParameters>(this.Settings' ObjectModelUtils.CreateDefaultParameter()' resultCallback) " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The length of the statement  "                        this.Settings.ObjectModelToMessageWriter.WriteMessage(messageWriter' ODataPayloadKind.Parameter' testCase.ParameterPayload); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterNotSupportInStreamErrorTest,The length of the statement  "            var testDescriptor = new PayloadWriterTestDescriptor<ODataParameters>(this.Settings' ObjectModelUtils.CreateDefaultParameter()' resultCallback) " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterNotSupportInStreamErrorTest,The length of the statement  "            this.CombinatorialEngineProvider.RunCombinations(testConfigurations' new bool[] { true' false }' (testConfiguration' includeDebugInformation) => " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "            IEdmOperationImport functionImport_Primitive = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Primitive").First(); " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "            IEdmOperationImport functionImport_Complex = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Complex").First(); " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "            IEdmOperationImport functionImport_PrimitiveCollection = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_PrimitiveCollection").First(); " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "            IEdmOperationImport functionImport_NonNullablePrimitiveCollection = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_NonNullablePrimitiveCollection").First(); " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "            IEdmOperationImport functionImport_ComplexCollection = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_ComplexCollection").First(); " is 163.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "            IEdmOperationImport functionImport_Entry = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Entry").First(); " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "            IEdmOperationImport functionImport_Feed = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Feed").First(); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "            IEdmOperationImport functionImport_Stream = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Stream").First(); " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "            IEdmOperationImport iedmFunctionImport_PrimitiveTwoParameters = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_PrimitiveTwoParameters").First(); " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "            IEdmOperationImport iedmFunctionImport_PrimitiveInt = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Int").First(); " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "            IEdmOperationImport iedmFunctionImport_PrimitiveDouble = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Double").First(); " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_MissingParameterInParameterPayload"' "'primitive'"' functionImport_Primitive.Name)' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_MissingParameterInParameterPayload"' "'p1'' 'p2'"' iedmFunctionImport_PrimitiveTwoParameters.Name)' " is 184.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_ParameterNameNotFoundInOperation"' "p1"' "FunctionImport_Primitive")' " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_ParameterNameNotFoundInOperation"' "p1"' "FunctionImport_PrimitiveCollection")' " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "primitiveCollection"' "Collection")' " is 159.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "complexCollection"' "Collection")' " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "entry"' "Entity")' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "feed"' "Collection")' " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "primitive"' "Primitive")' " is 165.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "complex"' "Complex")' " is 161.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "entry"' "Entity")' " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "feed"' "Collection")' " is 161.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "System.IO.MemoryStream")' " is 159.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "Microsoft.OData.ODataCollectionValue")' " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "Microsoft.OData.ODataStreamReferenceValue")' " is 178.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.String"' "False")' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Double"' "False"' "Edm.Int32"' "False")' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.Double"' "False")' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "complex"' "Complex")' " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_UnrecognizedTypeName"' "TestModel.SomeComplexType")' " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceWriterOnNonEntityOrComplexTypeKind"' "primitive"' "Primitive")' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestModel.ComplexType") " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.String"' "True")' " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceSetWriterOnNonStructuredCollectionTypeKind"' "primitiveCollection"' "Collection") " is 186.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceSetWriterOnNonStructuredCollectionTypeKind"' "primitiveCollection"' "Collection") " is 186.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                PayloadWriterTestDescriptor.WriterTestExpectedResultCallback resultCallback = testConfig => new JsonWriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = testCase.ExpectedException }; " is 216.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                var testDescriptor = new PayloadWriterTestDescriptor<ODataParameters>(this.Settings' ObjectModelUtils.CreateDefaultParameter()' resultCallback) { Model = model }; " is 162.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The length of the statement  "                        this.Settings.ObjectModelToMessageWriter.WriteMessage(messageWriter' ODataPayloadKind.Parameter' testCase.ParameterPayload' model' testCase.FunctionImport); " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                    Properties = new[] { new ODataProperty() { Name = "PrimitiveProperty"' Value = "foo" }' new ODataProperty() { Name = "ComplexProperty"' Value = null } } " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                container.AddActionAndActionImport(model' "FunctionImport_NullablePrimitive_Bindable" + value' null /*returnType*/' null /*entitySet*/' value /*bindable*/).Action.AsEdmAction().AddParameter("primitive"' EdmCoreModel.Instance.GetString(isNullable: true)); " is 254.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                container.AddActionAndActionImport(model' "FunctionImport_Primitive_Bindable" + value' null /*returnType*/' null /*entitySet*/' value /*bindable*/).Action.AsEdmAction().AddParameter("primitive"' EdmCoreModel.Instance.GetString(isNullable: true)); " is 246.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                container.AddActionAndActionImport(model' "FunctionImport_PrimitiveCollection_Bindable" + value' null /*returnType*/' null /*entitySet*/' value /*bindable*/).Action.AsEdmAction().AddParameter("primitiveCollection"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetString(isNullable: true))); " is 294.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                container.AddActionAndActionImport(model' "FunctionImport_Complex_Bindable" + value' null /*returnType*/' null /*entitySet*/' value /*bindable*/).Action.AsEdmAction().AddParameter("complex"' new EdmComplexTypeReference(complexType' isNullable: true)); " is 251.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                container.AddActionAndActionImport(model' "FunctionImport_ComplexCollection_Bindable" + value' null /*returnType*/' null /*entitySet*/' value /*bindable*/).Action.AsEdmAction().AddParameter("complexCollection"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(complexType' isNullable: true))); " is 299.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                EdmFunction function = new EdmFunction(container.Namespace' "FunctionImport_PrimitiveNoSideEffecting_Bindable_" + value' EdmCoreModel.Instance.GetInt32(true)' value /*isBound*/' null' true /*isComposable*/); " is 207.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                        FunctionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_NullablePrimitive_Bindable" + value).First()' " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                        FunctionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_PrimitiveNoSideEffecting_Bindable_" + value).First()' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                        FunctionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Primitive_Bindable" + value).First()' " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                                    Properties = new[] { new ODataProperty() { Name = "PrimitiveProperty"' Value = "foo" }' new ODataProperty() { Name="ComplexProperty"' Value = null } } " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                        FunctionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Complex_Bindable" + value).First()' " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                        FunctionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_PrimitiveCollection_Bindable" + value).First()' " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                        FunctionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_ComplexCollection_Bindable" + value).First()' " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                var testDescriptor = new PayloadWriterTestDescriptor<ODataParameters>(this.Settings' ObjectModelUtils.CreateDefaultParameter()' resultCallback) { Model = model }; " is 162.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The length of the statement  "                        this.Settings.ObjectModelToMessageWriter.WriteMessage(messageWriter' ODataPayloadKind.Parameter' testCase.ParameterPayload' model' testCase.FunctionImport); " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,DuplicateParameterNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_DuplicatedParameterNameNotAllowed"' "p1")' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,DuplicateParameterNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_DuplicatedParameterNameNotAllowed"' "p1")' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,DuplicateParameterNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_DuplicatedParameterNameNotAllowed"' "p1")' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,DuplicateParameterNamesTest,The length of the statement  "                PayloadWriterTestDescriptor.WriterTestExpectedResultCallback resultCallback = testConfig => new JsonWriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = testCase.ExpectedException }; " is 216.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,DuplicateParameterNamesTest,The length of the statement  "                var testDescriptor = new PayloadWriterTestDescriptor<ODataParameters>(this.Settings' testCase.ParameterPayload' resultCallback) " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,DuplicateParameterNamesTest,The length of the statement  "                        this.Settings.ObjectModelToMessageWriter.WriteMessage(messageWriter' ODataPayloadKind.Parameter' testCase.ParameterPayload' edmModel' testCase.FunctionImport); " is 159.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,FunctionImportNotInModel,The length of the statement  "            IEdmOperationImport functionImport_Primitive = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Primitive").First(); " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,FunctionImportNotInModel,The length of the statement  "                    PayloadWriterTestDescriptor.WriterTestExpectedResultCallback resultCallback = testConfig => new JsonWriterTestExpectedResults(this.Settings.ExpectedResultSettings) { Json = "{\"primitive\":\"Hi\"}" }; " is 200.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,FunctionImportNotInModel,The length of the statement  "                    var testDescriptor = new PayloadWriterTestDescriptor<ODataParameters>(this.Settings' ObjectModelUtils.CreateDefaultParameter()' resultCallback) { Model = writerModel }; " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,FunctionImportNotInModel,The length of the statement  "                            this.Settings.ObjectModelToMessageWriter.WriteMessage(messageWriter' ODataPayloadKind.Parameter' parameterPayload' writerModel' functionImport_Primitive); " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.WriterCombinatorialEngine,BaselineLogger,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterCombinatorialEngine\BaselineLogger.cs,LogPayload,The length of the statement  "            builder.AppendFormat("Combination: {0}; TestConfiguration = Format: {1}' Request: {2}' Synchronous: {3}"' combination' config.Format' config.IsRequest' config.Synchronous); " is 172.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.WriterCombinatorialEngine,WriterCombinatorialEngine,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterCombinatorialEngine\WriterCombinatiorialEngineProvider.cs,NextCombination,The length of the statement  "                                        Approvals.Verify(new ApprovalTextWriter(baseline)' new CustomSourcePathNamer(approvalFileSoucePath)' Approvals.GetReporter()); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,UseWriterOnceTests,The length of the statement  "                new UseWriterOnceTestCase { WriterMethod = (messageWriter) => messageWriter.WriteError(error' false)' IsWriteError = true }' " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,UseWriterOnceTests,The length of the statement  "                new UseWriterOnceTestCase { WriterMethod = (messageWriter) => messageWriter.WriteValue(rawValue)' IsWriteValue = true }' " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,UseWriterOnceTests,The length of the statement  "                        using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' out testMessage' settingsWithBaseUri)) " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,UseWriterOnceTests,The length of the statement  "                            string expectedException = "The ODataMessageWriter has already been used to write a message payload. An ODataMessageWriter can only be used once to write a payload for a given message."; " is 186.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,UseWriterOnceTests,The length of the statement  "                                expectedException = "The WriteError method or the WriteErrorAsync method on ODataMessageWriter cannot be called after the WriteValue method or the WriteValueAsync method is called. In OData' writing an in-stream error for raw values is not supported."; " is 252.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,UseWriterOnceTests,The length of the statement  "                            TestExceptionUtils.ExpectedException<ODataException>(this.Assert' () => testCase[1].WriterMethod(messageWriter)' expectedException); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,ODataFeedAndEntryWriterIncorrectPayload,The length of the statement  "                        ODataWriterFunc = (Func<ODataMessageWriterTestWrapper' ODataWriter>)(messageWriter => messageWriter.CreateODataResourceWriter())' " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,ODataFeedAndEntryWriterIncorrectPayload,The length of the statement  "                        ODataWriterFunc = (Func<ODataMessageWriterTestWrapper' ODataWriter>)(messageWriter => messageWriter.CreateODataResourceSetWriter())' " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,ODataFeedAndEntryWriterIncorrectPayload,The length of the statement  "                        using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' out testMessage)) " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetHeadersForPayloadAndInvalidCallsErrorTest,The length of the statement  "            string errorMessageTemplate = "The payload kind '{0}' used in the last call to ODataUtils.SetHeadersForPayload is incompatible with the payload being written which is of kind '{1}'."; " is 183.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetHeadersForPayloadAndInvalidCallsErrorTest,The length of the statement  "                            using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' out testMessage' settingsWithBaseUri)) " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetHeadersForPayloadTest,The length of the statement  "                        ExpectedException = ODataExpectedExceptions.ArgumentException("ODataMessageWriter_CannotSetHeadersWithInvalidPayloadKind"' "Unsupported")' " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetHeadersForPayloadTest,The length of the statement  "                                using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' out testMessage' writerSettings)) " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetHeadersForPayloadTest,The length of the statement  "                                    this.Assert.AreEqual(testCase.ExpectedContentType' testMessage.GetHeader(ODataConstants.ContentTypeHeader)' "Content types don't match."); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetVersionInMessageHeaderTest,The length of the statement  "                    suffix => new VersionMessageHeaderTestCase { VersionHeaderValue = mapping.Key + suffix' ExpectedVersion = mapping.Value })); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetVersionInMessageHeaderTest,The length of the statement  "            testCases = testCases.ConcatSingle(new VersionMessageHeaderTestCase { VersionHeaderValue = null' ExpectedVersion = ODataVersionUtils.DefaultVersion }); " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetVersionInMessageHeaderTest,The length of the statement  "                        using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' clonedTestConfiguration' this.Assert' out testMessage' null' model)) " is 171.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetVersionInMessageHeaderTest,The length of the statement  "                                this.Assert.AreEqual(ODataUtils.ODataVersionToString(ODataVersionUtils.DefaultVersion)' testMessage.GetHeader(ODataConstants.ODataVersionHeader)' "Default version should be append to hearders!"); " is 195.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetVersionInMessageHeaderAndSettingsTest,The length of the statement  "            IEnumerable<string> validVersionHeaders = ODataVersionUtils.AllSupportedVersions.Select(version => ODataUtils.ODataVersionToString(version)); " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetVersionInMessageHeaderAndSettingsTest,The length of the statement  "            string[] invalidVersionHeaders = { null' "randomstring"' "V1.0"' "1.5"' "randomstring;1.0"' "4.0"' "1"' ";UserAgentString" }; " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetVersionInMessageHeaderAndSettingsTest,The length of the statement  "                    this.Assert.IsNotNull(testConfiguration.MessageWriterSettings.Version' "Version must exist on the message writer settings."); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetVersionInMessageHeaderAndSettingsTest,The length of the statement  "                        using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' out testMessage' null' model)) " is 165.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetContentTypeInMessageHeaderTest,The length of the statement  "                        using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' clonedTestConfiguration' this.Assert' out testMessage' null' model)) " is 171.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetContentTypeInMessageHeaderTest,The length of the statement  "                            string expectedEncodingName = testDescriptor.TestCase.ExpectedEncoding != null ? testDescriptor.TestCase.ExpectedEncoding.WebName : null; " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetContentTypeInMessageHeaderTest,The length of the statement  "                                this.Assert.IsTrue(testDescriptor.TestCase.ContentTypeHeaderValue.Contains("boundary=" + batchBoundary)' "Boundary strings don't match."); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetContentTypeInMessageHeaderAndSettingsTest,The length of the statement  "                        using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' clonedTestConfiguration' this.Assert' out testMessage' null' model)) " is 171.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetContentTypeInMessageHeaderAndSettingsTest,The length of the statement  "                                this.Assert.IsTrue(contentTypeHeader.StartsWith(defaultContentType)' "Batch content type header does not start with expected prefix."); " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,SetContentTypeInMessageHeaderAndSettingsTest,The length of the statement  "                            this.Assert.AreEqual(TestMediaTypeUtils.GetDefaultEncoding(payloadKind' actualFormat)' actualEncoding' "Encodings do not match!"); " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,NullStreamMessageTest,The length of the statement  "                        messageWriter = new ODataMessageWriter(new NullStreamResponseMessage()' testConfiguration.MessageWriterSettings' model); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,NullStreamMessageTest,The length of the statement  "                    using (ODataMessageWriterTestWrapper messageWriterWrapper = new ODataMessageWriterTestWrapper(messageWriter' testConfiguration)) " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,NullStreamMessageTest,The length of the statement  "                            () => TestExceptionUtils.UnwrapAggregateException(() => writerInvocation.WriterAction(messageWriterWrapper)' this.Assert)' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,NoByteOrderMarkByDefaultTest,The length of the statement  "                        using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' out testMessage' null' model)) " is 165.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,NullStreamTaskMessageTest,The length of the statement  "                    using (ODataMessageWriterTestWrapper messageWriterWrapper = new ODataMessageWriterTestWrapper(messageWriter' testConfiguration)) " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,NullStreamTaskMessageTest,The length of the statement  "                            () => TestExceptionUtils.UnwrapAggregateException(() => writerInvocation.WriterAction(messageWriterWrapper)' this.Assert)' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,UriHandlingTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\UriHandlingTests.cs,BaseUriErrorTest,The length of the statement  "                                ExpectedException2 = ODataExpectedExceptions.ODataException("ODataWriter_RelativeUriUsedWithoutBaseUriSpecified"' uri.OriginalString) " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,UriHandlingTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\UriHandlingTests.cs,BaseUriErrorTest,The length of the statement  "                            this.Assert.AreEqual(1' urlResolver.Calls.Where(call => call.Value.OriginalString == uri.OriginalString).Count()' "The resolver should be called exactly once for each URL."); " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,UriHandlingTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\UriHandlingTests.cs,AbsoluteUriTest,The length of the statement  "                new Uri("http://odata.org/testuri?$filter=geo.distance(Point'%20geometry'SRID=0;Point(6.28E%2B3%20-2.1e%2B4)')%20eq%20null")' " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,GetJsonLightForRelGroup,The length of the statement  "                string metadataString = operations[0].Metadata.GetComponents(UriComponents.SerializationInfoString' UriFormat.Unescaped); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The length of the statement  "            ODataAction action_r1_t2 = new ODataAction() { Metadata = actionMetadata' Title = actionTitle' Target = actionTarget2 }; " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The length of the statement  "            ODataAction action_r2_t1 = new ODataAction() { Metadata = actionMetadata2' Title = actionTitle' Target = actionTarget }; " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The length of the statement  "            ODataAction action_r3_t1 = new ODataAction() { Metadata = actionMetadata3' Title = actionTitle' Target = actionTarget }; " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The length of the statement  "            ODataFunction function_r1_t1 = new ODataFunction() { Metadata = functionMetadata' Title = functionTitle' Target = functionTarget }; " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The length of the statement  "            ODataFunction function_r1_t2 = new ODataFunction() { Metadata = functionMetadata' Title = functionTitle' Target = functionTarget2 }; " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The length of the statement  "            ODataFunction function_r2_t1 = new ODataFunction() { Metadata = functionMetadata2' Title = functionTitle' Target = functionTarget }; " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The length of the statement  "            ODataFunction function_r3_t1 = new ODataFunction() { Metadata = functionMetadata3' Title = functionTitle' Target = functionTarget }; " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The length of the statement  "                                            : entry.Actions != null && entry.Actions.Any(a => !a.Metadata.IsAbsoluteUri && !a.Metadata.OriginalString.StartsWith("#")) " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The length of the statement  "                                                ? ODataExpectedExceptions.ODataException("ValidationUtils_InvalidMetadataReferenceProperty"' entry.Actions.First(a => a.Metadata.OriginalString.Contains(" ")).Metadata.OriginalString) " is 183.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The length of the statement  "                                                        : entry.Functions != null && entry.Functions.Any(f => !f.Metadata.IsAbsoluteUri && !f.Metadata.OriginalString.StartsWith("#")) " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The length of the statement  "                                                            ? ODataExpectedExceptions.ODataException("ValidationUtils_InvalidMetadataReferenceProperty"' entry.Functions.First(f => f.Metadata.OriginalString.Contains(" ")).Metadata.OriginalString) " is 185.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterActionAndFunctionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterActionAndFunctionTests.cs,ActionAndFunctionTest,The length of the statement  "                                        //      against the expected results. This however means that we do not distinguish between the indented and non-indented case here. " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterArgumentValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterArgumentValidationTest.cs,VerifyArgumentNullException,The length of the statement  "            TestExceptionUtils.ExpectedException(this.Assert' action' new ExpectedException(typeof(ArgumentNullException))' this.ExceptionVerifier); " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkTest,The length of the statement  "                new EdmNavigationPropertyInfo { Name = associationLinkName1' Target = edmEntityTypeOrderType' TargetMultiplicity = EdmMultiplicity.One }); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkTest,The length of the statement  "                new EdmNavigationPropertyInfo { Name = associationLinkName2' Target = edmEntityTypeOrderType' TargetMultiplicity = EdmMultiplicity.Many }); " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkTest,The length of the statement  "                                    var associationLinks = result.Object().GetAnnotationsWithName("@" + JsonLightConstants.ODataAssociationLinkUrlAnnotationName).ToList(); " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkTest,The length of the statement  "                                        //      against the expected results. This however means that we do not distinguish between the indented and non-indented case here. " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the statement  "                new EdmNavigationPropertyInfo { Name = "NavProp1"' Target = edmEntityTypeOrderType' TargetMultiplicity = EdmMultiplicity.One }); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the statement  "                new EdmNavigationPropertyInfo { Name = "NavProp2"' Target = edmEntityTypeOrderType' TargetMultiplicity = EdmMultiplicity.Many }); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the statement  "                    NavigationLink = new ODataNestedResourceInfo() { Name = "NavProp1"' IsCollection = false' Url = new Uri("http://odata.org/navlink")' AssociationLinkUrl = new Uri("http://odata.org/assoclink") }' " is 194.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the statement  "                        "\"" + JsonLightUtils.GetPropertyAnnotationName("NavProp1"' JsonLightConstants.ODataNavigationLinkUrlAnnotationName) + "\":\"http://odata.org/navlink\"'" + " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the statement  "                        "\"" + JsonLightUtils.GetPropertyAnnotationName("NavProp1"' JsonLightConstants.ODataAssociationLinkUrlAnnotationName) + "\":\"http://odata.org/assoclink\"" " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the statement  "                    NavigationLink = new ODataNestedResourceInfo() { Name = "NavProp1"' IsCollection = false' Url = new Uri("http://odata.org/navlink")' AssociationLinkUrl = null }' " is 161.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the statement  "                    JsonLight = "\"" + JsonLightUtils.GetPropertyAnnotationName("NavProp1"' JsonLightConstants.ODataNavigationLinkUrlAnnotationName) + "\":\"http://odata.org/navlink\"" " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the statement  "                    NavigationLink = new ODataNestedResourceInfo() { Name = "NavProp1"' IsCollection = false' Url = null' AssociationLinkUrl = new Uri("http://odata.org/assoclink") }' " is 163.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the statement  "                    JsonLight = "\"" + JsonLightUtils.GetPropertyAnnotationName("NavProp1"' JsonLightConstants.ODataAssociationLinkUrlAnnotationName) + "\":\"http://odata.org/assoclink\"" " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the statement  "                    NavigationLink = new ODataNestedResourceInfo() { Name = "NavProp1"' IsCollection = false' Url = null' AssociationLinkUrl = null }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the statement  "                                            //      against the expected results. This however means that we do not distinguish between the indented and non-indented case here. " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkOnNavigationLinkTest,The length of the statement  "                this.WriterTestConfigurationProvider.ExplicitFormatConfigurationsWithIndent.Where(testConfiguration => !testConfiguration.IsRequest)' " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkMetadataValidationTest,The length of the statement  "            edmEntityTypeCustomerType.AddKeys(new EdmStructuralProperty(edmEntityTypeCustomerType' "ID"' EdmCoreModel.Instance.GetInt32(false))); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkMetadataValidationTest,The length of the statement  "                new EdmNavigationPropertyInfo { Name = "Orders"' Target = edmEntityTypeOrderType' TargetMultiplicity = EdmMultiplicity.Many }); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkMetadataValidationTest,The length of the statement  "                new EdmNavigationPropertyInfo { Name = "BestFriend"' Target = edmEntityTypeCustomerType' TargetMultiplicity = EdmMultiplicity.One }); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkMetadataValidationTest,The length of the statement  "            var edmEntityTypeOpenCustomerType = new EdmEntityType("TestModel"' "OpenCustomerType"' edmEntityTypeCustomerType' isAbstract: false' isOpen: true); " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkMetadataValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_PropertyDoesNotExistOnType"' "NonExistant"' "TestModel.CustomerType")' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkMetadataValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_OpenNavigationProperty"' "NonExistant"' "TestModel.OpenCustomerType")' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,AssociationLinkMetadataValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NavigationPropertyExpected"' "PrimitiveProperty"' "TestModel.CustomerType"' "Structural")' " is 166.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,BuildXmlNavigationLink,The length of the statement  "            return "<link rel=\"" + TestAtomConstants.ODataNavigationPropertiesRelatedLinkRelationPrefix + navigationLinkName + "\" " " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterAssociationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterAssociationLinkTests.cs,BuildXmlAssociationLink,The length of the statement  "            return "<link rel=\"" + TestAtomConstants.ODataNavigationPropertiesAssociationLinkRelationPrefix + associationLinkName + "\" " " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = null' ExpectedFormat = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 191.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = null' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = Default' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata  + ";" + CharsetUtf8 }' " is 178.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = StarStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' ApplicationAtomXml' tc.Version) }' " is 199.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' ApplicationAtomXmlEntry' tc.Version) }' " is 209.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = AcceptHeaderWithQualityValues1' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' AcceptHeaderWithQualityValues1' tc.Version) }' " is 223.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = AcceptHeaderWithQualityValues2' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' AcceptHeaderWithQualityValues2' tc.Version) }' " is 223.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = AcceptHeaderWithMultipleSupportedEntryTypes' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' AcceptHeaderWithMultipleSupportedEntryTypes' tc.Version) }' " is 249.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = AcceptHeaderWithInvalidValueEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' AcceptHeaderWithInvalidValueEntry' tc.Version) }' " is 229.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Batch' ExpectedException = tc => GetExpectedException(ODataFormat.Batch) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedException = tc => GetExpectedException(ODataFormat.RawValue) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextStar' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' TextStar' tc.Version) }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextPlain' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' TextPlain' tc.Version) }' " is 181.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' TextXml' tc.Version) }' " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' ApplicationXml' tc.Version) }' " is 191.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomSvcXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' ApplicationAtomSvcXml' tc.Version) }' " is 205.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlFeed' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' ApplicationAtomXmlFeed' tc.Version) }' " is 207.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = AcceptHeaderWithUnsupportedParameter' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' AcceptHeaderWithUnsupportedParameter' tc.Version) }' " is 235.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = AcceptHeaderWithInvalidValue' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' AcceptHeaderWithInvalidValue' tc.Version) }' " is 219.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntryContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationJson + ";some=value"' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' ApplicationJson + ";some=value"' tc.Version) }' " is 225.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = null' ExpectedFormat = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 191.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = null' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = Default' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = StarStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationJsonODataLight' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 204.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationJsonODataLightStreaming' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 213.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationJsonODataLightNonStreaming' ExpectedContentType = BuildContentType(ApplicationJsonODataLightNonStreamingAndDefaultMetadata' CharsetUtf8) }' " is 219.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' ApplicationAtomXml' tc.Version) }' " is 202.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlFeed' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' ApplicationAtomXmlFeed' tc.Version) }' " is 210.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = AcceptHeaderWithQualityValues1' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' AcceptHeaderWithQualityValues1' tc.Version) }' " is 226.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = AcceptHeaderWithQualityValues2' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' AcceptHeaderWithQualityValues2' tc.Version) }' " is 226.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = AcceptHeaderWithMultipleSupportedFeedTypes' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' AcceptHeaderWithMultipleSupportedFeedTypes' tc.Version) }' " is 250.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = AcceptHeaderWithInvalidValueFeed' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' AcceptHeaderWithInvalidValueFeed' tc.Version) }' " is 230.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Batch' ExpectedException = tc => GetExpectedException(ODataFormat.Batch) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedException = tc => GetExpectedException(ODataFormat.RawValue) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextStar' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' TextStar' tc.Version) }' " is 182.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextPlain' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' TextPlain' tc.Version) }' " is 184.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextXml' ExpectedException =tc => GetExpectedException(ODataPayloadKind.ResourceSet' TextXml' tc.Version) }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' ApplicationXml' tc.Version) }' " is 194.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomSvcXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' ApplicationAtomSvcXml' tc.Version) }' " is 208.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' ApplicationAtomXmlEntry' tc.Version) }' " is 212.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = AcceptHeaderWithUnsupportedParameter' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' AcceptHeaderWithUnsupportedParameter' tc.Version) }' " is 238.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,FeedContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = AcceptHeaderWithInvalidValue' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ResourceSet' AcceptHeaderWithInvalidValue' tc.Version) }' " is 222.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = null' ExpectedFormat = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 191.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = null' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = Default' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = StarStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Property' ApplicationXml' tc.Version) }' " is 191.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextStar' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Property' TextStar' tc.Version) }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Property' TextXml' tc.Version) }' " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Batch' ExpectedException = tc => GetExpectedException(ODataFormat.Batch) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedException = tc => GetExpectedException(ODataFormat.RawValue) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextPlain' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Property' TextPlain' tc.Version) }' " is 181.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Property' ApplicationAtomXml' tc.Version) }' " is 199.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomSvcXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Property' ApplicationAtomSvcXml' tc.Version) }' " is 205.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Property' ApplicationAtomXmlEntry' tc.Version) }' " is 209.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlFeed' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Property' ApplicationAtomXmlFeed' tc.Version) }' " is 207.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationJson + ";some=value"' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Property' ApplicationJson + ";some=value"' tc.Version) }' " is 225.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The length of the statement  "            Func<PayloadWriterTestDescriptor<ODataProperty>' WriterTestConfiguration' Action<ODataMessageWriterTestWrapper>> writerFunc = " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = null' ExpectedFormat = ODataFormat.RawValue' ExpectedContentType = BuildContentType(TextPlain' CharsetUtf8) }' " is 163.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedContentType = BuildContentType(TextPlain' CharsetUtf8) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = null' ExpectedContentType = BuildContentType(TextPlain' CharsetUtf8) }' " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = Default' ExpectedContentType = BuildContentType(TextPlain'  CharsetUtf8) }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = StarStar' ExpectedContentType = BuildContentType(TextPlain' CharsetUtf8) }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = TextStar' ExpectedContentType = BuildContentType(TextPlain'  CharsetUtf8) }' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = TextPlain' ExpectedContentType = BuildContentType(TextPlain' CharsetUtf8) }' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = BuildContentType(TextPlain' CharsetUtf8)' ExpectedContentType = BuildContentType(TextPlain' CharsetUtf8) }' " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Atom' ExpectedException = tc => GetExpectedException(ODataFormat.Atom) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Batch' ExpectedException = tc => GetExpectedException(ODataFormat.Batch) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = TextXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Value' TextXml' tc.Version) }' " is 176.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationStar' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Value' ApplicationStar' tc.Version) }' " is 192.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Value' ApplicationXml' tc.Version) }' " is 190.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationAtomXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Value' ApplicationAtomXml' tc.Version) }' " is 198.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationAtomSvcXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Value' ApplicationAtomSvcXml' tc.Version) }' " is 204.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationAtomXmlEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Value' ApplicationAtomXmlEntry' tc.Version) }' " is 208.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationAtomXmlFeed' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Value' ApplicationAtomXmlFeed' tc.Version) }' " is 206.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationJson' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Value' ApplicationJson' tc.Version) }' " is 192.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = TextPlain + ";some=value"' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Value' TextPlain + ";some=value"' tc.Version) }' " is 212.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = null' ExpectedFormat = ODataFormat.RawValue' ExpectedContentType = ApplicationOctetStream }' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedContentType = ApplicationOctetStream }' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = null' ExpectedContentType = ApplicationOctetStream }' " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = Default' ExpectedContentType = ApplicationOctetStream }' " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = StarStar' ExpectedContentType = ApplicationOctetStream }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationStar' ExpectedContentType = ApplicationOctetStream }' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = BuildContentType(ApplicationStar' CharsetUtf8)' ExpectedContentType = ApplicationOctetStream }' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = BuildContentType(ApplicationStar' "some=value")' ExpectedContentType = ApplicationOctetStream }' " is 169.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Atom' ExpectedException = tc => GetExpectedException(ODataFormat.Atom) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Batch' ExpectedException = tc => GetExpectedException(ODataFormat.Batch) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = TextStar' ExpectedException = tc => GetExpectedException(ODataPayloadKind.BinaryValue' TextStar' tc.Version) }' " is 184.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = TextXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.BinaryValue' TextXml' tc.Version) }' " is 182.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = TextPlain' ExpectedException = tc => GetExpectedException(ODataPayloadKind.BinaryValue' TextPlain' tc.Version) }' " is 186.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.BinaryValue' ApplicationXml' tc.Version) }' " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationAtomXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.BinaryValue' ApplicationAtomXml' tc.Version) }' " is 204.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationAtomSvcXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.BinaryValue' ApplicationAtomSvcXml' tc.Version) }' " is 210.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationAtomXmlEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.BinaryValue' ApplicationAtomXmlEntry' tc.Version) }' " is 214.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationAtomXmlFeed' ExpectedException = tc => GetExpectedException(ODataPayloadKind.BinaryValue' ApplicationAtomXmlFeed' tc.Version) }' " is 212.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = ApplicationJson' ExpectedException = tc => GetExpectedException(ODataPayloadKind.BinaryValue' ApplicationJson' tc.Version) }' " is 198.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BinaryValueContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = BuildContentType(ApplicationJson' "some=value")' ExpectedException = tc => GetExpectedException(ODataPayloadKind.BinaryValue' BuildContentType(ApplicationJson' "some=value")' tc.Version) }' " is 262.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = null' ExpectedFormat = ODataFormat.Json' ExpectedContentType = ApplicationJson }' " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = null' ExpectedContentType =  ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = Default' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = StarStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 187.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 194.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = TextStar' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLink' TextStar' tc.Version) }' " is 188.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = TextXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLink' TextXml' tc.Version) }' " is 186.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLink' ApplicationXml' tc.Version) }' " is 200.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Batch' ExpectedException = tc => GetExpectedException(ODataFormat.Batch) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedException = tc => GetExpectedException(ODataFormat.RawValue) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.RawValue' AcceptHeaders = TextPlain' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLink' TextPlain' tc.Version) }' " is 194.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationAtomXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLink' ApplicationAtomXml' tc.Version) }' " is 208.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationAtomSvcXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLink' ApplicationAtomSvcXml' tc.Version) }' " is 214.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationAtomXmlEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLink' ApplicationAtomXmlEntry' tc.Version) }' " is 218.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationAtomXmlFeed' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLink' ApplicationAtomXmlFeed' tc.Version) }' " is 216.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = BuildContentType(ApplicationJson' "some=value")' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLink' BuildContentType(ApplicationJson' "some=value")' tc.Version) }' " is 266.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "            Func<PayloadWriterTestDescriptor<ODataEntityReferenceLink>' WriterTestConfiguration' Action<ODataMessageWriterTestWrapper>> writerFunc = " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "                (testDescriptor' testConfiguration) => messageWriter => messageWriter.WriteEntityReferenceLink(testDescriptor.PayloadItems[0]); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinkContentTypeTests,The length of the statement  "            this.RunTopLevelContentTypeTest(entityReferenceLink' ODataPayloadKind.EntityReferenceLink' null' null' writerFunc' testCases); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = null' ExpectedFormat = ODataFormat.Json' ExpectedContentType = ApplicationJson }' " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = null' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 172.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = Default' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = StarStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 187.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 194.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationAtomXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLinks' ApplicationAtomXml' tc.Version) }' " is 209.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationAtomXmlFeed' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLinks' ApplicationAtomXmlFeed' tc.Version) }' " is 217.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Batch' ExpectedException = tc => GetExpectedException(ODataFormat.Batch) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedException = tc => GetExpectedException(ODataFormat.RawValue) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = TextPlain' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLinks' TextPlain' tc.Version) }' " is 191.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationAtomSvcXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLinks' ApplicationAtomSvcXml' tc.Version) }' " is 215.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationAtomXmlEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLinks' ApplicationAtomXmlEntry' tc.Version) }' " is 219.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = TextStar'ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLinks' TextStar' tc.Version)  }' " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = TextXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLinks' TextXml' tc.Version)  }' " is 188.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLinks' ApplicationXml' tc.Version)  }' " is 202.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = BuildContentType(ApplicationJson' "some=value")' ExpectedException = tc => GetExpectedException(ODataPayloadKind.EntityReferenceLinks' BuildContentType(ApplicationJson' "some=value")' tc.Version) }' " is 267.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "            Func<PayloadWriterTestDescriptor<ODataEntityReferenceLinks>' WriterTestConfiguration' Action<ODataMessageWriterTestWrapper>> writerFunc = " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "                (testDescriptor' testConfiguration) => messageWriter => messageWriter.WriteEntityReferenceLinks(testDescriptor.PayloadItems[0]); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EntityReferenceLinksContentTypeTests,The length of the statement  "            this.RunTopLevelContentTypeTest(entityReferenceLinks' ODataPayloadKind.EntityReferenceLinks' null' null' writerFunc' testCases); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = null' ExpectedFormat = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8  }' " is 192.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = null' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = Default' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata  + ";" + CharsetUtf8 }' " is 178.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = StarStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' ApplicationXml' tc.Version) }' " is 193.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextStar' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' TextStar' tc.Version) }' " is 181.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' TextXml' tc.Version) }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Batch' ExpectedException = tc => GetExpectedException(ODataFormat.Batch) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedException = tc => GetExpectedException(ODataFormat.RawValue) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextPlain' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' TextPlain' tc.Version) }' " is 183.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' ApplicationAtomXml' tc.Version) }' " is 201.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomSvcXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' ApplicationAtomSvcXml' tc.Version) }' " is 207.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' ApplicationAtomXmlEntry' tc.Version) }' " is 211.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlFeed' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' ApplicationAtomXmlFeed' tc.Version) }' " is 209.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = BuildContentType(ApplicationJson' "some=value")' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' BuildContentType(ApplicationJson' "some=value")' tc.Version) }' " is 259.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = null' ExpectedFormat = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 191.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = null' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = Default' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = StarStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' ApplicationXml' tc.Version) }' " is 193.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextStar' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' TextStar' tc.Version) }' " is 181.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' TextXml' tc.Version) }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Batch' ExpectedException = tc => GetExpectedException(ODataFormat.Batch) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedException = tc => GetExpectedException(ODataFormat.RawValue) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextPlain' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' TextPlain' tc.Version) }' " is 183.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' ApplicationAtomXml' tc.Version) }' " is 201.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomSvcXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' ApplicationAtomSvcXml' tc.Version) }' " is 207.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' ApplicationAtomXmlEntry' tc.Version) }' " is 211.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlFeed' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' ApplicationAtomXmlFeed' tc.Version) }' " is 209.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ComplexCollectionContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = BuildContentType(ApplicationJson' "some=value")' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Collection' BuildContentType(ApplicationJson' "some=value")' tc.Version) }' " is 259.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = null' ExpectedFormat = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata  + ";" + CharsetUtf8 }' " is 192.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata  + ";" + CharsetUtf8 }' " is 169.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = null' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = Default' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = StarStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationXml'ExpectedException = tc => GetExpectedException(ODataPayloadKind.ServiceDocument' ApplicationXml' tc.Version)}' " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomSvcXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ServiceDocument' ApplicationAtomSvcXml' tc.Version)}' " is 211.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Batch' ExpectedException = tc => GetExpectedException(ODataFormat.Batch) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedException = tc => GetExpectedException(ODataFormat.RawValue) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextStar' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ServiceDocument' TextStar' tc.Version) }' " is 186.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ServiceDocument' TextXml' tc.Version) }' " is 184.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextPlain' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ServiceDocument' TextPlain' tc.Version) }' " is 188.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ServiceDocument' ApplicationAtomXml' tc.Version) }' " is 206.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ServiceDocument' ApplicationAtomXmlEntry' tc.Version) }' " is 216.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlFeed' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ServiceDocument' ApplicationAtomXmlFeed' tc.Version) }' " is 214.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = BuildContentType(ApplicationJson' "some=value")' ExpectedException = tc => GetExpectedException(ODataPayloadKind.ServiceDocument' BuildContentType(ApplicationJson' "some=value")' tc.Version) }' " is 264.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "            Func<PayloadWriterTestDescriptor<ODataServiceDocument>' WriterTestConfiguration' Action<ODataMessageWriterTestWrapper>> writerFunc = " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "                (testDescriptor' testConfiguration) => messageWriter => messageWriter.WriteServiceDocument(testDescriptor.PayloadItems[0]); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ServiceDocumentContentTypeTests,The length of the statement  "            this.RunTopLevelContentTypeTest(serviceDocument' ODataPayloadKind.ServiceDocument' null' null' writerFunc' testCases' true); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = null' ExpectedFormat = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 191.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Json' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";" + CharsetUtf8 }' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = null' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";"  + CharsetUtf8 }' " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = Default' ExpectedContentType = ApplicationJsonODataLightStreamingAndDefaultMetadata + ";"  + CharsetUtf8 }' " is 178.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = StarStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Error' ApplicationXml' tc.Version) }' " is 188.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Batch' ExpectedException = tc => GetExpectedException(ODataFormat.Batch) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedException = tc => GetExpectedException(ODataFormat.RawValue) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextStar' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Error' TextStar' tc.Version) }' " is 176.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Error' TextXml' tc.Version) }' " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = TextPlain' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Error' TextPlain' tc.Version) }' " is 178.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Error' ApplicationAtomXml' tc.Version) }' " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomSvcXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Error' ApplicationAtomSvcXml' tc.Version) }' " is 202.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = ApplicationAtomXmlEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Error' ApplicationAtomXmlEntry' tc.Version) }' " is 206.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { Format = ODataFormat.Atom' AcceptHeaders = BuildContentType(ApplicationJson' "some=value")' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Error' BuildContentType(ApplicationJson' "some=value")' tc.Version) }' " is 254.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "            Func<PayloadWriterTestDescriptor<ODataError>' WriterTestConfiguration' Action<ODataMessageWriterTestWrapper>> writerFunc = " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ErrorContentTypeTests,The length of the statement  "                (testDescriptor' testConfiguration) => messageWriter => messageWriter.WriteError(testDescriptor.PayloadItems[0]' false); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                //new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Atom' ExpectedException = tc => GetExpectedException(ODataFormat.Atom) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedException = tc => GetExpectedException(ODataFormat.RawValue) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Batch' AcceptHeaders = TextStar' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Batch' TextStar' tc.Version) }' " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Batch' AcceptHeaders = TextXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Batch' TextXml' tc.Version) }' " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Batch' AcceptHeaders = TextPlain' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Batch' TextPlain' tc.Version) }' " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Batch' AcceptHeaders = ApplicationXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Batch' ApplicationXml' tc.Version) }' " is 187.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Batch' AcceptHeaders = ApplicationAtomXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Batch' ApplicationAtomXml' tc.Version) }' " is 195.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Batch' AcceptHeaders = ApplicationAtomSvcXml' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Batch' ApplicationAtomSvcXml' tc.Version) }' " is 201.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Batch' AcceptHeaders = ApplicationAtomXmlEntry' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Batch' ApplicationAtomXmlEntry' tc.Version) }' " is 205.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Batch' AcceptHeaders = ApplicationAtomXmlFeed' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Batch' ApplicationAtomXmlFeed' tc.Version) }' " is 203.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Batch' AcceptHeaders = MultipartHttp' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Batch' MultipartHttp' tc.Version) }' " is 185.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,BatchContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Batch' AcceptHeaders = BuildContentType(MultipartHttp' "some=value")' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Batch' BuildContentType(MultipartHttp' "some=value")' tc.Version) }' " is 249.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ParameterPayloadContentTypeTests,The length of the statement  "            function.AddParameter("primitiveCollectionParameter"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetString(true))); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ParameterPayloadContentTypeTests,The length of the statement  "            function.AddParameter("complexCollectionParameter"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(nestedAddressType' false))); " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ParameterPayloadContentTypeTests,The length of the statement  "            EdmOperationImport functionImport = container.FindOperationImports("DefaultParametersFunction").Single() as EdmOperationImport; " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ParameterPayloadContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = null' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 183.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ParameterPayloadContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = Default' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 186.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ParameterPayloadContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = StarStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 187.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ParameterPayloadContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationStar' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 194.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ParameterPayloadContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Batch' ExpectedException = tc => GetExpectedException(ODataFormat.Batch) }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ParameterPayloadContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.Metadata' ExpectedException = tc => GetExpectedException(ODataFormat.Metadata) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,ParameterPayloadContentTypeTests,The length of the statement  "                new ContentTypeTestCase { UseFormat = true' Format = ODataFormat.RawValue' ExpectedException = tc => GetExpectedException(ODataFormat.RawValue) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EncodingContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = StarStar' Encoding=Utf8' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 202.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EncodingContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationStar' Encoding=Utf16' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf16) }' " is 211.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EncodingContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationStar' Encoding="utF-16"' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf16) }' " is 214.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EncodingContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationStar' Encoding="iSo-8859-1"' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharSetIso88591) }' " is 221.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EncodingContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationAtomXml' Encoding="UTF-8;q=0.6' ISO-10646-UCS-2;q=0.8"' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' ApplicationAtomXml' tc.Version) }' " is 244.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EncodingContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationAtomXmlEntry' Encoding="ISO-10646-UCS-2"' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' ApplicationAtomXmlEntry' tc.Version) }' " is 235.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EncodingContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = AcceptHeaderWithMultipleSupportedFeedTypes' Encoding=null' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' AcceptHeaderWithMultipleSupportedFeedTypes' tc.Version) }' " is 260.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EncodingContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = AcceptHeaderWithQualityValues1' Encoding="UTF-8;q=0.8' UTF-16;q=0.8"' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' AcceptHeaderWithQualityValues1' tc.Version) }' " is 259.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EncodingContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = AcceptHeaderWithQualityValues2' Encoding="UTF-16;q=0.8' UTF-8;q=0.8"' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' AcceptHeaderWithQualityValues2' tc.Version) }' " is 259.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EncodingContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = AcceptHeaderWithMultipleSupportedFeedTypes' Encoding=string.Empty' ExpectedException = tc => GetExpectedException(ODataPayloadKind.Resource' AcceptHeaderWithMultipleSupportedFeedTypes' tc.Version) }' " is 268.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EncodingContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationStar' Encoding = "==='*"' ExpectedException = tc => GetExpectedInvalidEncodingException("==='*") }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,EncodingContentTypeTests,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationStar' Encoding = CharsetUtf8' ExpectedException = tc => GetExpectedEncodingException(CharsetUtf8) }' " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,GenerateAppJsonContentTypeModel,The length of the statement  "            customerInfoType.AddKeys(customerInfoType.AddStructuralProperty("CustomerInfoID"' EdmCoreModel.Instance.GetInt32(false))); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,GenerateAppJsonContentTypeModel,The length of the statement  "            owningEntityType.AddStructuralProperty("PrimitiveCollectionProperty"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetInt32(false))); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,GenerateAppJsonContentTypeModel,The length of the statement  "            owningEntityType.AddStructuralProperty("ComplexCollectionProperty"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(addressComplexType' false))); " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "            IEdmNavigationProperty singletonNavProp = custType.DeclaredProperties.OfType<IEdmNavigationProperty>().Single(p => p.Name == "Info"); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "            Func<PayloadWriterTestDescriptor<ODataError>' WriterTestConfiguration' Action<ODataMessageWriterTestWrapper>> errorWriterFunc = " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "                (testDescriptor' testConfiguration) => messageWriter => messageWriter.WriteError(testDescriptor.PayloadItems[0]' false); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "            Func<PayloadWriterTestDescriptor<ODataServiceDocument>' WriterTestConfiguration' Action<ODataMessageWriterTestWrapper>> serviceDocWriterFunc = " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "                (testDescriptor' testConfiguration) => messageWriter => messageWriter.WriteServiceDocument(testDescriptor.PayloadItems[0]); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "            Func<PayloadWriterTestDescriptor<ODataEntityReferenceLink>' WriterTestConfiguration' Action<ODataMessageWriterTestWrapper>> linkWriterFunc = " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "                (testDescriptor' testConfiguration) => messageWriter => messageWriter.WriteEntityReferenceLink(testDescriptor.PayloadItems[0]); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "            Func<PayloadWriterTestDescriptor<ODataProperty>' WriterTestConfiguration' Action<ODataMessageWriterTestWrapper>> propertyWriterFunc = " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "            this.RunTopLevelContentTypeTest(error' ODataPayloadKind.Error' null' null' errorWriterFunc' CreateAppJsonVersioningTestCases(ODataPayloadKind.Error)' true); " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "            this.RunTopLevelContentTypeTest(serviceDocument' ODataPayloadKind.ServiceDocument' model' null' serviceDocWriterFunc' CreateAppJsonVersioningTestCases(ODataPayloadKind.ServiceDocument)' true); " is 192.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "            this.RunTopLevelContentTypeTest(entityReferenceLink' ODataPayloadKind.EntityReferenceLink' model' null' linkWriterFunc' CreateAppJsonVersioningTestCases(ODataPayloadKind.EntityReferenceLink)); " is 192.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "            this.RunTopLevelContentTypeTest(property' ODataPayloadKind.Property' model' owningEntityType' propertyWriterFunc' CreateAppJsonVersioningTestCases(ODataPayloadKind.Property)); " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The length of the statement  "            Approvals.Verify(new ApprovalTextWriter(this.Logger.GetBaseline())' new CustomSourcePathNamer(this.TestContext.DeploymentDirectory)' Approvals.GetReporter()); " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningEntityReferenceLinksTest,The length of the statement  "            IEdmNavigationProperty collectionNavProp = custType.DeclaredProperties.OfType<IEdmNavigationProperty>().Single(p => p.Name == "Orders"); " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningEntityReferenceLinksTest,The length of the statement  "            Func<PayloadWriterTestDescriptor<ODataEntityReferenceLinks>' WriterTestConfiguration' Action<ODataMessageWriterTestWrapper>> linksWriterFunc = " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningEntityReferenceLinksTest,The length of the statement  "    (testDescriptor' testConfiguration) => messageWriter => messageWriter.WriteEntityReferenceLinks(testDescriptor.PayloadItems[0]); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningEntityReferenceLinksTest,The length of the statement  "            this.RunTopLevelContentTypeTest(entityReferenceLinks' ODataPayloadKind.EntityReferenceLinks' model' null' linksWriterFunc' CreateAppJsonVersioningTestCases(ODataPayloadKind.EntityReferenceLinks)); " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningEntryTest,The length of the statement  "            this.RunContentTypeTest(entry' ODataPayloadKind.Resource' model' customerSet' customerType' CreateAppJsonVersioningTestCases(ODataPayloadKind.Resource)); " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningFeedTest,The length of the statement  "            this.RunContentTypeTest(resourceCollection' ODataPayloadKind.ResourceSet' model' customerSet' customerType' CreateAppJsonVersioningTestCases(ODataPayloadKind.ResourceSet)); " is 172.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentComplexTypeVersioningTest,The length of the statement  "            this.RunCollectionContentTypeTest(complexCollection' model' "ComplexCollectionFunction"' "Collection(TestCollectionType)"' new EdmComplexTypeReference(addressComplexType' false)' this.CreateAppJsonVersioningTestCases(ODataPayloadKind.Collection)); " is 247.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentPrimitivetTypeVersioningTest,The length of the statement  "            this.RunCollectionContentTypeTest(primitiveCollection' model' "PrimitiveCollectionFunction"' "Collection(TestCollectionType)"' EdmCoreModel.Instance.GetInt32(false)' this.CreateAppJsonVersioningTestCases(ODataPayloadKind.Collection)); " is 234.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationJsonAndAtomXmlWithQuality' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 215.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                // "application/json;q=0.8'application/atom+xml" should use  "application/json;odata.metadata=minimal" (for the payload kinds applicable) " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationJsonWithQualityAndAtomXml' ExpectedContentType = applicationAtomXmlContentType() ?? BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 250.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                // "application/json'application/atom+xml" should use "application/atom+xml" for all applicable payload kinds' otherwise JSON Light " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationJsonAndAtomXml' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 204.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                // "application/json'application/json;odata.metadata=minimal;odata.streaming=true" should use "application/json;odata.metadata=minimal;odata.streaming=true" " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationJsonAndJsonLightStreaming' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 215.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                // "application/json'application/json;odata.streaming=true" should use "application/json;odata.metadata=minimal;odata.streaming=true" " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationJsonAndJsonStreaming' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 210.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                // "application/json;odata.streaming=true'application/json;odata.streaming=false" "application/json;odata.metadata=minimal;odata.streaming=true" " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationJsonStreamingAndJsonNonStreaming' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 222.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                // "application/json;odata.metadata=minimal;odata.streaming=false'application/json;odata.streaming=true" "application/json;odata.metadata=minimal;odata.streaming=true" " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationJsonLightNonStreamingAndJsonStreaming' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 227.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                // "application/json;odata.metadata=minimal;odata.streaming=false'application/json;odata.metadata=minimal;odata.streaming=true" "application/json;odata.metadata=minimal;odata.streaming=true" " is 190.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateAppJsonVersioningTestCases,The length of the statement  "                new ContentTypeTestCase { Format = ODataFormat.Json' AcceptHeaders = ApplicationJsonLightNonStreamingAndJsonLightStreaming' ExpectedContentType = BuildContentType(ApplicationJsonODataLightStreamingAndDefaultMetadata' CharsetUtf8) }' " is 232.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RunParameterContentTypeTest,The length of the statement  "                new PayloadWriterTestDescriptor<ODataParameters>(this.Settings' parameters' CreateContentTypeResultCallback(testCases' this.Settings.ExpectedResultSettings' /*responseOnly*/ false)) " is 181.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RunParameterContentTypeTest,The length of the statement  "                        edmFunctionImport = edmModel.FindEntityContainer(functionImport.Container.FullName()).FindOperationImports(functionImport.Name).First(); " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RunParameterContentTypeTest,The length of the statement  "                    TestWriterUtils.WriteAndVerifyODataParameterPayload(testDescriptor' testConfiguration' this.Assert' this.Logger' edmFunctionImport); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RunParameterContentTypeTest,The length of the statement  "                    TestWriterUtils.SetPayloadKindAndVerifyContentType(ODataPayloadKind.Parameter' expectedResults' testConfiguration' this.Assert); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RunContentTypeTest,The length of the statement  "                new PayloadWriterTestDescriptor<ODataItem>(this.Settings' item' CreateContentTypeResultCallback(testCases' this.Settings.ExpectedResultSettings)) " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RunRawValueContentTypeTest,The length of the statement  "            var testDescriptors = new[] { new PayloadWriterTestDescriptor<object>(this.Settings' value' CreateContentTypeResultCallback(testCases' this.Settings.ExpectedResultSettings)) }; " is 176.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RunCollectionContentTypeTest,The length of the statement  "                new CollectionWriterTestDescriptor(this.CollectionSettings' collectionName' collectionTypeName' values' CreateContentTypeResultCallback(testCases' this.Settings.ExpectedResultSettings)' model) " is 192.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RunCollectionContentTypeTest,The length of the statement  "                    TestWriterUtils.SetPayloadKindAndVerifyContentType(ODataPayloadKind.Collection' expectedResults' testConfiguration' this.Assert); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RunBatchContentTypeTest,The length of the statement  "                    TestWriterUtils.SetPayloadKindAndVerifyContentType(ODataPayloadKind.Batch' expectedResults' testConfiguration' this.Assert); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,GetExpectedException,The length of the statement  "            return ODataExpectedExceptions.ODataContentTypeException("MediaTypeUtils_DidNotFindMatchingMediaType"' supportedTypes' acceptHeader); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateContentTypeResultCallback,The length of the statement  "                TestWriterUtils.ODataMessageWriterSettingsTestWrapper settingsWrapper = new TestWriterUtils.ODataMessageWriterSettingsTestWrapper(testConfiguration.MessageWriterSettings); " is 171.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateContentTypeResultCallback,The length of the statement  "                    testCase = testCases.SingleOrDefault(tc => tc.UseFormat == settingsWrapper.UseFormat && tc.Format == testConfiguration.Format); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateContentTypeResultCallback,The length of the statement  "                    throw new InvalidOperationException("Could not retrieve test case for accept header: " + settingsWrapper.AcceptableMediaTypes + "."); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateContentTypeResultCallback,The length of the statement  "                ExpectedException expectedException = testCase.ExpectedException == null ? null : testCase.ExpectedException(testConfiguration); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateContentTypeResultCallback,The length of the statement  "                    return new JsonWriterTestExpectedResults(settings) { ExpectedContentType = expectedContentType' ExpectedException2 = expectedException }; " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateContentTypeResultCallback,The length of the statement  "                else if (testConfiguration.Format == ODataFormat.RawValue || testConfiguration.Format == ODataFormat.Batch || testConfiguration.Format == ODataFormat.Metadata) " is 159.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateContentTypeResultCallback,The length of the statement  "                    return new RawValueWriterTestExpectedResults(settings) { ExpectedContentType = expectedContentType' ExpectedException2 = expectedException }; " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateContentTypeTestConfigurations,The length of the statement  "            Func<ODataFormat' bool' string' string' ODataVersion' ODataMessageWriterSettings> settingsCreator = (format' useFormat' acceptableMediaTypes' encoding' version) => " is 163.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateDefaultParameter,The length of the statement  "            primitiveCollectionValue.SetAnnotation(new ODataCollectionItemsObjectModelAnnotation() { "Value1"' "Value2"' "Value3" }); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryDefaultStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryDefaultStreamTests.cs,EntryDefaultStreamTest,The length of the statement  "            string outOfContentProperties = "<m:properties xmlns:m=\"" + TestAtomConstants.ODataMetadataNamespace + "\"><d:ID xmlns:d=\"" + TestAtomConstants.ODataNamespace + "\">foo</d:ID></m:properties>"; " is 194.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryDefaultStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryDefaultStreamTests.cs,EntryDefaultStreamTest,The length of the statement  "                    DefaultStream = new ODataStreamReferenceValue() { ReadLink = readLinkUri' EditLink = null' ContentType = contentType' ETag = null }' " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryDefaultStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryDefaultStreamTests.cs,EntryDefaultStreamTest,The length of the statement  "                    Atom = "<content type=\"" + contentType + "\" src=\"" + readLinkUri + "\" xmlns=\"" + TestAtomConstants.AtomNamespace + "\" />" + " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryDefaultStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryDefaultStreamTests.cs,EntryDefaultStreamTest,The length of the statement  "                    DefaultStream = new ODataStreamReferenceValue() { ReadLink = readLinkUri' EditLink = editLinkUri' ContentType = contentType' ETag = null }' " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryDefaultStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryDefaultStreamTests.cs,EntryDefaultStreamTest,The length of the statement  "                    Atom = "<content type=\"" + contentType + "\" src=\"" + readLinkUri + "\" xmlns=\"" + TestAtomConstants.AtomNamespace + "\" />" + " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryDefaultStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryDefaultStreamTests.cs,EntryDefaultStreamTest,The length of the statement  "                    DefaultStream = new ODataStreamReferenceValue() { ReadLink = null' EditLink = editLinkUri' ContentType = null' ETag = null }' " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryDefaultStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryDefaultStreamTests.cs,EntryDefaultStreamTest,The length of the statement  "                    DefaultStream = new ODataStreamReferenceValue() { ReadLink = readLinkUri' EditLink = editLinkUri' ContentType = contentType' ETag = etag }' " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryDefaultStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryDefaultStreamTests.cs,EntryDefaultStreamTest,The length of the statement  "                    Atom = "<content type=\"" + contentType + "\" src=\"" + readLinkUri + "\" xmlns=\"" + TestAtomConstants.AtomNamespace + "\" />" + " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryDefaultStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryDefaultStreamTests.cs,EntryDefaultStreamTest,The length of the statement  "                           "<link rel=\"edit-media\" href=\"" + editLink + "\" p2:etag=\"" + atomEscapedEtag + "\" xmlns:p2=\"" + TestAtomConstants.ODataMetadataNamespace + "\" " + " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryDefaultStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryDefaultStreamTests.cs,EntryDefaultStreamTest,The length of the statement  "                                        .Where(l => (string)l.Attribute(TestAtomConstants.AtomLinkRelationAttributeName) == TestAtomConstants.ODataStreamPropertyEditMediaSegmentName); " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryDefaultStreamTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryDefaultStreamTests.cs,EntryDefaultStreamTest,The length of the statement  "                                    var properties = result.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.AtomPropertiesElementName); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryIdTests,The length of the statement  "                    TestWriterUtils.WriteAndVerifyODataPayload(testDescriptor.DeferredLinksToEntityReferenceLinksInRequest(testConfiguration)' testConfiguration' this.Assert' this.Logger); " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,SelfAndEditLinkTests,The length of the statement  "            Func<WriterTestConfiguration' bool' WriterTestExpectedResults> selfLinkExpectedCallback = (testConfiguration' editLinkExpected) => " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,SelfAndEditLinkTests,The length of the statement  "            Func<WriterTestConfiguration' bool' WriterTestExpectedResults> editLinkExpectedCallback = (testConfiguration' selfLinkExpected) => " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,SelfAndEditLinkTests,The length of the statement  "                new PayloadWriterTestDescriptor<ODataItem>(this.Settings' selfLinkEntry' (testConfiguration) => selfLinkExpectedCallback(testConfiguration' false))' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,SelfAndEditLinkTests,The length of the statement  "                new PayloadWriterTestDescriptor<ODataItem>(this.Settings' editLinkEntry' (testConfiguration) => editLinkExpectedCallback(testConfiguration' false))' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,SelfAndEditLinkTests,The length of the statement  "                new PayloadWriterTestDescriptor<ODataItem>(this.Settings' selfAndEditLinkEntry' (testConfiguration) => editLinkExpectedCallback(testConfiguration' true))' " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryTypeNameTest,The length of the statement  "                    ExpectedXml = "<category term='MyType' scheme='" + TestAtomConstants.ODataSchemeNamespace +"' xmlns='" + TestAtomConstants.AtomNamespace + "' />"' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryTypeNameTest,The length of the statement  "                    ExpectedXml = "<category term='TestModel.EntityType' scheme='" + TestAtomConstants.ODataSchemeNamespace +"' xmlns='" + TestAtomConstants.AtomNamespace + "' />"' " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryTypeNameTest,The length of the statement  "                    ExpectedXml = "<category term='TestModel.DerivedType' scheme='" + TestAtomConstants.ODataSchemeNamespace +"' xmlns='" + TestAtomConstants.AtomNamespace + "' />"' " is 161.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryTypeNameTest,The length of the statement  "                    ExpectedJsonLight = "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.DerivedType\""' " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryTypeNameTest,The length of the statement  "                                        return typeProperty == null ? (JsonValue)(new JsonProperty("typeMissing"' new JsonPrimitiveValue(null))) : typeProperty.RemoveAllAnnotations(true); " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntrySerializationTypeNameAnnotationTest,The length of the statement  "                    ExpectedXml = "<category term='TestModel.MyType' scheme='" + TestAtomConstants.ODataSchemeNamespace +"' xmlns='" + TestAtomConstants.AtomNamespace + "' />"' " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntrySerializationTypeNameAnnotationTest,The length of the statement  "                    ExpectedXml = "<category term='TestModel.MyType' scheme='" + TestAtomConstants.ODataSchemeNamespace +"' xmlns='" + TestAtomConstants.AtomNamespace + "' />"' " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntrySerializationTypeNameAnnotationTest,The length of the statement  "                    ExpectedXml = "<category term='TestModel.DerivedType' scheme='" + TestAtomConstants.ODataSchemeNamespace +"' xmlns='" + TestAtomConstants.AtomNamespace + "' />"' " is 161.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntrySerializationTypeNameAnnotationTest,The length of the statement  "                    ExpectedJsonLight = "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.DerivedType\""' " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntrySerializationTypeNameAnnotationTest,The length of the statement  "                    ExpectedXml = "<category term='DifferentType' scheme='" + TestAtomConstants.ODataSchemeNamespace +"' xmlns='" + TestAtomConstants.AtomNamespace + "' />"' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntrySerializationTypeNameAnnotationTest,The length of the statement  "                    ExpectedXml = "<category term='' scheme='" + TestAtomConstants.ODataSchemeNamespace +"' xmlns='" + TestAtomConstants.AtomNamespace + "' />"' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntrySerializationTypeNameAnnotationTest,The length of the statement  "                    ExpectedJsonLight = "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"\""' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntrySerializationTypeNameAnnotationTest,The length of the statement  "                    ExpectedXml = "<category term='DifferentType' scheme='" + TestAtomConstants.ODataSchemeNamespace +"' xmlns='" + TestAtomConstants.AtomNamespace + "' />"' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntrySerializationTypeNameAnnotationTest,The length of the statement  "                    ExpectedXml = "<category term='DifferentType' scheme='" + TestAtomConstants.ODataSchemeNamespace +"' xmlns='" + TestAtomConstants.AtomNamespace + "' />"' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntrySerializationTypeNameAnnotationTest,The length of the statement  "                    ExpectedJsonLight = "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"DifferentType\""' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntrySerializationTypeNameAnnotationTest,The length of the statement  "                                    return typeProperty == null ? (JsonValue)(new JsonProperty("typeMissing"' new JsonPrimitiveValue(null))) : typeProperty.RemoveAllAnnotations(true); " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The length of the statement  "            // A depth value which is greater tthan half of the depth limit' but still under it (for testing that depth counts aren't shared between sibling properties). " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The length of the statement  "            overLimitEntry.Properties = new ODataProperty[] { CreateDeeplyNestedComplexValues(depthLimit + 1' "TestModel.ComplexType"' "PropertyName") }; " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The length of the statement  "            atLimitEntry.Properties = new ODataProperty[] { CreateDeeplyNestedComplexValues(depthLimit' "TestModel.ComplexType"' "PropertyName") }; " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The length of the statement  "            // Create an entry where the total number of complex properties is greater than the depth limit' but no individual property exceeds the limit. " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The length of the statement  "            overLimitInCollectionEntry.Properties = new ODataProperty[] { CreateDeeplyNestedComplexValuesInCollections(depthLimit + 1' "TestModel.ComplexType"' "PropertyName") }; " is 166.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The length of the statement  "            atLimitInCollectionEntry.Properties = new ODataProperty[] { CreateDeeplyNestedComplexValuesInCollections(depthLimit' "TestModel.ComplexType"' "PropertyName") }; " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The length of the statement  "            // An entry where the total number of complex properties is greater than the depth limit' but no individual property exceeds the limit. " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The length of the statement  "                CreateDeeplyNestedComplexValuesInCollections(depthOverHalfButStillBelowLimit' "TestModel.ComplexType"' "FirstPropertyName")' " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The length of the statement  "                CreateDeeplyNestedComplexValuesInCollections(depthOverHalfButStillBelowLimit' "TestModel.ComplexType"' "SecondPropertyName") " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryUserExceptionTests,The length of the statement  "                        var configuredTestDescriptor = new PayloadWriterTestDescriptor<ODataItem>(this.Settings' testDescriptor.PayloadItems' testDescriptor.ExpectedResultCallback) " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateEntryWithNullPropertyListDescriptor,The length of the statement  "                                "\"__metadata\":{\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithoutProperties\"}" + " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateEntryWithEmptyPropertyListDescriptor,The length of the statement  "                                "\"__metadata\":{\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithoutProperties\"}" + " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"Geography\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyValue' "Edm.GeographyPoint")' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeographyPoint\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPointValue' "Edm.GeographyPoint")' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeographyLineString\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyLineStringValue' "Edm.GeographyLineString")' " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeographyPolygon\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPolygonValue' "Edm.GeographyPolygon")' " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeographyCollection\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyCollectionValue' "Edm.GeographyCollection")' " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeographyMultiPoint\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPointValue' "Edm.GeographyMultiPoint")' " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeographyMultiLineString\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiLineStringValue' "Edm.GeographyMultiLineString")' " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeographyMultiPolygon\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPolygonValue' "Edm.GeographyMultiPolygon")' " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"Geometry\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryValue' "Edm.GeometryPoint")' " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeometryPoint\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryPointValue' "Edm.GeometryPoint")' " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeometryLineString\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryLineStringValue' "Edm.GeometryLineString")' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeometryPolygon\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryPolygonValue' "Edm.GeometryPolygon")' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeometryCollection\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryCollectionValue' "Edm.GeometryCollection")' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeometryMultiPoint\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryMultiPointValue' "Edm.GeometryMultiPoint")' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeometryMultiLineString\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryMultiLineStringValue' "Edm.GeometryMultiLineString")' " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                "\"GeometryMultiPolygon\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryMultiPolygonValue' "Edm.GeometryMultiPolygon")' " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreatePrimitivePropertiesEntryDescriptor,The length of the statement  "                    "\"__metadata\":{\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\"}'" + " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateComplexPropertiesEntryDescriptor,The length of the statement  "            //this.Assert.AreEqual(complexProperties[1].Name' "NestedComplex"' "Expected a 'NestedComplex' property as third property of the type."); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateComplexPropertiesEntryDescriptor,The length of the statement  "            //this.Assert.AreEqual(complexValue.Properties.First().Name' "Street"' "Expected a 'Street' property as first property."); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateComplexPropertiesEntryDescriptor,The length of the statement  "                "$(Indent)$(Indent)\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\""' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateComplexPropertiesEntryDescriptor,The length of the statement  "                JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 2' "'\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\"")' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateComplexPropertiesEntryDescriptor,The length of the statement  "                JsonUtils.GetMetadataPropertyForComplexType("OtherTestNamespace.StreetType"' 3' "'\"StreetName\":\"One Redmond Way\"'\"Number\":1234")' " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                    JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 4' "'\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\"")' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                    JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 4' "'\"Street\":\"Am Euro Platz 3\"'\"City\":\"Vienna \"")' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                "$(Indent)$(Indent)\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\""' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[")' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[")' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }' " is 186.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }' " is 187.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Geography")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }' " is 190.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                    SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyCollectionValue' "Edm.GeographyCollection") + "'" + " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                    SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyLineStringValue' "Edm.GeographyLineString") + "'" + " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                    SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiLineStringValue' "Edm.GeographyMultiLineString") + "'" + " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                    SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPointValue' "Edm.GeographyMultiPoint") + "'" + " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                    SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPolygonValue' "Edm.GeographyMultiPolygon") + "'" + " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                    SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPointValue' "Edm.GeographyPoint") + "'" + " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                    SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPolygonValue' "Edm.GeographyPolygon") + "'" + " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                    SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyValue' "Edm.GeographyPoint")' indentDepth: 3)' " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The length of the statement  "                JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("My.AddressType")' 2' "'\"results\":[")' " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "            // add entity/complex types to the container namespace of the metadata provider as well as another namespace. Adding types with the same name " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                // Null value for supported primitive types are already covered below' let the property 'Null' be an untyped open property here. " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                var entryWithOpenProperties = new EdmEntityType(namespaceName' "EntryWithOpenProperties"' null' isAbstract: false' isOpen: true); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddKeys(entryWithOpenProperties.AddStructuralProperty("ID"' EdmPrimitiveTypeKind.Int32' isNullable: false)); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("DateTimeOffset"' EdmPrimitiveTypeKind.DateTimeOffset' isNullable: false); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeographyLineString"' EdmPrimitiveTypeKind.GeographyLineString' isNullable: true); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeographyPolygon"' EdmPrimitiveTypeKind.GeographyPolygon' isNullable: true); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeographyCollection"' EdmPrimitiveTypeKind.GeographyCollection' isNullable: true); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeographyMultiPoint"' EdmPrimitiveTypeKind.GeographyMultiPoint' isNullable: true); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeographyMultiLineString"' EdmPrimitiveTypeKind.GeographyMultiLineString' isNullable: true); " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeographyMultiPolygon"' EdmPrimitiveTypeKind.GeographyMultiPolygon' isNullable: true); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeometryLineString"' EdmPrimitiveTypeKind.GeometryLineString' isNullable: true); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeometryPolygon"' EdmPrimitiveTypeKind.GeometryPolygon' isNullable: true); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeometryCollection"' EdmPrimitiveTypeKind.GeometryCollection' isNullable: true); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeometryMultiPoint"' EdmPrimitiveTypeKind.GeometryMultiPoint' isNullable: true); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeometryMultiLineString"' EdmPrimitiveTypeKind.GeometryMultiLineString' isNullable: true); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeometryMultiPolygon"' EdmPrimitiveTypeKind.GeometryMultiPolygon' isNullable: true); " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("NullableDateTimeOffset"' EdmPrimitiveTypeKind.DateTimeOffset' isNullable: true); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("EmptyCollection"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetString(isNullable: true))); " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("PrimitiveCollection"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetInt32(isNullable: false))); " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("IntCollectionNoTypeName"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetInt32(isNullable: false))); " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("StringCollectionNoTypeName"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetString(isNullable: true))); " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("GeographyCollectionNoTypeName"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.Geography' isNullable: true))); " is 191.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTests,The length of the statement  "                entryWithOpenProperties.AddStructuralProperty("ComplexCollection"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(addressType' isNullable: false))); " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryPropertyTestsWithoutMetadata,The length of the statement  "                        this.CreateCollectionPropertiesEntryDescriptor(/*withModel*/ false' TestAtomConstants.ODataNamespace' /*addCollectionWithoutTypeName*/ true) " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryNullPropertyErrorTests,The length of the statement  "            entryWithNullProperties.AddKeys(entryWithNullProperties.AddStructuralProperty("ID"' EdmPrimitiveTypeKind.Int32' isNullable: false)); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryNullPropertyErrorTests,The length of the statement  "            entryWithNullProperties.AddStructuralProperty("Collection"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetInt32(isNullable: false))); " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryNullPropertyErrorTests,The length of the statement  "                    PayloadWriterTestDescriptor<ODataItem> descriptor = new PayloadWriterTestDescriptor<ODataItem>(this.Settings' primitivePropertiesEntry) " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryNullPropertyErrorTests,The length of the statement  "                               // When AllowNullValuesForNonNullablePrimitiveTypes flag is set (happens only for the WCF DS server)' primitive null value validation is disabled. " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryNullPropertyErrorTests,The length of the statement  "                    TestWriterUtils.WriteAndVerifyODataPayload(descriptor' testConfig.CloneAndApplyBehavior(behaviorKind)' this.Assert' this.Logger); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,InferredTypeNamesTests,The length of the statement  "            entityTypeNS.AddStructuralProperty("Scores"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetString(isNullable: true))); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,InferredTypeNamesTests,The length of the statement  "            entityTypeOther.AddKeys(entityTypeOther.AddStructuralProperty("Id"' EdmCoreModel.Instance.GetInt32(isNullable: false))); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,InferredTypeNamesTests,The length of the statement  "                                        "$(JsonDataWrapperIndent)$(Indent)$(Indent)$(Indent)\"type\":\"" + EntityModelUtils.GetCollectionTypeName("Edm.String") + "\""' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EmptyComplexValueTest,The length of the statement  "                    new ODataResource() { Properties = new [] { new ODataProperty { Name = "ComplexCollection"' Value = new ODataCollectionValue { Items = new [] { " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyTypeNameTest,The length of the statement  "                            new { PropertyName = "ComplexProperty"' ExpectedServerTypeName = "TestNS.ComplexType"' ExpectedClientTypeName = (string)null }' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyTypeNameTest,The length of the statement  "                            new { PropertyName = "ComplexProperty/NumberProperty"' ExpectedServerTypeName = "Edm.Int32"' ExpectedClientTypeName = "Edm.Int32" }' " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyTypeNameTest,The length of the statement  "                            new { PropertyName = "ComplexProperty/StringProperty"' ExpectedServerTypeName = (string)null' ExpectedClientTypeName = (string)null }' " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyTypeNameTest,The length of the statement  "                            new { PropertyName = "ComplexProperty/InnerComplex"' ExpectedServerTypeName = "TestNS.ComplexType"' ExpectedClientTypeName = (string)null }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyTypeNameTest,The length of the statement  "                            new { PropertyName = "ComplexProperty/InnerComplex/NumberProperty"' ExpectedServerTypeName = "Edm.Int32"' ExpectedClientTypeName = "Edm.Int32" }' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyTypeNameTest,The length of the statement  "                            new { PropertyName = "ComplexProperty/InnerComplex/StringProperty"' ExpectedServerTypeName = (string)null' ExpectedClientTypeName = (string)null }' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyTypeNameTest,The length of the statement  "                                            (string)extractor(result).Attribute(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.AtomTypeAttributeName)) " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyTypeNameTest,The length of the statement  "                    TestWriterUtils.WriteAndVerifyODataPayload(testDescriptor(behaviorKind' testConfiguration.Version)' testConfiguration' this.Assert' this.Logger); " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The length of the statement  "                }.InComplexValue().InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InComplexValue() " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The length of the statement  "                }.InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName") " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The length of the statement  "                .InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InEntity(1'0)' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The length of the statement  "                }.InCollection(1'1).InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity().InEntryWithExpandedLink(/*singletonRelationship*/ true)' " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The length of the statement  "                }.InCollection(1'2).InProperty("PropertyName").InComplexValue(1' 1).InCollection(1' 0).InProperty("PropertyName").InEntity(1'1).InFeed(2).InEntryWithExpandedLink()' " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The length of the statement  "                }.InEntity(1' 1' ODataVersion.V4).InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true) " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The length of the statement  "                }.InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink() " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertiesOnOpenTypes,The length of the statement  "            var entityTypeWithSpatial = new EdmEntityType("TestModel"' "OpenTypeWithNullSpatial"' null' isAbstract: false' isOpen: true); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertiesOnOpenTypes,The length of the statement  "            var entityType = new EdmEntityType("TestModel"' "OpenTypeWithNullUndeclaredProperty"' null' isAbstract: false' isOpen: true); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertiesOnOpenTypes,The length of the statement  "            EntityInstance entityWithNullUndeclaredProperty = new EntityInstance("TestModel.OpenTypeWithNullUndeclaredProperty"' false); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertiesOnOpenTypes,The length of the statement  "                            ExpectedException2 = ODataExpectedExceptions.ODataException("ODataVersionChecker_GeographyAndGeometryNotSupported"' tc.Version.ToText()) " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,GeolocatedUriTest,The length of the statement  "            var navProp = entityType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "NavProp"' Target = mleType' TargetMultiplicity = EdmMultiplicity.Many }); " is 166.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyNameTest,The length of the statement  "            entityType2.AddStructuralProperty("ComplexCollection"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(complexType1' isNullable: false))); " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyNameTest,The length of the statement  "            // For these payloads we expect that the product will infer and write the type on the complex and collection properties on the entries. " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyNameTest,The length of the statement  "            ComplexMultiValueProperty collection = new ComplexMultiValueProperty("ComplexCollection"' new ComplexMultiValue(null' false' instance)); " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyNameTest,The length of the statement  "            ComplexMultiValueProperty collectionWithType = new ComplexMultiValueProperty("ComplexCollection"' new ComplexMultiValue("Collection(TestNS.ComplexType1)"' false' instanceWithType)); " is 181.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyNameTest,The length of the statement  "            PayloadWriterTestDescriptor<ODataPayloadElement>[] testDescriptors = new PayloadWriterTestDescriptor<ODataPayloadElement>[] " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "            ODataProperty complexProperty = new ODataProperty { Name = "Foo"' Value = new ODataComplexValue { Properties = new[] { new ODataProperty() { Name = "StringProperty"' Value = "xyz" } } } }; " is 188.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "            ODataProperty collectionProperty = new ODataProperty { Name = "Foo"' Value = new ODataCollectionValue { Items = new object[] { 1' 2 } } }; " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "            ODataProperty streamProperty = new ODataProperty { Name = "Foo"' Value = new ODataStreamReferenceValue { ReadLink = new Uri("http://odata.org/readlink") } }; " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "            ODataNestedResourceInfo singletonLink = new ODataNestedResourceInfo { Name = "Foo"' IsCollection = false' Url = new Uri("http://odata.org/link") }; " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "            ODataNestedResourceInfo collectionLink = new ODataNestedResourceInfo { Name = "Foo"' IsCollection = true' Url = new Uri("http://odata.org/links") }; " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "            ExpectedException duplicateExpandedLinkError = ODataExpectedExceptions.ODataException("MultipleLinksForSingleton"' "Foo"); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "            ExpectedException streamPropertyInRequest = ODataExpectedExceptions.ODataException("WriterValidationUtils_StreamPropertyInRequest"' "Foo"); " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "                    PayloadItems = new ODataItem[] { new ODataResource { Properties = new [] { collectionProperty' collectionProperty } } }' " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "                    ExpectedException = (duplicatesAllowed' tc) => duplicatesAllowed ? null : (tc.IsRequest ? duplicateExpandedLinkError : error)' " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "                    ExpectedException = (duplicatesAllowed' tc) => duplicatesAllowed ? null : (tc.IsRequest ? duplicateExpandedLinkError : error)' " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "                    PayloadItems = new ODataItem[] { new ODataResource { Properties = new [] { new ODataProperty { Name = "ComplexProp"' Value = new ODataComplexValue { Properties = new [] { primitiveProperty' primitiveProperty } } } } } }' " is 220.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "                    PayloadItems = new ODataItem[] { new ODataResource { Properties = new [] { new ODataProperty { Name = "ComplexProp"' Value = new ODataComplexValue { Properties = new [] { complexProperty' complexProperty } } } } } }' " is 216.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "                    PayloadItems = new ODataItem[] { new ODataResource { Properties = new [] { new ODataProperty { Name = "ComplexProp"' Value = new ODataComplexValue { Properties = new [] { collectionProperty' collectionProperty } } } } } }' " is 222.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "                    PayloadItems = new ODataItem[] { new ODataResource { Properties = new [] { new ODataProperty { Name = "ComplexProp"' Value = new ODataComplexValue { Properties = new [] { primitiveProperty' complexProperty } } } } } }' " is 218.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "                    PayloadItems = new ODataItem[] { new ODataResource { Properties = new [] { new ODataProperty { Name = "ComplexProp"' Value = new ODataComplexValue { Properties = new [] { primitiveProperty' collectionProperty } } } } } }' " is 221.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "                    PayloadItems = new ODataItem[] { new ODataResource { Properties = new [] { new ODataProperty { Name = "ComplexProp"' Value = new ODataComplexValue { Properties = new [] { complexProperty' collectionProperty } } } } } }' " is 219.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The length of the statement  "                    TestWriterUtils.WriteAndVerifyODataPayload(testDescriptor.DeferredLinksToEntityReferenceLinksInRequest(testConfiguration)' testConfiguration' this.Assert' this.Logger); " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EnsureSynchronousFlushWhenDisposingOnAsync,The length of the statement  "                using (ODataMessageWriterTestWrapper messageWriterWrapper = TestWriterUtils.CreateMessageWriter(message' null' testConfiguration' this.Assert)) " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicateNavigationLinkTest,The length of the statement  "                    DebugDescription = "Expanded singleton' deferred collection (no metadata)' we will fail on this since we don't allow multiple links for singletons"' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicateNavigationLinkTest,The length of the statement  "                    DebugDescription = "Expanded collection' deferred singleton - no failures (binding scenario) (the metadata mismatch is specifically allowed)"' " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicateNavigationLinkTest,The length of the statement  "                    DebugDescription = "Two deferred singletons on a collection property - no failures (binding scenario) (the metadata mismatch is specifically allowed)"' " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicateNavigationLinkTest,The length of the statement  "                    DebugDescription = "Deferred collection and deferred singleton - no failures (binding scenario) (the metadata mismatch is specifically allowed)"' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicateNavigationLinkTest,The length of the statement  "                    DebugDescription = "Expanded collection' deferred collection and deferred singleton - no failures (binding scenario) (the metadata mismatch is specifically allowed)"' " is 166.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PrimitiveTypesMustMatchExactlyOnWriteTest,The length of the statement  "            intEntityWithGeography.Property(new PrimitiveProperty("Int64Property"' "Edm.GeographyPoint"' GeographyFactory.Point(32.0' -100.0).Build()).WithTypeAnnotation(EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyPoint' false))); " is 237.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PrimitiveTypesMustMatchExactlyOnWriteTest,The length of the statement  "                        ExpectedException2 = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"'"False"' "Edm.Int64"' "False") " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PrimitiveTypesMustMatchExactlyOnWriteTest,The length of the statement  "                        ExpectedException2 = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"'"False"' "Edm.String"' "False") " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PrimitiveTypesMustMatchExactlyOnWriteTest,The length of the statement  "                        ExpectedException2 = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.String"'"True"' "Edm.GeographyPoint"' "True") " is 159.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PrimitiveTypesMustMatchExactlyOnWriteTest,The length of the statement  "                        ExpectedException2 = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.GeographyPoint"'"True"' "Edm.Int64"' "False") " is 159.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "                    Code = string.Empty' Message = string.Empty' InnerError = (InnerError)null' ExpectedException = (ExpectedException) null " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "                    Code = string.Empty' Message = "message text"' InnerError = (InnerError)null' ExpectedException = (ExpectedException) null " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "                    Error = new ODataAnnotatedError { Error = new ODataError() { InnerError = new ODataInnerError { Message = "some inner error" } } }' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "                    Code = string.Empty' Message = string.Empty' InnerError = (InnerError)null' ExpectedException = (ExpectedException) null " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "                    Error = new ODataAnnotatedError { Error = new ODataError() { InnerError = new ODataInnerError { Message = "some inner error" } }' IncludeDebugInformation = true }' " is 163.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "                    Code = string.Empty' Message = string.Empty' InnerError = new InnerError { Message = "some inner error" }' ExpectedException = (ExpectedException) null " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "                    Error = new ODataAnnotatedError { Error = new ODataError() { ErrorCode = "code42"' Message = "message text"' InnerError = new ODataInnerError { Message = "some inner error" } } }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "                    Error = new ODataAnnotatedError { Error = new ODataError() { ErrorCode = "code42"' Message = "message text"' InnerError = new ODataInnerError { Message = "some inner error" } }' IncludeDebugInformation = true }' " is 211.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "                    Code = "code42"' Message = "message text"' InnerError = new InnerError { Message = "some inner error" }' ExpectedException = (ExpectedException) null " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "                    Error = new ODataAnnotatedError { Error = new ODataError() { ErrorCode = "code42"' Message = "message text"' InnerError = new ODataInnerError(new Exception("some inner error")) }' IncludeDebugInformation = true }' " is 213.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "                    Code = "code42"' Message = "message text"' InnerError = new InnerError { Message = "some inner error"' TypeName = "System.Exception" }' ExpectedException = (ExpectedException) null " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_RecursionDepthLimitReached"' Convert.ToString(this.customSetRecursionDepthLimit)) " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The length of the statement  "            ExpectedException errorNotAllowedException = ODataExpectedExceptions.ODataException("ODataMessageWriter_ErrorPayloadInRequest"); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExceptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExceptionTests.cs,DisposeAfterExceptionTest,The length of the statement  "                                this.Assert.AreEqual("A writer or stream has been disposed with data still in the buffer. You must call Flush or FlushAsync before calling Dispose when some data has already been written."' oe.Message' "Did not find expected error message"); " is 241.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExceptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExceptionTests.cs,FatalExceptionTest,The length of the statement  "                        this.Assert.IsNotNull(notSupported' "Expected NotSupportedException but " + baseEx.GetType().FullName + " was reported."); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExceptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExceptionTests.cs,WriteAfterExceptionTest,The length of the statement  "                        Exception ex = TestExceptionUtils.RunCatching(() => TestWriterUtils.WritePayload(messageWriter' writer' false' contentPayload)); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExceptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExceptionTests.cs,WriteAfterExceptionTest,The length of the statement  "                        this.Assert.IsTrue(ex is ODataException' "Expected an ODataException instance but got a " + ex.GetType().FullName + "."); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExceptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExceptionTests.cs,WriteAfterExceptionTest,The length of the statement  "                        this.Assert.IsTrue(ex.Message.Contains("Cannot transition from state 'Error' to state ")' "Did not find expected start of error message."); " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExceptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExceptionTests.cs,WriteAfterExceptionTest,The length of the statement  "                        this.Assert.IsTrue(ex.Message.Contains("Nothing can be written once the writer entered the error state.")' "Did not find expected end of error message in '" + ex.Message + "'."); " is 178.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExceptionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExceptionTests.cs,VerifyWriterAlreadyDisposed,The length of the statement  "            TestExceptionUtils.ExpectedException(this.Assert' action' new ExpectedException(typeof(ObjectDisposedException))' this.ExceptionVerifier); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ODataNestedResourceInfo cityHallLinkIsCollectionNull = ObjectModelUtils.CreateDefaultCollectionLink("CityHall"' /*isCollection*/ null); " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ODataNestedResourceInfo cityHallLinkIsCollectionTrue = ObjectModelUtils.CreateDefaultCollectionLink("CityHall"' /*isCollection*/ true); " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ODataNestedResourceInfo cityHallLinkIsCollectionFalse = ObjectModelUtils.CreateDefaultCollectionLink("CityHall"' /*isCollection*/ false); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ODataNestedResourceInfo policeStationLinkIsCollectionNull = ObjectModelUtils.CreateDefaultCollectionLink("PoliceStation"' /*isCollection*/ null); " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ODataNestedResourceInfo policeStationLinkIsCollectionTrue = ObjectModelUtils.CreateDefaultCollectionLink("PoliceStation"' /*isCollection*/ true); " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ODataNestedResourceInfo policeStationLinkIsCollectionFalse = ObjectModelUtils.CreateDefaultCollectionLink("PoliceStation"' /*isCollection*/ false); " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ExpectedException expandedEntryLinkWithFeedContentError = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionFalseWithResourceSetContent"' "http://odata.org/link"); " is 199.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ExpectedException expandedFeedLinkWithEntryContentError = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionTrueWithResourceContent"' "http://odata.org/link"); " is 195.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ExpectedException expandedFeedLinkWithEntryMetadataError = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionTrueWithResourceMetadata"' "http://odata.org/link"); " is 197.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ExpectedException expandedEntryLinkWithFeedMetadataErrorResponse = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionFalseWithResourceSetMetadata"' "http://odata.org/link"); " is 209.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ExpectedException expandedFeedLinkPayloadWithEntryMetadataErrorRequest = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkWithResourceSetPayloadAndResourceMetadata"' "http://odata.org/link"); " is 216.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ExpectedException expandedFeedLinkPayloadWithEntryMetadataErrorResponse = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionTrueWithResourceMetadata"' "http://odata.org/link"); " is 212.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ExpectedException expandedEntryLinkPayloadWithFeedMetadataErrorResponse = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionFalseWithResourceSetMetadata"' "http://odata.org/link"); " is 216.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ExpectedException expandedEntryLinkPayloadWithFeedMetadataError = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkWithResourcePayloadAndResourceSetMetadata"' "http://odata.org/link"); " is 209.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ExpectedException multipleItemsInExpandedLinkError = ODataExpectedExceptions.ODataException("ODataWriterCore_MultipleItemsInNestedResourceInfoWithContent"' "http://odata.org/link"); " is 181.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "            ExpectedException entityReferenceLinkInResponseError = ODataExpectedExceptions.ODataException("ODataWriterCore_EntityReferenceLinkInResponse"); " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                            ? ODataExpectedExceptions.ODataException("WriterValidationUtils_NestedResourceTypeNotCompatibleWithParentPropertyType"' "TestModel.CityType"' "TestModel.OfficeType") " is 165.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                            : ODataExpectedExceptions.ODataException("WriterValidationUtils_NestedResourceInfoMustSpecifyIsCollection"' "PoliceStation")' " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                        // Expanded link of singleton type without IsCollection value and an entry of a matching entity type; no error expected. " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                        ExpectedError = tc => tc.Format == ODataFormat.Json && !tc.IsRequest ? null : ODataExpectedExceptions.ODataException("WriterValidationUtils_NestedResourceInfoMustSpecifyIsCollection"' "PoliceStation")' " is 201.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                        ExpectedError = tc => tc.Format == ODataFormat.Json && !tc.IsRequest ? null : ODataExpectedExceptions.ODataException("WriterValidationUtils_NestedResourceInfoMustSpecifyIsCollection"' "PoliceStation")' " is 201.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                            ? ODataExpectedExceptions.ODataException("WriterValidationUtils_NestedResourceTypeNotCompatibleWithParentPropertyType"' "TestModel.CityType"' "TestModel.OfficeType") " is 165.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                            : ODataExpectedExceptions.ODataException("WriterValidationUtils_NestedResourceInfoMustSpecifyIsCollection"' "CityHall")' " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                        // Expanded link of collection type without IsCollection value and an entry of a matching entity type; no error expected. " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                            : ODataExpectedExceptions.ODataException("WriterValidationUtils_NestedResourceInfoMustSpecifyIsCollection"' "CityHall")' " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                            : ODataExpectedExceptions.ODataException("WriterValidationUtils_NestedResourceInfoMustSpecifyIsCollection"' "CityHall")' " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                        ExpectedError = tc => tc.IsRequest ? expandedEntryLinkPayloadWithFeedMetadataError : expandedEntryLinkPayloadWithFeedMetadataErrorResponse' " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                            ? ODataExpectedExceptions.ODataException("WriterValidationUtils_NestedResourceInfoMustSpecifyIsCollection"' "PoliceStation") " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                        ExpectedError = tc => tc.IsRequest ? expandedFeedLinkPayloadWithEntryMetadataErrorRequest : expandedFeedLinkPayloadWithEntryMetadataErrorResponse' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                        ExpectedError = tc => tc.IsRequest ? expandedEntryLinkWithFeedContentError : expandedEntryLinkWithFeedMetadataErrorResponse' " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                        Items = new ODataItem[] { cityEntry' policeStationLinkIsCollectionFalse' defaultEntityReferenceLink' defaultEntityReferenceLink }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                        Items = new ODataItem[] { cityEntry' policeStationLinkIsCollectionTrue' defaultEntityReferenceLink' defaultEntityReferenceLink }' " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                        // Single ERL content' IsCollection == false' collection nav prop; should not fail (metadata mismatch explicitly allowed). " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                        Items = new ODataItem[] { cityEntry' cityHallLinkIsCollectionFalse' defaultEntityReferenceLink' defaultEntityReferenceLink }' " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                        Items = new ODataItem[] { cityEntry' cityHallLinkIsCollectionTrue' defaultEntityReferenceLink' defaultEntityReferenceLink }' " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithMultiplicityTests,The length of the statement  "                    using (var messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' null' testCase.Model)) " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithNullNavigationTests,The length of the statement  "                        return JsonUtils.UnwrapTopLevelValue(testConfiguration' result).Object().Properties.First(p => p.Name == ObjectModelUtils.DefaultLinkName).Value; " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterExpandedLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterExpandedLinkTests.cs,ExpandedLinkWithNullNavigationTests,The length of the statement  "            Func<ExpectedException' PayloadWriterTestDescriptor.WriterTestExpectedResultCallback> errorCallback = (expectedException) => " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,FeedTests,The length of the statement  "                    if (testDescriptor.IsGeneratedPayload && (testConfiguration.Format == ODataFormat.Json || testDescriptor.Model != null)) " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,FeedUserExceptionTests,The length of the statement  "                    if (testDescriptor.IsGeneratedPayload && (testConfiguration.Format == ODataFormat.Json || testDescriptor.Model != null)) " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,FeedUserExceptionTests,The length of the statement  "                        var configuredTestDescriptor = new PayloadWriterTestDescriptor<ODataItem>(this.Settings' testDescriptor.PayloadItems' testDescriptor.ExpectedResultCallback) " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,FeedNextLinkTests,The length of the statement  "                    if (testDescriptor.IsGeneratedPayload && (testConfiguration.Format == ODataFormat.Json || testDescriptor.Model != null)) " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,SetNextLinkAfterResourceSetStartTests,The length of the statement  "                var newFeed = ObjectModelUtils.CreateDefaultFeed().WithAnnotation(new WriteFeedCallbacksAnnotation { AfterWriteStartCallback = (f) => f.NextPageLink = nextLink }); " is 163.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,SetNextLinkAfterResourceSetStartTests,The length of the statement  "                    if (testDescriptor.IsGeneratedPayload && (testConfiguration.Format == ODataFormat.Json || testDescriptor.Model != null)) " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,FeedInvalidContentTests,The length of the statement  "                        ExpectedError = "Cannot transition from state 'ResourceSet' to state 'ResourceSet'. The only valid action in state 'ResourceSet' is to write a resource." " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,FeedInvalidContentTests,The length of the statement  "                        using (var messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' new WriterTestConfiguration(format' settings' false' synchronous)' this.Assert)) " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,ODataFeedWriterErrorTests,The length of the statement  "            List<PayloadWriterTestDescriptor<ODataPayloadElement>> testDescriptors = new List<PayloadWriterTestDescriptor<ODataPayloadElement>>() " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateDefaultFeedWithAtomMetadataDescriptor,The length of the statement  "                                    "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"http://odata.org/test/$metadata#CustomersSet\"'\"value\":["' " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateFeedQueryCountDescriptors,The length of the statement  "            ODataResource entry = ObjectModelUtils.CreateDefaultEntryWithAtomMetadata("DefaultEntitySet"' "DefaultEntityType"' model); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateFeedQueryCountDescriptors,The length of the statement  "                                Json = "$(Indent)$(Indent)\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataCountAnnotationName + "\":\"" + count + "\""' " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateDefaultFeedMetadataDescriptor,The length of the statement  "                                    "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"http://odata.org/test/$metadata#CustomersSet\"'\"value\":["' " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateFeedValidatorDescriptors,The length of the statement  "                        ExpectedException = ODataExpectedExceptions.ODataException("ResourceSetWithoutExpectedTypeValidator_IncompatibleTypes"' "TestModel.CityType"' "TestModel.Person")' " is 162.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,BaseUriValidationTest,The length of the statement  "            string expectedError = "The base URI '" + relativeUriString + "' specified in ODataMessageWriterSettings.BaseUri is invalid; it must either be null or an absolute URI."; " is 169.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,BaseUriValidationTest,The length of the statement  "                        new WriterTestConfiguration(testConfiguration.Format' settings' testConfiguration.IsRequest' testConfiguration.Synchronous); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntryValidationTest,The length of the statement  "                        new WriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = testCase.ExpectedException }); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,PropertyValidationTest,The length of the statement  "                        testConfiguration => new WriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = testCase.ExpectedException }); " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NavigationLinkValidationTest,The length of the statement  "                    ExpectedException = link => ODataExpectedExceptions.ODataException("WriterValidationUtils_NavigationLinkMustSpecifyUrl"' link.Name)' " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NavigationLinkValidationTest,The length of the statement  "                    SkipTestConfiguration = (testConfiguration) => testConfiguration.Format == ODataFormat.Json || testConfiguration.IsRequest " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NavigationLinkValidationTest,The length of the statement  "                    testConfiguration => new WriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = testCase.ExpectedException(link) }) " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NavigationLinkValidationTest,The length of the statement  "                    TestWriterUtils.WriteAndVerifyODataPayload(testDescriptor.DeferredLinksToEntityReferenceLinksInRequest(testConfiguration)' testConfiguration' this.Assert' this.Logger); " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NamedStreamValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_EnumerableContainsANullItem"' "ODataResource.Properties")' " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NamedStreamValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_StreamReferenceValueMustHaveEditLinkOrReadLink")' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NamedStreamValidationTest,The length of the statement  "                    StreamProperty = new ODataProperty() { Name = "Stream1"' Value = new ODataStreamReferenceValue() { ContentType = string.Empty } }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NamedStreamValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_StreamReferenceValueEmptyContentType")' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NamedStreamValidationTest,The length of the statement  "                    StreamProperty = new ODataProperty() { Name = "Stream1"' Value = new ODataStreamReferenceValue() { ReadLink = new Uri("someUri"' UriKind.RelativeOrAbsolute)' ETag = "\"etagValue\"" }}' " is 184.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NamedStreamValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_StreamReferenceValueMustHaveEditLinkToHaveETag")' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NamedStreamValidationTest,The length of the statement  "                    StreamProperty = new ODataProperty() { Name = "Stream1"' Value = new ODataStreamReferenceValue() { ReadLink = new Uri("someUri"' UriKind.RelativeOrAbsolute) }}' " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NamedStreamValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataWriter_RelativeUriUsedWithoutBaseUriSpecified"' "someUri")' " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NamedStreamValidationTest,The length of the statement  "                    StreamProperty = new ODataProperty() { Name = "Stream1"' Value = new ODataStreamReferenceValue() { EditLink = new Uri("someUri"' UriKind.RelativeOrAbsolute) }}' " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NamedStreamValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataWriter_RelativeUriUsedWithoutBaseUriSpecified"' "someUri")' " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,NamedStreamValidationTest,The length of the statement  "                    testConfiguration => new WriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = testCase.ExpectedException })); " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,ETagValidationTest,The length of the statement  "                var stream1 = new ODataStreamReferenceValue() { ReadLink = new Uri("http://foo/"' UriKind.RelativeOrAbsolute)' EditLink = new Uri("http://foo/"' UriKind.RelativeOrAbsolute)' ContentType = "customType/customSubtype"' ETag = etagValue }; " is 235.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,ETagValidationTest,The length of the statement  "                    testConfiguration => (WriterTestExpectedResults)new JsonWriterTestExpectedResults(this.Settings.ExpectedResultSettings); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,ETagValidationTest,The length of the statement  "                        new ODataResource() { ETag = etagValue' Properties = ObjectModelUtils.CreateDefaultPrimitiveProperties()' SerializationInfo = SerializationInfo }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,ETagValidationTest,The length of the statement  "                        new ODataResource() { MediaResource = stream1' Properties = ObjectModelUtils.CreateDefaultPrimitiveProperties()' SerializationInfo = SerializationInfo }' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,ETagValidationTest,The length of the statement  "                        new ODataResource() { Properties = new ODataProperty[] { new ODataProperty() { Name = "Stream1"' Value = stream1 }}' SerializationInfo = SerializationInfo}' " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,ComplexValueValidationTest,The length of the statement  "                    new ODataResource() { Properties = new ODataProperty[] { new ODataProperty() { Name = "ComplexProperty"' Value = testCase.ComplexValue } } }' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,ComplexValueValidationTest,The length of the statement  "                    testConfiguration => new WriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedODataExceptionMessage = testCase.ExpectedExceptionMessage }); " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,CollectionValidationTest,The length of the statement  "                    new ODataResource() { Properties = new ODataProperty[] { new ODataProperty() { Name = "CollectionProperty"' Value = testCase.Collection } } }' " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,CollectionValidationTest,The length of the statement  "                    testConfiguration => new WriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = testCase.ExpectedException }); " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,DefaultStreamValidationTest,The length of the statement  "                    InvalidateDefaultStream = new Action<ODataStreamReferenceValue>(mediaResource => mediaResource.ContentType = string.Empty)' " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,DefaultStreamValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_StreamReferenceValueEmptyContentType")' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,DefaultStreamValidationTest,The length of the statement  "                    InvalidateDefaultStream = new Action<ODataStreamReferenceValue>(mediaResource => { mediaResource.ReadLink = null; mediaResource.ContentType = "mime/type"; })' " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,DefaultStreamValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_DefaultStreamWithContentTypeWithoutReadLink")' " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,DefaultStreamValidationTest,The length of the statement  "                    InvalidateDefaultStream = new Action<ODataStreamReferenceValue>(mediaResource => { mediaResource.ReadLink = new Uri("http://odata.org"); mediaResource.ContentType = null; })' " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,DefaultStreamValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_DefaultStreamWithReadLinkWithoutContentType")' " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,DefaultStreamValidationTest,The length of the statement  "                    InvalidateDefaultStream = new Action<ODataStreamReferenceValue>(mediaResource => { mediaResource.ETag = "someetag"; mediaResource.EditLink = null; })' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,DefaultStreamValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_StreamReferenceValueMustHaveEditLinkToHaveETag")' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,DefaultStreamValidationTest,The length of the statement  "                    testConfiguration => new WriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = testCase.ExpectedException }); " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinkValidationTest,The length of the statement  "                    InvalidateEntityReferenceLink = new Action<ODataEntityReferenceLink>(entityReferenceLink => entityReferenceLink.Url = null)' " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinkValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_EntityReferenceLinkUrlMustNotBeNull")' " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinkValidationTest,The length of the statement  "                        testConfiguration => new WriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = testCase.ExpectedException })' " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinkValidationTest,The length of the statement  "                                ODataExpectedExceptions.ODataException("ODataMessageWriter_EntityReferenceLinksInRequestNotAllowed") : testCase.ExpectedException " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinkValidationTest,The length of the statement  "                        new ODataItem[] { ObjectModelUtils.CreateDefaultEntry()' ObjectModelUtils.CreateDefaultSingletonLink()' entityReferenceLink' null' null }' " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinkValidationTest,The length of the statement  "                            ExpectedException2 = testConfiguration.IsRequest ? testCase.ExpectedException : ODataExpectedExceptions.ODataException("ODataWriterCore_EntityReferenceLinkInResponse") " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinkValidationTest,The length of the statement  "                    PayloadWriterTestDescriptor<ODataEntityReferenceLink> entityReferenceLinkTestDescriptor = testDescriptor as PayloadWriterTestDescriptor<ODataEntityReferenceLink>; " is 162.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinkValidationTest,The length of the statement  "                    PayloadWriterTestDescriptor<ODataEntityReferenceLinks> entityReferenceLinksTestDescriptor = testDescriptor as PayloadWriterTestDescriptor<ODataEntityReferenceLinks>; " is 165.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinkValidationTest,The length of the statement  "                    TestWriterUtils.WriteAndVerifyODataPayload((PayloadWriterTestDescriptor<ODataItem>)testDescriptor' testConfiguration' this.Assert' this.Logger); " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinksValidationTest,The length of the statement  "                    InvalidateEntityReferenceLinks = new Action<ODataEntityReferenceLinks>(entityReferenceLinks => entityReferenceLinks.Links = new ODataEntityReferenceLink[] { null })' " is 165.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinksValidationTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_EntityReferenceLinksLinkMustNotBeNull")' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterInputValidationTests.cs,EntityReferenceLinksValidationTest,The length of the statement  "                                    ODataExpectedExceptions.ODataException("ODataMessageWriter_EntityReferenceLinksInRequestNotAllowed") : testCase.ExpectedException " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinkTest,The length of the statement  "            ODataEntityReferenceLink entityReferenceLink1 = new ODataEntityReferenceLink { Url = new Uri("http://odata.org/linkresult") }; " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinkTest,The length of the statement  "            ODataEntityReferenceLink entityReferenceLink2 = new ODataEntityReferenceLink { Url = new Uri("relative"' UriKind.Relative) }; " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinkTest,The length of the statement  "            ODataEntityReferenceLink entityReferenceLink3 = new ODataEntityReferenceLink { Url = new Uri("http://odata.org/linkresult") }; " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinkTest,The length of the statement  "            entityReferenceLink3.InstanceAnnotations.Add(new ODataInstanceAnnotation("TestModel.unknown"' new ODataPrimitiveValue(123))); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinkTest,The length of the statement  "            ODataEntityReferenceLink entityReferenceLink4 = new ODataEntityReferenceLink { Url = new Uri("relative"' UriKind.Relative) }; " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinkTest,The length of the statement  "            entityReferenceLink4.InstanceAnnotations.Add(new ODataInstanceAnnotation("TestModel.unknown"' new ODataPrimitiveValue(123))); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinkTest,The length of the statement  "                    // The error cases when a model isn't provided or the nav prop is null are tested in JsonLightEntityReferenceLinkWriterTests " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinkErrorTest,The length of the statement  "            PayloadWriterTestDescriptor<ODataEntityReferenceLink>[] testCases = new PayloadWriterTestDescriptor<ODataEntityReferenceLink>[] " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksTest,The length of the statement  "            ODataEntityReferenceLink entityReferenceLink2 = new ODataEntityReferenceLink { Url = new Uri(resultUri2String' UriKind.Relative) }; " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksTest,The length of the statement  "            entityReferenceLink3.InstanceAnnotations.Add(new ODataInstanceAnnotation("TestModel.unknown"' new ODataPrimitiveValue(123))); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksTest,The length of the statement  "                        (inputReferenceLink' index) => new ODataEntityReferenceLinks { Count = inputCount' Links = inputReferenceLink' NextPageLink = inputNextLink' InstanceAnnotations = inputAnnotations[index == 1 ? 1 : 0] }))); " is 205.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksTest,The length of the statement  "                    new PayloadWriterTestDescriptor<ODataEntityReferenceLinks>(this.Settings' testCase' this.CreateExpectedCallback(testCase' /*forceNextLinkAndCountAtEnd*/ false))); " is 162.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksTest,The length of the statement  "                    // The error cases when a model isn't provided or the nav prop is null are tested in JsonLightEntityReferenceLinkWriterTests " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksErrorTest,The length of the statement  "            PayloadWriterTestDescriptor<ODataEntityReferenceLinks>[] testCases = new PayloadWriterTestDescriptor<ODataEntityReferenceLinks>[] " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksErrorTest,The length of the statement  "                            ExpectedException2 = testConfiguration.IsRequest ? ODataExpectedExceptions.ODataException("ODataMessageWriter_EntityReferenceLinksInRequestNotAllowed") : null " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksPropertyAccessOrderTest,The length of the statement  "            //// NOTE: this tests is important as Astoria relies on this behavior. Astoria only provides a next link after all the entity reference " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksPropertyAccessOrderTest,The length of the statement  "            ODataEntityReferenceLink entityReferenceLink1 = new ODataEntityReferenceLink { Url = new Uri("http://odata.org/linkresult1") }; " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksPropertyAccessOrderTest,The length of the statement  "            ODataEntityReferenceLink entityReferenceLink2 = new ODataEntityReferenceLink { Url = new Uri("http://odata.org/linkresult2") }; " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksPropertyAccessOrderTest,The length of the statement  "            ODataEntityReferenceLink entityReferenceLink3 = new ODataEntityReferenceLink { Url = new Uri("http://odata.org/linkresult3") }; " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksPropertyAccessOrderTest,The length of the statement  "            PayloadWriterTestDescriptor.WriterTestExpectedResultCallback expectedResultCallback = this.CreateExpectedCallback(expectedResult' /*forceNextLinkAndCountAtEnd*/ true); " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksPropertyAccessOrderTest,The length of the statement  "                    // we will invalidate the inline count and set the correct next link to guarantee the correct order of property accesses " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksPropertyAccessOrderTest,The length of the statement  "                    // NOTE: we need to create this new for each iteration since the checking enumerable can (intentionally) only be enumerated once. " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksPropertyAccessOrderTest,The length of the statement  "                    // The error cases when a model isn't provided or the nav prop is null are tested in JsonLightEntityReferenceLinkWriterTests " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "            string nextPageLinkString = entityReferenceLinks.NextPageLink == null ? null : entityReferenceLinks.NextPageLink.OriginalString; " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                    expectedException = ODataExpectedExceptions.ODataException("ODataMessageWriter_EntityReferenceLinksInRequestNotAllowed"); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                    ODataEntityReferenceLink relativeLink = entityReferenceLinks.Links == null ? null : entityReferenceLinks.Links.FirstOrDefault(l => !l.Url.IsAbsoluteUri); " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                    bool nextPageLinkRelative = entityReferenceLinks.NextPageLink == null ? false : !entityReferenceLinks.NextPageLink.IsAbsoluteUri; " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                            string relativeUriString = relativeLink == null ? entityReferenceLinks.NextPageLink.OriginalString : relativeLink.Url.OriginalString; " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                            expectedException = ODataExpectedExceptions.ODataException("ODataWriter_RelativeUriUsedWithoutBaseUriSpecified"' relativeUriString); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                string[] resultUriStrings = entityReferenceLinks.Links == null ? null : entityReferenceLinks.Links.Select(l => GetResultUri(l.Url' testConfiguration)).ToArray(); " is 161.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                var jsonLightFirstLine = "$(Indent)\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"http://odata.org/test/$metadata#Collection($ref)\"'"; " is 202.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                if ((resultUriStrings == null || resultUriStrings.Length == 0) && !count.HasValue && nextPageLinkString == null && testConfiguration.Format != ODataFormat.Json) " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                        atomStrings.Add(@"<m:count xmlns:m=""" + TestAtomConstants.ODataMetadataNamespace + @""">" + count.Value + @"</m:count>"); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                            jsonLightFirstLine += "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataCountAnnotationName + "\":\"" + count.Value + "\"'"; " is 159.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                        // In JSON lite' the next link comes at the beginning of the payload if available' but in JSON verbose and ATOM it comes at the end. " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                        jsonLightFirstLine += "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataNextLinkAnnotationName + "\":\"" + nextPageLinkString + "\"'"; " is 169.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                        jsonLightLastLine += "'\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataCountAnnotationName + "\":" + count.Value; " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                            jsonLightLastLine += "'\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataNextLinkAnnotationName + "\":\"" + nextPageLinkString + "\""; " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                if (!uri.IsAbsoluteUri && testConfiguration.MessageWriterSettings.BaseUri == null && testConfiguration.Format != ODataFormat.Json) " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                        ExpectedException2 = ODataExpectedExceptions.ODataException("ODataWriter_RelativeUriUsedWithoutBaseUriSpecified"' uri.OriginalString) " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + expectedContextUrl + "\"'" + " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidEntryTypeTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKind"' "TestNS.ComplexType"' "Entity"' "Complex")' " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidEntryTypeTest,The length of the statement  "                    (testConfiguration) => new WriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = tc.ExpectedException }); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidPropertyValueTypeTest,The length of the statement  "                    PropertyCreate = (Func<ODataProperty>)(() => new ODataProperty() { Name = "Address"' Value = new ODataComplexValue() { TypeName = string.Empty } })' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidPropertyValueTypeTest,The length of the statement  "                    PropertyCreate = (Func<ODataProperty>)(() => new ODataProperty() { Name = "Address"' Value = new ODataCollectionValue() { TypeName = "TestNS.AddressComplexType" } })' " is 166.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidPropertyValueTypeTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKind"' "TestNS.AddressComplexType"' "Collection"' "Complex")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidPropertyValueTypeTest,The length of the statement  "                    PropertyCreate = (Func<ODataProperty>)(() => new ODataProperty() { Name = "Address"' Value = new ODataComplexValue() { TypeName = EntityModelUtils.GetCollectionTypeName("String") } })' " is 184.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidPropertyValueTypeTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKind"' EntityModelUtils.GetCollectionTypeName("Edm.String")' "Complex"' "Collection")' " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidPropertyValueTypeTest,The length of the statement  "                    PropertyCreate = (Func<ODataProperty>)(() => new ODataProperty() { Name = "Address"' Value = new ODataComplexValue() { Properties = null } })' " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidCollectionItemTypeTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidCollectionItemTypeTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidCollectionItemTypeTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OtherComplexType")' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.AddressComplexType"))' " is 255.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidCollectionItemTypeTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))' " is 202.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidCollectionItemTypeTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidCollectionItemTypeTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OtherComplexType"' "OtherTestNamespace.AddressComplexType")' " is 206.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidCollectionItemTypeTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_UnsupportedPrimitiveType"' "Microsoft.OData.ODataMessageWriterSettings")' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InvalidCollectionItemTypeTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_UnsupportedPrimitiveType"' "Microsoft.OData.ODataMessageWriterSettings")' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,NullCollectionTest,The length of the statement  "            ExpectedException expectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_CollectionPropertiesMustNotHaveNullValue"' "Addresses"); " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,NullCollectionTest,The length of the statement  "                    (testConfiguration) => new WriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = tc.ExpectedException }); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,DefaultStreamMetadataTest,The length of the statement  "                .Concat(NonMLEDefaultStreamValues.Select(mr => this.CreateDefaultStreamMetadataTestDescriptor(model' cityWithMapType.FullName()' mr' " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,DefaultStreamMetadataTest,The length of the statement  "                    ODataExpectedExceptions.ODataException("ValidationUtils_ResourceWithoutMediaResourceAndMLEType"' "TestModel.CityWithMapType")))) " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,DefaultStreamMetadataTest,The length of the statement  "                .Concat(MLEDefaultStreamValues.Select(mr => this.CreateDefaultStreamMetadataTestDescriptor(model' cityType.FullName()' mr' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,DefaultStreamMetadataTest,The length of the statement  "                    ODataExpectedExceptions.ODataException("ValidationUtils_ResourceWithMediaResourceAndNonMLEType"' "TestModel.CityType")))) " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,DefaultStreamMetadataTest,The length of the statement  "                .Concat(MLEDefaultStreamValues.Select(mr => this.CreateDefaultStreamMetadataTestDescriptor(model' cityWithMapType.FullName()' mr))); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,DefaultStreamMetadataWcfDSServerTest,The length of the statement  "                .Concat(NonMLEDefaultStreamValues.Select(mr => this.CreateDefaultStreamMetadataTestDescriptor(model' cityWithMapType.FullName()' mr' " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,DefaultStreamMetadataWcfDSServerTest,The length of the statement  "                    ODataExpectedExceptions.ODataException("ValidationUtils_ResourceWithoutMediaResourceAndMLEType"' "TestModel.CityWithMapType")))) " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,DefaultStreamMetadataWcfDSServerTest,The length of the statement  "                .Concat(MLEDefaultStreamValues.Select(mr => this.CreateDefaultStreamMetadataTestDescriptor(model' cityType.FullName()' mr' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,DefaultStreamMetadataWcfDSServerTest,The length of the statement  "                    ODataExpectedExceptions.ODataException("ValidationUtils_ResourceWithMediaResourceAndNonMLEType"' "TestModel.CityType")))) " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,DefaultStreamMetadataWcfDSServerTest,The length of the statement  "                .Concat(MLEDefaultStreamValues.Select(mr => this.CreateDefaultStreamMetadataTestDescriptor(model' cityWithMapType.FullName()' mr))); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,CreateDefaultStreamMetadataTestDescriptor,The length of the statement  "                        return new JsonWriterTestExpectedResults(this.Settings.ExpectedResultSettings) { FragmentExtractor = (result) => new JsonObject()' Json = "{}" }; " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                   type.AddStructuralProperty("Addresses"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(addressComplexType' false))); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)' " is 182.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")' " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")' " is 163.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")' " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")' " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))' " is 202.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))' " is 273.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))' " is 243.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")' " is 194.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataDocumentTests.cs,MetadataDocumentWriterTest,The length of the statement  "            IEnumerable<MetadataWriterTestDescriptor> metadataDescriptors = MetadataWriterTestDescriptorGenerator.CreateMetadataDocumentWriterDescriptors(this.Settings); " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataDocumentTests.cs,MetadataDocumentWriterErrorTest,The length of the statement  "                        ExpectedODataExceptionMessage = "A metadata document cannot be written to request payloads. Metadata documents are only supported in responses."' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataDocumentTests.cs,CreateTestModel,The length of the statement  "<Schema Namespace='TestModel' p1:UseStrongSpatialTypes='false' xmlns:p1='http://schemas.microsoft.com/ado/2009/02/edm/annotation' xmlns='" + ns + @"'> " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { ReadLink = relativeReadLinkUri }}' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { ReadLink = relativeReadLinkUri' ContentType = contentType}}' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { ReadLink = absoluteReadLinkUri }}' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { ReadLink = absoluteReadLinkUri' ContentType = contentType}}' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { EditLink = relativeEditLinkUri }}' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { EditLink = relativeEditLinkUri' ContentType = contentType }}' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { EditLink = relativeEditLinkUri' ContentType = contentType' ETag = etag }}' " is 161.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { EditLink = absoluteEditLinkUri }}' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { EditLink = absoluteEditLinkUri' ContentType = contentType }}' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { EditLink = absoluteEditLinkUri' ContentType = contentType' ETag = etag }}' " is 161.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { ReadLink = relativeReadLinkUri' EditLink = relativeEditLinkUri }}' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { ReadLink = relativeReadLinkUri' EditLink = relativeEditLinkUri' ContentType = contentType}}' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { ReadLink = relativeReadLinkUri' EditLink = relativeEditLinkUri' ContentType = contentType' ETag = etag }}' " is 193.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { ReadLink = absoluteReadLinkUri' EditLink = relativeEditLinkUri }}' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { ReadLink = absoluteReadLinkUri' EditLink = relativeEditLinkUri' ContentType = contentType}}' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                new ODataProperty { Name = streamPropertyName' Value = new ODataStreamReferenceValue { ReadLink = absoluteReadLinkUri' EditLink = relativeEditLinkUri' ContentType = contentType' ETag = etag }}' " is 193.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                                        "href=\"" + (((ODataStreamReferenceValue)property.Value).ReadLink.IsAbsoluteUri ? absoluteReadLinkUri.OriginalString : relativeReadLinkUri.OriginalString) + "\" " + " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                                        "href=\"" + (((ODataStreamReferenceValue)property.Value).EditLink.IsAbsoluteUri ? absoluteEditLinkUri.OriginalString : relativeEditLinkUri.OriginalString) + "\" " + " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                                        (streamReferenceValue.ETag == null ? string.Empty : "m:etag=\"" + streamReferenceValue.ETag.Replace("\""' "&quot;") + "\" xmlns:m=\"" + TestAtomConstants.ODataMetadataNamespace + "\" ") + " is 187.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                                (streamReferenceValue.EditLink == null ? string.Empty : ("\"" + JsonLightUtils.GetPropertyAnnotationName(propertyName' JsonLightConstants.ODataMediaEditLinkAnnotationName) + "\":\"" + absoluteEditLinkUri.OriginalString + "\""))' " is 228.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                                (streamReferenceValue.ReadLink == null ? string.Empty : ("\"" + JsonLightUtils.GetPropertyAnnotationName(propertyName' JsonLightConstants.ODataMediaReadLinkAnnotationName) + "\":\"" + absoluteReadLinkUri.OriginalString + "\""))' " is 228.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                                (streamReferenceValue.ContentType == null ? string.Empty : ("\"" + JsonLightUtils.GetPropertyAnnotationName(propertyName' JsonLightConstants.ODataMediaContentTypeAnnotationName) + "\":\"" + streamReferenceValue.ContentType + "\""))' " is 232.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                                (streamReferenceValue.ETag == null ? string.Empty : ("\"" + JsonLightUtils.GetPropertyAnnotationName(propertyName' JsonLightConstants.ODataMediaETagAnnotationName) + "\":\"" + streamReferenceValue.ETag.Replace("\""' "\\\"") + "\""))); " is 234.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                    EdmStructuralProperty edmStructuralProperty = edmEntityType.AddStructuralProperty("Id"' EdmPrimitiveTypeKind.Int32' false); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                    bool needBaseUri = (streamReference.ReadLink != null && !streamReference.ReadLink.IsAbsoluteUri) || (streamReference.EditLink != null && !streamReference.EditLink.IsAbsoluteUri); " is 178.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                        resultTestCases.Add(new StreamPropertyTestDescriptor { BaseUri = new Uri("http://mybaseuri/"' UriKind.Absolute)' TestDescriptor = resultDescriptor }); " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                        new WriterTestConfiguration(testConfiguration.Format' settings' testConfiguration.IsRequest' testConfiguration.Synchronous); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                        ODataProperty firstStreamProperty = payloadEntry.Properties.Where(p => p.Value is ODataStreamReferenceValue).FirstOrDefault(); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,WriterStreamPropertiesTests,The length of the statement  "                                ExpectedException2 = ODataExpectedExceptions.ODataException("WriterValidationUtils_StreamPropertyInRequest"' firstStreamProperty.Name) " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "            edmEntityType.AddStructuralProperty("Collection"' EdmCoreModel.GetCollection(new EdmComplexTypeReference(edmComplexType' false))); " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "            edmEntityType.AddStructuralProperty("Int32Collection"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetInt32(false))); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "            edmEntityType.AddStructuralProperty("NamedStreamCollection"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetStream(false))); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "                // Note that negative test cases to validate the content of an ODataStreamReferenceValue are in WriteInputValidationTests.cs. " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "                    ExpectedExceptionWithoutModel = ODataExpectedExceptions.ODataException("ODataWriter_StreamPropertiesMustBePropertiesOfODataResource")' " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "                    ExpectedExceptionWithModel = ODataExpectedExceptions.ODataException("ODataWriter_StreamPropertiesMustBePropertiesOfODataResource")' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "                    ExpectedExceptionWithoutModel = ODataExpectedExceptions.ODataException("ODataWriter_StreamPropertiesMustBePropertiesOfODataResource")' " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "                    ExpectedExceptionWithModel = ODataExpectedExceptions.ODataException("ODataWriter_StreamPropertiesMustBePropertiesOfODataResource")' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "                    ExpectedExceptionWithoutModel = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections")' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "                    ExpectedExceptionWithModel = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections")' " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "                    ExpectedExceptionWithoutModel = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections")' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "                    ExpectedExceptionWithModel = ODataExpectedExceptions.ODataException("EdmLibraryExtensions_CollectionItemCanBeOnlyPrimitiveEnumComplex")' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "                        testConfiguration => new WriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = testCase.ExpectedExceptionWithoutModel }) " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStreamPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStreamPropertyTests.cs,StreamPropertiesNegativeTests,The length of the statement  "                        testConfiguration => new WriterTestExpectedResults(this.Settings.ExpectedResultSettings) { ExpectedException2 = testCase.ExpectedExceptionWithModel }) " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "            var ordersNavProp = customerType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "Orders"' Target = orderType' TargetMultiplicity = EdmMultiplicity.Many }); " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "            var bestFriendNavProp = customerType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "BestFriend"' Target = customerType' TargetMultiplicity = EdmMultiplicity.One }); " is 185.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    Items = new ODataItem[] { new ODataNestedResourceInfo() { IsCollection = true' Name = "Orders"' Url = new Uri("http://odata.org/collection") } }' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/collection") + " />"' " is 172.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    JsonLight = "{\"" + JsonLightUtils.GetPropertyAnnotationName("Orders"' JsonLightConstants.ODataNavigationLinkUrlAnnotationName) + "\":\"http://odata.org/collection\"}" " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    Items = new ODataItem[] { new ODataNestedResourceInfo() { IsCollection = false' Name = "BestFriend"' Url = new Uri("http://odata.org/singleton") } }' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("BestFriend"' "application/atom+xml;type=entry"' "BestFriend"' "http://odata.org/singleton") + " />"' " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    JsonLight = "{\"" + JsonLightUtils.GetPropertyAnnotationName("BestFriend"' JsonLightConstants.ODataNavigationLinkUrlAnnotationName) + "\":\"http://odata.org/singleton\"}" " is 170.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    Items = new ODataItem[] { new ODataNestedResourceInfo() { IsCollection = null' Name = "Orders"' Url = new Uri("http://odata.org/collection") } }' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    JsonLight = "{\"" + JsonLightUtils.GetPropertyAnnotationName("Orders"' JsonLightConstants.ODataNavigationLinkUrlAnnotationName) + "\":\"http://odata.org/collection\"}"' " is 168.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    EdmExpectedExceptionCallback = (tc' m) => tc.Format != ODataFormat.Json ? ODataExpectedExceptions.ODataException("WriterValidationUtils_NavigationLinkMustSpecifyUrl"' "Orders") : null " is 183.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("BestFriend"' "application/atom+xml;type=entry"' "BestFriend"' "http://odata.org/nav") + ">" + " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                            "\"" + JsonLightUtils.GetPropertyAnnotationName("BestFriend"' JsonLightConstants.ODataNavigationLinkUrlAnnotationName) + "\":\"http://odata.org/nav\""' " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                                "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryId + "\""' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                                "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryReadLink.OriginalString + "\"") " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    EdmExpectedExceptionCallback = (tc' m) => ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionTrueWithResourceContent"' "http://odata.org/nav") " is 177.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataWriterCore_MultipleItemsInNestedResourceInfoWithContent") " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                            "\"" + JsonLightUtils.GetPropertyAnnotationName("Orders"' JsonLightConstants.ODataNavigationLinkUrlAnnotationName) + "\":\"http://odata.org/nav\""' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    EdmExpectedExceptionCallback = (tc' m) => ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionFalseWithResourceSetContent"' "http://odata.org/nav") " is 181.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataWriterCore_MultipleItemsInNestedResourceInfoWithContent") " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInResponse,The length of the statement  "                        withoutModel.SkipTestConfiguration = tc => tc.Format == ODataFormat.Json || (skipTestConfiguration == null ? false : skipTestConfiguration(tc)); " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "            var ordersNavProp = customerType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "Orders"' Target = orderType' TargetMultiplicity = EdmMultiplicity.Many }); " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "            var bestFriendNavProp = customerType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "BestFriend"' Target = customerType' TargetMultiplicity = EdmMultiplicity.One }); " is 185.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_NestedResourceInfoMustSpecifyIsCollection"' "BestFriend") " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("BestFriend"' "application/atom+xml;type=entry"' "BestFriend"' "http://odata.org/singleton") + " />"' " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("BestFriend"' "application/atom+xml;type=entry"' "BestFriend"' "http://odata.org/nav") + ">" + " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    JsonLight =  "{\"BestFriend\":{\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryId + "\"'\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryReadLink.OriginalString + "\"}}"' " is 363.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionFalseWithResourceSetContent"' "http://odata.org/nav") " is 159.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataWriterCore_MultipleItemsInNestedResourceInfoWithContent") " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataWriterCore_MultipleItemsInNestedResourceInfoWithContent") " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataWriterCore_MultipleItemsInNestedResourceInfoWithContent") " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("ODataWriterCore_MultipleItemsInNestedResourceInfoWithContent") " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/collection") + " />"' " is 172.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/collection") + " />" + " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/collection2") + " />"' " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    JsonLight =  "{\"Orders@" + JsonLightConstants.ODataBindAnnotationName + "\":[\"http://odata.org/collection\"'\"http://odata.org/collection2\"]}"' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    JsonLight =  "{\"Orders\":[{\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryId + "\"'\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryReadLink.OriginalString + "\"}]}"' " is 361.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "{\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryId + "\"'\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryReadLink.OriginalString + "\"}'" + " is 335.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "{\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryId + "\"'\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryReadLink.OriginalString + "\"}" + " is 334.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/collection") + " />"' " is 166.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/collection") + " />" + " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "\"Orders\":[{\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryId + "\"'\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryReadLink.OriginalString + "\"}]" + " is 347.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/collection") + " />" + " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/collection") + " />" + " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                                "{\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryId + "\"'\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryReadLink.OriginalString + "\"}'" + " is 335.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                                "{\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryId + "\"'\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryReadLink.OriginalString + "\"}" + " is 334.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/collection") + " />" + " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/collection") + " />"' " is 166.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/collection") + " />" + " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/collection") + " />" + " is 167.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                        "\"Orders@" + JsonLightConstants.ODataBindAnnotationName + "\":[\"http://odata.org/collection\"'\"http://odata.org/collection\"]'" + " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                                "{\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryId + "\"'\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryReadLink.OriginalString + "\"}'" + " is 335.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                                "{\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryId + "\"'\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryReadLink.OriginalString + "\"}" + " is 334.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionTrueWithResourceContent"' "http://odata.org/nav") " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    ExpectedException = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionTrueWithResourceContent"' "http://odata.org/nav") " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinksInRequest,The length of the statement  "                    withoutModel.SkipTestConfiguration = tc => tc.Format == ODataFormat.Json || (skipTestConfiguration == null ? false : skipTestConfiguration(tc)); " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The length of the statement  "            var ordersNavProp = customerType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "Orders"' Target = orderType' TargetMultiplicity = EdmMultiplicity.Many }); " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The length of the statement  "            var singletonOrderNavProp = orderType.AddUnidirectionalNavigation(new EdmNavigationPropertyInfo { Name = "SingletonOrder"' Target = orderType' TargetMultiplicity = EdmMultiplicity.One }); " is 187.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The length of the statement  "                    Xml = "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("Orders"' "application/atom+xml;type=feed"' "Orders"' "http://odata.org/nav") + ">" + " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The length of the statement  "                                      "<link " + TestAtomUtils.GetExpectedAtomNavigationLinkAttributesAsString("SingletonOrder"' "application/atom+xml;type=entry"' "SingletonOrder"' "http://odata.org/nav") + ">" + " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The length of the statement  "                            "\"" + JsonLightUtils.GetPropertyAnnotationName("Orders"' JsonLightConstants.ODataNavigationLinkUrlAnnotationName) + "\":\"http://odata.org/nav\""' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The length of the statement  "                                    "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryId + "\""' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The length of the statement  "                                    "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryReadLink.OriginalString + "\""' " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The length of the statement  "                                    "\"" + JsonLightUtils.GetPropertyAnnotationName("SingletonOrder"' JsonLightConstants.ODataNavigationLinkUrlAnnotationName) + "\":\"http://odata.org/nav\""' " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The length of the statement  "                                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryId + "\""' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The length of the statement  "                                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"" + ObjectModelUtils.DefaultEntryReadLink.OriginalString + "\"") + " is 182.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The length of the statement  "                    withoutModel.SkipTestConfiguration = tc => tc.Format == ODataFormat.Json || (skipTestConfiguration == null ? false : skipTestConfiguration(tc)); " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the statement  "            ODataNestedResourceInfo cityHallLinkIsCollectionNull = ObjectModelUtils.CreateDefaultCollectionLink("CityHall"' /*isCollection*/ null); " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the statement  "            ODataNestedResourceInfo cityHallLinkIsCollectionTrue = ObjectModelUtils.CreateDefaultCollectionLink("CityHall"' /*isCollection*/ true); " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the statement  "            ODataNestedResourceInfo cityHallLinkIsCollectionFalse = ObjectModelUtils.CreateDefaultCollectionLink("CityHall"' /*isCollection*/ false); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the statement  "            ODataNestedResourceInfo policeStationLinkIsCollectionNull = ObjectModelUtils.CreateDefaultCollectionLink("PoliceStation"' /*isCollection*/ null); " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the statement  "            ODataNestedResourceInfo policeStationLinkIsCollectionTrue = ObjectModelUtils.CreateDefaultCollectionLink("PoliceStation"' /*isCollection*/ true); " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the statement  "            ODataNestedResourceInfo policeStationLinkIsCollectionFalse = ObjectModelUtils.CreateDefaultCollectionLink("PoliceStation"' /*isCollection*/ false); " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the statement  "            ExpectedException expandedFeedLinkWithEntryMetadataError = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionTrueWithResourceMetadata"' "http://odata.org/link"); " is 197.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the statement  "            ExpectedException expandedEntryLinkWithFeedMetadataError = ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionFalseWithResourceSetMetadata"' "http://odata.org/link"); " is 201.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the statement  "            ExpectedException deferredLinkInRequestError = ODataExpectedExceptions.ODataException("ODataWriterCore_DeferredLinkInRequest"); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkMultiplicityTests,The length of the statement  "                    using (var messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' null' testCase.Model)) " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,GetDefaultEntryStartXmlAsString,The length of the statement  "                    (typeName == null ? string.Empty : ("<category term='" + typeName + "' scheme='http://docs.oasis-open.org/odata/ns/scheme' />")) + " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,NavigationLinkTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,ToEdmTestDescriptor,The length of the statement  "                                FragmentExtractor = result => new JsonObject().AddProperties(result.RemoveAllAnnotations(true).Object().GetPropertyAnnotationsAndProperty(this.PropertyName))' " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "            ODataProperty[] properties = ObjectModelUtils.CreateDefaultPrimitiveProperties(model).Where(p => p.Value != null).ToArray(); " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyValue)' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPointValue)' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyLineStringValue)' " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPolygonValue)' " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyCollectionValue)' " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPointValue)' " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiLineStringValue)' " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPolygonValue)' " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryValue)' " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryPointValue)' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryLineStringValue)' " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryPolygonValue)' " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryCollectionValue)' " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryMultiPointValue)' " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryMultiLineStringValue)' " is 159.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeometryMultiPolygonValue)' " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                string propertyJsonLightWithMetadataAnnotationResult = "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + contextUri + "\"'" + propertyJsonLightResult; " is 219.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                propertiesJsonLightRequestResultLines[i] = JsonUtils.WrapTopLevelObject(JsonUtils.GetJsonLines(propertyJsonLightWithMetadataAnnotationResult)); " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                propertiesJsonLightResponseResultLines[i] = JsonUtils.WrapTopLevelObject(JsonUtils.GetJsonLines(propertyJsonLightWithMetadataAnnotationResult)); " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreatePrimitiveTopLevelPropertyDescriptors,The length of the statement  "                                Json = JsonLightWriterUtils.CombineLines(testConfiguration.IsRequest ? jsonLightRequestResult : jsonLightResponseResult)' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateComplexPropertyDescriptors,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#My.AddressType\"'" + " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateComplexPropertyDescriptors,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#My.NestedAddressType\"'" + " is 195.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateComplexPropertyDescriptors,The length of the statement  "                                Json = JsonLightWriterUtils.CombineLines(testConfiguration.IsRequest ? jsonLightRequestResult : jsonLightResponseResult)' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateCollectionPropertyDescriptors,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#Collection(Edm.String)\"'" + " is 197.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateCollectionPropertyDescriptors,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#Collection(Edm.Int32)\"'" + " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateCollectionPropertyDescriptors,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#Collection(Edm.Int32)\"'" + " is 196.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateCollectionPropertyDescriptors,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#Collection(Edm.String)\"'" + " is 197.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateCollectionPropertyDescriptors,The length of the statement  "                        "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#Collection(Edm.Geography)\"'" + " is 200.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateCollectionPropertyDescriptors,The length of the statement  "                            if (string.IsNullOrEmpty(collectionValue.TypeName) && (collectionValue.TypeAnnotation == null || string.IsNullOrEmpty(collectionValue.TypeAnnotation.TypeName))) " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateCollectionPropertyDescriptors,The length of the statement  "                                Json = JsonLightWriterUtils.CombineLines(testConfiguration.IsRequest ? jsonLightRequestResultLines : jsonLightResponseResultLines)' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateComplexCollectionPropertyDescriptors,The length of the statement  "                    "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#Collection(My.AddressType)\"'" + " is 201.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateComplexCollectionPropertyDescriptors,The length of the statement  "                            Json = JsonLightWriterUtils.CombineLines(testConfiguration.IsRequest ? jsonLightRequestResultLines : jsonLightResponseResultLines)' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateDefaultComplexCollectionProperties,The length of the statement  "                .Property("ComplexCollection"' new EdmCollectionTypeReference(new EdmCollectionType(new EdmComplexTypeReference(addressType' true)))); " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,InvalidXmlCharactersTests,The length of the statement  "                    otherTestConfiguration.MessageWriterSettings.EnableCharactersCheck = !testConfiguration.MessageWriterSettings.EnableCharactersCheck; " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,PreserveSpaceTests,The length of the statement  "            string[] stringValues = whiteSpaces.SelectMany(s => new[] { string.Format("{0}foo"' s)' string.Format("foo{0}"' s)' string.Format("{0}foo{1}"' s' s) }).ToArray(); " is 162.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,InvalidPropertyNameTest,The length of the statement  "                        ExpectedException2 = ODataExpectedExceptions.ODataException("ValidationUtils_PropertiesMustNotContainReservedChars"' propertyName' "':'' '.'' '@'") " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,InvalidPropertyValueTest,The length of the statement  "            emptyEntityType.AddStructuralProperty("CollectionProperty"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetString(isNullable: false))); " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,InvalidPropertyValueTest,The length of the statement  "                    new ODataProperty { Name = "CollectionProperty"' Value = new ODataCollectionValue { TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")' Items = new object[] { new ODataMessageWriterSettings() } } }' " is 211.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,InvalidPropertyValueTest,The length of the statement  "                        ExpectedException2 =  ODataExpectedExceptions.ODataException("ValidationUtils_UnsupportedPrimitiveType"' "Microsoft.OData.ODataMessageWriterSettings")' " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,NullPropertyOnEntryTest,The length of the statement  "                new bool[] { false' true }.Select(nullable => new Func<TestODataBehaviorKind' ODataVersion' PayloadWriterTestDescriptor<ODataItem>>( " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,NullPropertyOnComplexValueTest,The length of the statement  "                new bool[] { false' true }.Select(nullable => new Func<TestODataBehaviorKind' ODataVersion' PayloadWriterTestDescriptor<ODataProperty>>( " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,NullPropertyOnComplexValueTest,The length of the statement  "                    PayloadWriterTestDescriptor<ODataProperty> testDescriptor = testDescriptorCreator(behaviorKind' testConfiguration.Version); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,NonNullablePropertyOnComplexValueTest,The length of the statement  "                    PayloadWriterTestDescriptor<ODataProperty> testDescriptor = testDescriptorCreator(behaviorKind' testConfiguration.Version); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,PropertyWithInvalidNameOnComplexValueTest,The length of the statement  "                    PayloadWriterTestDescriptor<ODataProperty> testDescriptor = testDescriptorCreator(propertyName' testConfiguration.Version); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,ComplexValueODataTypeAnnotationTest,The length of the statement  "            const string ODataJsonLightValueSerializer_MissingTypeNameOnComplex = "A type name was not provided for an instance of ODataComplexValue."; " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,ComplexValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInJsonLight = (object)ODataExpectedExceptions.ODataException("ODataJsonLightValueSerializer_MissingTypeNameOnComplex")' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,ComplexValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInJsonLightForResponse = (object)ODataExpectedExceptions.ODataException("ODataContextUriBuilder_TypeNameMissingForProperty")' " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,ComplexValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInAtomForResponse = (object)ODataExpectedExceptions.ODataException("ODataContextUriBuilder_TypeNameMissingForProperty") " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,ComplexValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInJsonLight = (object)ODataExpectedExceptions.ODataException("ODataJsonLightValueSerializer_MissingTypeNameOnComplex")' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,ComplexValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInJsonLightForResponse = (object)ODataExpectedExceptions.ODataException("ODataContextUriBuilder_TypeNameMissingForProperty")' " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,ComplexValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInAtomForResponse = (object)ODataExpectedExceptions.ODataException("ODataContextUriBuilder_TypeNameMissingForProperty")' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,ComplexValueODataTypeAnnotationTest,The length of the statement  "                    JsonLightTypeName = "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"DifferentType\""' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,ComplexValueODataTypeAnnotationTest,The length of the statement  "                            var exception = testConfiguration.IsRequest ? tc.ExpectedExceptionInJsonLight : tc.ExpectedExceptionInJsonLightForResponse; " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInJsonLight = (object)ODataExpectedExceptions.ODataException("WriterValidationUtils_MissingTypeNameWithMetadata")' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInJsonLightForResponse = (object)ODataExpectedExceptions.ODataException("ODataContextUriBuilder_TypeNameMissingForProperty")' " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInAtomForResponse = (object)ODataExpectedExceptions.ODataException("ODataContextUriBuilder_TypeNameMissingForProperty")' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInJsonLight = (object)ODataExpectedExceptions.ODataException("WriterValidationUtils_MissingTypeNameWithMetadata")' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInJsonLightForResponse = (object)ODataExpectedExceptions.ODataException("ODataJsonLightValueSerializer_MissingTypeNameOnCollection")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInJsonLight = (object)ODataExpectedExceptions.ODataException("WriterValidationUtils_MissingTypeNameWithMetadata")' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInJsonLightForResponse = (object)ODataExpectedExceptions.ODataException("ODataContextUriBuilder_TypeNameMissingForProperty")' " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInAtomForResponse = (object)ODataExpectedExceptions.ODataException("ODataContextUriBuilder_TypeNameMissingForProperty")' " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInJsonLight = (object)ODataExpectedExceptions.ODataException("WriterValidationUtils_MissingTypeNameWithMetadata")' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The length of the statement  "                    ExpectedExceptionInJsonLightForResponse = (object)ODataExpectedExceptions.ODataException("ODataJsonLightValueSerializer_MissingTypeNameOnCollection")' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The length of the statement  "                owningEntityType.AddStructuralProperty("PropertyName"' EdmCoreModel.GetCollection(EdmCoreModel.Instance.GetInt32(isNullable: false))); " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CollectionValueODataTypeAnnotationTest,The length of the statement  "                                var exception = testConfiguration.IsRequest ? tc.ExpectedExceptionInJsonLight : tc.ExpectedExceptionInJsonLightForResponse; " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,PrimitiveValueODataTypeAnnotationTest,The length of the statement  "                    JsonLightTypeName = MissingTypeNameSentinelTextJson'   // Since this is a declared property' its type name isn't written by default in JSON light. " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,PrimitiveValueODataTypeAnnotationTest,The length of the statement  "                    DebugDescription = "A ODataTypeAnnotation with a null TypeName should force primitive type names to not be written' regardless of format."' " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,PrimitiveValueODataTypeAnnotationTest,The length of the statement  "                    DebugDescription = "A ODataTypeAnnotation with a TypeName of \"DifferentType\" should cause that type name to be written for primitive values' except in JSON verbose' where the format doesn't allow explicit type names for primitives."' " is 235.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,PrimitiveValueODataTypeAnnotationTest,The length of the statement  "                    JsonLightTypeName = "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"DifferentType\""' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,PrimitiveValueODataTypeAnnotationTest,The length of the statement  "                    DebugDescription = "A ODataTypeAnnotation with an empty string TypeName should cause an empty type name to be written for primitive values' except in JSON verbose' where the format doesn't allow explicit type names for primitives."' " is 232.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,PrimitiveValueODataTypeAnnotationTest,The length of the statement  "                    JsonLightTypeName = "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"\""' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNullPropertyOnComplexValueTestDescriptor,The length of the statement  "            string typeName = primitiveDataType == null ? complexDataType.Definition.TestFullName() : primitiveDataType.Definition.TestFullName(); " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNullPropertyOnComplexValueTestDescriptor,The length of the statement  "                            ExpectedException2 = ODataExpectedExceptions.ODataException("WriterValidationUtils_NonNullablePropertiesMustNotHaveNullValue"' "nullProperty"' typeName)' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNonNullPropertyOnComplexValueTestDescriptor,The length of the statement  "            string typeName = EdmCoreModel.Instance.GetPrimitive(nonNullablePrimitiveTypeWithValue.Type' true).Definition.TestFullName(); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNonNullPropertyOnComplexValueTestDescriptor,The length of the statement  "                                    ? ODataExpectedExceptions.ODataException("ValidationUtils_PropertiesMustNotContainReservedChars"' propertyName' "':'' '.'' '@'") " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNonNullPropertyOnComplexValueTestDescriptor,The length of the statement  "            complexType.AddStructuralProperty(propertyName' EdmCoreModel.Instance.GetPrimitive(nonNullablePrimitiveTypeWithValue.Type' true)); " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNullPropertyOnEntryTestDescriptor,The length of the statement  "            string typeName = primitiveDataType == null ? complexDataType.Definition.TestFullName() : primitiveDataType.Definition.TestFullName(); " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNullPropertyOnEntryTestDescriptor,The length of the statement  "                            ExpectedException2 = ODataExpectedExceptions.ODataException("WriterValidationUtils_NonNullablePropertiesMustNotHaveNullValue"' "nullProperty"' typeName)' " is 153.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNonNullPropertyOnEntryTestDescriptor,The length of the statement  "            string typeName = EdmCoreModel.Instance.GetPrimitive(nonNullablePrimitiveTypeWithValue.Type' true).Definition.TestFullName(); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNonNullPropertyOnEntryTestDescriptor,The length of the statement  "                            Json = "\"" + JsonLightConstants.ODataValuePropertyName + "\":" + nonNullablePrimitiveTypeWithValue.JsonLightRepresentation' " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNonNullPropertyOnEntryTestDescriptor,The length of the statement  "                                    ? ODataExpectedExceptions.ODataException("ValidationUtils_PropertiesMustNotContainReservedChars"' propertyName' "':'' '.'' '@'") " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateNonNullPropertyOnEntryTestDescriptor,The length of the statement  "            entityType.AddStructuralProperty(propertyName' EdmCoreModel.Instance.GetPrimitive(nonNullablePrimitiveTypeWithValue.Type' false)); " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,TestSinglePropertyGeneration,The length of the statement  "                this.WriterTestConfigurationProvider.ExplicitFormatConfigurationsWithIndent.Where(c => !c.Synchronous && c.Format == testFormat)' " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,GenerateComplexPropertyErrorTestCases,The length of the statement  "            List<PayloadWriterTestDescriptor<ODataPayloadElement>> testCases = new List<PayloadWriterTestDescriptor<ODataPayloadElement>>(); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,GenerateComplexPropertyErrorTestCases,The length of the statement  "                    var complexType = (IEdmComplexType)(((IEdmEntityType)entityType).Properties().Single(p => p.Name == property.Name).Type).Definition; " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,GenerateComplexPropertyErrorTestCases,The length of the statement  "                        var isNullable = !newType.IsValueType || newType.IsGenericType && newType.GetGenericTypeDefinition() == typeof(Nullable<>); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)new byte[] { 0' 1' 0' 1}' (string)null' new byte[] { 0' 1' 0' 1}' ApplicationOctetStreamContentType)' // binary " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)(Single)1'  "1"' (byte[])null' TextPlainContentType)' // single " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)true' "true"' (byte[])null' TextPlainContentType)' // boolean " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)(byte)1' "1"' (byte[])null' TextPlainContentType)' // byte " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)DateTimeOffset.Parse("2010-10-10T10:10:10Z")' "2010-10-10T10:10:10Z"' (byte[])null' TextPlainContentType)' // DateTimeOffset " is 187.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)DateTimeOffset.Parse("2010-10-10T10:10:10+01:00")' "2010-10-10T10:10:10+01:00"' (byte[])null' TextPlainContentType)' // DateTimeOffset (2) " is 201.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)DateTimeOffset.Parse("2010-10-10T10:10:10-08:00")' "2010-10-10T10:10:10-08:00"' (byte[])null' TextPlainContentType)' // DateTimeOffset (3) " is 201.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)(decimal)1' "1"' (byte[])null' TextPlainContentType)' // Decimal " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)new Guid("11111111-2222-3333-4444-555555555555")' "11111111-2222-3333-4444-555555555555"' (byte[])null' TextPlainContentType)' // Guid " is 197.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)(sbyte)1' "1"' (byte[])null' TextPlainContentType)' // SByte " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)(Int16)1' "1"' (byte[])null' TextPlainContentType)' // Int16 " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)(Int32)1' "1"' (byte[])null' TextPlainContentType)' // Int32 " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)(Int64)1' "1"' (byte[])null' TextPlainContentType)' // Int64 " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)TimeSpan.FromMinutes(12.34)' "PT12M20.4S"' (byte[])null' TextPlainContentType)' // Duration " is 154.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                new PayloadWriterTestDescriptor<object>(this.Settings' (object)string.Empty' string.Empty' (byte[])null' TextPlainContentType)' // empty  " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The length of the statement  "                        testConfiguration = new WriterTestConfiguration(testConfiguration.Format' settings' testConfiguration.IsRequest' testConfiguration.Synchronous); " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawValueErrorTests,The length of the statement  "                    ExpectedErrorMessage = "The value of type 'Microsoft.OData.ODataCollectionValue' could not be converted to a raw string." " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawValueErrorTests,The length of the statement  "            var testCases = primitiveValueCases.Select(p => new PayloadWriterTestDescriptor<object>(this.Settings' p.Value' CreateErrorResultCallback(p.ExpectedErrorMessage' p.Value' this.Settings.ExpectedResultSettings))); " is 211.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,CreateErrorResultCallback,The length of the statement  "                            ? (value == null ? expectedErrorMessage : "A default MIME type could not be found for the requested payload in format 'Atom'.") " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,WorkspaceNamesTests,The length of the statement  "            var testCases = workspaceNames.Select(name => new PayloadWriterTestDescriptor<ODataServiceDocument>(this.Settings' CreateWorkspace(/*createMetadataFirst*/ true' name)' this.CreateExpectedResultCallback(baseUri' name))); " is 219.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,WorkspaceNamesAndResourceCollectionTests,The length of the statement  "                        setTitle.Select(setTitleFlag => setTitleFlag ? collectionArray2.Select(c => new CollectionInfo { Url = c.Url' TitleAnnotation = c.Url }) : collectionArray2)) " is 157.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,ResourceCollectionTests,The length of the statement  "                    .SelectMany(collectionArray2 => setTitle.Select(setTitleFlag => setTitleFlag ? collectionArray2.Select(c => new CollectionInfo { Name = c.Name' Url = c.Url' TitleAnnotation = c.Url }) : collectionArray2)) " is 204.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,SingletonTests,The length of the statement  "                    .SelectMany(singletonArray2 => setTitle.Select(setTitleFlag => setTitleFlag ? singletonArray2.Select(c => new SingletonInfo { Name = c.Name' Url = c.Url' TitleAnnotation = c.Url }) : singletonArray2)) " is 200.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,AdditionalResourceCollectionTests,The length of the statement  "            IEdmModel model = this.CreateMetadata(new[] { new CollectionInfo { Url = "EntitySet1" }' new CollectionInfo { Url = "EntitySet2" } }); " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,AdditionalResourceCollectionTests,The length of the statement  "                      docWithSettings.WriterSettings.EnableMessageStreamDisposal = testConfig.MessageWriterSettings.EnableMessageStreamDisposal; " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,ServiceDocumentErrorTests,The length of the statement  "            IEdmModel model = this.CreateMetadata(new[] { new CollectionInfo() { Url = "EntitySet1" }' new CollectionInfo() { Url = "EntitySet2" } }); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,ServiceDocumentErrorTests,The length of the statement  "                    //    ExpectedException = ODataExpectedExceptions.ODataException("ODataWriter_RelativeUriUsedWithoutBaseUriSpecified"' "SomeUri")' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,ServiceDocumentErrorTests,The length of the statement  "                    //    ExpectedException = ODataExpectedExceptions.ODataException("ODataWriter_RelativeUriUsedWithoutBaseUriSpecified"' string.Empty)' " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,ServiceDocumentErrorTests,The length of the statement  "                        docWithSettings.WriterSettings.EnableMessageStreamDisposal = testConfig.MessageWriterSettings.EnableMessageStreamDisposal; " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,CreateMetadata,The length of the statement  "            EdmStructuralProperty edmStructuralProperty = new EdmStructuralProperty(edmEntityType' "Id"' EdmCoreModel.Instance.GetInt32(false)); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,CreateWorkspace,The length of the statement  "                    var collection = new ODataEntitySetInfo() { Url = new Uri(collectionInfo.Url' UriKind.RelativeOrAbsolute)' Name = collectionInfo.Name' Title = collectionInfo.TitleAnnotation }; " is 176.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,CreateWorkspace,The length of the statement  "                    var singleton = new ODataSingletonInfo() { Url = new Uri(singletonInfo.Url' UriKind.RelativeOrAbsolute)' Name = singletonInfo.Name' Title = singletonInfo.TitleAnnotation }; " is 172.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,CreateExpectedResultCallback,The length of the statement  "            CreateResultTemplates(baseUri' workspaceName' collections' singletons' out xmlResultTemplate' out jsonLightResultTemplate); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,CreateExpectedResultCallback,The length of the statement  "                        throw new NotSupportedException("Format " + testConfiguration.Format.ToString() + " is not supported for service document tests."); " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,CreateErrorResultCallback,The length of the statement  "                        testConfiguration.IsRequest && (expectedException != null && expectedException.ExpectedExceptionType.Equals(typeof(ODataException))) " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,CreateResultTemplates,The length of the statement  "            xmlLines.Add(@"<service xml:base=""" + baseUri + @""" xmlns=""http://www.w3.org/2007/app"" xmlns:atom=""http://www.w3.org/2005/Atom"">"); " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,CreateResultTemplates,The length of the statement  "            jsonLightLines.Add(@"$(Indent)""" + JsonLightConstants.ODataContextAnnotationName + @""":""" + TestUriUtils.ToEscapedUriString(JsonLightConstants.DefaultMetadataDocumentUri) + @"""'""value"":["); " is 195.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartResource' feedWriter ? ODataExpectedExceptions.ODataException("ODataWriterCore_CannotWriteTopLevelResourceWithResourceSetWriter") : (ExpectedException)null }' " is 178.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartFeed' feedWriter ? (ExpectedException)null : ODataExpectedExceptions.ODataException("ODataWriterCore_CannotWriteTopLevelResourceSetWithResourceWriter") }' " is 174.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartLink' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromStart"' "Start"' "NavigationLink") }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartResource' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromResource"' "Entry"' "Entry") }' " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartFeed' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromResource"' "Entry"' "Feed") }' " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        else { w.WriteStart(ObjectModelUtils.CreateDefaultEntry()); w.WriteStart(ObjectModelUtils.CreateDefaultCollectionLink()); w.WriteStart(ObjectModelUtils.CreateDefaultFeed()); } " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartFeed' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromResourceSet"' "Feed"' "Feed") }' " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartLink' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromResourceSet"' "Feed"' "NavigationLink") }' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        w.WriteStart(new ODataNestedResourceInfo { Name = ObjectModelUtils.DefaultLinkName' Url = ObjectModelUtils.DefaultLinkUrl' IsCollection = false }); " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartFeed' ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionFalseWithResourceSetContent"' "http://odata.org/link") }' " is 169.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartLink' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidStateTransition"' "NavigationLink"' "NavigationLink") }' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartResource' ODataExpectedExceptions.ODataException("WriterValidationUtils_ExpandedLinkIsCollectionTrueWithResourceContent"' "http://odata.org/link") }' " is 169.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartLink' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidStateTransition"' "NavigationLink"' "NavigationLink") }' " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartResource' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromCompleted"' "Completed"' "Entry") }' " is 143.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartFeed' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromCompleted"' "Completed"' "Feed") }' " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartLink' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromCompleted"' "Completed"' "NavigationLink") }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.End' ODataExpectedExceptions.ODataException("ODataWriterCore_WriteEndCalledInInvalidState"' "Completed") }' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.Error' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromCompleted"' "Completed"' "Error") }' " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartResource' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromError"' "Error"' "Entry") }' " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartFeed' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromError"' "Error"' "Feed") }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartLink' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromError"' "Error"' "NavigationLink") }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartResource' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromError"' "Error"' "Entry") }' " is 135.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartFeed' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromError"' "Error"' "Feed") }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "                        { WriterAction.StartLink' ODataExpectedExceptions.ODataException("ODataWriterCore_InvalidTransitionFromError"' "Error"' "NavigationLink") }' " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,WriterStatesTestImplementation,The length of the statement  "            ExpectedException errorNotAllowedException = ODataExpectedExceptions.ODataException("ODataMessageWriter_ErrorPayloadInRequest"); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterSyncAsyncMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterSyncAsyncMismatchTests.cs,SyncAsyncMismatchTest,The length of the statement  "                                "A synchronous operation was called on an asynchronous writer. Calls on a writer instance must be either all synchronous or all asynchronous." : " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterSyncAsyncMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterSyncAsyncMismatchTests.cs,SyncAsyncMismatchTest,The length of the statement  "                                "An asynchronous operation was called on a synchronous writer. Calls on a writer instance must be either all synchronous or all asynchronous."); " is 144.
Complex Conditional,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataPayloadKindUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataPayloadKindUtils.cs,IsSupported,The conditional expression  "payloadKind == ODataPayloadKind.Collection ||                      payloadKind == ODataPayloadKind.Error ||                      payloadKind == ODataPayloadKind.ServiceDocument ||                      payloadKind == ODataPayloadKind.MetadataDocument ||                      // Top-level EntityReferenceLinks payload write requests are not allowed.                      payloadKind == ODataPayloadKind.EntityReferenceLinks"  is complex.
Complex Conditional,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataPayloadKindUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataPayloadKindUtils.cs,IsSupported,The conditional expression  "payloadKind == ODataPayloadKind.Batch ||                  payloadKind == ODataPayloadKind.Value ||                  payloadKind == ODataPayloadKind.BinaryValue ||                  payloadKind == ODataPayloadKind.MetadataDocument"  is complex.
Complex Conditional,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,UriHandlingTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\UriHandlingTests.cs,ResolverUriTest,The conditional expression  "(!testConfiguration.IsRequest || !testDescriptor.TestCase.ResponseOnly) &&                          (testConfiguration.Format == ODataFormat.Json && testDescriptor.TestCase.JsonExtractor != null)"  is complex.
Complex Conditional,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,CreateExpectedCallback,The conditional expression  "(resultUriStrings == null || resultUriStrings.Length == 0) && !count.HasValue && nextPageLinkString == null && testConfiguration.Format != ODataFormat.Json"  is complex.
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterSyncAsyncMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterSyncAsyncMismatchTests.cs,WriteToStreamAsync,The following statement contains a magic number: var t = Task.Factory.FromAsync(                  (callback' state) => s.BeginWrite(new byte[] { 1' 2' 3 }' 0' 3' callback' state)'                  (ar) => s.EndWrite(ar)'                  null);
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterSyncAsyncMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterSyncAsyncMismatchTests.cs,WriteToStreamAsync,The following statement contains a magic number: var t = Task.Factory.FromAsync(                  (callback' state) => s.BeginWrite(new byte[] { 1' 2' 3 }' 0' 3' callback' state)'                  (ar) => s.EndWrite(ar)'                  null);
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterSyncAsyncMismatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterSyncAsyncMismatchTests.cs,WriteToStreamAsync,The following statement contains a magic number: var t = Task.Factory.FromAsync(                  (callback' state) => s.BeginWrite(new byte[] { 1' 2' 3 }' 0' 3' callback' state)'                  (ar) => s.EndWrite(ar)'                  null);
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterUserExceptionInResponseTests,The following statement contains a magic number: var testCases = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[][]              {                  new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.QueryOperationResponse(200' string.Empty)'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.QueryOperationResponse(200' string.Empty)'                      BatchWriterUtils.EndBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.EndChangeSet()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.EndChangeSet()'                      BatchWriterUtils.EndBatch()'                      BatchWriterUtils.UserException()'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterUserExceptionInResponseTests,The following statement contains a magic number: var testCases = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[][]              {                  new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.QueryOperationResponse(200' string.Empty)'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.QueryOperationResponse(200' string.Empty)'                      BatchWriterUtils.EndBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.EndChangeSet()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.EndChangeSet()'                      BatchWriterUtils.EndBatch()'                      BatchWriterUtils.UserException()'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterUserExceptionInResponseTests,The following statement contains a magic number: var testCases = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[][]              {                  new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.QueryOperationResponse(200' string.Empty)'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.QueryOperationResponse(200' string.Empty)'                      BatchWriterUtils.EndBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.EndChangeSet()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.EndChangeSet()'                      BatchWriterUtils.EndBatch()'                      BatchWriterUtils.UserException()'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterUserExceptionInResponseTests,The following statement contains a magic number: var testCases = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[][]              {                  new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.QueryOperationResponse(200' string.Empty)'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.QueryOperationResponse(200' string.Empty)'                      BatchWriterUtils.EndBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.EndChangeSet()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.EndChangeSet()'                      BatchWriterUtils.EndBatch()'                      BatchWriterUtils.UserException()'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterUserExceptionInResponseTests,The following statement contains a magic number: var testCases = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[][]              {                  new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.QueryOperationResponse(200' string.Empty)'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.QueryOperationResponse(200' string.Empty)'                      BatchWriterUtils.EndBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.EndChangeSet()'                      BatchWriterUtils.UserException()'                  }'                    new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]                  {                      BatchWriterUtils.StartBatch()'                      BatchWriterUtils.StartChangeSet()'                      BatchWriterUtils.ChangeSetResponse(200' "Sample payload")'                      BatchWriterUtils.EndChangeSet()'                      BatchWriterUtils.EndBatch()'                      BatchWriterUtils.UserException()'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The following statement contains a magic number: var testCases = new Func<WriterTestConfiguration' BatchTestWithDirection>[]              {                  testConfig =>                      {                          // entry payload of query operation response with 200  response code                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // feed payload of query operation response with 200  response code                          string expectedResult = JsonUtils.WrapTopLevelResults(testConfig' feedPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = feedPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.ResourceSet))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // error payload of query operation response with 200  response code                          string expectedResult = string.Join("$(NL)"' errorPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = errorPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Error))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // changeset request with entry payload                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetRequestBatch(                                  "POST"'                                  new Uri("http://services.odata.org/OData/OData.svc/Products")'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource)                                  )'                              ForRequests = true                          };                      }'                  testConfig =>                      {                          // changeset response with entry payload                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource)                                  )'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // changeset response with error payload                          string expectedResult = string.Join("$(NL)"' errorPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = errorPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Error))'                              ForRequests = false                          };                      }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The following statement contains a magic number: var testCases = new Func<WriterTestConfiguration' BatchTestWithDirection>[]              {                  testConfig =>                      {                          // entry payload of query operation response with 200  response code                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // feed payload of query operation response with 200  response code                          string expectedResult = JsonUtils.WrapTopLevelResults(testConfig' feedPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = feedPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.ResourceSet))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // error payload of query operation response with 200  response code                          string expectedResult = string.Join("$(NL)"' errorPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = errorPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Error))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // changeset request with entry payload                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetRequestBatch(                                  "POST"'                                  new Uri("http://services.odata.org/OData/OData.svc/Products")'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource)                                  )'                              ForRequests = true                          };                      }'                  testConfig =>                      {                          // changeset response with entry payload                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource)                                  )'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // changeset response with error payload                          string expectedResult = string.Join("$(NL)"' errorPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = errorPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Error))'                              ForRequests = false                          };                      }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The following statement contains a magic number: var testCases = new Func<WriterTestConfiguration' BatchTestWithDirection>[]              {                  testConfig =>                      {                          // entry payload of query operation response with 200  response code                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // feed payload of query operation response with 200  response code                          string expectedResult = JsonUtils.WrapTopLevelResults(testConfig' feedPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = feedPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.ResourceSet))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // error payload of query operation response with 200  response code                          string expectedResult = string.Join("$(NL)"' errorPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = errorPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Error))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // changeset request with entry payload                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetRequestBatch(                                  "POST"'                                  new Uri("http://services.odata.org/OData/OData.svc/Products")'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource)                                  )'                              ForRequests = true                          };                      }'                  testConfig =>                      {                          // changeset response with entry payload                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource)                                  )'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // changeset response with error payload                          string expectedResult = string.Join("$(NL)"' errorPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = errorPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Error))'                              ForRequests = false                          };                      }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The following statement contains a magic number: var testCases = new Func<WriterTestConfiguration' BatchTestWithDirection>[]              {                  testConfig =>                      {                          // entry payload of query operation response with 200  response code                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // feed payload of query operation response with 200  response code                          string expectedResult = JsonUtils.WrapTopLevelResults(testConfig' feedPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = feedPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.ResourceSet))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // error payload of query operation response with 200  response code                          string expectedResult = string.Join("$(NL)"' errorPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = errorPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Error))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // changeset request with entry payload                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetRequestBatch(                                  "POST"'                                  new Uri("http://services.odata.org/OData/OData.svc/Products")'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource)                                  )'                              ForRequests = true                          };                      }'                  testConfig =>                      {                          // changeset response with entry payload                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource)                                  )'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // changeset response with error payload                          string expectedResult = string.Join("$(NL)"' errorPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = errorPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Error))'                              ForRequests = false                          };                      }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterODataPayloadSmokeTests,The following statement contains a magic number: var testCases = new Func<WriterTestConfiguration' BatchTestWithDirection>[]              {                  testConfig =>                      {                          // entry payload of query operation response with 200  response code                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // feed payload of query operation response with 200  response code                          string expectedResult = JsonUtils.WrapTopLevelResults(testConfig' feedPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = feedPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.ResourceSet))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // error payload of query operation response with 200  response code                          string expectedResult = string.Join("$(NL)"' errorPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateQueryResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = errorPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Error))'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // changeset request with entry payload                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetRequestBatch(                                  "POST"'                                  new Uri("http://services.odata.org/OData/OData.svc/Products")'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource)                                  )'                              ForRequests = true                          };                      }'                  testConfig =>                      {                          // changeset response with entry payload                          string expectedResult = JsonUtils.WrapTopLevelValue(testConfig' entryPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = entryPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Resource)                                  )'                              ForRequests = false                          };                      }'                  testConfig =>                      {                          // changeset response with error payload                          string expectedResult = string.Join("$(NL)"' errorPayloadExpectedJsonResult);                            testConfig = SetAcceptableHeaders(testConfig);                            return new BatchTestWithDirection                          {                              Batch = BatchWriterUtils.CreateChangeSetResponseBatch(                                  200'                                  new BatchWriterUtils.ODataPayload() { Items = errorPayload' TestConfiguration = testConfig' ExpectedResult = expectedResult }'                                  GetExpectedHeadersForFormat(testConfig.Format' ODataPayloadKind.Error))'                              ForRequests = false                          };                      }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterChangeSetSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                       ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 3 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 0' 0 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 1' 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)1'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "1")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "0")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)2'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                     ExpectedException = (ExpectedException)null                 }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterChangeSetSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                       ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 3 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 0' 0 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 1' 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)1'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "1")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "0")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)2'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                     ExpectedException = (ExpectedException)null                 }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterChangeSetSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                       ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 3 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 0' 0 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 1' 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)1'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "1")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "0")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)2'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                     ExpectedException = (ExpectedException)null                 }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterChangeSetSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                       ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 3 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 0' 0 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 1' 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)1'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "1")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "0")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)2'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                     ExpectedException = (ExpectedException)null                 }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterChangeSetSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                       ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 3 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 0' 0 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 1' 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)1'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "1")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "0")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)2'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                     ExpectedException = (ExpectedException)null                 }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterChangeSetSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                       ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 3 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 0' 0 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 1' 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)1'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "1")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "0")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)2'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                     ExpectedException = (ExpectedException)null                 }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterChangeSetSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                       ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 3 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 0' 0 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)null'                      ChangeSetCount = 2'                      OperationsPerChangeSet = new int[] { 1' 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)1'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "1")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 1 }'                     ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxChangeSetSizeExceeded"' "0")                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)2'                      ChangeSetCount = 1'                      OperationsPerChangeSet = new int[] { 2 }'                     ExpectedException = (ExpectedException)null                 }'                  new                  {                      MaxOperationsPerChangeSet = (int?)0'                      ChangeSetCount = 0'                      OperationsPerChangeSet = new int[0]'                     ExpectedException = (ExpectedException)null                 }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterBatchSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 4'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 1'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "0")                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 2'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "1")                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 5'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "2")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterBatchSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 4'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 1'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "0")                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 2'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "1")                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 5'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "2")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterBatchSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 4'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 1'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "0")                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 2'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "1")                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 5'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "2")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterBatchSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 4'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 1'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "0")                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 2'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "1")                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 5'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "2")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterBatchSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 4'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 1'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "0")                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 2'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "1")                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 5'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "2")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterBatchSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 4'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 1'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "0")                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 2'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "1")                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 5'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "2")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterBatchSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 4'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 1'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "0")                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 2'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "1")                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 5'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "2")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterBatchSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 4'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 1'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "0")                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 2'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "1")                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 5'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "2")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterBatchSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 4'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 1'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "0")                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 2'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "1")                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 5'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "2")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWriterBatchSizeTests,The following statement contains a magic number: var testCases = new[]              {                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)null'                      QueryCount = 4'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 0'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 1'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)5'                      QueryCount = 2'                      ExpectedException = (ExpectedException)null                  }'                  new                  {                      MaxPartsPerBatch = (int?)0'                      QueryCount = 1'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "0")                  }'                  new                  {                      MaxPartsPerBatch = (int?)1'                      QueryCount = 2'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "1")                  }'                  new                  {                      MaxPartsPerBatch = (int?)2'                      QueryCount = 5'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataBatchWriter_MaxBatchSizeExceeded"' "2")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,ODataBatchWithPayloadTests,The following statement contains a magic number: complexvalue.PrimitiveProperty("Zip"' 12345);
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterTests.cs,WriteWhenSetToStreamDispose,The following statement contains a magic number: entryWriter.WriteStart(new ODataResource()                      {                          Id = new Uri("http://id")'                          TypeName = "Entry1"'                          EditLink = new Uri("http://www.odata.org/Customers(1)")'                          ReadLink = new Uri("http://www.odata.org/Customers(1)")'                          Properties = new ODataProperty[]                          {                              new ODataProperty() { Name = "Property"' Value= 5 }                          }                      });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,QueryResponses,The following statement contains a magic number: var operations = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]              {                  // add interesting query operation responses to the list                  QueryOperationResponse(200' "Sample response payload.")'                  QueryOperationResponse(404' "Sample response payload 2.")'                  QueryOperationResponse(                      200'                      "Sample response payload 3."'                      new Dictionary<string'string> { { "CustomHeader"' "Successful response" } })'                  QueryOperationResponse(                      200'                      "Sample response payload 4."'                      new Dictionary<string'string> { { "A"' "B" }' { "C"' "D" } })'                  QueryOperationResponse(500' "Sample response payload 5.")'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,QueryResponses,The following statement contains a magic number: var operations = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]              {                  // add interesting query operation responses to the list                  QueryOperationResponse(200' "Sample response payload.")'                  QueryOperationResponse(404' "Sample response payload 2.")'                  QueryOperationResponse(                      200'                      "Sample response payload 3."'                      new Dictionary<string'string> { { "CustomHeader"' "Successful response" } })'                  QueryOperationResponse(                      200'                      "Sample response payload 4."'                      new Dictionary<string'string> { { "A"' "B" }' { "C"' "D" } })'                  QueryOperationResponse(500' "Sample response payload 5.")'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,QueryResponses,The following statement contains a magic number: var operations = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]              {                  // add interesting query operation responses to the list                  QueryOperationResponse(200' "Sample response payload.")'                  QueryOperationResponse(404' "Sample response payload 2.")'                  QueryOperationResponse(                      200'                      "Sample response payload 3."'                      new Dictionary<string'string> { { "CustomHeader"' "Successful response" } })'                  QueryOperationResponse(                      200'                      "Sample response payload 4."'                      new Dictionary<string'string> { { "A"' "B" }' { "C"' "D" } })'                  QueryOperationResponse(500' "Sample response payload 5.")'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,QueryResponses,The following statement contains a magic number: var operations = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]              {                  // add interesting query operation responses to the list                  QueryOperationResponse(200' "Sample response payload.")'                  QueryOperationResponse(404' "Sample response payload 2.")'                  QueryOperationResponse(                      200'                      "Sample response payload 3."'                      new Dictionary<string'string> { { "CustomHeader"' "Successful response" } })'                  QueryOperationResponse(                      200'                      "Sample response payload 4."'                      new Dictionary<string'string> { { "A"' "B" }' { "C"' "D" } })'                  QueryOperationResponse(500' "Sample response payload 5.")'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,QueryResponses,The following statement contains a magic number: var operations = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]              {                  // add interesting query operation responses to the list                  QueryOperationResponse(200' "Sample response payload.")'                  QueryOperationResponse(404' "Sample response payload 2.")'                  QueryOperationResponse(                      200'                      "Sample response payload 3."'                      new Dictionary<string'string> { { "CustomHeader"' "Successful response" } })'                  QueryOperationResponse(                      200'                      "Sample response payload 4."'                      new Dictionary<string'string> { { "A"' "B" }' { "C"' "D" } })'                  QueryOperationResponse(500' "Sample response payload 5.")'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetResponses,The following statement contains a magic number: var updateOperations = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]              {                  ChangeSetResponse(200' "Sample response payload 1.")'                  ChangeSetResponse(404' "Sample response payload 2.")'                  ChangeSetResponse(200' "Sample response payload 3."' new Dictionary<string'string>() { { "Created-Date"' "Today" } })'                  ChangeSetResponse(200' "Sample response payload 4."' new Dictionary<string'string>() { { "Created-Date"' "Today" }' { "A"' "B" }' { "C"' "D" } })'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetResponses,The following statement contains a magic number: var updateOperations = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]              {                  ChangeSetResponse(200' "Sample response payload 1.")'                  ChangeSetResponse(404' "Sample response payload 2.")'                  ChangeSetResponse(200' "Sample response payload 3."' new Dictionary<string'string>() { { "Created-Date"' "Today" } })'                  ChangeSetResponse(200' "Sample response payload 4."' new Dictionary<string'string>() { { "Created-Date"' "Today" }' { "A"' "B" }' { "C"' "D" } })'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetResponses,The following statement contains a magic number: var updateOperations = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]              {                  ChangeSetResponse(200' "Sample response payload 1.")'                  ChangeSetResponse(404' "Sample response payload 2.")'                  ChangeSetResponse(200' "Sample response payload 3."' new Dictionary<string'string>() { { "Created-Date"' "Today" } })'                  ChangeSetResponse(200' "Sample response payload 4."' new Dictionary<string'string>() { { "Created-Date"' "Today" }' { "A"' "B" }' { "C"' "D" } })'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,ChangeSetResponses,The following statement contains a magic number: var updateOperations = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[]              {                  ChangeSetResponse(200' "Sample response payload 1.")'                  ChangeSetResponse(404' "Sample response payload 2.")'                  ChangeSetResponse(200' "Sample response payload 3."' new Dictionary<string'string>() { { "Created-Date"' "Today" } })'                  ChangeSetResponse(200' "Sample response payload 4."' new Dictionary<string'string>() { { "Created-Date"' "Today" }' { "A"' "B" }' { "C"' "D" } })'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateQueryBatch,The following statement contains a magic number: var result = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[queryOperations.Length + 2];
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateChangeSetBatch,The following statement contains a magic number: var result = new BatchWriterTestDescriptor.InvocationAndOperationDescriptor[changeSetRequests.Length + 4];
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateChangeSetBatch,The following statement contains a magic number: changeSetRequests.CopyTo(result' 2);
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateChangeSetBatch,The following statement contains a magic number: result[changeSetRequests.Length + 2] = BatchWriterUtils.EndChangeSet();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateChangeSetBatch,The following statement contains a magic number: result[changeSetRequests.Length + 3] = BatchWriterUtils.EndBatch();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateDefaultQueryBatch,The following statement contains a magic number: int operationCount = batchSize + 2;
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateDefaultQueryResponseBatch,The following statement contains a magic number: int operationCount = batchSize + 2;
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateDefaultQueryResponseBatch,The following statement contains a magic number: result[i + 1] = QueryOperationResponse(200' "Sample response payload.");
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CompareBatchResults,The following statement contains a magic number: string changesetBoundary = "--" + contentType.Substring(contentType.IndexOf("; boundary=") + 11).Trim();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,IsEmptyBatch,The following statement contains a magic number: return expectedResults.InvocationsAndOperationDescriptors != null &&                  expectedResults.InvocationsAndOperationDescriptors.Length == 2 &&                  expectedResults.InvocationsAndOperationDescriptors[0].Invocation == BatchWriterTestDescriptor.WriterInvocations.WriteStartBatch &&                  expectedResults.InvocationsAndOperationDescriptors[1].Invocation == BatchWriterTestDescriptor.WriterInvocations.WriteEndBatch;
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterUtils.cs,CreateBatchConfigurations,The following statement contains a magic number: int[] queryOperationCounts = new int[] { 0' length' length / 2 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The following statement contains a magic number: var testCases = new CollectionWriterStatesTestDescriptor[]              {                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "Start"'                      Setup = null'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' null }'                          { CollectionWriterAction.Item' "Cannot transition from state 'Start' to state 'Item'. The only valid actions in state 'Start' are to write the collection or to write nothing at all." }'                          { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Start'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }'                          { CollectionWriterAction.Error' null }'                      }                  }'                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "Collection"'                      Setup = (mw' w' s) => {                          w.WriteStart(new ODataCollectionStart { Name = "foo" });                      }'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' "Cannot transition from state 'Collection' to state 'Collection'. The only valid actions in state 'Collection' are to write an item or to write the end of the collection." }'                          { CollectionWriterAction.Item' null }'                          { CollectionWriterAction.End' null }'                          { CollectionWriterAction.Error' null }'                      }                  }'                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "Item"'                      Setup = (mw' w' s) => {                          w.WriteStart(new ODataCollectionStart { Name = "foo" });                          w.WriteItem(42);                      }'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' "Cannot transition from state 'Item' to state 'Collection'. The only valid actions in state 'Item' are to write an item or the end of the collection." }'                          { CollectionWriterAction.Item' null }'                          { CollectionWriterAction.End' null }'                          { CollectionWriterAction.Error' null }'                      }                  }'                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "Completed"'                      Setup = (mw' w' s) => {                          w.WriteStart(new ODataCollectionStart { Name = "foo" });                          w.WriteEnd();                      }'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' "Cannot transition from state 'Completed' to state 'Collection'. Nothing further can be written once the writer has completed." }'                          { CollectionWriterAction.Item' "Cannot transition from state 'Completed' to state 'Item'. Nothing further can be written once the writer has completed." }'                          { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Completed'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }'                          { CollectionWriterAction.Error' "Cannot transition from state 'Completed' to state 'Error'. Nothing further can be written once the writer has completed." }'                      }                  }'                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "ODataExceptionThrown"'                      Setup = (mw' w' s) => {                          TestExceptionUtils.RunCatching(() => w.WriteItem(42));                      }'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' "Cannot transition from state 'Error' to state 'Collection'. Nothing can be written once the writer entered the error state." }'                          { CollectionWriterAction.Item' "Cannot transition from state 'Error' to state 'Item'. Nothing can be written once the writer entered the error state." }'                          { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Error'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }'                          { CollectionWriterAction.Error' null }'                      }                  }'                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "FatalExceptionThrown"'                      Setup = (mw' w' s) => {                          // In JSON we can make the stream fail                          s.FailNextCall = true;                          w.WriteStart(new ODataCollectionStart { Name = "foo" });                          TestExceptionUtils.RunCatching(() => w.Flush());                      }'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' "Cannot transition from state 'Error' to state 'Collection'. Nothing can be written once the writer entered the error state." }'                          { CollectionWriterAction.Item' "Cannot transition from state 'Error' to state 'Item'. Nothing can be written once the writer entered the error state." }'                          { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Error'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }'                          { CollectionWriterAction.Error' null }'                      }'                      // There's no simple way to make the writer go into a fatal exception state with XmlWriter underneath.                      // XmlWriter will move to an Error state if anything goes wrong with it' and thus we can't write into it anymore.                      // As a result for example the in-stream error case for this one can't work as it should.                      SkipForConfiguration = (tc) => tc.Format != ODataFormat.Json                  }'                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "Error"'                      Setup = (mw' w' s) => {                          mw.WriteError(new ODataError()' false);                      }'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' "Cannot transition from state 'Error' to state 'Collection'. Nothing can be written once the writer entered the error state." }'                          { CollectionWriterAction.Item' "Cannot transition from state 'Error' to state 'Item'. Nothing can be written once the writer entered the error state." }'                          { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Error'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }'                          { CollectionWriterAction.Error' "The WriteError method or the WriteErrorAsync method on the ODataMessageWriter has already been called to write an error payload. Only a single error payload can be written with each ODataMessageWriter instance." }'                      }                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,CollectionWriterStatesTest,The following statement contains a magic number: var testCases = new CollectionWriterStatesTestDescriptor[]              {                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "Start"'                      Setup = null'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' null }'                          { CollectionWriterAction.Item' "Cannot transition from state 'Start' to state 'Item'. The only valid actions in state 'Start' are to write the collection or to write nothing at all." }'                          { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Start'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }'                          { CollectionWriterAction.Error' null }'                      }                  }'                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "Collection"'                      Setup = (mw' w' s) => {                          w.WriteStart(new ODataCollectionStart { Name = "foo" });                      }'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' "Cannot transition from state 'Collection' to state 'Collection'. The only valid actions in state 'Collection' are to write an item or to write the end of the collection." }'                          { CollectionWriterAction.Item' null }'                          { CollectionWriterAction.End' null }'                          { CollectionWriterAction.Error' null }'                      }                  }'                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "Item"'                      Setup = (mw' w' s) => {                          w.WriteStart(new ODataCollectionStart { Name = "foo" });                          w.WriteItem(42);                      }'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' "Cannot transition from state 'Item' to state 'Collection'. The only valid actions in state 'Item' are to write an item or the end of the collection." }'                          { CollectionWriterAction.Item' null }'                          { CollectionWriterAction.End' null }'                          { CollectionWriterAction.Error' null }'                      }                  }'                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "Completed"'                      Setup = (mw' w' s) => {                          w.WriteStart(new ODataCollectionStart { Name = "foo" });                          w.WriteEnd();                      }'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' "Cannot transition from state 'Completed' to state 'Collection'. Nothing further can be written once the writer has completed." }'                          { CollectionWriterAction.Item' "Cannot transition from state 'Completed' to state 'Item'. Nothing further can be written once the writer has completed." }'                          { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Completed'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }'                          { CollectionWriterAction.Error' "Cannot transition from state 'Completed' to state 'Error'. Nothing further can be written once the writer has completed." }'                      }                  }'                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "ODataExceptionThrown"'                      Setup = (mw' w' s) => {                          TestExceptionUtils.RunCatching(() => w.WriteItem(42));                      }'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' "Cannot transition from state 'Error' to state 'Collection'. Nothing can be written once the writer entered the error state." }'                          { CollectionWriterAction.Item' "Cannot transition from state 'Error' to state 'Item'. Nothing can be written once the writer entered the error state." }'                          { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Error'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }'                          { CollectionWriterAction.Error' null }'                      }                  }'                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "FatalExceptionThrown"'                      Setup = (mw' w' s) => {                          // In JSON we can make the stream fail                          s.FailNextCall = true;                          w.WriteStart(new ODataCollectionStart { Name = "foo" });                          TestExceptionUtils.RunCatching(() => w.Flush());                      }'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' "Cannot transition from state 'Error' to state 'Collection'. Nothing can be written once the writer entered the error state." }'                          { CollectionWriterAction.Item' "Cannot transition from state 'Error' to state 'Item'. Nothing can be written once the writer entered the error state." }'                          { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Error'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }'                          { CollectionWriterAction.Error' null }'                      }'                      // There's no simple way to make the writer go into a fatal exception state with XmlWriter underneath.                      // XmlWriter will move to an Error state if anything goes wrong with it' and thus we can't write into it anymore.                      // As a result for example the in-stream error case for this one can't work as it should.                      SkipForConfiguration = (tc) => tc.Format != ODataFormat.Json                  }'                  new CollectionWriterStatesTestDescriptor {                      DebugDescription = "Error"'                      Setup = (mw' w' s) => {                          mw.WriteError(new ODataError()' false);                      }'                      ExpectedResults = new Dictionary<CollectionWriterAction'string> {                           { CollectionWriterAction.Start' "Cannot transition from state 'Error' to state 'Collection'. Nothing can be written once the writer entered the error state." }'                          { CollectionWriterAction.Item' "Cannot transition from state 'Error' to state 'Item'. Nothing can be written once the writer entered the error state." }'                          { CollectionWriterAction.End' "ODataCollectionWriter.WriteEnd was called in an invalid state ('Error'); WriteEnd is only supported in states 'Start'' 'Collection'' and 'Item'." }'                          { CollectionWriterAction.Error' "The WriteError method or the WriteErrorAsync method on the ODataMessageWriter has already been called to write an error payload. Only a single error payload can be written with each ODataMessageWriter instance." }'                      }                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,InvokeCollectionWriterAction,The following statement contains a magic number: switch (writerAction)              {                  case CollectionWriterAction.Start:                      writer.WriteStart(new ODataCollectionStart { Name = "foo" });                      break;                  case CollectionWriterAction.Item:                      writer.WriteItem(42);                      break;                  case CollectionWriterAction.End:                      writer.WriteEnd();                      break;                  case CollectionWriterAction.Error:                      messageWriter.WriteError(new ODataError()' false);                      break;              }
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionErrorTest,The following statement contains a magic number: var testCases = new[]                  {                      new                      {                          CollectionName = (string)null'                          PayloadItems = new object[]                          {                              new ODataCollectionValue()                              {                                  TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                  Items = new string[] { "One"' "Two"' "Three" }                              }                          }'                          ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NestedCollectionsAreNotSupported")'                      }'                      new                      {                          CollectionName = (string)null'                          PayloadItems = new object[]                          {                              new ODataComplexValue()                              {                                  TypeName = "TestNS.UnknownType"'                                  Properties = null                              }                          }'                          ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_UnrecognizedTypeName"' "TestNS.UnknownType")'                      }'                      new                      {                          CollectionName = (string)null'                          PayloadItems = new object[]                          {                              new ODataComplexValue()                              {                                  TypeName = "TestNS.AddressType"'                                  Properties = new ODataProperty[]                                  {                                      new ODataProperty() { Name = "Street"' Value = "One Microsoft Way" }'                                      new ODataProperty() { Name = "City"' Value = "Redmond" }'                                      new ODataProperty() { Name = "Zip"' Value = "98052" }'                                  }                              }                          }'                          ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.String"' "True"' "Edm.Int32"' "False")'                      }'                      new                      {                          CollectionName = (string)null'                          PayloadItems = new object[]                          {                              new ODataComplexValue()                              {                                  TypeName = "TestNS.AddressType"'                                  Properties = new ODataProperty[]                                  {                                      new ODataProperty() { Name = "Street2"' Value = "One Microsoft Way" }'                                      new ODataProperty() { Name = "City"' Value = "Redmond" }'                                      new ODataProperty() { Name = "Zip"' Value = 98052 }'                                  }                              }                          }'                          ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_PropertyDoesNotExistOnType"' "Street2"' "TestNS.AddressType")'                      }'                      new                      {                          CollectionName = (string)null'                          PayloadItems = new object[]                          {                              new ODataComplexValue()                              {                                  TypeName = "TestNS.AddressType"'                                  Properties = new ODataProperty[]                                  {                                      new ODataProperty() { Name = "Street"' Value = "One Microsoft Way" }'                                      new ODataProperty() { Name = "Street2"' Value = "Two Microsoft Way" }'                                      new ODataProperty() { Name = "City"' Value = "Redmond" }'                                      new ODataProperty() { Name = "Zip"' Value = 98052 }'                                  }                              }                          }'                          ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_PropertyDoesNotExistOnType"' "Street2"' "TestNS.AddressType")'                      }'                      new                      {                          CollectionName = (string)null'                          PayloadItems = new object[]                          {                              new ODataComplexValue()                              {                                  TypeName = "OtherTestNamespace.AddressType"'                                  Properties = new ODataProperty[]                                  {                                      new ODataProperty() { Name = "Street"' Value = "One Microsoft Way" }'                                  }                              }                          }'                          ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_PropertyDoesNotExistOnType"' "Street"' "OtherTestNamespace.AddressType")'                      }'                  };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionErrorTest,The following statement contains a magic number: var testCases = new[]                  {                      new                      {                          CollectionName = (string)null'                          PayloadItems = new object[]                          {                              new ODataCollectionValue()                              {                                  TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                  Items = new string[] { "One"' "Two"' "Three" }                              }                          }'                          ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NestedCollectionsAreNotSupported")'                      }'                      new                      {                          CollectionName = (string)null'                          PayloadItems = new object[]                          {                              new ODataComplexValue()                              {                                  TypeName = "TestNS.UnknownType"'                                  Properties = null                              }                          }'                          ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_UnrecognizedTypeName"' "TestNS.UnknownType")'                      }'                      new                      {                          CollectionName = (string)null'                          PayloadItems = new object[]                          {                              new ODataComplexValue()                              {                                  TypeName = "TestNS.AddressType"'                                  Properties = new ODataProperty[]                                  {                                      new ODataProperty() { Name = "Street"' Value = "One Microsoft Way" }'                                      new ODataProperty() { Name = "City"' Value = "Redmond" }'                                      new ODataProperty() { Name = "Zip"' Value = "98052" }'                                  }                              }                          }'                          ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.String"' "True"' "Edm.Int32"' "False")'                      }'                      new                      {                          CollectionName = (string)null'                          PayloadItems = new object[]                          {                              new ODataComplexValue()                              {                                  TypeName = "TestNS.AddressType"'                                  Properties = new ODataProperty[]                                  {                                      new ODataProperty() { Name = "Street2"' Value = "One Microsoft Way" }'                                      new ODataProperty() { Name = "City"' Value = "Redmond" }'                                      new ODataProperty() { Name = "Zip"' Value = 98052 }'                                  }                              }                          }'                          ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_PropertyDoesNotExistOnType"' "Street2"' "TestNS.AddressType")'                      }'                      new                      {                          CollectionName = (string)null'                          PayloadItems = new object[]                          {                              new ODataComplexValue()                              {                                  TypeName = "TestNS.AddressType"'                                  Properties = new ODataProperty[]                                  {                                      new ODataProperty() { Name = "Street"' Value = "One Microsoft Way" }'                                      new ODataProperty() { Name = "Street2"' Value = "Two Microsoft Way" }'                                      new ODataProperty() { Name = "City"' Value = "Redmond" }'                                      new ODataProperty() { Name = "Zip"' Value = 98052 }'                                  }                              }                          }'                          ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_PropertyDoesNotExistOnType"' "Street2"' "TestNS.AddressType")'                      }'                      new                      {                          CollectionName = (string)null'                          PayloadItems = new object[]                          {                              new ODataComplexValue()                              {                                  TypeName = "OtherTestNamespace.AddressType"'                                  Properties = new ODataProperty[]                                  {                                      new ODataProperty() { Name = "Street"' Value = "One Microsoft Way" }'                                  }                              }                          }'                          ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_PropertyDoesNotExistOnType"' "Street"' "OtherTestNamespace.AddressType")'                      }'                  };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadTest,The following statement contains a magic number: IEnumerable<CollectionWriterTestCase> testCases = new[]              {                  new CollectionWriterTestCase(new CollectionWriterTestDescriptor.ItemDescription[]                           {                               nullItem'                               intItem(1)'                               intItem(2)'                           }' intServiceOpFunctionImport)'                    new CollectionWriterTestCase(new CollectionWriterTestDescriptor.ItemDescription[]                           {                               nullItem'                               stringItem("One")'                               stringItem("Two")'                           }' stringServiceOpFunctionImport)'                    new CollectionWriterTestCase(new CollectionWriterTestDescriptor.ItemDescription[]                           {                               nullItem'                               complexItem("TestNS.AddressType")'                               complexItem("TestNS.AddressType")'                           }' complexServiceOpFunctionImport)'                    new CollectionWriterTestCase(new CollectionWriterTestDescriptor.ItemDescription[]                           {                               nullItem'                               GetGeometryPointItem("GeometryPoint")'                               GetGeometryPolygonItem("GeometryPolygon")'                               GetGeometryCollectionItem("GeometryCollection")'                               GetGeometryMultiLineStringItem("GeometryMultiLineString")'                           }' geometryServiceOpFunctionImport)'                    new CollectionWriterTestCase(new CollectionWriterTestDescriptor.ItemDescription[]                           {                               nullItem'                               GetGeographyPointItem("GeographyPoint")'                               GetGeographyPolygonItem("GeographyPolygon")'                               GetGeographyCollectionItem("GeographyCollection")'                               GetGeographyMultiLineStringItem("GeographyMultiLineString")'                           }' geographyServiceOpFunctionImport)'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionPayloadTest,The following statement contains a magic number: int[] collectionSizes = new int[] { 0' 1' 3 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HomogeneousCollectionWriterWithoutMetadataTest,The following statement contains a magic number: var collections = new[]              {                  // Primitive collection with only nulls                  new CollectionWriterTestDescriptor.ItemDescription[] { nullItem' nullItem' nullItem }'                    // Primitive collection with type names on string values                  new CollectionWriterTestDescriptor.ItemDescription[] { stringItem("foo")' stringItem("bar") }'                    // Primitive collection with type names on Int32 values                  new CollectionWriterTestDescriptor.ItemDescription[] { intItem(1)' intItem(2) }'                    // Primitive collection with type names on Int32 values and null values                  new CollectionWriterTestDescriptor.ItemDescription[] { intItem(1)' nullItem' intItem(2)' nullItem }'                    // Complex collection with type names on complex values                  new CollectionWriterTestDescriptor.ItemDescription[] { complexItem("TestNS.AddressType")' complexItem("TestNS.AddressType") }'                    // Complex collection with type names on complex values and null values                  new CollectionWriterTestDescriptor.ItemDescription[] { complexItem("TestNS.AddressType")' nullItem' complexItem("TestNS.AddressType") }'                    // Complex collection without type names on complex values                  new CollectionWriterTestDescriptor.ItemDescription[] { complexItem(/*typeName*/null)' complexItem(/*typeName*/null) }'                    // Complex collection without type names on complex values and null values                  new CollectionWriterTestDescriptor.ItemDescription[] { complexItem(/*typeName*/null)' nullItem' complexItem(/*typeName*/null) }'                    // Primitive collection with different geographic and null values                  new CollectionWriterTestDescriptor.ItemDescription[] {                      GetGeographyPointItem("GeographyPoint")'                      nullItem'                      GetGeographyPolygonItem("GeographyPolygon")'                      GetGeographyMultiLineStringItem("GeographyMultiLineString")'                      GetGeographyCollectionItem("GeographyCollection")                  }'                    // Primitive collection with different geometric and null values                  new CollectionWriterTestDescriptor.ItemDescription[] {                      GetGeometryPointItem("GeometryPoint")'                      nullItem'                      GetGeometryPolygonItem("GeometryPolygon")'                      GetGeometryMultiLineStringItem("GeometryMultiLineString")'                      GetGeometryCollectionItem("GeometryCollection") }'                  };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HomogeneousCollectionWriterWithoutMetadataTest,The following statement contains a magic number: var collections = new[]              {                  // Primitive collection with only nulls                  new CollectionWriterTestDescriptor.ItemDescription[] { nullItem' nullItem' nullItem }'                    // Primitive collection with type names on string values                  new CollectionWriterTestDescriptor.ItemDescription[] { stringItem("foo")' stringItem("bar") }'                    // Primitive collection with type names on Int32 values                  new CollectionWriterTestDescriptor.ItemDescription[] { intItem(1)' intItem(2) }'                    // Primitive collection with type names on Int32 values and null values                  new CollectionWriterTestDescriptor.ItemDescription[] { intItem(1)' nullItem' intItem(2)' nullItem }'                    // Complex collection with type names on complex values                  new CollectionWriterTestDescriptor.ItemDescription[] { complexItem("TestNS.AddressType")' complexItem("TestNS.AddressType") }'                    // Complex collection with type names on complex values and null values                  new CollectionWriterTestDescriptor.ItemDescription[] { complexItem("TestNS.AddressType")' nullItem' complexItem("TestNS.AddressType") }'                    // Complex collection without type names on complex values                  new CollectionWriterTestDescriptor.ItemDescription[] { complexItem(/*typeName*/null)' complexItem(/*typeName*/null) }'                    // Complex collection without type names on complex values and null values                  new CollectionWriterTestDescriptor.ItemDescription[] { complexItem(/*typeName*/null)' nullItem' complexItem(/*typeName*/null) }'                    // Primitive collection with different geographic and null values                  new CollectionWriterTestDescriptor.ItemDescription[] {                      GetGeographyPointItem("GeographyPoint")'                      nullItem'                      GetGeographyPolygonItem("GeographyPolygon")'                      GetGeographyMultiLineStringItem("GeographyMultiLineString")'                      GetGeographyCollectionItem("GeographyCollection")                  }'                    // Primitive collection with different geometric and null values                  new CollectionWriterTestDescriptor.ItemDescription[] {                      GetGeometryPointItem("GeometryPoint")'                      nullItem'                      GetGeometryPolygonItem("GeometryPolygon")'                      GetGeometryMultiLineStringItem("GeometryMultiLineString")'                      GetGeometryCollectionItem("GeometryCollection") }'                  };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The following statement contains a magic number: var collections = new[]              {                  // Collection with different item type kinds (complex instead of primitive)                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { intItem(0)' complexItem(/*typeName*/null) }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                    // Collection where item type kind does not match item type name (primitive and complex items)                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { stringItem(string.Empty)' complexItem(/*typeName*/null) }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                    // Collection where item type names don't match (Edm.String and Edm.Int32)                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { stringItem(string.Empty)' intItem(2) }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                    // Collection where item type names don't match (Edm.String and Edm.Int32); including some null items                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { nullItem' stringItem(string.Empty)' nullItem' intItem(2)' nullItem }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                    // Collection where item type names don't match (TestModel.SomeComplexType and TestModel.OtherComplexType)                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { complexItem("TestModel.SomeComplexType")' complexItem("TestModel.OtherComplexType") }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "TestModel.OtherComplexType"' "TestModel.SomeComplexType")'                  }'                    // Collection where item type names don't match (TestModel.SomeComplexType and TestModel.OtherComplexType); including some null items                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { nullItem' complexItem("TestModel.SomeComplexType")' nullItem' complexItem("TestModel.OtherComplexType")' nullItem }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "TestModel.OtherComplexType"' "TestModel.SomeComplexType")'                  }'                    // Collection where different item type kinds (primitive instead of complex)                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { complexItem("TestModel.SomeComplexType")' intItem(0) }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'                    // Collection with primitive and complex elements                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { stringItem("Foo")' complexItem("TestModel.SomeComplexType")' stringItem("Perth") }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                    // Collection with primitive and geographic elements                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { stringItem("Foo")' GetGeographyMultiLineStringItem() }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.GeographyMultiLineString"' "Edm.String")'                  }'                    // Collection with primitive and geometric elements                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { stringItem("Foo")' GetGeometryPointItem() }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.GeometryPoint"' "Edm.String")'                  }'                    // Collection with geographic and geometric elements                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { GetGeographyPointItem()' GetGeometryPointItem() }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.GeometryPoint"' "Edm.GeographyPoint")'                  }'                    // Collection with complex and geometric elements                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { complexItem(/*typename*/ null)' GetGeometryPointItem() }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'                    // Collection with complex and geometric elements                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { complexItem(/*typename*/ null)' GetGeometryPointItem() }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,HeterogeneousCollectionWriterWithoutMetadataTest,The following statement contains a magic number: var collections = new[]              {                  // Collection with different item type kinds (complex instead of primitive)                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { intItem(0)' complexItem(/*typeName*/null) }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                    // Collection where item type kind does not match item type name (primitive and complex items)                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { stringItem(string.Empty)' complexItem(/*typeName*/null) }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                    // Collection where item type names don't match (Edm.String and Edm.Int32)                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { stringItem(string.Empty)' intItem(2) }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                    // Collection where item type names don't match (Edm.String and Edm.Int32); including some null items                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { nullItem' stringItem(string.Empty)' nullItem' intItem(2)' nullItem }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                    // Collection where item type names don't match (TestModel.SomeComplexType and TestModel.OtherComplexType)                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { complexItem("TestModel.SomeComplexType")' complexItem("TestModel.OtherComplexType") }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "TestModel.OtherComplexType"' "TestModel.SomeComplexType")'                  }'                    // Collection where item type names don't match (TestModel.SomeComplexType and TestModel.OtherComplexType); including some null items                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { nullItem' complexItem("TestModel.SomeComplexType")' nullItem' complexItem("TestModel.OtherComplexType")' nullItem }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "TestModel.OtherComplexType"' "TestModel.SomeComplexType")'                  }'                    // Collection where different item type kinds (primitive instead of complex)                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { complexItem("TestModel.SomeComplexType")' intItem(0) }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'                    // Collection with primitive and complex elements                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { stringItem("Foo")' complexItem("TestModel.SomeComplexType")' stringItem("Perth") }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                    // Collection with primitive and geographic elements                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { stringItem("Foo")' GetGeographyMultiLineStringItem() }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.GeographyMultiLineString"' "Edm.String")'                  }'                    // Collection with primitive and geometric elements                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { stringItem("Foo")' GetGeometryPointItem() }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.GeometryPoint"' "Edm.String")'                  }'                    // Collection with geographic and geometric elements                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { GetGeographyPointItem()' GetGeometryPointItem() }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.GeometryPoint"' "Edm.GeographyPoint")'                  }'                    // Collection with complex and geometric elements                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { complexItem(/*typename*/ null)' GetGeometryPointItem() }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'                    // Collection with complex and geometric elements                  new                  {                      Items = new CollectionWriterTestDescriptor.ItemDescription[] { complexItem(/*typename*/ null)' GetGeometryPointItem() }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionWriterTest,The following statement contains a magic number: int[] collectionSizes = new int[] { 0' 1' 3 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,DuplicatePropertyNamesTest,The following statement contains a magic number: ODataProperty collectionProperty = new ODataProperty { Name = "Foo"' Value = new ODataCollectionValue { Items = new object[] { 1' 2 } } };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterTests.cs,CollectionWriterWithTypeProvidedTest,The following statement contains a magic number: var testDescriptors = new[]              {                  // Case with entity type is now covered in TDD tests                  // Incompatible item type                  new CollectionWriterTestDescriptor(this.Settings' "CollectionFunction"'                      new [] { new CollectionWriterTestDescriptor.ItemDescription() { Item = 42 } }'                      ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.String"' "True")' null)                  {                      Model = model'                      ItemTypeParameter = EdmCoreModel.Instance.GetString(isNullable: true)                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ODataBatchWriterTestWrapper,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ODataBatchWriterTestWrapper.cs,ODataBatchWriterTestWrapper,The following statement contains a magic number: this.contentId = 100;
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyValue = GeographyFactory.Point(32.0' -100.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyValue = GeographyFactory.Point(32.0' -100.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPointValue = GeographyFactory.Point(33.1' -110.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPointValue = GeographyFactory.Point(33.1' -110.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyLineStringValue = GeographyFactory.LineString(33.1' -110.0).LineTo(35.97' -110).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyLineStringValue = GeographyFactory.LineString(33.1' -110.0).LineTo(35.97' -110).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyLineStringValue = GeographyFactory.LineString(33.1' -110.0).LineTo(35.97' -110).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyLineStringValue = GeographyFactory.LineString(33.1' -110.0).LineTo(35.97' -110).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPolygonValue = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPolygonValue = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPolygonValue = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPolygonValue = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPolygonValue = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPolygonValue = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPolygonValue = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPolygonValue = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPolygonValue = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPolygonValue = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPolygonValue = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyPolygonValue = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyCollectionValue = GeographyFactory.Collection().Point(-19.99' -12.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyCollectionValue = GeographyFactory.Collection().Point(-19.99' -12.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPointValue = GeographyFactory.MultiPoint().Point(10.2' 11.2).Point(11.9' 11.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPointValue = GeographyFactory.MultiPoint().Point(10.2' 11.2).Point(11.9' 11.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPointValue = GeographyFactory.MultiPoint().Point(10.2' 11.2).Point(11.9' 11.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPointValue = GeographyFactory.MultiPoint().Point(10.2' 11.2).Point(11.9' 11.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiLineStringValue = GeographyFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiLineStringValue = GeographyFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiLineStringValue = GeographyFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiLineStringValue = GeographyFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiLineStringValue = GeographyFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiLineStringValue = GeographyFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiLineStringValue = GeographyFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiLineStringValue = GeographyFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPolygonValue = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPolygonValue = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPolygonValue = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPolygonValue = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPolygonValue = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPolygonValue = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPolygonValue = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPolygonValue = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPolygonValue = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPolygonValue = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPolygonValue = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeographyMultiPolygonValue = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryValue = GeometryFactory.Point(32.0' -10.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryValue = GeometryFactory.Point(32.0' -10.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPointValue = GeometryFactory.Point(33.1' -11.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPointValue = GeometryFactory.Point(33.1' -11.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryLineStringValue = GeometryFactory.LineString(33.1' -11.5).LineTo(35.97' -11).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryLineStringValue = GeometryFactory.LineString(33.1' -11.5).LineTo(35.97' -11).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryLineStringValue = GeometryFactory.LineString(33.1' -11.5).LineTo(35.97' -11).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryLineStringValue = GeometryFactory.LineString(33.1' -11.5).LineTo(35.97' -11).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPolygonValue = GeometryFactory.Polygon().Ring(33.1' -13.6).LineTo(35.97' -11.15).LineTo(11.45' 87.75).Ring(35.97' -11).LineTo(36.97' -11.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPolygonValue = GeometryFactory.Polygon().Ring(33.1' -13.6).LineTo(35.97' -11.15).LineTo(11.45' 87.75).Ring(35.97' -11).LineTo(36.97' -11.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPolygonValue = GeometryFactory.Polygon().Ring(33.1' -13.6).LineTo(35.97' -11.15).LineTo(11.45' 87.75).Ring(35.97' -11).LineTo(36.97' -11.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPolygonValue = GeometryFactory.Polygon().Ring(33.1' -13.6).LineTo(35.97' -11.15).LineTo(11.45' 87.75).Ring(35.97' -11).LineTo(36.97' -11.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPolygonValue = GeometryFactory.Polygon().Ring(33.1' -13.6).LineTo(35.97' -11.15).LineTo(11.45' 87.75).Ring(35.97' -11).LineTo(36.97' -11.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPolygonValue = GeometryFactory.Polygon().Ring(33.1' -13.6).LineTo(35.97' -11.15).LineTo(11.45' 87.75).Ring(35.97' -11).LineTo(36.97' -11.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPolygonValue = GeometryFactory.Polygon().Ring(33.1' -13.6).LineTo(35.97' -11.15).LineTo(11.45' 87.75).Ring(35.97' -11).LineTo(36.97' -11.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPolygonValue = GeometryFactory.Polygon().Ring(33.1' -13.6).LineTo(35.97' -11.15).LineTo(11.45' 87.75).Ring(35.97' -11).LineTo(36.97' -11.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPolygonValue = GeometryFactory.Polygon().Ring(33.1' -13.6).LineTo(35.97' -11.15).LineTo(11.45' 87.75).Ring(35.97' -11).LineTo(36.97' -11.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPolygonValue = GeometryFactory.Polygon().Ring(33.1' -13.6).LineTo(35.97' -11.15).LineTo(11.45' 87.75).Ring(35.97' -11).LineTo(36.97' -11.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPolygonValue = GeometryFactory.Polygon().Ring(33.1' -13.6).LineTo(35.97' -11.15).LineTo(11.45' 87.75).Ring(35.97' -11).LineTo(36.97' -11.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryPolygonValue = GeometryFactory.Polygon().Ring(33.1' -13.6).LineTo(35.97' -11.15).LineTo(11.45' 87.75).Ring(35.97' -11).LineTo(36.97' -11.15).LineTo(45.23' 23.18).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryCollectionValue = GeometryFactory.Collection().Point(-19.99' -12.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryCollectionValue = GeometryFactory.Collection().Point(-19.99' -12.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPointValue = GeometryFactory.MultiPoint().Point(10.2' 11.2).Point(11.9' 11.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPointValue = GeometryFactory.MultiPoint().Point(10.2' 11.2).Point(11.9' 11.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPointValue = GeometryFactory.MultiPoint().Point(10.2' 11.2).Point(11.9' 11.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPointValue = GeometryFactory.MultiPoint().Point(10.2' 11.2).Point(11.9' 11.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiLineStringValue = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiLineStringValue = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiLineStringValue = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiLineStringValue = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiLineStringValue = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiLineStringValue = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiLineStringValue = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiLineStringValue = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPolygonValue = GeometryFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPolygonValue = GeometryFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPolygonValue = GeometryFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPolygonValue = GeometryFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPolygonValue = GeometryFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPolygonValue = GeometryFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPolygonValue = GeometryFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPolygonValue = GeometryFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPolygonValue = GeometryFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPolygonValue = GeometryFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPolygonValue = GeometryFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,ObjectModelUtils,The following statement contains a magic number: GeometryMultiPolygonValue = GeometryFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The following statement contains a magic number: return new ODataProperty[]              {                  new ODataProperty() { Name = "Null"' Value = null }'                  new ODataProperty() { Name = "Double"' Value = (double)1 }'                  new ODataProperty() { Name = "Binary"' Value = new byte[] { 0' 1' 0' 1} }'                  new ODataProperty() { Name = "Single"' Value = (Single)1 }'                  new ODataProperty() { Name = "Boolean"' Value = true }'                  new ODataProperty() { Name = "Byte"' Value = (byte)1 }'                  new ODataProperty() { Name = "DateTimeOffset1"' Value = DateTimeOffset.Parse("2010-10-10T10:10:10Z") }'                  new ODataProperty() { Name = "DateTimeOffset2"' Value = DateTimeOffset.Parse("2010-10-10T10:10:10+01:00") }'                  new ODataProperty() { Name = "DateTimeOffset3"' Value = DateTimeOffset.Parse("2010-10-10T10:10:10-08:00") }'                  new ODataProperty() { Name = "Decimal"' Value = (decimal)1 }'                  new ODataProperty() { Name = "Guid"' Value = new Guid("11111111-2222-3333-4444-555555555555") }'                  new ODataProperty() { Name = "SByte"' Value = (sbyte)1 }'                  new ODataProperty() { Name = "Int16"' Value = (Int16)1 }'                  new ODataProperty() { Name = "Int32"' Value = (Int32)1 }'                  new ODataProperty() { Name = "Int64"' Value = (Int64)1 }'                  new ODataProperty() { Name = "String"' Value = "1" }'                  new ODataProperty() { Name = "Duration"' Value = TimeSpan.FromMinutes(12.34) }'                  new ODataProperty() { Name = "Geography"' Value = GeographyValue }'                  new ODataProperty() { Name = "GeographyPoint"' Value =  GeographyPointValue}'                  new ODataProperty() { Name = "GeographyLineString"' Value = GeographyLineStringValue }'                  new ODataProperty() { Name = "GeographyPolygon"' Value = GeographyPolygonValue }'                  new ODataProperty() { Name = "GeographyCollection"' Value = GeographyCollectionValue }'                  new ODataProperty() { Name = "GeographyMultiPoint"' Value = GeographyMultiPointValue }'                  new ODataProperty() { Name = "GeographyMultiLineString"' Value = GeographyMultiLineStringValue }'                  new ODataProperty() { Name = "GeographyMultiPolygon"' Value = GeographyMultiPolygonValue }'                    new ODataProperty() { Name = "Geometry"' Value = GeometryValue }'                  new ODataProperty() { Name = "GeometryPoint"' Value = GeometryPointValue }'                  new ODataProperty() { Name = "GeometryLineString"' Value = GeometryLineStringValue }'                  new ODataProperty() { Name = "GeometryPolygon"' Value = GeometryPolygonValue }'                  new ODataProperty() { Name = "GeometryCollection"' Value = GeometryCollectionValue }'                  new ODataProperty() { Name = "GeometryMultiPoint"' Value = GeometryMultiPointValue }'                  new ODataProperty() { Name = "GeometryMultiLineString"' Value = GeometryMultiLineStringValue }'                  new ODataProperty() { Name = "GeometryMultiPolygon"' Value = GeometryMultiPolygonValue }'                    new ODataProperty() { Name = "NullableDouble"' Value = (double?)1 }'                  new ODataProperty() { Name = "NullableSingle"' Value = (Single?)1 }'                  new ODataProperty() { Name = "NullableBoolean"' Value = (bool?)true }'                  new ODataProperty() { Name = "NullableByte"' Value = (byte?)1 }'                  new ODataProperty() { Name = "NullableDateTimeOffset1"' Value = (DateTimeOffset?)DateTimeOffset.Parse("2010-10-10T10:10:10Z") }'                  new ODataProperty() { Name = "NullableDateTimeOffset2"' Value = (DateTimeOffset?)DateTimeOffset.Parse("2010-10-10T10:10:10+01:00") }'                  new ODataProperty() { Name = "NullableDateTimeOffset3"' Value = (DateTimeOffset?)DateTimeOffset.Parse("2010-10-10T10:10:10-08:00") }'                  new ODataProperty() { Name = "NullableDecimal"' Value = (decimal?)1 }'                  new ODataProperty() { Name = "NullableGuid"' Value = (Guid?)new Guid("11111111-2222-3333-4444-555555555555") }'                  new ODataProperty() { Name = "NullableSByte"' Value = (sbyte?)1 }'                  new ODataProperty() { Name = "NullableInt16"' Value = (Int16?)1 }'                  new ODataProperty() { Name = "NullableInt32"' Value = (Int32?)1 }'                  new ODataProperty() { Name = "NullableInt64"' Value = (Int64?)1 }'                  new ODataProperty() { Name = "NullableString"' Value = "1" }'                  new ODataProperty() { Name = "NullableDuration"' Value = (TimeSpan?)TimeSpan.FromMinutes(12.34) }'                    new ODataProperty() { Name = "NullDouble"' Value = null }'                  new ODataProperty() { Name = "NullBinary"' Value = null }'                  new ODataProperty() { Name = "NullSingle"' Value = null }'                  new ODataProperty() { Name = "NullBoolean"' Value = null }'                  new ODataProperty() { Name = "NullByte"' Value = null }'                  new ODataProperty() { Name = "NullDateTimeOffset1"' Value = null }'                  new ODataProperty() { Name = "NullDateTimeOffset2"' Value = null }'                  new ODataProperty() { Name = "NullDateTimeOffset3"' Value = null }'                  new ODataProperty() { Name = "NullDecimal"' Value = null }'                  new ODataProperty() { Name = "NullGuid"' Value = null }'                  new ODataProperty() { Name = "NullSByte"' Value = null }'                  new ODataProperty() { Name = "NullInt16"' Value = null }'                  new ODataProperty() { Name = "NullInt32"' Value = null }'                  new ODataProperty() { Name = "NullInt64"' Value = null }'                  new ODataProperty() { Name = "NullString"' Value = null }'                  new ODataProperty() { Name = "NullDuration"' Value = null }'                  new ODataProperty() { Name = "NullGeography"' Value = null }'                  new ODataProperty() { Name = "NullGeographyPoint"' Value = null }'                  new ODataProperty() { Name = "NullGeographyLineString"' Value = null }'                  new ODataProperty() { Name = "NullGeographyPolygon"' Value = null }'                  new ODataProperty() { Name = "NullGeographyMultiPoint"' Value = null }'                  new ODataProperty() { Name = "NullGeographyMultiLineString"' Value = null }'                  new ODataProperty() { Name = "NullGeographyMultiPolygon"' Value = null }'                  new ODataProperty() { Name = "NullGeographyCollection"' Value = null }'                  new ODataProperty() { Name = "NullGeometry"' Value = null }'                  new ODataProperty() { Name = "NullGeometryPoint"' Value = null }'                  new ODataProperty() { Name = "NullGeometryLineString"' Value = null }'                  new ODataProperty() { Name = "NullGeometryPolygon"' Value = null }'                  new ODataProperty() { Name = "NullGeometryMultiPoint"' Value = null }'                  new ODataProperty() { Name = "NullGeometryMultiLineString"' Value = null }'                  new ODataProperty() { Name = "NullGeometryMultiPolygon"' Value = null }'                  new ODataProperty() { Name = "NullGeometryCollection"' Value = null }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultPrimitiveProperties,The following statement contains a magic number: return new ODataProperty[]              {                  new ODataProperty() { Name = "Null"' Value = null }'                  new ODataProperty() { Name = "Double"' Value = (double)1 }'                  new ODataProperty() { Name = "Binary"' Value = new byte[] { 0' 1' 0' 1} }'                  new ODataProperty() { Name = "Single"' Value = (Single)1 }'                  new ODataProperty() { Name = "Boolean"' Value = true }'                  new ODataProperty() { Name = "Byte"' Value = (byte)1 }'                  new ODataProperty() { Name = "DateTimeOffset1"' Value = DateTimeOffset.Parse("2010-10-10T10:10:10Z") }'                  new ODataProperty() { Name = "DateTimeOffset2"' Value = DateTimeOffset.Parse("2010-10-10T10:10:10+01:00") }'                  new ODataProperty() { Name = "DateTimeOffset3"' Value = DateTimeOffset.Parse("2010-10-10T10:10:10-08:00") }'                  new ODataProperty() { Name = "Decimal"' Value = (decimal)1 }'                  new ODataProperty() { Name = "Guid"' Value = new Guid("11111111-2222-3333-4444-555555555555") }'                  new ODataProperty() { Name = "SByte"' Value = (sbyte)1 }'                  new ODataProperty() { Name = "Int16"' Value = (Int16)1 }'                  new ODataProperty() { Name = "Int32"' Value = (Int32)1 }'                  new ODataProperty() { Name = "Int64"' Value = (Int64)1 }'                  new ODataProperty() { Name = "String"' Value = "1" }'                  new ODataProperty() { Name = "Duration"' Value = TimeSpan.FromMinutes(12.34) }'                  new ODataProperty() { Name = "Geography"' Value = GeographyValue }'                  new ODataProperty() { Name = "GeographyPoint"' Value =  GeographyPointValue}'                  new ODataProperty() { Name = "GeographyLineString"' Value = GeographyLineStringValue }'                  new ODataProperty() { Name = "GeographyPolygon"' Value = GeographyPolygonValue }'                  new ODataProperty() { Name = "GeographyCollection"' Value = GeographyCollectionValue }'                  new ODataProperty() { Name = "GeographyMultiPoint"' Value = GeographyMultiPointValue }'                  new ODataProperty() { Name = "GeographyMultiLineString"' Value = GeographyMultiLineStringValue }'                  new ODataProperty() { Name = "GeographyMultiPolygon"' Value = GeographyMultiPolygonValue }'                    new ODataProperty() { Name = "Geometry"' Value = GeometryValue }'                  new ODataProperty() { Name = "GeometryPoint"' Value = GeometryPointValue }'                  new ODataProperty() { Name = "GeometryLineString"' Value = GeometryLineStringValue }'                  new ODataProperty() { Name = "GeometryPolygon"' Value = GeometryPolygonValue }'                  new ODataProperty() { Name = "GeometryCollection"' Value = GeometryCollectionValue }'                  new ODataProperty() { Name = "GeometryMultiPoint"' Value = GeometryMultiPointValue }'                  new ODataProperty() { Name = "GeometryMultiLineString"' Value = GeometryMultiLineStringValue }'                  new ODataProperty() { Name = "GeometryMultiPolygon"' Value = GeometryMultiPolygonValue }'                    new ODataProperty() { Name = "NullableDouble"' Value = (double?)1 }'                  new ODataProperty() { Name = "NullableSingle"' Value = (Single?)1 }'                  new ODataProperty() { Name = "NullableBoolean"' Value = (bool?)true }'                  new ODataProperty() { Name = "NullableByte"' Value = (byte?)1 }'                  new ODataProperty() { Name = "NullableDateTimeOffset1"' Value = (DateTimeOffset?)DateTimeOffset.Parse("2010-10-10T10:10:10Z") }'                  new ODataProperty() { Name = "NullableDateTimeOffset2"' Value = (DateTimeOffset?)DateTimeOffset.Parse("2010-10-10T10:10:10+01:00") }'                  new ODataProperty() { Name = "NullableDateTimeOffset3"' Value = (DateTimeOffset?)DateTimeOffset.Parse("2010-10-10T10:10:10-08:00") }'                  new ODataProperty() { Name = "NullableDecimal"' Value = (decimal?)1 }'                  new ODataProperty() { Name = "NullableGuid"' Value = (Guid?)new Guid("11111111-2222-3333-4444-555555555555") }'                  new ODataProperty() { Name = "NullableSByte"' Value = (sbyte?)1 }'                  new ODataProperty() { Name = "NullableInt16"' Value = (Int16?)1 }'                  new ODataProperty() { Name = "NullableInt32"' Value = (Int32?)1 }'                  new ODataProperty() { Name = "NullableInt64"' Value = (Int64?)1 }'                  new ODataProperty() { Name = "NullableString"' Value = "1" }'                  new ODataProperty() { Name = "NullableDuration"' Value = (TimeSpan?)TimeSpan.FromMinutes(12.34) }'                    new ODataProperty() { Name = "NullDouble"' Value = null }'                  new ODataProperty() { Name = "NullBinary"' Value = null }'                  new ODataProperty() { Name = "NullSingle"' Value = null }'                  new ODataProperty() { Name = "NullBoolean"' Value = null }'                  new ODataProperty() { Name = "NullByte"' Value = null }'                  new ODataProperty() { Name = "NullDateTimeOffset1"' Value = null }'                  new ODataProperty() { Name = "NullDateTimeOffset2"' Value = null }'                  new ODataProperty() { Name = "NullDateTimeOffset3"' Value = null }'                  new ODataProperty() { Name = "NullDecimal"' Value = null }'                  new ODataProperty() { Name = "NullGuid"' Value = null }'                  new ODataProperty() { Name = "NullSByte"' Value = null }'                  new ODataProperty() { Name = "NullInt16"' Value = null }'                  new ODataProperty() { Name = "NullInt32"' Value = null }'                  new ODataProperty() { Name = "NullInt64"' Value = null }'                  new ODataProperty() { Name = "NullString"' Value = null }'                  new ODataProperty() { Name = "NullDuration"' Value = null }'                  new ODataProperty() { Name = "NullGeography"' Value = null }'                  new ODataProperty() { Name = "NullGeographyPoint"' Value = null }'                  new ODataProperty() { Name = "NullGeographyLineString"' Value = null }'                  new ODataProperty() { Name = "NullGeographyPolygon"' Value = null }'                  new ODataProperty() { Name = "NullGeographyMultiPoint"' Value = null }'                  new ODataProperty() { Name = "NullGeographyMultiLineString"' Value = null }'                  new ODataProperty() { Name = "NullGeographyMultiPolygon"' Value = null }'                  new ODataProperty() { Name = "NullGeographyCollection"' Value = null }'                  new ODataProperty() { Name = "NullGeometry"' Value = null }'                  new ODataProperty() { Name = "NullGeometryPoint"' Value = null }'                  new ODataProperty() { Name = "NullGeometryLineString"' Value = null }'                  new ODataProperty() { Name = "NullGeometryPolygon"' Value = null }'                  new ODataProperty() { Name = "NullGeometryMultiPoint"' Value = null }'                  new ODataProperty() { Name = "NullGeometryMultiLineString"' Value = null }'                  new ODataProperty() { Name = "NullGeometryMultiPolygon"' Value = null }'                  new ODataProperty() { Name = "NullGeometryCollection"' Value = null }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultComplexProperties,The following statement contains a magic number: return new ODataItem[][]              {                  new ODataItem[]                  {                      new ODataResource()                       {                          TypeName = "My.AddressType"'                          Properties = new []                          {                              new ODataProperty() { Name = "Street"' Value = "One Redmond Way" }'                              new ODataProperty() { Name = "City"' Value = " Redmond" }'                          }                      }                  }'                    new ODataItem[]                  {                      new ODataResource()                      {                          TypeName = "My.NestedAddressType"'                          Properties = new []                          {                              new ODataProperty() { Name = "City"' Value = "Redmond " }                          }                      }'                      new ODataNestedResourceInfo()                      {                          Name = "Street"'                          IsCollection = false                      }'                      new ODataResource                      {                          TypeName = "My.StreetType"'                          Properties = new []                          {                              new ODataProperty { Name = "StreetName"' Value = "One Redmond Way" }'                              new ODataProperty { Name = "Number"' Value = 1234 }'                          }                      }                  }              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The following statement contains a magic number: return new ODataProperty[]              {                  new ODataProperty                  {                      Name = "EmptyCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                      }                    }'                  new ODataProperty                  {                      Name = "PrimitiveCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }                      }                  }'                  new ODataProperty                  {                      Name = "IntCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2 }                      }                  }'                  new ODataProperty                  {                      Name = "StringCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                          Items = new string[] { "One"' "Two"' "Three" }                      }                  }'                  new ODataProperty                  {                      Name = "GeographyCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Geography")'                          Items = new object[]                          {                              ObjectModelUtils.GeographyCollectionValue'                              ObjectModelUtils.GeographyLineStringValue'                              ObjectModelUtils.GeographyMultiLineStringValue'                              ObjectModelUtils.GeographyMultiPointValue'                              ObjectModelUtils.GeographyMultiPolygonValue'                              ObjectModelUtils.GeographyPointValue'                              ObjectModelUtils.GeographyPolygonValue'                              ObjectModelUtils.GeographyValue                          }                      }                  }'                  //new ODataProperty                  //{                  //    Name = "ComplexCollection"'                  //    Value = new ODataCollectionValue()                  //    {                  //        TypeName = EntityModelUtils.GetCollectionTypeName("My.AddressType")'                  //        Items = new []                  //        {                  //            new ODataComplexValue()                  //            {                  //                TypeName = "My.AddressType"'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "One Redmond Way" }'                  //                    new ODataProperty() { Name = "City"' Value = " Redmond" }'                  //                }                  //            }'                  //            new ODataComplexValue()                  //            {                  //                TypeName = null'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "Am Euro Platz 3" }'                  //                    new ODataProperty() { Name = "City"' Value = "Vienna " }'                  //                }                  //            }                  //        }                  //    }                  //}'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The following statement contains a magic number: return new ODataProperty[]              {                  new ODataProperty                  {                      Name = "EmptyCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                      }                    }'                  new ODataProperty                  {                      Name = "PrimitiveCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }                      }                  }'                  new ODataProperty                  {                      Name = "IntCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2 }                      }                  }'                  new ODataProperty                  {                      Name = "StringCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                          Items = new string[] { "One"' "Two"' "Three" }                      }                  }'                  new ODataProperty                  {                      Name = "GeographyCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Geography")'                          Items = new object[]                          {                              ObjectModelUtils.GeographyCollectionValue'                              ObjectModelUtils.GeographyLineStringValue'                              ObjectModelUtils.GeographyMultiLineStringValue'                              ObjectModelUtils.GeographyMultiPointValue'                              ObjectModelUtils.GeographyMultiPolygonValue'                              ObjectModelUtils.GeographyPointValue'                              ObjectModelUtils.GeographyPolygonValue'                              ObjectModelUtils.GeographyValue                          }                      }                  }'                  //new ODataProperty                  //{                  //    Name = "ComplexCollection"'                  //    Value = new ODataCollectionValue()                  //    {                  //        TypeName = EntityModelUtils.GetCollectionTypeName("My.AddressType")'                  //        Items = new []                  //        {                  //            new ODataComplexValue()                  //            {                  //                TypeName = "My.AddressType"'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "One Redmond Way" }'                  //                    new ODataProperty() { Name = "City"' Value = " Redmond" }'                  //                }                  //            }'                  //            new ODataComplexValue()                  //            {                  //                TypeName = null'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "Am Euro Platz 3" }'                  //                    new ODataProperty() { Name = "City"' Value = "Vienna " }'                  //                }                  //            }                  //        }                  //    }                  //}'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The following statement contains a magic number: return new ODataProperty[]              {                  new ODataProperty                  {                      Name = "EmptyCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                      }                    }'                  new ODataProperty                  {                      Name = "PrimitiveCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }                      }                  }'                  new ODataProperty                  {                      Name = "IntCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2 }                      }                  }'                  new ODataProperty                  {                      Name = "StringCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                          Items = new string[] { "One"' "Two"' "Three" }                      }                  }'                  new ODataProperty                  {                      Name = "GeographyCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Geography")'                          Items = new object[]                          {                              ObjectModelUtils.GeographyCollectionValue'                              ObjectModelUtils.GeographyLineStringValue'                              ObjectModelUtils.GeographyMultiLineStringValue'                              ObjectModelUtils.GeographyMultiPointValue'                              ObjectModelUtils.GeographyMultiPolygonValue'                              ObjectModelUtils.GeographyPointValue'                              ObjectModelUtils.GeographyPolygonValue'                              ObjectModelUtils.GeographyValue                          }                      }                  }'                  //new ODataProperty                  //{                  //    Name = "ComplexCollection"'                  //    Value = new ODataCollectionValue()                  //    {                  //        TypeName = EntityModelUtils.GetCollectionTypeName("My.AddressType")'                  //        Items = new []                  //        {                  //            new ODataComplexValue()                  //            {                  //                TypeName = "My.AddressType"'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "One Redmond Way" }'                  //                    new ODataProperty() { Name = "City"' Value = " Redmond" }'                  //                }                  //            }'                  //            new ODataComplexValue()                  //            {                  //                TypeName = null'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "Am Euro Platz 3" }'                  //                    new ODataProperty() { Name = "City"' Value = "Vienna " }'                  //                }                  //            }                  //        }                  //    }                  //}'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The following statement contains a magic number: return new ODataProperty[]              {                  new ODataProperty                  {                      Name = "EmptyCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                      }                    }'                  new ODataProperty                  {                      Name = "PrimitiveCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }                      }                  }'                  new ODataProperty                  {                      Name = "IntCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2 }                      }                  }'                  new ODataProperty                  {                      Name = "StringCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                          Items = new string[] { "One"' "Two"' "Three" }                      }                  }'                  new ODataProperty                  {                      Name = "GeographyCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Geography")'                          Items = new object[]                          {                              ObjectModelUtils.GeographyCollectionValue'                              ObjectModelUtils.GeographyLineStringValue'                              ObjectModelUtils.GeographyMultiLineStringValue'                              ObjectModelUtils.GeographyMultiPointValue'                              ObjectModelUtils.GeographyMultiPolygonValue'                              ObjectModelUtils.GeographyPointValue'                              ObjectModelUtils.GeographyPolygonValue'                              ObjectModelUtils.GeographyValue                          }                      }                  }'                  //new ODataProperty                  //{                  //    Name = "ComplexCollection"'                  //    Value = new ODataCollectionValue()                  //    {                  //        TypeName = EntityModelUtils.GetCollectionTypeName("My.AddressType")'                  //        Items = new []                  //        {                  //            new ODataComplexValue()                  //            {                  //                TypeName = "My.AddressType"'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "One Redmond Way" }'                  //                    new ODataProperty() { Name = "City"' Value = " Redmond" }'                  //                }                  //            }'                  //            new ODataComplexValue()                  //            {                  //                TypeName = null'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "Am Euro Platz 3" }'                  //                    new ODataProperty() { Name = "City"' Value = "Vienna " }'                  //                }                  //            }                  //        }                  //    }                  //}'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The following statement contains a magic number: return new ODataProperty[]              {                  new ODataProperty                  {                      Name = "EmptyCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                      }                    }'                  new ODataProperty                  {                      Name = "PrimitiveCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }                      }                  }'                  new ODataProperty                  {                      Name = "IntCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2 }                      }                  }'                  new ODataProperty                  {                      Name = "StringCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                          Items = new string[] { "One"' "Two"' "Three" }                      }                  }'                  new ODataProperty                  {                      Name = "GeographyCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Geography")'                          Items = new object[]                          {                              ObjectModelUtils.GeographyCollectionValue'                              ObjectModelUtils.GeographyLineStringValue'                              ObjectModelUtils.GeographyMultiLineStringValue'                              ObjectModelUtils.GeographyMultiPointValue'                              ObjectModelUtils.GeographyMultiPolygonValue'                              ObjectModelUtils.GeographyPointValue'                              ObjectModelUtils.GeographyPolygonValue'                              ObjectModelUtils.GeographyValue                          }                      }                  }'                  //new ODataProperty                  //{                  //    Name = "ComplexCollection"'                  //    Value = new ODataCollectionValue()                  //    {                  //        TypeName = EntityModelUtils.GetCollectionTypeName("My.AddressType")'                  //        Items = new []                  //        {                  //            new ODataComplexValue()                  //            {                  //                TypeName = "My.AddressType"'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "One Redmond Way" }'                  //                    new ODataProperty() { Name = "City"' Value = " Redmond" }'                  //                }                  //            }'                  //            new ODataComplexValue()                  //            {                  //                TypeName = null'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "Am Euro Platz 3" }'                  //                    new ODataProperty() { Name = "City"' Value = "Vienna " }'                  //                }                  //            }                  //        }                  //    }                  //}'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The following statement contains a magic number: return new ODataProperty[]              {                  new ODataProperty                  {                      Name = "EmptyCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                      }                    }'                  new ODataProperty                  {                      Name = "PrimitiveCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }                      }                  }'                  new ODataProperty                  {                      Name = "IntCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2 }                      }                  }'                  new ODataProperty                  {                      Name = "StringCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                          Items = new string[] { "One"' "Two"' "Three" }                      }                  }'                  new ODataProperty                  {                      Name = "GeographyCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Geography")'                          Items = new object[]                          {                              ObjectModelUtils.GeographyCollectionValue'                              ObjectModelUtils.GeographyLineStringValue'                              ObjectModelUtils.GeographyMultiLineStringValue'                              ObjectModelUtils.GeographyMultiPointValue'                              ObjectModelUtils.GeographyMultiPolygonValue'                              ObjectModelUtils.GeographyPointValue'                              ObjectModelUtils.GeographyPolygonValue'                              ObjectModelUtils.GeographyValue                          }                      }                  }'                  //new ODataProperty                  //{                  //    Name = "ComplexCollection"'                  //    Value = new ODataCollectionValue()                  //    {                  //        TypeName = EntityModelUtils.GetCollectionTypeName("My.AddressType")'                  //        Items = new []                  //        {                  //            new ODataComplexValue()                  //            {                  //                TypeName = "My.AddressType"'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "One Redmond Way" }'                  //                    new ODataProperty() { Name = "City"' Value = " Redmond" }'                  //                }                  //            }'                  //            new ODataComplexValue()                  //            {                  //                TypeName = null'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "Am Euro Platz 3" }'                  //                    new ODataProperty() { Name = "City"' Value = "Vienna " }'                  //                }                  //            }                  //        }                  //    }                  //}'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The following statement contains a magic number: return new ODataProperty[]              {                  new ODataProperty                  {                      Name = "EmptyCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                      }                    }'                  new ODataProperty                  {                      Name = "PrimitiveCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }                      }                  }'                  new ODataProperty                  {                      Name = "IntCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2 }                      }                  }'                  new ODataProperty                  {                      Name = "StringCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                          Items = new string[] { "One"' "Two"' "Three" }                      }                  }'                  new ODataProperty                  {                      Name = "GeographyCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Geography")'                          Items = new object[]                          {                              ObjectModelUtils.GeographyCollectionValue'                              ObjectModelUtils.GeographyLineStringValue'                              ObjectModelUtils.GeographyMultiLineStringValue'                              ObjectModelUtils.GeographyMultiPointValue'                              ObjectModelUtils.GeographyMultiPolygonValue'                              ObjectModelUtils.GeographyPointValue'                              ObjectModelUtils.GeographyPolygonValue'                              ObjectModelUtils.GeographyValue                          }                      }                  }'                  //new ODataProperty                  //{                  //    Name = "ComplexCollection"'                  //    Value = new ODataCollectionValue()                  //    {                  //        TypeName = EntityModelUtils.GetCollectionTypeName("My.AddressType")'                  //        Items = new []                  //        {                  //            new ODataComplexValue()                  //            {                  //                TypeName = "My.AddressType"'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "One Redmond Way" }'                  //                    new ODataProperty() { Name = "City"' Value = " Redmond" }'                  //                }                  //            }'                  //            new ODataComplexValue()                  //            {                  //                TypeName = null'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "Am Euro Platz 3" }'                  //                    new ODataProperty() { Name = "City"' Value = "Vienna " }'                  //                }                  //            }                  //        }                  //    }                  //}'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The following statement contains a magic number: return new ODataProperty[]              {                  new ODataProperty                  {                      Name = "EmptyCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                      }                    }'                  new ODataProperty                  {                      Name = "PrimitiveCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }                      }                  }'                  new ODataProperty                  {                      Name = "IntCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2 }                      }                  }'                  new ODataProperty                  {                      Name = "StringCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                          Items = new string[] { "One"' "Two"' "Three" }                      }                  }'                  new ODataProperty                  {                      Name = "GeographyCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Geography")'                          Items = new object[]                          {                              ObjectModelUtils.GeographyCollectionValue'                              ObjectModelUtils.GeographyLineStringValue'                              ObjectModelUtils.GeographyMultiLineStringValue'                              ObjectModelUtils.GeographyMultiPointValue'                              ObjectModelUtils.GeographyMultiPolygonValue'                              ObjectModelUtils.GeographyPointValue'                              ObjectModelUtils.GeographyPolygonValue'                              ObjectModelUtils.GeographyValue                          }                      }                  }'                  //new ODataProperty                  //{                  //    Name = "ComplexCollection"'                  //    Value = new ODataCollectionValue()                  //    {                  //        TypeName = EntityModelUtils.GetCollectionTypeName("My.AddressType")'                  //        Items = new []                  //        {                  //            new ODataComplexValue()                  //            {                  //                TypeName = "My.AddressType"'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "One Redmond Way" }'                  //                    new ODataProperty() { Name = "City"' Value = " Redmond" }'                  //                }                  //            }'                  //            new ODataComplexValue()                  //            {                  //                TypeName = null'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "Am Euro Platz 3" }'                  //                    new ODataProperty() { Name = "City"' Value = "Vienna " }'                  //                }                  //            }                  //        }                  //    }                  //}'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultCollectionProperties,The following statement contains a magic number: return new ODataProperty[]              {                  new ODataProperty                  {                      Name = "EmptyCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                      }                    }'                  new ODataProperty                  {                      Name = "PrimitiveCollection"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 }                      }                  }'                  new ODataProperty                  {                      Name = "IntCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Int32")'                          Items = new object[] { 0' 1' 2 }                      }                  }'                  new ODataProperty                  {                      Name = "StringCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                          Items = new string[] { "One"' "Two"' "Three" }                      }                  }'                  new ODataProperty                  {                      Name = "GeographyCollectionNoTypeName"'                      Value = new ODataCollectionValue()                      {                          TypeName = EntityModelUtils.GetCollectionTypeName("Edm.Geography")'                          Items = new object[]                          {                              ObjectModelUtils.GeographyCollectionValue'                              ObjectModelUtils.GeographyLineStringValue'                              ObjectModelUtils.GeographyMultiLineStringValue'                              ObjectModelUtils.GeographyMultiPointValue'                              ObjectModelUtils.GeographyMultiPolygonValue'                              ObjectModelUtils.GeographyPointValue'                              ObjectModelUtils.GeographyPolygonValue'                              ObjectModelUtils.GeographyValue                          }                      }                  }'                  //new ODataProperty                  //{                  //    Name = "ComplexCollection"'                  //    Value = new ODataCollectionValue()                  //    {                  //        TypeName = EntityModelUtils.GetCollectionTypeName("My.AddressType")'                  //        Items = new []                  //        {                  //            new ODataComplexValue()                  //            {                  //                TypeName = "My.AddressType"'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "One Redmond Way" }'                  //                    new ODataProperty() { Name = "City"' Value = " Redmond" }'                  //                }                  //            }'                  //            new ODataComplexValue()                  //            {                  //                TypeName = null'                  //                Properties = new []                  //                {                  //                    new ODataProperty() { Name = "Street"' Value = "Am Euro Platz 3" }'                  //                    new ODataProperty() { Name = "City"' Value = "Vienna " }'                  //                }                  //            }                  //        }                  //    }                  //}'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Common,ObjectModelUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\ObjectModelUtils.cs,CreateDefaultParameter,The following statement contains a magic number: var nestedStreet = new ODataResource()              {                  TypeName = "My.StreetType"'                  Properties = new[]                  {                      new ODataProperty { Name = "StreetName"' Value = "One Redmond Way" }'                      new ODataProperty { Name = "Number"' Value = 1234 }'                  }              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = (Decimal)123.456'                      ExpectedValue = "123.456"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = (Decimal)123'                      ExpectedValue = "123"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = (Double)2147483648.5'                      ExpectedValue = "2147483648.5"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = (Double)(-12)'                      ExpectedValue = "-12.0"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = (Single)42.42'                      ExpectedValue = "42.42"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = (Byte)33'                      ExpectedValue = "33"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = (SByte)(-22)'                      ExpectedValue = "-22"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = (Int16)123'                      ExpectedValue = "123"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = (Int32)(-42)'                      ExpectedValue = "-42"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new byte[] { 0' 255' 16 }'                      ExpectedValue = "binary'AP8Q'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new byte[] { 0' 255' 16 }'                      ExpectedValue = "binary'AP8Q'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: otherTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new DateTimeOffset(new DateTime(2011' 2' 4)' new TimeSpan(-8' 0' 0))'                      ExpectedValue = "2011-02-04T00:00:00-08:00"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: otherTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new DateTimeOffset(new DateTime(2011' 2' 4)' new TimeSpan(-8' 0' 0))'                      ExpectedValue = "2011-02-04T00:00:00-08:00"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: otherTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new DateTimeOffset(new DateTime(2011' 2' 4)' new TimeSpan(-8' 0' 0))'                      ExpectedValue = "2011-02-04T00:00:00-08:00"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: otherTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new DateTimeOffset(new DateTime(2011' 2' 4)' new TimeSpan(-8' 0' 0))'                      ExpectedValue = "2011-02-04T00:00:00-08:00"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: otherTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new TimeSpan(2' 12' 4' 5' 55)'                      ExpectedValue = "duration'P2DT12H4M5.055S'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: otherTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new TimeSpan(2' 12' 4' 5' 55)'                      ExpectedValue = "duration'P2DT12H4M5.055S'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: otherTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new TimeSpan(2' 12' 4' 5' 55)'                      ExpectedValue = "duration'P2DT12H4M5.055S'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: otherTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new TimeSpan(2' 12' 4' 5' 55)'                      ExpectedValue = "duration'P2DT12H4M5.055S'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: otherTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new TimeSpan(2' 12' 4' 5' 55)'                      ExpectedValue = "duration'P2DT12H4M5.055S'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Point(32.5' -100.3).Build()'                      ExpectedValue = "geography'SRID=4326;POINT (-100.3 32.5)'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Point(32.5' -100.3).Build()'                      ExpectedValue = "geography'SRID=4326;POINT (-100.3 32.5)'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.LineString(1.5' 1.6).LineTo(2.1' 2.5).Build()'                      ExpectedValue = "geography'SRID=4326;LINESTRING (1.6 1.5' 2.5 2.1)'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.LineString(1.5' 1.6).LineTo(2.1' 2.5).Build()'                      ExpectedValue = "geography'SRID=4326;LINESTRING (1.6 1.5' 2.5 2.1)'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.LineString(1.5' 1.6).LineTo(2.1' 2.5).Build()'                      ExpectedValue = "geography'SRID=4326;LINESTRING (1.6 1.5' 2.5 2.1)'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.LineString(1.5' 1.6).LineTo(2.1' 2.5).Build()'                      ExpectedValue = "geography'SRID=4326;LINESTRING (1.6 1.5' 2.5 2.1)'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()'                      ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()'                      ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()'                      ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()'                      ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()'                      ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()'                      ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()'                      ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()'                      ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()'                      ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()'                      ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()'                      ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Polygon().Ring(33.1' -110.0).LineTo(35.97' -110.15).LineTo(11.45' 87.75).Ring(35.97' -110).LineTo(36.97' -110.15).LineTo(45.23' 23.18).Build()'                      ExpectedValue = "geography'SRID=4326;POLYGON ((-110 33.1' -110.15 35.97' 87.75 11.45' -110 33.1)' (-110 35.97' -110.15 36.97' 23.18 45.23' -110 35.97))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeometryFactory.Collection().Point(-19.99' -12.0).Build()'                      ExpectedValue = "geometry'SRID=0;GEOMETRYCOLLECTION (POINT (-19.99 -12))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeometryFactory.Collection().Point(-19.99' -12.0).Build()'                      ExpectedValue = "geometry'SRID=0;GEOMETRYCOLLECTION (POINT (-19.99 -12))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPoint().Point(10.2' 11.2).Point(11.9' 11.6).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOINT ((11.2 10.2)' (11.6 11.9))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPoint().Point(10.2' 11.2).Point(11.9' 11.6).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOINT ((11.2 10.2)' (11.6 11.9))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPoint().Point(10.2' 11.2).Point(11.9' 11.6).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOINT ((11.2 10.2)' (11.6 11.9))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPoint().Point(10.2' 11.2).Point(11.9' 11.6).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOINT ((11.2 10.2)' (11.6 11.9))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build()'                      ExpectedValue = "geometry'SRID=0;MULTILINESTRING ((10.2 11.2' 11.9 11.6)' (16.2 17.2' 18.9 19.6))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build()'                      ExpectedValue = "geometry'SRID=0;MULTILINESTRING ((10.2 11.2' 11.9 11.6)' (16.2 17.2' 18.9 19.6))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build()'                      ExpectedValue = "geometry'SRID=0;MULTILINESTRING ((10.2 11.2' 11.9 11.6)' (16.2 17.2' 18.9 19.6))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build()'                      ExpectedValue = "geometry'SRID=0;MULTILINESTRING ((10.2 11.2' 11.9 11.6)' (16.2 17.2' 18.9 19.6))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build()'                      ExpectedValue = "geometry'SRID=0;MULTILINESTRING ((10.2 11.2' 11.9 11.6)' (16.2 17.2' 18.9 19.6))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build()'                      ExpectedValue = "geometry'SRID=0;MULTILINESTRING ((10.2 11.2' 11.9 11.6)' (16.2 17.2' 18.9 19.6))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build()'                      ExpectedValue = "geometry'SRID=0;MULTILINESTRING ((10.2 11.2' 11.9 11.6)' (16.2 17.2' 18.9 19.6))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeometryFactory.MultiLineString().LineString(10.2' 11.2).LineTo(11.9' 11.6).LineString(16.2' 17.2).LineTo(18.9' 19.6).Build()'                      ExpectedValue = "geometry'SRID=0;MULTILINESTRING ((10.2 11.2' 11.9 11.6)' (16.2 17.2' 18.9 19.6))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralPrimitiveVersionedTypesTest,The following statement contains a magic number: spatialTestCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.MultiPolygon().Polygon().Ring(10.2' 11.2).LineTo(11.9' 11.6).LineTo(11.45' 87.75).Ring(16.2' 17.2).LineTo(18.9' 19.6).LineTo(11.45' 87.75).Build()'                      ExpectedValue = "geography'SRID=4326;MULTIPOLYGON (((11.2 10.2' 11.6 11.9' 87.75 11.45' 11.2 10.2)' (17.2 16.2' 19.6 18.9' 87.75 11.45' 17.2 16.2)))'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralCollectionTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new ODataCollectionValue() { TypeName = EntityModelUtils.GetCollectionTypeName("Edm.GeographyPoint")' Items = new[] { GeographyFactory.Point(5.0' -10.0).Build() } }'                      ExpectedValue = "[{\"type\":\"Point\"'\"coordinates\":[-10.0'5.0]'\"crs\":{\"type\":\"name\"'\"properties\":{\"name\":\"EPSG:4326\"}}}]"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralCollectionTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = new ODataCollectionValue() { TypeName = EntityModelUtils.GetCollectionTypeName("Edm.GeographyPoint")' Items = new[] { GeographyFactory.Point(5.0' -10.0).Build() } }'                      ExpectedValue = "[{\"type\":\"Point\"'\"coordinates\":[-10.0'5.0]'\"crs\":{\"type\":\"name\"'\"properties\":{\"name\":\"EPSG:4326\"}}}]"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralModelTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = (UInt16)123'                      Model = edmModel'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataUriUtils_ConvertToUriLiteralUnsupportedType"' "System.UInt16")'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralModelTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Point(32.5' -100.3).Build()'                      Model = edmModel'                      ExpectedValue = "geography'SRID=4326;POINT (-100.3 32.5)'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralModelTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = GeographyFactory.Point(32.5' -100.3).Build()'                      Model = edmModel'                      ExpectedValue = "geography'SRID=4326;POINT (-100.3 32.5)'"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ConvertToUriLiteralTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ConvertToUriLiteralModelTest,The following statement contains a magic number: testCases.Add(                  new ConvertToUriLiteralTestCase()                  {                      Parameter = (UInt32)123'                      Model = edmModel'                      ExpectedValue = "123"'                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ExpectedValueList,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ToString,The following statement contains a magic number: builder.Remove(builder.Length - 3' 3);
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,ExpectedValueList,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ConvertToUriLiteralTests.cs,ToString,The following statement contains a magic number: builder.Remove(builder.Length - 3' 3);
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,WriterPayloads,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterPayloads.cs,EntryPayloads,The following statement contains a magic number: var payloadCases = new WriterPayloadCase<ODataItem>[]               {                  // Feed with a single entry                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[] { ObjectModelUtils.CreateDefaultFeed() }.Concat(testDescriptor.PayloadItems)'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName).First();                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Feed with three (identical) entries' picking the second one                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultFeed()                       }                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              var entries = result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName);                              Debug.Assert(entries.Count() == 3' "Expected three entries in the feed.");                              return entries.ElementAt(2);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Top-level entry with an expanded link containing a single entry                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultSingletonLink()'                      }.Concat(testDescriptor.PayloadItems)'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Top-level entry with an expanded link containing a feed with a single entry                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultCollectionLink()'                          ObjectModelUtils.CreateDefaultFeed()                      }.Concat(testDescriptor.PayloadItems)'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomFeedElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Top-level entry with an expanded link containing a feed with three entries; picking the second one                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultCollectionLink()'                          ObjectModelUtils.CreateDefaultFeed()                      }                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomFeedElementName)                                  .Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName)                                  .ElementAt(2);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Top-level entry with an expanded link containing a feed with a single entry;                  // that entry has another expanded link containing a feed with the payload entry                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultCollectionLink()'                          ObjectModelUtils.CreateDefaultFeed()'                          ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultCollectionLink()'                          ObjectModelUtils.CreateDefaultFeed()'                      }.Concat(testDescriptor.PayloadItems)'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomFeedElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName)                                  .Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomFeedElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,WriterPayloads,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterPayloads.cs,EntryPayloads,The following statement contains a magic number: var payloadCases = new WriterPayloadCase<ODataItem>[]               {                  // Feed with a single entry                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[] { ObjectModelUtils.CreateDefaultFeed() }.Concat(testDescriptor.PayloadItems)'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName).First();                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Feed with three (identical) entries' picking the second one                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultFeed()                       }                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              var entries = result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName);                              Debug.Assert(entries.Count() == 3' "Expected three entries in the feed.");                              return entries.ElementAt(2);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Top-level entry with an expanded link containing a single entry                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultSingletonLink()'                      }.Concat(testDescriptor.PayloadItems)'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Top-level entry with an expanded link containing a feed with a single entry                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultCollectionLink()'                          ObjectModelUtils.CreateDefaultFeed()                      }.Concat(testDescriptor.PayloadItems)'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomFeedElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Top-level entry with an expanded link containing a feed with three entries; picking the second one                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultCollectionLink()'                          ObjectModelUtils.CreateDefaultFeed()                      }                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomFeedElementName)                                  .Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName)                                  .ElementAt(2);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Top-level entry with an expanded link containing a feed with a single entry;                  // that entry has another expanded link containing a feed with the payload entry                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultCollectionLink()'                          ObjectModelUtils.CreateDefaultFeed()'                          ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultCollectionLink()'                          ObjectModelUtils.CreateDefaultFeed()'                      }.Concat(testDescriptor.PayloadItems)'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomFeedElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName)                                  .Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomFeedElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests,WriterPayloads,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\WriterPayloads.cs,EntryPayloads,The following statement contains a magic number: var payloadCases = new WriterPayloadCase<ODataItem>[]               {                  // Feed with a single entry                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[] { ObjectModelUtils.CreateDefaultFeed() }.Concat(testDescriptor.PayloadItems)'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName).First();                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Feed with three (identical) entries' picking the second one                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultFeed()                       }                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              var entries = result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName);                              Debug.Assert(entries.Count() == 3' "Expected three entries in the feed.");                              return entries.ElementAt(2);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Top-level entry with an expanded link containing a single entry                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultSingletonLink()'                      }.Concat(testDescriptor.PayloadItems)'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Top-level entry with an expanded link containing a feed with a single entry                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultCollectionLink()'                          ObjectModelUtils.CreateDefaultFeed()                      }.Concat(testDescriptor.PayloadItems)'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomFeedElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Top-level entry with an expanded link containing a feed with three entries; picking the second one                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultCollectionLink()'                          ObjectModelUtils.CreateDefaultFeed()                      }                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))                      .Concat(testDescriptor.PayloadItems)                      .Concat(LinqExtensions.FromSingle((ODataItem)null))'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomFeedElementName)                                  .Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName)                                  .ElementAt(2);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'                    // Top-level entry with an expanded link containing a feed with a single entry;                  // that entry has another expanded link containing a feed with the payload entry                  new WriterPayloadCase<ODataItem>() {                      GetPayloadItems = () => new ODataItem[]                       {                           ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultCollectionLink()'                          ObjectModelUtils.CreateDefaultFeed()'                          ObjectModelUtils.CreateDefaultEntry()'                          ObjectModelUtils.CreateDefaultCollectionLink()'                          ObjectModelUtils.CreateDefaultFeed()'                      }.Concat(testDescriptor.PayloadItems)'                      AtomFragmentExtractor = (testConfiguration' result) =>                          {                              return result.Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomFeedElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName)                                  .Elements(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomLinkElementName)                                  .First(e => e.Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName) != null)                                  .Element(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.ODataInlineElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomFeedElementName)                                  .Element(TestAtomConstants.AtomXNamespace + TestAtomConstants.AtomEntryElementName);                          }'                          //ToDo: Fix places where we've lost JsonVerbose coverage to add JsonLight                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The following statement contains a magic number: IEnumerable<EntryPayloadTestCase> testCases = new[]              {                     new EntryPayloadTestCase                  {                      DebugDescription = "TypeName at the beginning' nothing else"'                      Items = new[] { new ODataResource() { TypeName = "TestModel.NonMLEType" }}'                      Model = model'                      EntitySet = nonMLESet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.NonMLEType\"{0}"'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "TypeName at the beginning' changes at the end - the one from the beginning is used (also for validation)."'                      Items = new[] { new ODataResource() {                              MediaResource = new ODataStreamReferenceValue()'                              Properties = new []                              {                                  new ODataProperty { Name = "ID"' Value = (int)42 }'                                  new ODataProperty { Name = "Name"' Value = "test" }'                              }                          }                          .WithAnnotation(new WriteEntryCallbacksAnnotation                               {                                  BeforeWriteStartCallback = (entry) => { entry.TypeName = "TestModel.MLEType"; }'                                  BeforeWriteEndCallback = (entry) => { entry.TypeName = "NonExistingType"; }                              })}'                      Model = model'                      EntitySet = mleSet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.MLEType\"{0}'\"ID\":\"42\"'\"Name\":\"test\""'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "TypeName' ID and ETag at the beginning' nothing else"'                      Items = new[] { new ODataResource() { TypeName = "TestModel.NonMLEType"' Id = new Uri("urn:id")' ETag="etag" }}'                      Model = model'                      EntitySet = nonMLESet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.NonMLEType\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"urn:id\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataETagAnnotationName + "\":\"etag\"{0}"'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "TypeName at the beginning' ID and ETag at the end' ID and ETag are not written and are ignored at the end"'                      Items = new[] { new ODataResource() { TypeName = "TestModel.NonMLEType" }                          .WithAnnotation(new WriteEntryCallbacksAnnotation                               {                                  BeforeWriteStartCallback = (entry) => { entry.Id = null; entry.ETag = null; }'                                  BeforeWriteEndCallback = (entry) => { entry.Id = new Uri("urn:id"); entry.ETag = "etag"; }                              })}'                      Model = model'                      EntitySet = nonMLESet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.NonMLEType\"{0}"'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "Everything at the beginning"'                      Items = new[] { new ODataResource() {                           TypeName = "TestModel.MLEType"'                          Id = new Uri("urn:id")'                          ETag = "etag"'                          EditLink = new Uri("http://odata.org/editlink")'                          ReadLink = new Uri("http://odata.org/readlink")'                          MediaResource = new ODataStreamReferenceValue()                          {                              EditLink = new Uri("http://odata.org/mediaeditlink")'                              ReadLink = new Uri("http://odata.org/mediareadlink")'                              ETag = "mediaetag"'                              ContentType = "media/contenttype"                          }'                          Properties = new []                          {                              new ODataProperty { Name = "ID"' Value = (int)42 }'                              new ODataProperty { Name = "Name"' Value = "test" }'                          }                      }}'                      Model = model'                      EntitySet = mleSet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.MLEType\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"urn:id\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataETagAnnotationName + "\":\"etag\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataEditLinkAnnotationName + "\":\"http://odata.org/editlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"http://odata.org/readlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaEditLinkAnnotationName + "\":\"http://odata.org/mediaeditlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaReadLinkAnnotationName + "\":\"http://odata.org/mediareadlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaContentTypeAnnotationName + "\":\"media/contenttype\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaETagAnnotationName + "\":\"mediaetag\"{0}'" +                          "\"ID\":\"42\"'" +                          "\"Name\":\"test\""'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "TypeName' Id' ETag and ReadLinks at the beginning' the rest at the end"'                      Items = new[] { new ODataResource() {                           TypeName = "TestModel.MLEType"'                          Id = new Uri("urn:id")'                          ETag = "etag"'                          ReadLink = new Uri("http://odata.org/readlink")'                          MediaResource = new ODataStreamReferenceValue()                          {                              ReadLink = new Uri("http://odata.org/mediareadlink")                          }'                          Properties = new []                          {                              new ODataProperty { Name = "ID"' Value = (int)42 }'                              new ODataProperty { Name = "Name"' Value = "test" }'                          }                      }.WithAnnotation(new WriteEntryCallbacksAnnotation                           {                              BeforeWriteStartCallback = (entry) =>                              {                                   entry.EditLink = null;                                  entry.MediaResource.EditLink = null;                                  entry.MediaResource.ETag = null;                                  entry.MediaResource.ContentType = null;                              }'                              BeforeWriteEndCallback = (entry) =>                               {                                  entry.EditLink = new Uri("http://odata.org/editlink");                                  entry.MediaResource.EditLink = new Uri("http://odata.org/mediaeditlink");                                  entry.MediaResource.ETag = "mediaetag";                                  entry.MediaResource.ContentType = "media/contenttype";                              }                          })}'                      Model = model'                      EntitySet = mleSet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.MLEType\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"urn:id\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataETagAnnotationName + "\":\"etag\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"http://odata.org/readlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaReadLinkAnnotationName + "\":\"http://odata.org/mediareadlink\"{0}'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataEditLinkAnnotationName + "\":\"http://odata.org/editlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaEditLinkAnnotationName + "\":\"http://odata.org/mediaeditlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaContentTypeAnnotationName + "\":\"media/contenttype\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaETagAnnotationName + "\":\"mediaetag\"'" +                          "\"ID\":\"42\"'" +                          "\"Name\":\"test\""'                          "}}")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The following statement contains a magic number: IEnumerable<EntryPayloadTestCase> testCases = new[]              {                     new EntryPayloadTestCase                  {                      DebugDescription = "TypeName at the beginning' nothing else"'                      Items = new[] { new ODataResource() { TypeName = "TestModel.NonMLEType" }}'                      Model = model'                      EntitySet = nonMLESet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.NonMLEType\"{0}"'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "TypeName at the beginning' changes at the end - the one from the beginning is used (also for validation)."'                      Items = new[] { new ODataResource() {                              MediaResource = new ODataStreamReferenceValue()'                              Properties = new []                              {                                  new ODataProperty { Name = "ID"' Value = (int)42 }'                                  new ODataProperty { Name = "Name"' Value = "test" }'                              }                          }                          .WithAnnotation(new WriteEntryCallbacksAnnotation                               {                                  BeforeWriteStartCallback = (entry) => { entry.TypeName = "TestModel.MLEType"; }'                                  BeforeWriteEndCallback = (entry) => { entry.TypeName = "NonExistingType"; }                              })}'                      Model = model'                      EntitySet = mleSet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.MLEType\"{0}'\"ID\":\"42\"'\"Name\":\"test\""'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "TypeName' ID and ETag at the beginning' nothing else"'                      Items = new[] { new ODataResource() { TypeName = "TestModel.NonMLEType"' Id = new Uri("urn:id")' ETag="etag" }}'                      Model = model'                      EntitySet = nonMLESet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.NonMLEType\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"urn:id\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataETagAnnotationName + "\":\"etag\"{0}"'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "TypeName at the beginning' ID and ETag at the end' ID and ETag are not written and are ignored at the end"'                      Items = new[] { new ODataResource() { TypeName = "TestModel.NonMLEType" }                          .WithAnnotation(new WriteEntryCallbacksAnnotation                               {                                  BeforeWriteStartCallback = (entry) => { entry.Id = null; entry.ETag = null; }'                                  BeforeWriteEndCallback = (entry) => { entry.Id = new Uri("urn:id"); entry.ETag = "etag"; }                              })}'                      Model = model'                      EntitySet = nonMLESet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.NonMLEType\"{0}"'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "Everything at the beginning"'                      Items = new[] { new ODataResource() {                           TypeName = "TestModel.MLEType"'                          Id = new Uri("urn:id")'                          ETag = "etag"'                          EditLink = new Uri("http://odata.org/editlink")'                          ReadLink = new Uri("http://odata.org/readlink")'                          MediaResource = new ODataStreamReferenceValue()                          {                              EditLink = new Uri("http://odata.org/mediaeditlink")'                              ReadLink = new Uri("http://odata.org/mediareadlink")'                              ETag = "mediaetag"'                              ContentType = "media/contenttype"                          }'                          Properties = new []                          {                              new ODataProperty { Name = "ID"' Value = (int)42 }'                              new ODataProperty { Name = "Name"' Value = "test" }'                          }                      }}'                      Model = model'                      EntitySet = mleSet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.MLEType\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"urn:id\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataETagAnnotationName + "\":\"etag\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataEditLinkAnnotationName + "\":\"http://odata.org/editlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"http://odata.org/readlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaEditLinkAnnotationName + "\":\"http://odata.org/mediaeditlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaReadLinkAnnotationName + "\":\"http://odata.org/mediareadlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaContentTypeAnnotationName + "\":\"media/contenttype\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaETagAnnotationName + "\":\"mediaetag\"{0}'" +                          "\"ID\":\"42\"'" +                          "\"Name\":\"test\""'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "TypeName' Id' ETag and ReadLinks at the beginning' the rest at the end"'                      Items = new[] { new ODataResource() {                           TypeName = "TestModel.MLEType"'                          Id = new Uri("urn:id")'                          ETag = "etag"'                          ReadLink = new Uri("http://odata.org/readlink")'                          MediaResource = new ODataStreamReferenceValue()                          {                              ReadLink = new Uri("http://odata.org/mediareadlink")                          }'                          Properties = new []                          {                              new ODataProperty { Name = "ID"' Value = (int)42 }'                              new ODataProperty { Name = "Name"' Value = "test" }'                          }                      }.WithAnnotation(new WriteEntryCallbacksAnnotation                           {                              BeforeWriteStartCallback = (entry) =>                              {                                   entry.EditLink = null;                                  entry.MediaResource.EditLink = null;                                  entry.MediaResource.ETag = null;                                  entry.MediaResource.ContentType = null;                              }'                              BeforeWriteEndCallback = (entry) =>                               {                                  entry.EditLink = new Uri("http://odata.org/editlink");                                  entry.MediaResource.EditLink = new Uri("http://odata.org/mediaeditlink");                                  entry.MediaResource.ETag = "mediaetag";                                  entry.MediaResource.ContentType = "media/contenttype";                              }                          })}'                      Model = model'                      EntitySet = mleSet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.MLEType\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"urn:id\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataETagAnnotationName + "\":\"etag\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"http://odata.org/readlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaReadLinkAnnotationName + "\":\"http://odata.org/mediareadlink\"{0}'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataEditLinkAnnotationName + "\":\"http://odata.org/editlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaEditLinkAnnotationName + "\":\"http://odata.org/mediaeditlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaContentTypeAnnotationName + "\":\"media/contenttype\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaETagAnnotationName + "\":\"mediaetag\"'" +                          "\"ID\":\"42\"'" +                          "\"Name\":\"test\""'                          "}}")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,PayloadOrderTest,The following statement contains a magic number: IEnumerable<EntryPayloadTestCase> testCases = new[]              {                     new EntryPayloadTestCase                  {                      DebugDescription = "TypeName at the beginning' nothing else"'                      Items = new[] { new ODataResource() { TypeName = "TestModel.NonMLEType" }}'                      Model = model'                      EntitySet = nonMLESet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.NonMLEType\"{0}"'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "TypeName at the beginning' changes at the end - the one from the beginning is used (also for validation)."'                      Items = new[] { new ODataResource() {                              MediaResource = new ODataStreamReferenceValue()'                              Properties = new []                              {                                  new ODataProperty { Name = "ID"' Value = (int)42 }'                                  new ODataProperty { Name = "Name"' Value = "test" }'                              }                          }                          .WithAnnotation(new WriteEntryCallbacksAnnotation                               {                                  BeforeWriteStartCallback = (entry) => { entry.TypeName = "TestModel.MLEType"; }'                                  BeforeWriteEndCallback = (entry) => { entry.TypeName = "NonExistingType"; }                              })}'                      Model = model'                      EntitySet = mleSet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.MLEType\"{0}'\"ID\":\"42\"'\"Name\":\"test\""'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "TypeName' ID and ETag at the beginning' nothing else"'                      Items = new[] { new ODataResource() { TypeName = "TestModel.NonMLEType"' Id = new Uri("urn:id")' ETag="etag" }}'                      Model = model'                      EntitySet = nonMLESet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.NonMLEType\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"urn:id\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataETagAnnotationName + "\":\"etag\"{0}"'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "TypeName at the beginning' ID and ETag at the end' ID and ETag are not written and are ignored at the end"'                      Items = new[] { new ODataResource() { TypeName = "TestModel.NonMLEType" }                          .WithAnnotation(new WriteEntryCallbacksAnnotation                               {                                  BeforeWriteStartCallback = (entry) => { entry.Id = null; entry.ETag = null; }'                                  BeforeWriteEndCallback = (entry) => { entry.Id = new Uri("urn:id"); entry.ETag = "etag"; }                              })}'                      Model = model'                      EntitySet = nonMLESet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.NonMLEType\"{0}"'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "Everything at the beginning"'                      Items = new[] { new ODataResource() {                           TypeName = "TestModel.MLEType"'                          Id = new Uri("urn:id")'                          ETag = "etag"'                          EditLink = new Uri("http://odata.org/editlink")'                          ReadLink = new Uri("http://odata.org/readlink")'                          MediaResource = new ODataStreamReferenceValue()                          {                              EditLink = new Uri("http://odata.org/mediaeditlink")'                              ReadLink = new Uri("http://odata.org/mediareadlink")'                              ETag = "mediaetag"'                              ContentType = "media/contenttype"                          }'                          Properties = new []                          {                              new ODataProperty { Name = "ID"' Value = (int)42 }'                              new ODataProperty { Name = "Name"' Value = "test" }'                          }                      }}'                      Model = model'                      EntitySet = mleSet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.MLEType\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"urn:id\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataETagAnnotationName + "\":\"etag\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataEditLinkAnnotationName + "\":\"http://odata.org/editlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"http://odata.org/readlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaEditLinkAnnotationName + "\":\"http://odata.org/mediaeditlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaReadLinkAnnotationName + "\":\"http://odata.org/mediareadlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaContentTypeAnnotationName + "\":\"media/contenttype\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaETagAnnotationName + "\":\"mediaetag\"{0}'" +                          "\"ID\":\"42\"'" +                          "\"Name\":\"test\""'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "TypeName' Id' ETag and ReadLinks at the beginning' the rest at the end"'                      Items = new[] { new ODataResource() {                           TypeName = "TestModel.MLEType"'                          Id = new Uri("urn:id")'                          ETag = "etag"'                          ReadLink = new Uri("http://odata.org/readlink")'                          MediaResource = new ODataStreamReferenceValue()                          {                              ReadLink = new Uri("http://odata.org/mediareadlink")                          }'                          Properties = new []                          {                              new ODataProperty { Name = "ID"' Value = (int)42 }'                              new ODataProperty { Name = "Name"' Value = "test" }'                          }                      }.WithAnnotation(new WriteEntryCallbacksAnnotation                           {                              BeforeWriteStartCallback = (entry) =>                              {                                   entry.EditLink = null;                                  entry.MediaResource.EditLink = null;                                  entry.MediaResource.ETag = null;                                  entry.MediaResource.ContentType = null;                              }'                              BeforeWriteEndCallback = (entry) =>                               {                                  entry.EditLink = new Uri("http://odata.org/editlink");                                  entry.MediaResource.EditLink = new Uri("http://odata.org/mediaeditlink");                                  entry.MediaResource.ETag = "mediaetag";                                  entry.MediaResource.ContentType = "media/contenttype";                              }                          })}'                      Model = model'                      EntitySet = mleSet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{1}" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.MLEType\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataIdAnnotationName + "\":\"urn:id\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataETagAnnotationName + "\":\"etag\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataReadLinkAnnotationName + "\":\"http://odata.org/readlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaReadLinkAnnotationName + "\":\"http://odata.org/mediareadlink\"{0}'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataEditLinkAnnotationName + "\":\"http://odata.org/editlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaEditLinkAnnotationName + "\":\"http://odata.org/mediaeditlink\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaContentTypeAnnotationName + "\":\"media/contenttype\"'" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataMediaETagAnnotationName + "\":\"mediaetag\"'" +                          "\"ID\":\"42\"'" +                          "\"Name\":\"test\""'                          "}}")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,OpenPropertiesInEntryTest,The following statement contains a magic number: ISpatial pointValue = GeographyFactory.Point(32.0' -100.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,OpenPropertiesInEntryTest,The following statement contains a magic number: ISpatial pointValue = GeographyFactory.Point(32.0' -100.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,OpenPropertiesInEntryTest,The following statement contains a magic number: IEnumerable<EntryPayloadTestCase> testCases = new[]              {                  new EntryPayloadTestCase                  {                      DebugDescription = "Customer instance with open primitive property."'                      Items = new[] { new ODataResource()                       {                           TypeName = "TestModel.OpenCustomerType"'                           Properties = new ODataProperty[]                          {                              new ODataProperty { Name = "Age"' Value = (long)42 }                          }                      }}'                      Model = model'                      EntitySet = customerSet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{0}\"" + JsonLightUtils.GetPropertyAnnotationName("Age"' JsonLightConstants.ODataTypeAnnotationName) + "\":\"Edm.Int64\"'\"Age\":\"42\""'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "Customer instance with open spatial property."'                      Items = new[] { new ODataResource()                       {                           TypeName = "TestModel.OpenCustomerType"'                           Properties = new ODataProperty[]                          {                              new ODataProperty { Name = "Location"' Value = pointValue }                          }                      }}'                      Model = model'                      EntitySet = customerSet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{0}" +                          "\"" + JsonLightUtils.GetPropertyAnnotationName("Location"' JsonLightConstants.ODataTypeAnnotationName) + "\":\"Edm.GeographyPoint\"'" +                          "\"Location\":{{"'                          "\"type\":\"Point\"'\"coordinates\":["'                          "-100.0'32.0"'                          "]'\"crs\":{{"'                          "\"type\":\"name\"'\"properties\":{{"'                          "\"name\":\"EPSG:4326\""'                          "}}"'                          "}}"'                           "}}"'                          "}}")                  }'                  new EntryPayloadTestCase                  {                      DebugDescription = "Customer instance with open complex property."'                      Items = new ODataItem[]                      {                          new ODataResource() { TypeName = "TestModel.OpenCustomerType" }'                          new ODataNestedResourceInfo() {Name = "Address"' IsCollection = false}'                          new ODataResource { TypeName = "TestModel.AddressType" }                      }'                      Model = model'                      EntitySet = customerSet'                      Json = string.Join("$(NL)"'                          "{{"'                          "{0}" +                          "\"Address\":{{"'                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataTypeAnnotationName + "\":\"TestModel.AddressType\""'                          "}}"'                          "}}")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,SpatialPropertiesInEntryTest,The following statement contains a magic number: ISpatial pointValue = GeographyFactory.Point(32.0' -100.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightEntryWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightEntryWriterTests.cs,SpatialPropertiesInEntryTest,The following statement contains a magic number: ISpatial pointValue = GeographyFactory.Point(32.0' -100.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightPropertyWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightPropertyWriterTests.cs,TopLevelOpenPropertiesTest,The following statement contains a magic number: ISpatial pointValue = GeographyFactory.Point(32.0' -100.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightPropertyWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightPropertyWriterTests.cs,TopLevelOpenPropertiesTest,The following statement contains a magic number: ISpatial pointValue = GeographyFactory.Point(32.0' -100.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightPropertyWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightPropertyWriterTests.cs,TopLevelOpenPropertiesTest,The following statement contains a magic number: IEnumerable<PropertyPayloadTestCase> testCases = new[]              {                  new PropertyPayloadTestCase                  {                      DebugDescription = "Top-level open primitive property."'                      Property = new ODataProperty { Name = "Age"' Value = (long)42 }'                      Model = edmModel'                      PropertyType = "Edm.Int64"'                      Json = string.Join("$(NL)"'                          "{{"'                          "{0}'\"value\":\"42\""'                          "}}")                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Top-level open spatial property."'                      Property = new ODataProperty { Name = "Location"' Value = pointValue }'                      Model = edmModel'                      PropertyType = "Edm.GeographyPoint"'                      Json = string.Join("$(NL)"'                          "{{"'                          "{0}'" +                          "\"" + JsonLightConstants.ODataValuePropertyName + "\":{{"'                          "\"type\":\"Point\"'\"coordinates\":["'                          "-100.0'32.0"'                          "]'\"crs\":{{"'                          "\"type\":\"name\"'\"properties\":{{"'                          "\"name\":\"EPSG:4326\""'                          "}}"'                          "}}"'                          "}}"'                          "}}")                  }              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightPropertyWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightPropertyWriterTests.cs,TopLevelSpatialPropertiesTest,The following statement contains a magic number: ISpatial pointValue = GeographyFactory.Point(32.0' -100.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightPropertyWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightPropertyWriterTests.cs,TopLevelSpatialPropertiesTest,The following statement contains a magic number: ISpatial pointValue = GeographyFactory.Point(32.0' -100.0).Build();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightPropertyWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightPropertyWriterTests.cs,WriteUntypedValueTest,The following statement contains a magic number: IEnumerable<PropertyPayloadTestCase> testCases = new[]              {                  new PropertyPayloadTestCase                  {                      DebugDescription = "Null."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = "null" }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Integer."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = "42" }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Float."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = "3.1415" }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "String."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = "\"string\"" }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Array of elements of mixed types."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = "[1' 2' \"abc\"]" }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Array of arrays."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = "[ [1' \"abc\"]' [2' \"def\"]' [[3]'[4' 5]] ]" }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Negative - empty RawValue"'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = string.Empty }'                                  }'                      ExpectedException = ODataExpectedExceptions.ODataException(                                              TextRes.ODataJsonLightValueSerializer_MissingRawValueOnUntyped)'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Collection of Edm.Untyped elements."'                      Property = new ODataProperty                                  {                                      Name = "CollectionValue"'                                      Value = new ODataCollectionValue()                                              {                                                  TypeName = "Collection(TestModel.JsonType)"'                                                  Items = new object[]                                                          {                                                              new ODataUntypedValue()                                                              {                                                                  RawValue = "\"string\""                                                              }'                                                              new ODataUntypedValue()                                                              {                                                                  RawValue = "[1' 2' \"abc\"]"                                                              }'                                                              new ODataUntypedValue()                                                              {                                                                  RawValue = "3.1415"                                                              }                                                          }                                              }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Integer."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataPrimitiveValue(42)                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Float."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataPrimitiveValue(3.1415)                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "String."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataPrimitiveValue("string")                                  }'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.JsonLight,JsonLightPropertyWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\JsonLight\JsonLightPropertyWriterTests.cs,WriteUntypedValueTest,The following statement contains a magic number: IEnumerable<PropertyPayloadTestCase> testCases = new[]              {                  new PropertyPayloadTestCase                  {                      DebugDescription = "Null."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = "null" }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Integer."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = "42" }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Float."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = "3.1415" }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "String."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = "\"string\"" }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Array of elements of mixed types."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = "[1' 2' \"abc\"]" }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Array of arrays."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = "[ [1' \"abc\"]' [2' \"def\"]' [[3]'[4' 5]] ]" }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Negative - empty RawValue"'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataUntypedValue() { RawValue = string.Empty }'                                  }'                      ExpectedException = ODataExpectedExceptions.ODataException(                                              TextRes.ODataJsonLightValueSerializer_MissingRawValueOnUntyped)'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Collection of Edm.Untyped elements."'                      Property = new ODataProperty                                  {                                      Name = "CollectionValue"'                                      Value = new ODataCollectionValue()                                              {                                                  TypeName = "Collection(TestModel.JsonType)"'                                                  Items = new object[]                                                          {                                                              new ODataUntypedValue()                                                              {                                                                  RawValue = "\"string\""                                                              }'                                                              new ODataUntypedValue()                                                              {                                                                  RawValue = "[1' 2' \"abc\"]"                                                              }'                                                              new ODataUntypedValue()                                                              {                                                                  RawValue = "3.1415"                                                              }                                                          }                                              }                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Integer."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataPrimitiveValue(42)                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "Float."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataPrimitiveValue(3.1415)                                  }'                  }'                  new PropertyPayloadTestCase                  {                      DebugDescription = "String."'                      Property = new ODataProperty                                  {                                      Name = "Value"'                                      Value = new ODataPrimitiveValue("string")                                  }'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonValueUtilsTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonValueUtilsTests.cs,StringEscapeRulesTest,The following statement contains a magic number: this.CombinatorialEngineProvider.RunCombinations(                  StringTestCases.Variations(1' 3)'                  (testCaseCombination) =>                  {                      StringBuilder expectedOutput = new StringBuilder();                      StringBuilder stringToWrite = new StringBuilder();                      expectedOutput.Append('"');                      foreach (var testCase in testCaseCombination)                      {                          stringToWrite.Append(testCase.Value as string);                          expectedOutput.Append(testCase.ExpectedTextOutput);                      }                      expectedOutput.Append('"');                      StringWriter writer = new StringWriter();                      JsonValueUtils.WriteObjectValue(writer' stringToWrite.ToString());                      writer.Flush();                        this.Assert.AreEqual(expectedOutput.ToString()' writer.ToString()' "The output doesn't match the expected string.");                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonWriterTests.cs,BasicJsonWriterTest,The following statement contains a magic number: DateTimeOffset negativeOffSet = new DateTimeOffset(DateTime.Now.AddDays(-3)).ToUniversalTime();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonWriterTests.cs,BasicJsonWriterTest,The following statement contains a magic number: var testCases = new JsonWriterTestCase[] {                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartObjectScope();                          writer.EndObjectScope();                      }'                      ExpectedOutput = "{$(NL)$(Indent)$(NL)}"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartArrayScope();                          writer.EndArrayScope();                      }'                      ExpectedOutput = "[$(NL)$(Indent)$(NL)]"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartObjectScope();                          writer.WriteName("foo");                          writer.WriteValue("bar");                          writer.EndObjectScope();                      }'                      ExpectedOutput = "{$(NL)$(Indent)\"foo\":\"bar\"$(NL)}"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartObjectScope();                          writer.WriteName("foo");                          writer.WriteValue("bar");                          writer.WriteName("var1");                          writer.WriteValue("value1");                          writer.EndObjectScope();                      }'                      ExpectedOutput = "{$(NL)$(Indent)\"foo\":\"bar\"'\"var1\":\"value1\"$(NL)}"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartArrayScope();                          writer.WriteValue("bar");                          writer.EndArrayScope();                      }'                      ExpectedOutput = "[$(NL)$(Indent)\"bar\"$(NL)]"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartArrayScope();                          writer.WriteValue("bar");                          writer.WriteValue((int)42);                          writer.EndArrayScope();                      }'                      ExpectedOutput = "[$(NL)$(Indent)\"bar\"'42$(NL)]"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartArrayScope();                          writer.WriteValue("DateTimeOffset");                          writer.WriteValue((DateTimeOffset)positiveOffSet);                          writer.EndArrayScope();                      }'                      ExpectedOutput = "[$(NL)$(Indent)\"DateTimeOffset\"'\""+expectedPositiveOffsetISOFormat+"\"$(NL)]"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartArrayScope();                          writer.WriteValue("DateTimeOffset");                          writer.WriteValue((DateTimeOffset)negativeOffSet);                          writer.EndArrayScope();                      }'                      ExpectedOutput = "[$(NL)$(Indent)\"DateTimeOffset\"'\""+expectedNegativeOffsetISOFormat+"\"$(NL)]"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartObjectScope();                          writer.WriteName("foo");                          writer.WriteValue("bar");                          writer.EndObjectScope();                      }'                      ExpectedOutput = "{$(NL)$(Indent)\"foo\":\"bar\"$(NL)}"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartObjectScope();                          writer.WriteName("results");                          writer.StartArrayScope();                          writer.WriteValue(1);                          writer.WriteValue(2);                          writer.EndArrayScope();                          writer.EndObjectScope();                      }'                      ExpectedOutput = "{$(NL)$(Indent)\"results\":[$(NL)$(Indent)$(Indent)1'2$(NL)$(Indent)]$(NL)}"                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonWriterTests.cs,BasicJsonWriterTest,The following statement contains a magic number: var testCases = new JsonWriterTestCase[] {                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartObjectScope();                          writer.EndObjectScope();                      }'                      ExpectedOutput = "{$(NL)$(Indent)$(NL)}"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartArrayScope();                          writer.EndArrayScope();                      }'                      ExpectedOutput = "[$(NL)$(Indent)$(NL)]"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartObjectScope();                          writer.WriteName("foo");                          writer.WriteValue("bar");                          writer.EndObjectScope();                      }'                      ExpectedOutput = "{$(NL)$(Indent)\"foo\":\"bar\"$(NL)}"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartObjectScope();                          writer.WriteName("foo");                          writer.WriteValue("bar");                          writer.WriteName("var1");                          writer.WriteValue("value1");                          writer.EndObjectScope();                      }'                      ExpectedOutput = "{$(NL)$(Indent)\"foo\":\"bar\"'\"var1\":\"value1\"$(NL)}"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartArrayScope();                          writer.WriteValue("bar");                          writer.EndArrayScope();                      }'                      ExpectedOutput = "[$(NL)$(Indent)\"bar\"$(NL)]"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartArrayScope();                          writer.WriteValue("bar");                          writer.WriteValue((int)42);                          writer.EndArrayScope();                      }'                      ExpectedOutput = "[$(NL)$(Indent)\"bar\"'42$(NL)]"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartArrayScope();                          writer.WriteValue("DateTimeOffset");                          writer.WriteValue((DateTimeOffset)positiveOffSet);                          writer.EndArrayScope();                      }'                      ExpectedOutput = "[$(NL)$(Indent)\"DateTimeOffset\"'\""+expectedPositiveOffsetISOFormat+"\"$(NL)]"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartArrayScope();                          writer.WriteValue("DateTimeOffset");                          writer.WriteValue((DateTimeOffset)negativeOffSet);                          writer.EndArrayScope();                      }'                      ExpectedOutput = "[$(NL)$(Indent)\"DateTimeOffset\"'\""+expectedNegativeOffsetISOFormat+"\"$(NL)]"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartObjectScope();                          writer.WriteName("foo");                          writer.WriteValue("bar");                          writer.EndObjectScope();                      }'                      ExpectedOutput = "{$(NL)$(Indent)\"foo\":\"bar\"$(NL)}"                  }'                  new JsonWriterTestCase {                      Write = (writer) => {                          writer.StartObjectScope();                          writer.WriteName("results");                          writer.StartArrayScope();                          writer.WriteValue(1);                          writer.WriteValue(2);                          writer.EndArrayScope();                          writer.EndObjectScope();                      }'                      ExpectedOutput = "{$(NL)$(Indent)\"results\":[$(NL)$(Indent)$(Indent)1'2$(NL)$(Indent)]$(NL)}"                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonUtils.cs,WrapTopLevelValue,The following statement contains a magic number: string[] wrappedJsonLines = new string[jsonLines.Length + 2];
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Json,JsonUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Json\JsonUtils.cs,WrapTopLevelObject,The following statement contains a magic number: string[] wrappedJsonLines = new string[jsonLines.Length + 2];
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,GetPrimitiveIntCollection,The following statement contains a magic number: noOfItems = noOfItems < 0 ? 5 : noOfItems;
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var complexWithNestedComplex_Nested = new ODataResource()              {                  TypeName = "TestModel.TwoProperty"'                  Properties = new[]                  {                      new ODataProperty() { Name = "TwoPropertyValue"' Value = 2 }'                  }              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var complexWithNestedComplex = new ODataResource()              {                  TypeName = "TestModel.ComplexProperty"'                  Properties = new[]                  {                      new ODataProperty() { Name = "One"' Value = 1 }'                      new ODataProperty() { Name = "Three"' Value = 3 }'                  }              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTest,The following statement contains a magic number: var testCases = new[]              {                  #region Empty parameters                  new                  {                      DebugDescription = "Empty parameter payload"'                      ParameterPayload = new ODataParameters()'                      JsonLight = "{}"'                  }'                  #endregion Empty parameters                    #region Single primitive parameter                  new                  {                      DebugDescription = "Primitive string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                      }'                      JsonLight = "{\"p1\":\"foo\"}"                  }'                  new                  {                      DebugDescription = "Primitive null parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' null)'                      }'                      JsonLight = "{\"p1\":null}"                  }'                  new                  {                      DebugDescription = "Primitive empty string parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' string.Empty)'                      }'                      JsonLight = "{\"p1\":\"\"}"                  }'                  new                  {                      DebugDescription = "Primitive integer parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 2)'                      }'                      JsonLight = "{\"p1\":2}"                  }'                  new                  {                      DebugDescription = "Primitive DateTime parameter"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero))'                      }'                      JsonLight = "{\"p1\":\"2011-09-26T13:20:48Z\"}"                  }'                  #endregion Single primitive parameter                    #region Single complex parameter                    new                  {                      DebugDescription = "One complex parameter: empty complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p2\":{}}"'                  }'                    new                  {                      DebugDescription = "One complex parameter: single primitive property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.OneProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: multiple primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: many primitive properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.ManyProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2.222 }'                                      new ODataProperty() { Name = "Three"' Value = -3.333 }'                                      new ODataProperty() { Name = "Four"' Value = null }'                                      new ODataProperty() { Name = "Five"' Value = string.Empty }'                                      new ODataProperty() { Name = "Six"' Value = "Six" }'                                      new ODataProperty() { Name = "Seven"' Value = new DateTimeOffset(2011' 9' 26' 13' 20' 48' TimeSpan.Zero) }'                                      new ODataProperty() { Name = "Eight"' Value = 12345678 }'                                      new ODataProperty() { Name = "Nine"' Value = 0 }'                                      new ODataProperty() { Name = "Ten"' Value = -342356 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Two\":2.222'\"Three\":-3.333'\"Four\":null'\"Five\":\"\"'\"Six\":\"Six\"'\"Seven\":\"2011-09-26T13:20:48Z\"'\"Eight\":12345678'\"Nine\":0'\"Ten\":-342356}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: nested complex value."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' complexWithNestedComplex)                      }'                      JsonLight = "{\"p1\":{\"One\":1'\"Three\":3'\"Two\":{\"TwoPropertyValue\":2}}}"'                  }'                  new                  {                      DebugDescription = "One complex parameter: collection property."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(                              "p1"'                               new ODataResource()                              {                                  TypeName = "TestModel.CollectionProperty"'                                  Properties = new[]                                  {                                      new ODataProperty() {                                           Name = "One"'                                           Value = new ODataCollectionValue()                                          {                                              TypeName = EntityModelUtils.GetCollectionTypeName("Edm.String")'                                              Items = new object[] { "item1"' "item2" }                                          }                                      }'                                  }                               })                      }'                      JsonLight = "{\"p1\":{\"One\":[\"item1\"'\"item2\"]}}"'                  }'                    #endregion Single complex parameter                    #region Single collection parameter                  new                  {                      DebugDescription = "Single collection parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p2\":[]}"'                  }'                  #endregion                    #region Two parameters                  new                  {                      DebugDescription = "Two parameters: two string parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' "bar")                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":\"bar\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataResource() { TypeName = "TestModel.EmptyComplex" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":{}}"'                  }'                  new                  {                      DebugDescription = "Two parameters: primitive and collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":\"foo\"'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: collection and primitive parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' "foo")'                      }'                      JsonLight = "{\"p1\":[]'\"p2\":\"foo\"}"'                  }'                  new                  {                      DebugDescription = "Two parameters: two collection parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })'                          new KeyValuePair<string' object>("p2"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{\"p1\":[]'\"p2\":[]}"'                  }'                  new                  {                      DebugDescription = "Two parameters: entity and complex parameters."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' entry)'                          new KeyValuePair<string' object>("p2"' new ODataResource()                              {                                  TypeName = "TestModel.MultipleProperties"'                                  Properties = new[]                                  {                                      new ODataProperty() { Name = "One"' Value = 1 }'                                      new ODataProperty() { Name = "Two"' Value = 2 }'                                      new ODataProperty() { Name = "Three"' Value = 3 }'                                  }                              })                      }'                      JsonLight = "{\"p1\":{\"@odata.context\":\"http://odata.org/test/$metadata#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}'\"p2\":{\"One\":1'\"Two\":2'\"Three\":3}}"'                  }'                    #endregion                    #region Single feed                  new                  {                      DebugDescription = "Single feed parameter."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed1)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  new                  {                      DebugDescription = "Single feed parameter with derived item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' feed2)                      }'                      JsonLight = "{\"p1\":[{\"@odata.type\":\"#TestModel.TestEntityType\"'\"ID\":1'\"Name\":\"TestName\"'\"ComplexProperty\":{}}]}"'                  }'                  #endregion              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The following statement contains a magic number: var testCases = new[]              {                  #region Collection of primitives                  new                  {                      DebugDescription = "Collection of primitives: single string item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(1))                      }'                      JsonLight = "{\"p1\":[\"foo\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: three string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(3))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: various string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(-1))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"'\"4\"'\"collectionElement---5\"'null'\"\"'\"-8\"'\"This is collectionElement9\"'\"-collectionElement10-\"]}"'                  }'                  #endregion Collection of primitives                  #region Collection of complex values                  new                  {                      DebugDescription = "Collection of complex values: single complex item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}]}"'                  }'                  new                  {                      DebugDescription = "Collection of complex values: multiple complex items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(-1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]}"'                  }'                  #endregion Collection of complex values                  #region Collection of complex containing collection properties                  new                  {                      DebugDescription = "Collection of complex values: complex items containing collection properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollectionContainingCollectionItem())                      }'                      JsonLight = "{\"p1\":[{\"OneProperty\":1'\"OneCollectionProperty\":[15'20]}'{\"OneProperty\":2'\"OneCollectionProperty\":[25]}]}"'                  }'                  #endregion Collection of complex containing collection properties                  #region Combination of primitive' complex and collection parameters                  new                  {                      DebugDescription = "Combination of primitive' complex and collection parameters"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' 12345)'                          new KeyValuePair<string' object>("p3"' new DateTimeOffset(2011' 12' 31' 0' 0' 0' TimeSpan.Zero))'                          new KeyValuePair<string' object>("p4"' new ODataResource(){ TypeName = "TestModel.ComplexType"' Properties = new[] { new ODataProperty() { Name = "One"' Value = 2 }}})'                          new KeyValuePair<string' object>("p5"' this.GetPrimitiveStringCollection(3))'                          new KeyValuePair<string' object>("p6"' this.GetComplexCollection(-1))'                          new KeyValuePair<string' object>("p7"' null)'                          new KeyValuePair<string' object>("p8"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{" +                          "\"p1\":\"foo\"'" +                          "\"p2\":12345'" +                           "\"p3\":\"2011-12-31T00:00:00Z\"'" +                          "\"p4\":{\"One\":2}'" +                          "\"p5\":[\"foo\"'\"bar\"'\"collectionElement3\"]'" +                          "\"p6\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]'" +                          "\"p7\":null'" +                          "\"p8\":[]}"'                  }'                  #endregion Combination of primitive' complex and collection parameters              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The following statement contains a magic number: var testCases = new[]              {                  #region Collection of primitives                  new                  {                      DebugDescription = "Collection of primitives: single string item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(1))                      }'                      JsonLight = "{\"p1\":[\"foo\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: three string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(3))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: various string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(-1))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"'\"4\"'\"collectionElement---5\"'null'\"\"'\"-8\"'\"This is collectionElement9\"'\"-collectionElement10-\"]}"'                  }'                  #endregion Collection of primitives                  #region Collection of complex values                  new                  {                      DebugDescription = "Collection of complex values: single complex item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}]}"'                  }'                  new                  {                      DebugDescription = "Collection of complex values: multiple complex items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(-1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]}"'                  }'                  #endregion Collection of complex values                  #region Collection of complex containing collection properties                  new                  {                      DebugDescription = "Collection of complex values: complex items containing collection properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollectionContainingCollectionItem())                      }'                      JsonLight = "{\"p1\":[{\"OneProperty\":1'\"OneCollectionProperty\":[15'20]}'{\"OneProperty\":2'\"OneCollectionProperty\":[25]}]}"'                  }'                  #endregion Collection of complex containing collection properties                  #region Combination of primitive' complex and collection parameters                  new                  {                      DebugDescription = "Combination of primitive' complex and collection parameters"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' 12345)'                          new KeyValuePair<string' object>("p3"' new DateTimeOffset(2011' 12' 31' 0' 0' 0' TimeSpan.Zero))'                          new KeyValuePair<string' object>("p4"' new ODataResource(){ TypeName = "TestModel.ComplexType"' Properties = new[] { new ODataProperty() { Name = "One"' Value = 2 }}})'                          new KeyValuePair<string' object>("p5"' this.GetPrimitiveStringCollection(3))'                          new KeyValuePair<string' object>("p6"' this.GetComplexCollection(-1))'                          new KeyValuePair<string' object>("p7"' null)'                          new KeyValuePair<string' object>("p8"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{" +                          "\"p1\":\"foo\"'" +                          "\"p2\":12345'" +                           "\"p3\":\"2011-12-31T00:00:00Z\"'" +                          "\"p4\":{\"One\":2}'" +                          "\"p5\":[\"foo\"'\"bar\"'\"collectionElement3\"]'" +                          "\"p6\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]'" +                          "\"p7\":null'" +                          "\"p8\":[]}"'                  }'                  #endregion Combination of primitive' complex and collection parameters              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The following statement contains a magic number: var testCases = new[]              {                  #region Collection of primitives                  new                  {                      DebugDescription = "Collection of primitives: single string item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(1))                      }'                      JsonLight = "{\"p1\":[\"foo\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: three string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(3))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: various string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(-1))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"'\"4\"'\"collectionElement---5\"'null'\"\"'\"-8\"'\"This is collectionElement9\"'\"-collectionElement10-\"]}"'                  }'                  #endregion Collection of primitives                  #region Collection of complex values                  new                  {                      DebugDescription = "Collection of complex values: single complex item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}]}"'                  }'                  new                  {                      DebugDescription = "Collection of complex values: multiple complex items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(-1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]}"'                  }'                  #endregion Collection of complex values                  #region Collection of complex containing collection properties                  new                  {                      DebugDescription = "Collection of complex values: complex items containing collection properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollectionContainingCollectionItem())                      }'                      JsonLight = "{\"p1\":[{\"OneProperty\":1'\"OneCollectionProperty\":[15'20]}'{\"OneProperty\":2'\"OneCollectionProperty\":[25]}]}"'                  }'                  #endregion Collection of complex containing collection properties                  #region Combination of primitive' complex and collection parameters                  new                  {                      DebugDescription = "Combination of primitive' complex and collection parameters"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' 12345)'                          new KeyValuePair<string' object>("p3"' new DateTimeOffset(2011' 12' 31' 0' 0' 0' TimeSpan.Zero))'                          new KeyValuePair<string' object>("p4"' new ODataResource(){ TypeName = "TestModel.ComplexType"' Properties = new[] { new ODataProperty() { Name = "One"' Value = 2 }}})'                          new KeyValuePair<string' object>("p5"' this.GetPrimitiveStringCollection(3))'                          new KeyValuePair<string' object>("p6"' this.GetComplexCollection(-1))'                          new KeyValuePair<string' object>("p7"' null)'                          new KeyValuePair<string' object>("p8"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{" +                          "\"p1\":\"foo\"'" +                          "\"p2\":12345'" +                           "\"p3\":\"2011-12-31T00:00:00Z\"'" +                          "\"p4\":{\"One\":2}'" +                          "\"p5\":[\"foo\"'\"bar\"'\"collectionElement3\"]'" +                          "\"p6\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]'" +                          "\"p7\":null'" +                          "\"p8\":[]}"'                  }'                  #endregion Combination of primitive' complex and collection parameters              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The following statement contains a magic number: var testCases = new[]              {                  #region Collection of primitives                  new                  {                      DebugDescription = "Collection of primitives: single string item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(1))                      }'                      JsonLight = "{\"p1\":[\"foo\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: three string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(3))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: various string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(-1))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"'\"4\"'\"collectionElement---5\"'null'\"\"'\"-8\"'\"This is collectionElement9\"'\"-collectionElement10-\"]}"'                  }'                  #endregion Collection of primitives                  #region Collection of complex values                  new                  {                      DebugDescription = "Collection of complex values: single complex item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}]}"'                  }'                  new                  {                      DebugDescription = "Collection of complex values: multiple complex items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(-1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]}"'                  }'                  #endregion Collection of complex values                  #region Collection of complex containing collection properties                  new                  {                      DebugDescription = "Collection of complex values: complex items containing collection properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollectionContainingCollectionItem())                      }'                      JsonLight = "{\"p1\":[{\"OneProperty\":1'\"OneCollectionProperty\":[15'20]}'{\"OneProperty\":2'\"OneCollectionProperty\":[25]}]}"'                  }'                  #endregion Collection of complex containing collection properties                  #region Combination of primitive' complex and collection parameters                  new                  {                      DebugDescription = "Combination of primitive' complex and collection parameters"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' 12345)'                          new KeyValuePair<string' object>("p3"' new DateTimeOffset(2011' 12' 31' 0' 0' 0' TimeSpan.Zero))'                          new KeyValuePair<string' object>("p4"' new ODataResource(){ TypeName = "TestModel.ComplexType"' Properties = new[] { new ODataProperty() { Name = "One"' Value = 2 }}})'                          new KeyValuePair<string' object>("p5"' this.GetPrimitiveStringCollection(3))'                          new KeyValuePair<string' object>("p6"' this.GetComplexCollection(-1))'                          new KeyValuePair<string' object>("p7"' null)'                          new KeyValuePair<string' object>("p8"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{" +                          "\"p1\":\"foo\"'" +                          "\"p2\":12345'" +                           "\"p3\":\"2011-12-31T00:00:00Z\"'" +                          "\"p4\":{\"One\":2}'" +                          "\"p5\":[\"foo\"'\"bar\"'\"collectionElement3\"]'" +                          "\"p6\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]'" +                          "\"p7\":null'" +                          "\"p8\":[]}"'                  }'                  #endregion Combination of primitive' complex and collection parameters              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The following statement contains a magic number: var testCases = new[]              {                  #region Collection of primitives                  new                  {                      DebugDescription = "Collection of primitives: single string item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(1))                      }'                      JsonLight = "{\"p1\":[\"foo\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: three string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(3))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: various string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(-1))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"'\"4\"'\"collectionElement---5\"'null'\"\"'\"-8\"'\"This is collectionElement9\"'\"-collectionElement10-\"]}"'                  }'                  #endregion Collection of primitives                  #region Collection of complex values                  new                  {                      DebugDescription = "Collection of complex values: single complex item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}]}"'                  }'                  new                  {                      DebugDescription = "Collection of complex values: multiple complex items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(-1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]}"'                  }'                  #endregion Collection of complex values                  #region Collection of complex containing collection properties                  new                  {                      DebugDescription = "Collection of complex values: complex items containing collection properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollectionContainingCollectionItem())                      }'                      JsonLight = "{\"p1\":[{\"OneProperty\":1'\"OneCollectionProperty\":[15'20]}'{\"OneProperty\":2'\"OneCollectionProperty\":[25]}]}"'                  }'                  #endregion Collection of complex containing collection properties                  #region Combination of primitive' complex and collection parameters                  new                  {                      DebugDescription = "Combination of primitive' complex and collection parameters"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' 12345)'                          new KeyValuePair<string' object>("p3"' new DateTimeOffset(2011' 12' 31' 0' 0' 0' TimeSpan.Zero))'                          new KeyValuePair<string' object>("p4"' new ODataResource(){ TypeName = "TestModel.ComplexType"' Properties = new[] { new ODataProperty() { Name = "One"' Value = 2 }}})'                          new KeyValuePair<string' object>("p5"' this.GetPrimitiveStringCollection(3))'                          new KeyValuePair<string' object>("p6"' this.GetComplexCollection(-1))'                          new KeyValuePair<string' object>("p7"' null)'                          new KeyValuePair<string' object>("p8"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{" +                          "\"p1\":\"foo\"'" +                          "\"p2\":12345'" +                           "\"p3\":\"2011-12-31T00:00:00Z\"'" +                          "\"p4\":{\"One\":2}'" +                          "\"p5\":[\"foo\"'\"bar\"'\"collectionElement3\"]'" +                          "\"p6\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]'" +                          "\"p7\":null'" +                          "\"p8\":[]}"'                  }'                  #endregion Combination of primitive' complex and collection parameters              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The following statement contains a magic number: var testCases = new[]              {                  #region Collection of primitives                  new                  {                      DebugDescription = "Collection of primitives: single string item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(1))                      }'                      JsonLight = "{\"p1\":[\"foo\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: three string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(3))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: various string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(-1))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"'\"4\"'\"collectionElement---5\"'null'\"\"'\"-8\"'\"This is collectionElement9\"'\"-collectionElement10-\"]}"'                  }'                  #endregion Collection of primitives                  #region Collection of complex values                  new                  {                      DebugDescription = "Collection of complex values: single complex item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}]}"'                  }'                  new                  {                      DebugDescription = "Collection of complex values: multiple complex items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(-1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]}"'                  }'                  #endregion Collection of complex values                  #region Collection of complex containing collection properties                  new                  {                      DebugDescription = "Collection of complex values: complex items containing collection properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollectionContainingCollectionItem())                      }'                      JsonLight = "{\"p1\":[{\"OneProperty\":1'\"OneCollectionProperty\":[15'20]}'{\"OneProperty\":2'\"OneCollectionProperty\":[25]}]}"'                  }'                  #endregion Collection of complex containing collection properties                  #region Combination of primitive' complex and collection parameters                  new                  {                      DebugDescription = "Combination of primitive' complex and collection parameters"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' 12345)'                          new KeyValuePair<string' object>("p3"' new DateTimeOffset(2011' 12' 31' 0' 0' 0' TimeSpan.Zero))'                          new KeyValuePair<string' object>("p4"' new ODataResource(){ TypeName = "TestModel.ComplexType"' Properties = new[] { new ODataProperty() { Name = "One"' Value = 2 }}})'                          new KeyValuePair<string' object>("p5"' this.GetPrimitiveStringCollection(3))'                          new KeyValuePair<string' object>("p6"' this.GetComplexCollection(-1))'                          new KeyValuePair<string' object>("p7"' null)'                          new KeyValuePair<string' object>("p8"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{" +                          "\"p1\":\"foo\"'" +                          "\"p2\":12345'" +                           "\"p3\":\"2011-12-31T00:00:00Z\"'" +                          "\"p4\":{\"One\":2}'" +                          "\"p5\":[\"foo\"'\"bar\"'\"collectionElement3\"]'" +                          "\"p6\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]'" +                          "\"p7\":null'" +                          "\"p8\":[]}"'                  }'                  #endregion Combination of primitive' complex and collection parameters              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestCollection,The following statement contains a magic number: var testCases = new[]              {                  #region Collection of primitives                  new                  {                      DebugDescription = "Collection of primitives: single string item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(1))                      }'                      JsonLight = "{\"p1\":[\"foo\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: three string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(3))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"]}"'                  }'                  new                  {                      DebugDescription = "Collection of primitives: various string items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetPrimitiveStringCollection(-1))                      }'                      JsonLight = "{\"p1\":[\"foo\"'\"bar\"'\"collectionElement3\"'\"4\"'\"collectionElement---5\"'null'\"\"'\"-8\"'\"This is collectionElement9\"'\"-collectionElement10-\"]}"'                  }'                  #endregion Collection of primitives                  #region Collection of complex values                  new                  {                      DebugDescription = "Collection of complex values: single complex item."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}]}"'                  }'                  new                  {                      DebugDescription = "Collection of complex values: multiple complex items."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollection(-1))                      }'                      JsonLight = "{\"p1\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]}"'                  }'                  #endregion Collection of complex values                  #region Collection of complex containing collection properties                  new                  {                      DebugDescription = "Collection of complex values: complex items containing collection properties."'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' this.GetComplexCollectionContainingCollectionItem())                      }'                      JsonLight = "{\"p1\":[{\"OneProperty\":1'\"OneCollectionProperty\":[15'20]}'{\"OneProperty\":2'\"OneCollectionProperty\":[25]}]}"'                  }'                  #endregion Collection of complex containing collection properties                  #region Combination of primitive' complex and collection parameters                  new                  {                      DebugDescription = "Combination of primitive' complex and collection parameters"'                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")'                          new KeyValuePair<string' object>("p2"' 12345)'                          new KeyValuePair<string' object>("p3"' new DateTimeOffset(2011' 12' 31' 0' 0' 0' TimeSpan.Zero))'                          new KeyValuePair<string' object>("p4"' new ODataResource(){ TypeName = "TestModel.ComplexType"' Properties = new[] { new ODataProperty() { Name = "One"' Value = 2 }}})'                          new KeyValuePair<string' object>("p5"' this.GetPrimitiveStringCollection(3))'                          new KeyValuePair<string' object>("p6"' this.GetComplexCollection(-1))'                          new KeyValuePair<string' object>("p7"' null)'                          new KeyValuePair<string' object>("p8"' new ODataCollectionStart() { Name = "c" })                      }'                      JsonLight = "{" +                          "\"p1\":\"foo\"'" +                          "\"p2\":12345'" +                           "\"p3\":\"2011-12-31T00:00:00Z\"'" +                          "\"p4\":{\"One\":2}'" +                          "\"p5\":[\"foo\"'\"bar\"'\"collectionElement3\"]'" +                          "\"p6\":[{\"One\":1}'{\"One\":2}'{\"One\":3}]'" +                          "\"p7\":null'" +                          "\"p8\":[]}"'                  }'                  #endregion Combination of primitive' complex and collection parameters              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The following statement contains a magic number: var testCases = new[]              {                  // The function import has one more parameter then specified in the payload. Expect failure.                  new                  {                      ParameterPayload = new ODataParameters() {  }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_MissingParameterInParameterPayload"' "'primitive'"' functionImport_Primitive.Name)'                  }'                    // The function import has more parameters then specified in the payload. Expect failure.                  new                  {                      ParameterPayload = new ODataParameters() {  }'                      FunctionImport = iedmFunctionImport_PrimitiveTwoParameters'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_MissingParameterInParameterPayload"' "'p1'' 'p2'"' iedmFunctionImport_PrimitiveTwoParameters.Name)'                  }'                    // Call WriteValue on parameter name that is not a parameter in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_ParameterNameNotFoundInOperation"' "p1"' "FunctionImport_Primitive")'                  }'                    // Call CreateCollectionWriter on parameter name that is not a parameter in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_ParameterNameNotFoundInOperation"' "p1"' "FunctionImport_PrimitiveCollection")'                  }'                    // Call WriteValue on a parameter that is not primitive or complex in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' "foo")                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "primitiveCollection"' "Collection")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complexCollection"' "foo")                      }'                      FunctionImport = functionImport_ComplexCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "complexCollection"' "Collection")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("entry"' "foo")                      }'                      FunctionImport = functionImport_Entry'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "entry"' "Entity")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("feed"' "foo")                      }'                      FunctionImport = functionImport_Feed'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "feed"' "Collection")'                  }'                    // Call CreateCollectionWriter on a parameter that is not Collection in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitive"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "primitive"' "Primitive")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complex"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Complex'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "complex"' "Complex")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("entry"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Entry'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "entry"' "Entity")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("feed"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Feed'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "feed"' "Collection")'                  }'                    // Calling WriteValue with unsupported values                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new MemoryStream())                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "System.IO.MemoryStream")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionValue())                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "Microsoft.OData.ODataCollectionValue")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataStreamReferenceValue())                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "Microsoft.OData.ODataStreamReferenceValue")'                  }'                  // Calling WriteValue and CreateCollectionWriter with null parameterName                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(null' "string param")                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(string.Empty' "string param")                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(null' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(string.Empty' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                    // the function import states that the type is a string' but we write an int.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitive"' 6)'                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.String"' "False")'                  }'                    // function import states that the type is Int32 and we write a double.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 6.6)'                      }'                      FunctionImport = iedmFunctionImport_PrimitiveInt'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Double"' "False"' "Edm.Int32"' "False")'                  }'                    // function import states that the type is double and we write a int32.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 6)'                      }'                      FunctionImport = iedmFunctionImport_PrimitiveDouble'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.Double"' "False")'                  }'                    // function import states that the type is complex' but we write primitive                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complex"' 6)'                      }'                      FunctionImport = functionImport_Complex'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "complex"' "Complex")'                  }'                    // complex type different in the payload and in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complex"'                               new ODataResource()                               {                                  TypeName = "TestModel.SomeComplexType"'                                  Properties = new[] { new ODataProperty() { Name = "One"' Value = 1 } }                              })'                      }'                      FunctionImport = functionImport_Complex'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_UnrecognizedTypeName"' "TestModel.SomeComplexType")'                  }'                    // complex type without typename in the payload' primitive type in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitive"'                               new ODataResource()                               {                                  Properties = new[] { new ODataProperty() { Name = "One"' Value = 1 } }                              })'                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceWriterOnNonEntityOrComplexTypeKind"' "primitive"' "Primitive")'                  }'                    // primitive collection in the payload' but complex collection in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complexCollection"' this.GetPrimitiveStringCollection(1))                      }'                      FunctionImport = functionImport_ComplexCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestModel.ComplexType")                  }'                    // primitive collection of wrong type in the payload                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' this.GetPrimitiveIntCollection(1))                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.String"' "True")'                  }'                    // complex collection in the payload' but primitive collection in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' this.GetComplexCollection(1))                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceSetWriterOnNonStructuredCollectionTypeKind"' "primitiveCollection"' "Collection")                  }'                    // complex collection without payload types in the payload' but primitive collection in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' this.GetComplexCollectionNoTypeName(1))                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceSetWriterOnNonStructuredCollectionTypeKind"' "primitiveCollection"' "Collection")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The following statement contains a magic number: var testCases = new[]              {                  // The function import has one more parameter then specified in the payload. Expect failure.                  new                  {                      ParameterPayload = new ODataParameters() {  }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_MissingParameterInParameterPayload"' "'primitive'"' functionImport_Primitive.Name)'                  }'                    // The function import has more parameters then specified in the payload. Expect failure.                  new                  {                      ParameterPayload = new ODataParameters() {  }'                      FunctionImport = iedmFunctionImport_PrimitiveTwoParameters'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_MissingParameterInParameterPayload"' "'p1'' 'p2'"' iedmFunctionImport_PrimitiveTwoParameters.Name)'                  }'                    // Call WriteValue on parameter name that is not a parameter in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_ParameterNameNotFoundInOperation"' "p1"' "FunctionImport_Primitive")'                  }'                    // Call CreateCollectionWriter on parameter name that is not a parameter in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_ParameterNameNotFoundInOperation"' "p1"' "FunctionImport_PrimitiveCollection")'                  }'                    // Call WriteValue on a parameter that is not primitive or complex in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' "foo")                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "primitiveCollection"' "Collection")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complexCollection"' "foo")                      }'                      FunctionImport = functionImport_ComplexCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "complexCollection"' "Collection")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("entry"' "foo")                      }'                      FunctionImport = functionImport_Entry'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "entry"' "Entity")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("feed"' "foo")                      }'                      FunctionImport = functionImport_Feed'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "feed"' "Collection")'                  }'                    // Call CreateCollectionWriter on a parameter that is not Collection in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitive"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "primitive"' "Primitive")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complex"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Complex'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "complex"' "Complex")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("entry"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Entry'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "entry"' "Entity")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("feed"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Feed'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "feed"' "Collection")'                  }'                    // Calling WriteValue with unsupported values                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new MemoryStream())                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "System.IO.MemoryStream")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionValue())                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "Microsoft.OData.ODataCollectionValue")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataStreamReferenceValue())                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "Microsoft.OData.ODataStreamReferenceValue")'                  }'                  // Calling WriteValue and CreateCollectionWriter with null parameterName                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(null' "string param")                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(string.Empty' "string param")                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(null' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(string.Empty' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                    // the function import states that the type is a string' but we write an int.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitive"' 6)'                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.String"' "False")'                  }'                    // function import states that the type is Int32 and we write a double.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 6.6)'                      }'                      FunctionImport = iedmFunctionImport_PrimitiveInt'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Double"' "False"' "Edm.Int32"' "False")'                  }'                    // function import states that the type is double and we write a int32.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 6)'                      }'                      FunctionImport = iedmFunctionImport_PrimitiveDouble'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.Double"' "False")'                  }'                    // function import states that the type is complex' but we write primitive                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complex"' 6)'                      }'                      FunctionImport = functionImport_Complex'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "complex"' "Complex")'                  }'                    // complex type different in the payload and in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complex"'                               new ODataResource()                               {                                  TypeName = "TestModel.SomeComplexType"'                                  Properties = new[] { new ODataProperty() { Name = "One"' Value = 1 } }                              })'                      }'                      FunctionImport = functionImport_Complex'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_UnrecognizedTypeName"' "TestModel.SomeComplexType")'                  }'                    // complex type without typename in the payload' primitive type in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitive"'                               new ODataResource()                               {                                  Properties = new[] { new ODataProperty() { Name = "One"' Value = 1 } }                              })'                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceWriterOnNonEntityOrComplexTypeKind"' "primitive"' "Primitive")'                  }'                    // primitive collection in the payload' but complex collection in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complexCollection"' this.GetPrimitiveStringCollection(1))                      }'                      FunctionImport = functionImport_ComplexCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestModel.ComplexType")                  }'                    // primitive collection of wrong type in the payload                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' this.GetPrimitiveIntCollection(1))                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.String"' "True")'                  }'                    // complex collection in the payload' but primitive collection in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' this.GetComplexCollection(1))                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceSetWriterOnNonStructuredCollectionTypeKind"' "primitiveCollection"' "Collection")                  }'                    // complex collection without payload types in the payload' but primitive collection in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' this.GetComplexCollectionNoTypeName(1))                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceSetWriterOnNonStructuredCollectionTypeKind"' "primitiveCollection"' "Collection")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The following statement contains a magic number: var testCases = new[]              {                  // The function import has one more parameter then specified in the payload. Expect failure.                  new                  {                      ParameterPayload = new ODataParameters() {  }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_MissingParameterInParameterPayload"' "'primitive'"' functionImport_Primitive.Name)'                  }'                    // The function import has more parameters then specified in the payload. Expect failure.                  new                  {                      ParameterPayload = new ODataParameters() {  }'                      FunctionImport = iedmFunctionImport_PrimitiveTwoParameters'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_MissingParameterInParameterPayload"' "'p1'' 'p2'"' iedmFunctionImport_PrimitiveTwoParameters.Name)'                  }'                    // Call WriteValue on parameter name that is not a parameter in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_ParameterNameNotFoundInOperation"' "p1"' "FunctionImport_Primitive")'                  }'                    // Call CreateCollectionWriter on parameter name that is not a parameter in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_ParameterNameNotFoundInOperation"' "p1"' "FunctionImport_PrimitiveCollection")'                  }'                    // Call WriteValue on a parameter that is not primitive or complex in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' "foo")                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "primitiveCollection"' "Collection")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complexCollection"' "foo")                      }'                      FunctionImport = functionImport_ComplexCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "complexCollection"' "Collection")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("entry"' "foo")                      }'                      FunctionImport = functionImport_Entry'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "entry"' "Entity")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("feed"' "foo")                      }'                      FunctionImport = functionImport_Feed'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "feed"' "Collection")'                  }'                    // Call CreateCollectionWriter on a parameter that is not Collection in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitive"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "primitive"' "Primitive")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complex"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Complex'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "complex"' "Complex")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("entry"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Entry'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "entry"' "Entity")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("feed"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Feed'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "feed"' "Collection")'                  }'                    // Calling WriteValue with unsupported values                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new MemoryStream())                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "System.IO.MemoryStream")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionValue())                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "Microsoft.OData.ODataCollectionValue")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataStreamReferenceValue())                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "Microsoft.OData.ODataStreamReferenceValue")'                  }'                  // Calling WriteValue and CreateCollectionWriter with null parameterName                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(null' "string param")                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(string.Empty' "string param")                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(null' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(string.Empty' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                    // the function import states that the type is a string' but we write an int.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitive"' 6)'                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.String"' "False")'                  }'                    // function import states that the type is Int32 and we write a double.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 6.6)'                      }'                      FunctionImport = iedmFunctionImport_PrimitiveInt'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Double"' "False"' "Edm.Int32"' "False")'                  }'                    // function import states that the type is double and we write a int32.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 6)'                      }'                      FunctionImport = iedmFunctionImport_PrimitiveDouble'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.Double"' "False")'                  }'                    // function import states that the type is complex' but we write primitive                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complex"' 6)'                      }'                      FunctionImport = functionImport_Complex'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "complex"' "Complex")'                  }'                    // complex type different in the payload and in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complex"'                               new ODataResource()                               {                                  TypeName = "TestModel.SomeComplexType"'                                  Properties = new[] { new ODataProperty() { Name = "One"' Value = 1 } }                              })'                      }'                      FunctionImport = functionImport_Complex'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_UnrecognizedTypeName"' "TestModel.SomeComplexType")'                  }'                    // complex type without typename in the payload' primitive type in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitive"'                               new ODataResource()                               {                                  Properties = new[] { new ODataProperty() { Name = "One"' Value = 1 } }                              })'                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceWriterOnNonEntityOrComplexTypeKind"' "primitive"' "Primitive")'                  }'                    // primitive collection in the payload' but complex collection in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complexCollection"' this.GetPrimitiveStringCollection(1))                      }'                      FunctionImport = functionImport_ComplexCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestModel.ComplexType")                  }'                    // primitive collection of wrong type in the payload                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' this.GetPrimitiveIntCollection(1))                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.String"' "True")'                  }'                    // complex collection in the payload' but primitive collection in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' this.GetComplexCollection(1))                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceSetWriterOnNonStructuredCollectionTypeKind"' "primitiveCollection"' "Collection")                  }'                    // complex collection without payload types in the payload' but primitive collection in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' this.GetComplexCollectionNoTypeName(1))                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceSetWriterOnNonStructuredCollectionTypeKind"' "primitiveCollection"' "Collection")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterWriterErrorTests,The following statement contains a magic number: var testCases = new[]              {                  // The function import has one more parameter then specified in the payload. Expect failure.                  new                  {                      ParameterPayload = new ODataParameters() {  }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_MissingParameterInParameterPayload"' "'primitive'"' functionImport_Primitive.Name)'                  }'                    // The function import has more parameters then specified in the payload. Expect failure.                  new                  {                      ParameterPayload = new ODataParameters() {  }'                      FunctionImport = iedmFunctionImport_PrimitiveTwoParameters'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_MissingParameterInParameterPayload"' "'p1'' 'p2'"' iedmFunctionImport_PrimitiveTwoParameters.Name)'                  }'                    // Call WriteValue on parameter name that is not a parameter in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' "foo")                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_ParameterNameNotFoundInOperation"' "p1"' "FunctionImport_Primitive")'                  }'                    // Call CreateCollectionWriter on parameter name that is not a parameter in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_ParameterNameNotFoundInOperation"' "p1"' "FunctionImport_PrimitiveCollection")'                  }'                    // Call WriteValue on a parameter that is not primitive or complex in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' "foo")                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "primitiveCollection"' "Collection")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complexCollection"' "foo")                      }'                      FunctionImport = functionImport_ComplexCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "complexCollection"' "Collection")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("entry"' "foo")                      }'                      FunctionImport = functionImport_Entry'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "entry"' "Entity")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("feed"' "foo")                      }'                      FunctionImport = functionImport_Feed'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "feed"' "Collection")'                  }'                    // Call CreateCollectionWriter on a parameter that is not Collection in the FunctionImport.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitive"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "primitive"' "Primitive")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complex"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Complex'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "complex"' "Complex")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("entry"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Entry'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "entry"' "Entity")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("feed"' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = functionImport_Feed'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind"' "feed"' "Collection")'                  }'                    // Calling WriteValue with unsupported values                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new MemoryStream())                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "System.IO.MemoryStream")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataCollectionValue())                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "Microsoft.OData.ODataCollectionValue")'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' new ODataStreamReferenceValue())                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType"' "p1"' "Microsoft.OData.ODataStreamReferenceValue")'                  }'                  // Calling WriteValue and CreateCollectionWriter with null parameterName                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(null' "string param")                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(string.Empty' "string param")                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(null' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>(string.Empty' new ODataCollectionStart() { Name = "c" })                      }'                      FunctionImport = default(IEdmOperationImport)'                      ExpectedException = ODataExpectedExceptions.ArgumentNullOrEmptyException()'                  }'                    // the function import states that the type is a string' but we write an int.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitive"' 6)'                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.String"' "False")'                  }'                    // function import states that the type is Int32 and we write a double.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 6.6)'                      }'                      FunctionImport = iedmFunctionImport_PrimitiveInt'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Double"' "False"' "Edm.Int32"' "False")'                  }'                    // function import states that the type is double and we write a int32.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("p1"' 6)'                      }'                      FunctionImport = iedmFunctionImport_PrimitiveDouble'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.Double"' "False")'                  }'                    // function import states that the type is complex' but we write primitive                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complex"' 6)'                      }'                      FunctionImport = functionImport_Complex'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind"' "complex"' "Complex")'                  }'                    // complex type different in the payload and in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complex"'                               new ODataResource()                               {                                  TypeName = "TestModel.SomeComplexType"'                                  Properties = new[] { new ODataProperty() { Name = "One"' Value = 1 } }                              })'                      }'                      FunctionImport = functionImport_Complex'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_UnrecognizedTypeName"' "TestModel.SomeComplexType")'                  }'                    // complex type without typename in the payload' primitive type in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitive"'                               new ODataResource()                               {                                  Properties = new[] { new ODataProperty() { Name = "One"' Value = 1 } }                              })'                      }'                      FunctionImport = functionImport_Primitive'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceWriterOnNonEntityOrComplexTypeKind"' "primitive"' "Primitive")'                  }'                    // primitive collection in the payload' but complex collection in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("complexCollection"' this.GetPrimitiveStringCollection(1))                      }'                      FunctionImport = functionImport_ComplexCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestModel.ComplexType")                  }'                    // primitive collection of wrong type in the payload                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' this.GetPrimitiveIntCollection(1))                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False"' "Edm.String"' "True")'                  }'                    // complex collection in the payload' but primitive collection in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' this.GetComplexCollection(1))                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceSetWriterOnNonStructuredCollectionTypeKind"' "primitiveCollection"' "Collection")                  }'                    // complex collection without payload types in the payload' but primitive collection in the function import.                  new                  {                      ParameterPayload = new ODataParameters()                      {                          new KeyValuePair<string' object>("primitiveCollection"' this.GetComplexCollectionNoTypeName(1))                      }'                      FunctionImport = functionImport_PrimitiveCollection'                      ExpectedException = ODataExpectedExceptions.ODataException("ODataParameterWriterCore_CannotCreateResourceSetWriterOnNonStructuredCollectionTypeKind"' "primitiveCollection"' "Collection")                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.ParameterWriter,ParameterWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\ParameterWriter\ParameterWriterTests.cs,ParameterPayloadTestWithFunctionImport,The following statement contains a magic number: var allTestCases = bindable.SelectMany(value =>              {                  var testCases = new[]                  {                       // Nullable parameters can be ignored.                      new                      {                          ParameterPayload = new ODataParameters() {  }'                          FunctionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_NullablePrimitive_Bindable" + value).First()'                          JsonLight = "{}"'                      }'                        // funtion import with side-effecting = false.                      new                      {                          ParameterPayload = new ODataParameters()                          {                              new KeyValuePair<string' object>("p1"' 5)                          }'                          FunctionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_PrimitiveNoSideEffecting_Bindable_" + value).First()'                          JsonLight = "{\"p1\":5}"'                      }'                        // primitive with function import                      new                      {                          ParameterPayload = new ODataParameters()                          {                              new KeyValuePair<string' object>("primitive"' "foo")                          }'                          FunctionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Primitive_Bindable" + value).First()'                          JsonLight = "{\"primitive\":\"foo\"}"'                      }'                        // complex with function import                       new                      {                          ParameterPayload = new ODataParameters()                          {                              new KeyValuePair<string' object>(                                  "complex"'                                   new ODataResource()                                  {                                      TypeName = "TestModel.ComplexType"'                                      Properties = new[] { new ODataProperty() { Name = "PrimitiveProperty"' Value = "foo" }' new ODataProperty() { Name="ComplexProperty"' Value = null } }                                  })                          }'                          FunctionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_Complex_Bindable" + value).First()'                          JsonLight = "{\"complex\":{\"PrimitiveProperty\":\"foo\"'\"ComplexProperty\":null}}"'                      }'                         // primitive collection with function import.                      new                      {                          ParameterPayload = new ODataParameters()                          {                              new KeyValuePair<string' object>("primitiveCollection"' this.GetPrimitiveStringCollection(1))                          }'                          FunctionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_PrimitiveCollection_Bindable" + value).First()'                          JsonLight = "{\"primitiveCollection\":[\"foo\"]}"'                      }'                        // complex collection with function import.                      new                      {                          ParameterPayload = new ODataParameters()                          {                              new KeyValuePair<string' object>("complexCollection"' complexItemCollectionStart)'                          }'                          FunctionImport = model.FindEntityContainer("TestContainer").FindOperationImports("FunctionImport_ComplexCollection_Bindable" + value).First()'                          JsonLight = "{\"complexCollection\":[{\"PrimitiveProperty\":\"foo\"'\"ComplexProperty\":null}]}"'                      }'                  };                    return testCases;                });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,UseWriterOnceTests,The following statement contains a magic number: object rawValue = 42;
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,UseWriterOnceTests,The following statement contains a magic number: var testCases = messageWriterOperations.Combinations(2);
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,NoByteOrderMarkByDefaultTest,The following statement contains a magic number: this.CombinatorialEngineProvider.RunCombinations(                  writerActionsForPayloadKinds.Where(writerAction =>                      writerAction.PayloadKind != ODataPayloadKind.Unsupported &&                      writerAction.PayloadKind != ODataPayloadKind.Batch &&                      writerAction.PayloadKind != ODataPayloadKind.Error &&                      writerAction.PayloadKind != ODataPayloadKind.ServiceDocument &&                      writerAction.PayloadKind != ODataPayloadKind.Value)'                  this.WriterTestConfigurationProvider.AtomFormatConfigurations'                  (testCase' testConfiguration) =>                  {                      testConfiguration = testConfiguration.Clone();                      testConfiguration.MessageWriterSettings.SetServiceDocumentUri(ServiceDocumentUri);                        if (!testCase.PayloadKind.IsSupported(testConfiguration))                      {                          return;                      }                        using (var memoryStream = new TestStream())                      {                          TestMessage testMessage;                          byte[] payload;                          using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' out testMessage' null' model))                          {                              testCase.WriterAction(messageWriter);                              payload = new byte[testMessage.TestStream.Length];                              testMessage.TestStream.Seek(0' SeekOrigin.Begin);                              this.Assert.IsTrue(testMessage.TestStream.Length >= 2' "payload is not big enough");                                testMessage.TestStream.Read(payload' 0' 2 /* 2 bytes only are needed for validation */);                          }                            this.Assert.AreEqual(60' payload[0]' "BOM might be present which is not expected");                          this.Assert.AreEqual(63' payload[1]' "BOM might be present which is not expected");                      }                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,NoByteOrderMarkByDefaultTest,The following statement contains a magic number: this.CombinatorialEngineProvider.RunCombinations(                  writerActionsForPayloadKinds.Where(writerAction =>                      writerAction.PayloadKind != ODataPayloadKind.Unsupported &&                      writerAction.PayloadKind != ODataPayloadKind.Batch &&                      writerAction.PayloadKind != ODataPayloadKind.Error &&                      writerAction.PayloadKind != ODataPayloadKind.ServiceDocument &&                      writerAction.PayloadKind != ODataPayloadKind.Value)'                  this.WriterTestConfigurationProvider.AtomFormatConfigurations'                  (testCase' testConfiguration) =>                  {                      testConfiguration = testConfiguration.Clone();                      testConfiguration.MessageWriterSettings.SetServiceDocumentUri(ServiceDocumentUri);                        if (!testCase.PayloadKind.IsSupported(testConfiguration))                      {                          return;                      }                        using (var memoryStream = new TestStream())                      {                          TestMessage testMessage;                          byte[] payload;                          using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' out testMessage' null' model))                          {                              testCase.WriterAction(messageWriter);                              payload = new byte[testMessage.TestStream.Length];                              testMessage.TestStream.Seek(0' SeekOrigin.Begin);                              this.Assert.IsTrue(testMessage.TestStream.Length >= 2' "payload is not big enough");                                testMessage.TestStream.Read(payload' 0' 2 /* 2 bytes only are needed for validation */);                          }                            this.Assert.AreEqual(60' payload[0]' "BOM might be present which is not expected");                          this.Assert.AreEqual(63' payload[1]' "BOM might be present which is not expected");                      }                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,NoByteOrderMarkByDefaultTest,The following statement contains a magic number: this.CombinatorialEngineProvider.RunCombinations(                  writerActionsForPayloadKinds.Where(writerAction =>                      writerAction.PayloadKind != ODataPayloadKind.Unsupported &&                      writerAction.PayloadKind != ODataPayloadKind.Batch &&                      writerAction.PayloadKind != ODataPayloadKind.Error &&                      writerAction.PayloadKind != ODataPayloadKind.ServiceDocument &&                      writerAction.PayloadKind != ODataPayloadKind.Value)'                  this.WriterTestConfigurationProvider.AtomFormatConfigurations'                  (testCase' testConfiguration) =>                  {                      testConfiguration = testConfiguration.Clone();                      testConfiguration.MessageWriterSettings.SetServiceDocumentUri(ServiceDocumentUri);                        if (!testCase.PayloadKind.IsSupported(testConfiguration))                      {                          return;                      }                        using (var memoryStream = new TestStream())                      {                          TestMessage testMessage;                          byte[] payload;                          using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' out testMessage' null' model))                          {                              testCase.WriterAction(messageWriter);                              payload = new byte[testMessage.TestStream.Length];                              testMessage.TestStream.Seek(0' SeekOrigin.Begin);                              this.Assert.IsTrue(testMessage.TestStream.Length >= 2' "payload is not big enough");                                testMessage.TestStream.Read(payload' 0' 2 /* 2 bytes only are needed for validation */);                          }                            this.Assert.AreEqual(60' payload[0]' "BOM might be present which is not expected");                          this.Assert.AreEqual(63' payload[1]' "BOM might be present which is not expected");                      }                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,NoByteOrderMarkByDefaultTest,The following statement contains a magic number: this.CombinatorialEngineProvider.RunCombinations(                  writerActionsForPayloadKinds.Where(writerAction =>                      writerAction.PayloadKind != ODataPayloadKind.Unsupported &&                      writerAction.PayloadKind != ODataPayloadKind.Batch &&                      writerAction.PayloadKind != ODataPayloadKind.Error &&                      writerAction.PayloadKind != ODataPayloadKind.ServiceDocument &&                      writerAction.PayloadKind != ODataPayloadKind.Value)'                  this.WriterTestConfigurationProvider.AtomFormatConfigurations'                  (testCase' testConfiguration) =>                  {                      testConfiguration = testConfiguration.Clone();                      testConfiguration.MessageWriterSettings.SetServiceDocumentUri(ServiceDocumentUri);                        if (!testCase.PayloadKind.IsSupported(testConfiguration))                      {                          return;                      }                        using (var memoryStream = new TestStream())                      {                          TestMessage testMessage;                          byte[] payload;                          using (ODataMessageWriterTestWrapper messageWriter = TestWriterUtils.CreateMessageWriter(memoryStream' testConfiguration' this.Assert' out testMessage' null' model))                          {                              testCase.WriterAction(messageWriter);                              payload = new byte[testMessage.TestStream.Length];                              testMessage.TestStream.Seek(0' SeekOrigin.Begin);                              this.Assert.IsTrue(testMessage.TestStream.Length >= 2' "payload is not big enough");                                testMessage.TestStream.Read(payload' 0' 2 /* 2 bytes only are needed for validation */);                          }                            this.Assert.AreEqual(60' payload[0]' "BOM might be present which is not expected");                          this.Assert.AreEqual(63' payload[1]' "BOM might be present which is not expected");                      }                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,MessageWriterTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\MessageWriterTests.cs,PublicSetOnProperties,The following statement contains a magic number: exception = TestExceptionUtils.RunCatching(() => responseMessage.StatusCode = 5);
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,UriHandlingTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\UriHandlingTests.cs,ResolverUriTest,The following statement contains a magic number: this.CombinatorialEngineProvider.RunCombinations(                  testDescriptors'                  new bool[] { false' true }'                  this.WriterTestConfigurationProvider.ExplicitFormatConfigurations.Where(c => false)'                  (testDescriptor' runInBatch' testConfiguration) =>                  {                      testConfiguration = testConfiguration.Clone();                      testConfiguration.MessageWriterSettings.SetServiceDocumentUri(ServiceDocumentUri);                        if ((!testConfiguration.IsRequest || !testDescriptor.TestCase.ResponseOnly) &&                          (testConfiguration.Format == ODataFormat.Json && testDescriptor.TestCase.JsonExtractor != null))                      {                          var td = testDescriptor.Descriptor.DeferredLinksToEntityReferenceLinksInRequest(testConfiguration);                          if (!runInBatch)                          {                              TestWriterUtils.WriteAndVerifyODataPayload(td' testConfiguration' this.Assert' this.Logger);                          }                          else                          {                              testConfiguration = testConfiguration.Clone();                              testConfiguration.MessageWriterSettings.EnableMessageStreamDisposal = true;                              var batchDescriptor = new List<BatchWriterTestDescriptor.InvocationAndOperationDescriptor>();                              if (testConfiguration.IsRequest)                              {                                  batchDescriptor.Add(BatchWriterUtils.StartBatch());                                  batchDescriptor.Add(BatchWriterUtils.StartChangeSet());                                  batchDescriptor.Add(BatchWriterUtils.ChangeSetRequest(                                      "PUT"'                                      new Uri("http://odata.org")'                                      null'                                      null'                                      new BatchWriterUtils.ODataPayload()                                      {                                          Items = td.PayloadItems.ToArray()'                                          WriterTestExpectedResults = td.ExpectedResultCallback(testConfiguration)'                                          TestConfiguration = testConfiguration                                      }));                                  batchDescriptor.Add(BatchWriterUtils.EndChangeSet());                                  batchDescriptor.Add(BatchWriterUtils.EndBatch());                              }                              else                              {                                  batchDescriptor.Add(BatchWriterUtils.StartBatch());                                  batchDescriptor.Add(BatchWriterUtils.QueryOperationResponse(                                      200'                                      new BatchWriterUtils.ODataPayload()                                      {                                          Items = td.PayloadItems.ToArray()'                                          WriterTestExpectedResults = td.ExpectedResultCallback(testConfiguration)'                                          TestConfiguration = testConfiguration                                      }));                                  batchDescriptor.Add(BatchWriterUtils.EndBatch());                              }                                var batchTd = new BatchWriterTestDescriptor(                                  this.BatchSettings'                                  batchDescriptor.ToArray()'                                  (Dictionary<string' string>)null'                                  new Uri("http://odata.org/service")'                                  td.UrlResolver);                                ODataMessageWriterSettings batchWriterSettings = testConfiguration.MessageWriterSettings.Clone();                              batchWriterSettings.SetContentType(null);                              WriterTestConfiguration batchTestConfiguration = new WriterTestConfiguration(                                  null'                                  batchWriterSettings'                                  testConfiguration.IsRequest'                                  testConfiguration.Synchronous);                              BatchWriterUtils.WriteAndVerifyBatchPayload(batchTd' batchTestConfiguration' testConfiguration' this.Assert);                          }                      }                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PropertyContentTypeTests,The following statement contains a magic number: ODataProperty property = new ODataProperty() { Name = "Age"' Value = 42 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,RawValueContentTypeTests,The following statement contains a magic number: int value = 42;
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The following statement contains a magic number: object[] values = new object[] { 41' 42' 43 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The following statement contains a magic number: object[] values = new object[] { 41' 42' 43 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,PrimitiveCollectionContentTypeTests,The following statement contains a magic number: object[] values = new object[] { 41' 42' 43 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentTypeVersioningTest,The following statement contains a magic number: ODataProperty property = new ODataProperty() { Name = "Age"' Value = 42 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentPrimitivetTypeVersioningTest,The following statement contains a magic number: object[] primitiveCollection = new object[] { 41' 42' 43 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentPrimitivetTypeVersioningTest,The following statement contains a magic number: object[] primitiveCollection = new object[] { 41' 42' 43 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,AppJsonContentPrimitivetTypeVersioningTest,The following statement contains a magic number: object[] primitiveCollection = new object[] { 41' 42' 43 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterContentTypeTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterContentTypeTests.cs,CreateDefaultParameter,The following statement contains a magic number: var street = new ODataResource()              {                  TypeName = "My.StreetType"'                  Properties = new[]                  {                      new ODataProperty { Name = "StreetName"' Value = "One Redmond Way" }'                      new ODataProperty { Name = "Number"' Value = 1234 }'                  }              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The following statement contains a magic number: int depthLimit = 15;
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PropertyValueDepthLimitTest,The following statement contains a magic number: int depthOverHalfButStillBelowLimit = 10;
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateComplexPropertiesEntryDescriptor,The following statement contains a magic number: string[] complexPropertiesJsonResult = StringUtils.Flatten(                  "{"'                  "$(Indent)\"__metadata\":{"'                  "$(Indent)$(Indent)\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\""'                  "$(Indent)}'\"Id\":1'\"ComplexAddress\":{"'                  JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 2' "'\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\"")'                  "$(Indent)}'\"NestedComplex\":{"'                  JsonUtils.GetMetadataPropertyForComplexType("My.NestedAddressType"' 2' "'\"Street\":{")'                  JsonUtils.GetMetadataPropertyForComplexType("OtherTestNamespace.StreetType"' 3' "'\"StreetName\":\"One Redmond Way\"'\"Number\":1234")'                  "$(Indent)$(Indent)}'\"City\":\"Redmond \""'                  "$(Indent)}"'                  "}");
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateComplexPropertiesEntryDescriptor,The following statement contains a magic number: string[] complexPropertiesJsonResult = StringUtils.Flatten(                  "{"'                  "$(Indent)\"__metadata\":{"'                  "$(Indent)$(Indent)\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\""'                  "$(Indent)}'\"Id\":1'\"ComplexAddress\":{"'                  JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 2' "'\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\"")'                  "$(Indent)}'\"NestedComplex\":{"'                  JsonUtils.GetMetadataPropertyForComplexType("My.NestedAddressType"' 2' "'\"Street\":{")'                  JsonUtils.GetMetadataPropertyForComplexType("OtherTestNamespace.StreetType"' 3' "'\"StreetName\":\"One Redmond Way\"'\"Number\":1234")'                  "$(Indent)$(Indent)}'\"City\":\"Redmond \""'                  "$(Indent)}"'                  "}");
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateComplexPropertiesEntryDescriptor,The following statement contains a magic number: string[] complexPropertiesJsonResult = StringUtils.Flatten(                  "{"'                  "$(Indent)\"__metadata\":{"'                  "$(Indent)$(Indent)\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\""'                  "$(Indent)}'\"Id\":1'\"ComplexAddress\":{"'                  JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 2' "'\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\"")'                  "$(Indent)}'\"NestedComplex\":{"'                  JsonUtils.GetMetadataPropertyForComplexType("My.NestedAddressType"' 2' "'\"Street\":{")'                  JsonUtils.GetMetadataPropertyForComplexType("OtherTestNamespace.StreetType"' 3' "'\"StreetName\":\"One Redmond Way\"'\"Number\":1234")'                  "$(Indent)$(Indent)}'\"City\":\"Redmond \""'                  "$(Indent)}"'                  "}");
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The following statement contains a magic number: collectionWithoutTypeNameJsonPayload = StringUtils.Flatten(                      "$(Indent)}'\"ComplexCollectionWithoutTypeName\":{"'                      "$(Indent)$(Indent)\"results\":["'                      "$(Indent)$(Indent)$(Indent){"'                      JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 4' "'\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\"")'                      "$(Indent)$(Indent)$(Indent)}'{"'                      JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 4' "'\"Street\":\"Am Euro Platz 3\"'\"City\":\"Vienna \"")'                      "$(Indent)$(Indent)$(Indent)}'{"'                      JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 4' "'\"City\":\"Sammamish\"")'                      "$(Indent)$(Indent)$(Indent)}"'                      "$(Indent)$(Indent)]");
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The following statement contains a magic number: collectionWithoutTypeNameJsonPayload = StringUtils.Flatten(                      "$(Indent)}'\"ComplexCollectionWithoutTypeName\":{"'                      "$(Indent)$(Indent)\"results\":["'                      "$(Indent)$(Indent)$(Indent){"'                      JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 4' "'\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\"")'                      "$(Indent)$(Indent)$(Indent)}'{"'                      JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 4' "'\"Street\":\"Am Euro Platz 3\"'\"City\":\"Vienna \"")'                      "$(Indent)$(Indent)$(Indent)}'{"'                      JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 4' "'\"City\":\"Sammamish\"")'                      "$(Indent)$(Indent)$(Indent)}"'                      "$(Indent)$(Indent)]");
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The following statement contains a magic number: collectionWithoutTypeNameJsonPayload = StringUtils.Flatten(                      "$(Indent)}'\"ComplexCollectionWithoutTypeName\":{"'                      "$(Indent)$(Indent)\"results\":["'                      "$(Indent)$(Indent)$(Indent){"'                      JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 4' "'\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\"")'                      "$(Indent)$(Indent)$(Indent)}'{"'                      JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 4' "'\"Street\":\"Am Euro Platz 3\"'\"City\":\"Vienna \"")'                      "$(Indent)$(Indent)$(Indent)}'{"'                      JsonUtils.GetMetadataPropertyForComplexType("My.AddressType"' 4' "'\"City\":\"Sammamish\"")'                      "$(Indent)$(Indent)$(Indent)}"'                      "$(Indent)$(Indent)]");
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The following statement contains a magic number: string[] collectionPropertiesJsonResult = StringUtils.Flatten(                  "{"'                  "$(Indent)\"__metadata\":{"'                  "$(Indent)$(Indent)\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\""'                  "$(Indent)}'\"Id\":1'\"EmptyCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"PrimitiveCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)0'1'2'3'4'5'6'7'8'9"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"IntCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)0'1'2"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"StringCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)\"One\"'\"Two\"'\"Three\""'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"GeographyCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Geography")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  JsonUtils.GetJsonLines(                      "$(Indent)$(Indent)$(Indent)" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyCollectionValue' "Edm.GeographyCollection") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyLineStringValue' "Edm.GeographyLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiLineStringValue' "Edm.GeographyMultiLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPointValue' "Edm.GeographyMultiPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPolygonValue' "Edm.GeographyMultiPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPointValue' "Edm.GeographyPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPolygonValue' "Edm.GeographyPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyValue' "Edm.GeographyPoint")' indentDepth: 3)'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"ComplexCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("My.AddressType")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent){"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\""'                  "$(Indent)$(Indent)$(Indent)}'{"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"Am Euro Platz 3\"'\"City\":\"Vienna \""'                  "$(Indent)$(Indent)$(Indent)}"'                  "$(Indent)$(Indent)]"'                  collectionWithoutTypeNameJsonPayload'                  "$(Indent)}"'                      "}"              );
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The following statement contains a magic number: string[] collectionPropertiesJsonResult = StringUtils.Flatten(                  "{"'                  "$(Indent)\"__metadata\":{"'                  "$(Indent)$(Indent)\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\""'                  "$(Indent)}'\"Id\":1'\"EmptyCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"PrimitiveCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)0'1'2'3'4'5'6'7'8'9"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"IntCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)0'1'2"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"StringCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)\"One\"'\"Two\"'\"Three\""'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"GeographyCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Geography")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  JsonUtils.GetJsonLines(                      "$(Indent)$(Indent)$(Indent)" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyCollectionValue' "Edm.GeographyCollection") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyLineStringValue' "Edm.GeographyLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiLineStringValue' "Edm.GeographyMultiLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPointValue' "Edm.GeographyMultiPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPolygonValue' "Edm.GeographyMultiPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPointValue' "Edm.GeographyPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPolygonValue' "Edm.GeographyPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyValue' "Edm.GeographyPoint")' indentDepth: 3)'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"ComplexCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("My.AddressType")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent){"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\""'                  "$(Indent)$(Indent)$(Indent)}'{"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"Am Euro Platz 3\"'\"City\":\"Vienna \""'                  "$(Indent)$(Indent)$(Indent)}"'                  "$(Indent)$(Indent)]"'                  collectionWithoutTypeNameJsonPayload'                  "$(Indent)}"'                      "}"              );
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The following statement contains a magic number: string[] collectionPropertiesJsonResult = StringUtils.Flatten(                  "{"'                  "$(Indent)\"__metadata\":{"'                  "$(Indent)$(Indent)\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\""'                  "$(Indent)}'\"Id\":1'\"EmptyCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"PrimitiveCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)0'1'2'3'4'5'6'7'8'9"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"IntCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)0'1'2"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"StringCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)\"One\"'\"Two\"'\"Three\""'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"GeographyCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Geography")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  JsonUtils.GetJsonLines(                      "$(Indent)$(Indent)$(Indent)" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyCollectionValue' "Edm.GeographyCollection") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyLineStringValue' "Edm.GeographyLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiLineStringValue' "Edm.GeographyMultiLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPointValue' "Edm.GeographyMultiPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPolygonValue' "Edm.GeographyMultiPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPointValue' "Edm.GeographyPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPolygonValue' "Edm.GeographyPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyValue' "Edm.GeographyPoint")' indentDepth: 3)'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"ComplexCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("My.AddressType")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent){"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\""'                  "$(Indent)$(Indent)$(Indent)}'{"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"Am Euro Platz 3\"'\"City\":\"Vienna \""'                  "$(Indent)$(Indent)$(Indent)}"'                  "$(Indent)$(Indent)]"'                  collectionWithoutTypeNameJsonPayload'                  "$(Indent)}"'                      "}"              );
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The following statement contains a magic number: string[] collectionPropertiesJsonResult = StringUtils.Flatten(                  "{"'                  "$(Indent)\"__metadata\":{"'                  "$(Indent)$(Indent)\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\""'                  "$(Indent)}'\"Id\":1'\"EmptyCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"PrimitiveCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)0'1'2'3'4'5'6'7'8'9"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"IntCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)0'1'2"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"StringCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)\"One\"'\"Two\"'\"Three\""'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"GeographyCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Geography")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  JsonUtils.GetJsonLines(                      "$(Indent)$(Indent)$(Indent)" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyCollectionValue' "Edm.GeographyCollection") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyLineStringValue' "Edm.GeographyLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiLineStringValue' "Edm.GeographyMultiLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPointValue' "Edm.GeographyMultiPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPolygonValue' "Edm.GeographyMultiPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPointValue' "Edm.GeographyPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPolygonValue' "Edm.GeographyPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyValue' "Edm.GeographyPoint")' indentDepth: 3)'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"ComplexCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("My.AddressType")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent){"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\""'                  "$(Indent)$(Indent)$(Indent)}'{"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"Am Euro Platz 3\"'\"City\":\"Vienna \""'                  "$(Indent)$(Indent)$(Indent)}"'                  "$(Indent)$(Indent)]"'                  collectionWithoutTypeNameJsonPayload'                  "$(Indent)}"'                      "}"              );
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The following statement contains a magic number: string[] collectionPropertiesJsonResult = StringUtils.Flatten(                  "{"'                  "$(Indent)\"__metadata\":{"'                  "$(Indent)$(Indent)\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\""'                  "$(Indent)}'\"Id\":1'\"EmptyCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"PrimitiveCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)0'1'2'3'4'5'6'7'8'9"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"IntCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)0'1'2"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"StringCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)\"One\"'\"Two\"'\"Three\""'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"GeographyCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Geography")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  JsonUtils.GetJsonLines(                      "$(Indent)$(Indent)$(Indent)" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyCollectionValue' "Edm.GeographyCollection") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyLineStringValue' "Edm.GeographyLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiLineStringValue' "Edm.GeographyMultiLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPointValue' "Edm.GeographyMultiPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPolygonValue' "Edm.GeographyMultiPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPointValue' "Edm.GeographyPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPolygonValue' "Edm.GeographyPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyValue' "Edm.GeographyPoint")' indentDepth: 3)'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"ComplexCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("My.AddressType")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent){"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\""'                  "$(Indent)$(Indent)$(Indent)}'{"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"Am Euro Platz 3\"'\"City\":\"Vienna \""'                  "$(Indent)$(Indent)$(Indent)}"'                  "$(Indent)$(Indent)]"'                  collectionWithoutTypeNameJsonPayload'                  "$(Indent)}"'                      "}"              );
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The following statement contains a magic number: string[] collectionPropertiesJsonResult = StringUtils.Flatten(                  "{"'                  "$(Indent)\"__metadata\":{"'                  "$(Indent)$(Indent)\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\""'                  "$(Indent)}'\"Id\":1'\"EmptyCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"PrimitiveCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)0'1'2'3'4'5'6'7'8'9"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"IntCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)0'1'2"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"StringCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)\"One\"'\"Two\"'\"Three\""'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"GeographyCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Geography")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  JsonUtils.GetJsonLines(                      "$(Indent)$(Indent)$(Indent)" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyCollectionValue' "Edm.GeographyCollection") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyLineStringValue' "Edm.GeographyLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiLineStringValue' "Edm.GeographyMultiLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPointValue' "Edm.GeographyMultiPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPolygonValue' "Edm.GeographyMultiPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPointValue' "Edm.GeographyPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPolygonValue' "Edm.GeographyPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyValue' "Edm.GeographyPoint")' indentDepth: 3)'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"ComplexCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("My.AddressType")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent){"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\""'                  "$(Indent)$(Indent)$(Indent)}'{"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"Am Euro Platz 3\"'\"City\":\"Vienna \""'                  "$(Indent)$(Indent)$(Indent)}"'                  "$(Indent)$(Indent)]"'                  collectionWithoutTypeNameJsonPayload'                  "$(Indent)}"'                      "}"              );
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateCollectionPropertiesEntryDescriptor,The following statement contains a magic number: string[] collectionPropertiesJsonResult = StringUtils.Flatten(                  "{"'                  "$(Indent)\"__metadata\":{"'                  "$(Indent)$(Indent)\"id\":\"http://www.odata.org/entryid\"'\"uri\":\"http://www.odata.org/entry/readlink\"'\"type\":\"My.EntryWithOpenProperties\""'                  "$(Indent)}'\"Id\":1'\"EmptyCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"PrimitiveCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent)0'1'2'3'4'5'6'7'8'9"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"IntCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Int32")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)0'1'2"'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"StringCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.String")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  "$(Indent)$(Indent)$(Indent)\"One\"'\"Two\"'\"Three\""'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"GeographyCollectionNoTypeName\":{"'                  withModel ? JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("Edm.Geography")' 2' "'\"results\":[") : new string[] { "$(Indent)$(Indent)\"results\":[" }'                  JsonUtils.GetJsonLines(                      "$(Indent)$(Indent)$(Indent)" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyCollectionValue' "Edm.GeographyCollection") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyLineStringValue' "Edm.GeographyLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiLineStringValue' "Edm.GeographyMultiLineString") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPointValue' "Edm.GeographyMultiPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPolygonValue' "Edm.GeographyMultiPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPointValue' "Edm.GeographyPoint") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPolygonValue' "Edm.GeographyPolygon") + "'" +                      SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyValue' "Edm.GeographyPoint")' indentDepth: 3)'                  "$(Indent)$(Indent)]"'                  "$(Indent)}'\"ComplexCollection\":{"'                  JsonUtils.GetMetadataPropertyForCollectionType(EntityModelUtils.GetCollectionTypeName("My.AddressType")' 2' "'\"results\":[")'                  "$(Indent)$(Indent)$(Indent){"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"One Redmond Way\"'\"City\":\" Redmond\""'                  "$(Indent)$(Indent)$(Indent)}'{"'                  "$(Indent)$(Indent)$(Indent)$(Indent)\"Street\":\"Am Euro Platz 3\"'\"City\":\"Vienna \""'                  "$(Indent)$(Indent)$(Indent)}"'                  "$(Indent)$(Indent)]"'                  collectionWithoutTypeNameJsonPayload'                  "$(Indent)}"'                      "}"              );
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,EntryNullPropertyErrorTests,The following statement contains a magic number: var versions = new Version[] {                      null'                      new Version(4' 0)'                  };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyTypeNameTest,The following statement contains a magic number: Version[] versions = new Version[] {                  null'                  new Version(4' 0)'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyTypeNameTest,The following statement contains a magic number: var testDescriptorSet = versions.SelectMany(dataServiceVersion =>                  versions.SelectMany(edmVersion =>                  {                      model.SetEdmVersion(edmVersion);                        // Client only writes type for primitive properties with null value' Server writes it for both primitive and complex.                      // Edm.String is never written as the default is Edm.String.                      var testCases = new[]                          {                              new { PropertyName = "NumberProperty"' ExpectedServerTypeName = "Edm.Int32"' ExpectedClientTypeName = "Edm.Int32" }'                              new { PropertyName = "StringProperty"' ExpectedServerTypeName = (string)null' ExpectedClientTypeName = (string)null }'                              new { PropertyName = "ComplexProperty"' ExpectedServerTypeName = "TestNS.ComplexType"' ExpectedClientTypeName = (string)null }'                              new { PropertyName = "OpenProperty"' ExpectedServerTypeName = (string)null' ExpectedClientTypeName = (string)null }'                              new { PropertyName = "OpenProperty"' ExpectedServerTypeName = (string)null' ExpectedClientTypeName = (string)null }'                              new { PropertyName = "ComplexProperty/NumberProperty"' ExpectedServerTypeName = "Edm.Int32"' ExpectedClientTypeName = "Edm.Int32" }'                              new { PropertyName = "ComplexProperty/StringProperty"' ExpectedServerTypeName = (string)null' ExpectedClientTypeName = (string)null }'                              new { PropertyName = "ComplexProperty/InnerComplex"' ExpectedServerTypeName = "TestNS.ComplexType"' ExpectedClientTypeName = (string)null }'                              new { PropertyName = "ComplexProperty/InnerComplex/NumberProperty"' ExpectedServerTypeName = "Edm.Int32"' ExpectedClientTypeName = "Edm.Int32" }'                              new { PropertyName = "ComplexProperty/InnerComplex/StringProperty"' ExpectedServerTypeName = (string)null' ExpectedClientTypeName = (string)null }'                          };                        return testCases.Select(testCase =>                      {                          string[] propertyPath = testCase.PropertyName.Split('/');                          ODataProperty property = new ODataProperty { Name = propertyPath[propertyPath.Length - 1]' Value = null };                          for (int i = propertyPath.Length - 2; i >= 0; i--)                          {                              property = new ODataProperty                              {                                  Name = propertyPath[i]'                                  Value = new ODataComplexValue                                  {                                      Properties = new[] { property }                                  }                              };                          }                            Func<XElement' XElement> extractor = (result) =>                          {                              result = TestAtomUtils.ExtractPropertiesFromEntry(result);                              foreach (string name in propertyPath)                              {                                  result = result.Element(TestAtomConstants.ODataXNamespace + name);                              }                                return result;                          };                            return new Func<TestODataBehaviorKind' ODataVersion' PayloadWriterTestDescriptor<ODataItem>>(                              (behaviorKind' version) =>                              {                                  string expectedTypeName = null;                                  switch (behaviorKind)                                  {                                      case TestODataBehaviorKind.Default:                                          break;                                      case TestODataBehaviorKind.WcfDataServicesClient:                                          expectedTypeName = testCase.ExpectedClientTypeName;                                          break;                                      case TestODataBehaviorKind.WcfDataServicesServer:                                          expectedTypeName = testCase.ExpectedServerTypeName;                                          break;                                  }                                    // Starting with V3' we only support the standard behavior                                  expectedTypeName = null;                                    return new PayloadWriterTestDescriptor<ODataItem>(                                      this.Settings'                                      new ODataResource()                                      {                                          TypeName = "TestNS.EntityType"'                                          Properties = new[] { property }'                                          SerializationInfo = new ODataResourceSerializationInfo()                                          {                                              NavigationSourceEntityTypeName = "TestNS.EntityType"'                                              NavigationSourceName = "MySet"'                                              ExpectedTypeName = "TestNS.EntityType"                                          }                                      }'                                      (tc) => new AtomWriterTestExpectedResults(this.Settings.ExpectedResultSettings)                                      {                                          Xml = expectedTypeName == null ? "<type/>" : "<type>" + expectedTypeName + "</type>"'                                          FragmentExtractor = (result) => new XElement("type"'                                              (string)extractor(result).Attribute(TestAtomConstants.ODataMetadataXNamespace + TestAtomConstants.AtomTypeAttributeName))                                      }                                      )                                  { Model = model };                              });                      });                  }));
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The following statement contains a magic number: complexvalue.PrimitiveProperty("Zip"' 12345);
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The following statement contains a magic number: var payloadDescriptors = new PayloadTestDescriptor[]              {                  // Multiple nesting of Complex Values and Collection Values.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InComplexValue().InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InComplexValue()                  .InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity()'                    // Multiple nesting of Complex Values.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName")                  .InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InEntity(1'0)'                    // Entry With an Expanded Link which is an entry containing a Complex collection.                  new PayloadTestDescriptor()                  {                      PayloadElement = complexvalue'                      PayloadEdmModel = model.Clone()'                  }.InCollection(1'1).InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity().InEntryWithExpandedLink(/*singletonRelationship*/ true)'                    // Entry With an Expanded Link which is a Feed containing an Entry with Complex collection properties.                  new PayloadTestDescriptor()                  {                      PayloadElement = complexvalue'                      PayloadEdmModel = model.Clone()'                  }.InCollection(1'2).InProperty("PropertyName").InComplexValue(1' 1).InCollection(1' 0).InProperty("PropertyName").InEntity(1'1).InFeed(2).InEntryWithExpandedLink()'                    // Entry With Nested Expanded Links which contain Entries.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InEntity(1' 1' ODataVersion.V4).InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)                  .InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)                  .InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)'                    // Entry with inline expanded feed association to an arbitrary depth (7) where the expanded feed has no entries                  new PayloadTestDescriptor()                  {                      PayloadElement = feed'                      PayloadEdmModel = model.Clone()'                  }.InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink()                  .InFeed(2).InEntryWithExpandedLink()'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The following statement contains a magic number: var payloadDescriptors = new PayloadTestDescriptor[]              {                  // Multiple nesting of Complex Values and Collection Values.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InComplexValue().InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InComplexValue()                  .InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity()'                    // Multiple nesting of Complex Values.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName")                  .InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InEntity(1'0)'                    // Entry With an Expanded Link which is an entry containing a Complex collection.                  new PayloadTestDescriptor()                  {                      PayloadElement = complexvalue'                      PayloadEdmModel = model.Clone()'                  }.InCollection(1'1).InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity().InEntryWithExpandedLink(/*singletonRelationship*/ true)'                    // Entry With an Expanded Link which is a Feed containing an Entry with Complex collection properties.                  new PayloadTestDescriptor()                  {                      PayloadElement = complexvalue'                      PayloadEdmModel = model.Clone()'                  }.InCollection(1'2).InProperty("PropertyName").InComplexValue(1' 1).InCollection(1' 0).InProperty("PropertyName").InEntity(1'1).InFeed(2).InEntryWithExpandedLink()'                    // Entry With Nested Expanded Links which contain Entries.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InEntity(1' 1' ODataVersion.V4).InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)                  .InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)                  .InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)'                    // Entry with inline expanded feed association to an arbitrary depth (7) where the expanded feed has no entries                  new PayloadTestDescriptor()                  {                      PayloadElement = feed'                      PayloadEdmModel = model.Clone()'                  }.InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink()                  .InFeed(2).InEntryWithExpandedLink()'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The following statement contains a magic number: var payloadDescriptors = new PayloadTestDescriptor[]              {                  // Multiple nesting of Complex Values and Collection Values.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InComplexValue().InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InComplexValue()                  .InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity()'                    // Multiple nesting of Complex Values.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName")                  .InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InEntity(1'0)'                    // Entry With an Expanded Link which is an entry containing a Complex collection.                  new PayloadTestDescriptor()                  {                      PayloadElement = complexvalue'                      PayloadEdmModel = model.Clone()'                  }.InCollection(1'1).InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity().InEntryWithExpandedLink(/*singletonRelationship*/ true)'                    // Entry With an Expanded Link which is a Feed containing an Entry with Complex collection properties.                  new PayloadTestDescriptor()                  {                      PayloadElement = complexvalue'                      PayloadEdmModel = model.Clone()'                  }.InCollection(1'2).InProperty("PropertyName").InComplexValue(1' 1).InCollection(1' 0).InProperty("PropertyName").InEntity(1'1).InFeed(2).InEntryWithExpandedLink()'                    // Entry With Nested Expanded Links which contain Entries.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InEntity(1' 1' ODataVersion.V4).InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)                  .InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)                  .InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)'                    // Entry with inline expanded feed association to an arbitrary depth (7) where the expanded feed has no entries                  new PayloadTestDescriptor()                  {                      PayloadElement = feed'                      PayloadEdmModel = model.Clone()'                  }.InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink()                  .InFeed(2).InEntryWithExpandedLink()'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The following statement contains a magic number: var payloadDescriptors = new PayloadTestDescriptor[]              {                  // Multiple nesting of Complex Values and Collection Values.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InComplexValue().InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InComplexValue()                  .InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity()'                    // Multiple nesting of Complex Values.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName")                  .InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InEntity(1'0)'                    // Entry With an Expanded Link which is an entry containing a Complex collection.                  new PayloadTestDescriptor()                  {                      PayloadElement = complexvalue'                      PayloadEdmModel = model.Clone()'                  }.InCollection(1'1).InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity().InEntryWithExpandedLink(/*singletonRelationship*/ true)'                    // Entry With an Expanded Link which is a Feed containing an Entry with Complex collection properties.                  new PayloadTestDescriptor()                  {                      PayloadElement = complexvalue'                      PayloadEdmModel = model.Clone()'                  }.InCollection(1'2).InProperty("PropertyName").InComplexValue(1' 1).InCollection(1' 0).InProperty("PropertyName").InEntity(1'1).InFeed(2).InEntryWithExpandedLink()'                    // Entry With Nested Expanded Links which contain Entries.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InEntity(1' 1' ODataVersion.V4).InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)                  .InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)                  .InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)'                    // Entry with inline expanded feed association to an arbitrary depth (7) where the expanded feed has no entries                  new PayloadTestDescriptor()                  {                      PayloadElement = feed'                      PayloadEdmModel = model.Clone()'                  }.InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink()                  .InFeed(2).InEntryWithExpandedLink()'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The following statement contains a magic number: var payloadDescriptors = new PayloadTestDescriptor[]              {                  // Multiple nesting of Complex Values and Collection Values.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InComplexValue().InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InComplexValue()                  .InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity()'                    // Multiple nesting of Complex Values.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName")                  .InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InEntity(1'0)'                    // Entry With an Expanded Link which is an entry containing a Complex collection.                  new PayloadTestDescriptor()                  {                      PayloadElement = complexvalue'                      PayloadEdmModel = model.Clone()'                  }.InCollection(1'1).InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity().InEntryWithExpandedLink(/*singletonRelationship*/ true)'                    // Entry With an Expanded Link which is a Feed containing an Entry with Complex collection properties.                  new PayloadTestDescriptor()                  {                      PayloadElement = complexvalue'                      PayloadEdmModel = model.Clone()'                  }.InCollection(1'2).InProperty("PropertyName").InComplexValue(1' 1).InCollection(1' 0).InProperty("PropertyName").InEntity(1'1).InFeed(2).InEntryWithExpandedLink()'                    // Entry With Nested Expanded Links which contain Entries.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InEntity(1' 1' ODataVersion.V4).InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)                  .InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)                  .InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)'                    // Entry with inline expanded feed association to an arbitrary depth (7) where the expanded feed has no entries                  new PayloadTestDescriptor()                  {                      PayloadElement = feed'                      PayloadEdmModel = model.Clone()'                  }.InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink()                  .InFeed(2).InEntryWithExpandedLink()'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NestedComplexCollectionExpandedLinksTest,The following statement contains a magic number: var payloadDescriptors = new PayloadTestDescriptor[]              {                  // Multiple nesting of Complex Values and Collection Values.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InComplexValue().InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InComplexValue()                  .InCollection().InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity()'                    // Multiple nesting of Complex Values.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName")                  .InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InComplexValue().InProperty("PropertyName").InEntity(1'0)'                    // Entry With an Expanded Link which is an entry containing a Complex collection.                  new PayloadTestDescriptor()                  {                      PayloadElement = complexvalue'                      PayloadEdmModel = model.Clone()'                  }.InCollection(1'1).InProperty("PropertyName").InComplexValue().InCollection().InProperty("PropertyName").InEntity().InEntryWithExpandedLink(/*singletonRelationship*/ true)'                    // Entry With an Expanded Link which is a Feed containing an Entry with Complex collection properties.                  new PayloadTestDescriptor()                  {                      PayloadElement = complexvalue'                      PayloadEdmModel = model.Clone()'                  }.InCollection(1'2).InProperty("PropertyName").InComplexValue(1' 1).InCollection(1' 0).InProperty("PropertyName").InEntity(1'1).InFeed(2).InEntryWithExpandedLink()'                    // Entry With Nested Expanded Links which contain Entries.                  new PayloadTestDescriptor()                  {                      PayloadElement = PayloadBuilder.Property("RootProperyName"' complexvalue)'                      PayloadEdmModel = model.Clone()'                  }.InEntity(1' 1' ODataVersion.V4).InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)                  .InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)                  .InEntryWithExpandedLink(/*singletonRelationship*/ true).InEntryWithExpandedLink(/*singletonRelationship*/ true)'                    // Entry with inline expanded feed association to an arbitrary depth (7) where the expanded feed has no entries                  new PayloadTestDescriptor()                  {                      PayloadElement = feed'                      PayloadEdmModel = model.Clone()'                  }.InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink().InFeed(2).InEntryWithExpandedLink()                  .InFeed(2).InEntryWithExpandedLink()'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,DuplicatePropertyNamesTest,The following statement contains a magic number: ODataProperty collectionProperty = new ODataProperty { Name = "Foo"' Value = new ODataCollectionValue { Items = new object[] { 1' 2 } } };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PrimitiveTypesMustMatchExactlyOnWriteTest,The following statement contains a magic number: int64EntityWithInt32.Property(new PrimitiveProperty("Int64Property"' "Edm.Int32"' 5));
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PrimitiveTypesMustMatchExactlyOnWriteTest,The following statement contains a magic number: stringEntityWithInt.Property(new PrimitiveProperty("StringProperty"' "Edm.Int32"' 5));
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PrimitiveTypesMustMatchExactlyOnWriteTest,The following statement contains a magic number: intEntityWithGeography.Property(new PrimitiveProperty("Int64Property"' "Edm.GeographyPoint"' GeographyFactory.Point(32.0' -100.0).Build()).WithTypeAnnotation(EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyPoint' false)));
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,PrimitiveTypesMustMatchExactlyOnWriteTest,The following statement contains a magic number: intEntityWithGeography.Property(new PrimitiveProperty("Int64Property"' "Edm.GeographyPoint"' GeographyFactory.Point(32.0' -100.0).Build()).WithTypeAnnotation(EdmCoreModel.Instance.GetSpatial(EdmPrimitiveTypeKind.GeographyPoint' false)));
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,CreateDeeplyNestedComplexValuesInCollections,The following statement contains a magic number: return new ODataProperty              {                  Name = propertyName'                  Value = new ODataCollectionValue                  {                      Items = new ODataComplexValue[]                      {                          new ODataComplexValue                          {                              TypeName = complexTypeName'                              Properties = new ODataProperty[]                              {                                  CreateDeeplyNestedComplexValuesInCollections(depth - 2' complexTypeName' propertyName)                              }                          }                      }                  }              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,ODataFeedWriterErrorTests,The following statement contains a magic number: var feed = new EntitySetInstance(                  new EntityInstance("TestModel.Type1"' false)                  {                      Properties = new List<PropertyInstance>()                      {                          new PrimitiveProperty("StringProp"' "Edm.String"' "hello")'                          new PrimitiveProperty("IntProp"' "Edm.Int32"' 5)                      }                  }'                  new EntityInstance("TestModel.Type2"' false)                  {                      Properties = new List<PropertyInstance>()                      {                          new PrimitiveProperty("GuidProp"' "Edm.Guid"' Guid.NewGuid())'                          new PrimitiveProperty("BooleanProp"' "Edm.Boolean"' true)                      }                  }              ).WithDefaultAtomIDAnnotation();
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateFeedQueryCountDescriptors,The following statement contains a magic number: long?[] counts = new long?[] { 0' 1' 2' 1000' -1 - 10' long.MaxValue' long.MinValue' null };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateFeedQueryCountDescriptors,The following statement contains a magic number: long?[] counts = new long?[] { 0' 1' 2' 1000' -1 - 10' long.MaxValue' long.MinValue' null };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateFeedQueryCountDescriptors,The following statement contains a magic number: long?[] counts = new long?[] { 0' 1' 2' 1000' -1 - 10' long.MaxValue' long.MinValue' null };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateFeedValidatorDescriptors,The following statement contains a magic number: var testCases = new[]                  {                      new                      {                          Description = "Homogenous collection (no inheritance)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(personType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Homogenous collection (inheritance' base type first)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.Employee")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(employeeType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Homogenous collection (inheritance' derived type first)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Employee")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(employeeType))                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(personType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Heterogeneous collection"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.CityType")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(cityType))'                          ExpectedException = ODataExpectedExceptions.ODataException("ResourceSetWithoutExpectedTypeValidator_IncompatibleTypes"' "TestModel.CityType"' "TestModel.Person")'                          Model = model                      }'                      new                      {                          Description = "Heterogeneous collection (no model)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation()                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1))                              .Append(PayloadBuilder.Entity("TestModel.CityType")                                  .PrimitiveProperty("Id"' 2))'                          ExpectedException = (ExpectedException)null'                          Model = (IEdmModel)null                      }'                  };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateFeedValidatorDescriptors,The following statement contains a magic number: var testCases = new[]                  {                      new                      {                          Description = "Homogenous collection (no inheritance)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(personType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Homogenous collection (inheritance' base type first)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.Employee")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(employeeType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Homogenous collection (inheritance' derived type first)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Employee")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(employeeType))                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(personType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Heterogeneous collection"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.CityType")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(cityType))'                          ExpectedException = ODataExpectedExceptions.ODataException("ResourceSetWithoutExpectedTypeValidator_IncompatibleTypes"' "TestModel.CityType"' "TestModel.Person")'                          Model = model                      }'                      new                      {                          Description = "Heterogeneous collection (no model)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation()                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1))                              .Append(PayloadBuilder.Entity("TestModel.CityType")                                  .PrimitiveProperty("Id"' 2))'                          ExpectedException = (ExpectedException)null'                          Model = (IEdmModel)null                      }'                  };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateFeedValidatorDescriptors,The following statement contains a magic number: var testCases = new[]                  {                      new                      {                          Description = "Homogenous collection (no inheritance)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(personType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Homogenous collection (inheritance' base type first)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.Employee")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(employeeType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Homogenous collection (inheritance' derived type first)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Employee")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(employeeType))                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(personType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Heterogeneous collection"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.CityType")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(cityType))'                          ExpectedException = ODataExpectedExceptions.ODataException("ResourceSetWithoutExpectedTypeValidator_IncompatibleTypes"' "TestModel.CityType"' "TestModel.Person")'                          Model = model                      }'                      new                      {                          Description = "Heterogeneous collection (no model)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation()                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1))                              .Append(PayloadBuilder.Entity("TestModel.CityType")                                  .PrimitiveProperty("Id"' 2))'                          ExpectedException = (ExpectedException)null'                          Model = (IEdmModel)null                      }'                  };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateFeedValidatorDescriptors,The following statement contains a magic number: var testCases = new[]                  {                      new                      {                          Description = "Homogenous collection (no inheritance)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(personType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Homogenous collection (inheritance' base type first)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.Employee")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(employeeType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Homogenous collection (inheritance' derived type first)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Employee")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(employeeType))                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(personType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Heterogeneous collection"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.CityType")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(cityType))'                          ExpectedException = ODataExpectedExceptions.ODataException("ResourceSetWithoutExpectedTypeValidator_IncompatibleTypes"' "TestModel.CityType"' "TestModel.Person")'                          Model = model                      }'                      new                      {                          Description = "Heterogeneous collection (no model)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation()                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1))                              .Append(PayloadBuilder.Entity("TestModel.CityType")                                  .PrimitiveProperty("Id"' 2))'                          ExpectedException = (ExpectedException)null'                          Model = (IEdmModel)null                      }'                  };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterFeedTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterFeedTests.cs,CreateFeedValidatorDescriptors,The following statement contains a magic number: var testCases = new[]                  {                      new                      {                          Description = "Homogenous collection (no inheritance)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(personType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Homogenous collection (inheritance' base type first)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.Employee")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(employeeType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Homogenous collection (inheritance' derived type first)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Employee")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(employeeType))                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(personType))'                          ExpectedException = (ExpectedException)null'                          Model = model                      }'                      new                      {                          Description = "Heterogeneous collection"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation().WithTypeAnnotation(personType)                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1).WithTypeAnnotation(personType))                              .Append(PayloadBuilder.Entity("TestModel.CityType")                                  .PrimitiveProperty("Id"' 2).WithTypeAnnotation(cityType))'                          ExpectedException = ODataExpectedExceptions.ODataException("ResourceSetWithoutExpectedTypeValidator_IncompatibleTypes"' "TestModel.CityType"' "TestModel.Person")'                          Model = model                      }'                      new                      {                          Description = "Heterogeneous collection (no model)"'                          Feed = (ODataPayloadElement)PayloadBuilder.EntitySet().WithDefaultAtomIDAnnotation()                              .Append(PayloadBuilder.Entity("TestModel.Person")                                  .PrimitiveProperty("Id"' 1))                              .Append(PayloadBuilder.Entity("TestModel.CityType")                                  .PrimitiveProperty("Id"' 2))'                          ExpectedException = (ExpectedException)null'                          Model = (IEdmModel)null                      }'                  };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinkTest,The following statement contains a magic number: entityReferenceLink3.InstanceAnnotations.Add(new ODataInstanceAnnotation("TestModel.unknown"' new ODataPrimitiveValue(123)));
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinkTest,The following statement contains a magic number: entityReferenceLink3.InstanceAnnotations.Add(new ODataInstanceAnnotation("custom.name"' new ODataPrimitiveValue(456)));
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinkTest,The following statement contains a magic number: entityReferenceLink4.InstanceAnnotations.Add(new ODataInstanceAnnotation("TestModel.unknown"' new ODataPrimitiveValue(123)));
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinkTest,The following statement contains a magic number: entityReferenceLink4.InstanceAnnotations.Add(new ODataInstanceAnnotation("custom.name"' new ODataPrimitiveValue(456)));
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksTest,The following statement contains a magic number: entityReferenceLink3.InstanceAnnotations.Add(new ODataInstanceAnnotation("TestModel.unknown"' new ODataPrimitiveValue(123)));
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksTest,The following statement contains a magic number: entityReferenceLink3.InstanceAnnotations.Add(new ODataInstanceAnnotation("custom.name"' new ODataPrimitiveValue(456)));
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksTest,The following statement contains a magic number: long?[] inputCounts = new long?[] { null' 1' 3' -1' -3' 0' long.MaxValue' long.MinValue };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksTest,The following statement contains a magic number: long?[] inputCounts = new long?[] { null' 1' 3' -1' -3' 0' long.MaxValue' long.MinValue };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksTest,The following statement contains a magic number: ODataInstanceAnnotation[][] inputAnnotations = new ODataInstanceAnnotation[][]              {                  new ODataInstanceAnnotation[0]'                  new ODataInstanceAnnotation[]                  {                      new ODataInstanceAnnotation("TestModel.annotation"' new ODataPrimitiveValue(321))'                      new ODataInstanceAnnotation("custom.annotation"' new ODataPrimitiveValue(654))                  }              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksTest,The following statement contains a magic number: ODataInstanceAnnotation[][] inputAnnotations = new ODataInstanceAnnotation[][]              {                  new ODataInstanceAnnotation[0]'                  new ODataInstanceAnnotation[]                  {                      new ODataInstanceAnnotation("TestModel.annotation"' new ODataPrimitiveValue(321))'                      new ODataInstanceAnnotation("custom.annotation"' new ODataPrimitiveValue(654))                  }              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksPropertyAccessOrderTest,The following statement contains a magic number: long correctCountValue = 3;
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntityReferenceLinksTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,EntityReferenceLinksPropertyAccessOrderTest,The following statement contains a magic number: ODataEntityReferenceLinks expectedResult = new ODataEntityReferenceLinks              {                  Count = 3'                  Links = new ODataEntityReferenceLink[] { entityReferenceLink1' entityReferenceLink2' entityReferenceLink3 }'                  NextPageLink = nextPageLink              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,CheckingEntityReferenceLinkEnumerator,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntityReferenceLinksTests.cs,Dispose,The following statement contains a magic number: this.currentIx = -2;
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterMetadataInputValidationTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterMetadataInputValidationTests.cs,InconsistentTypeNamesTest,The following statement contains a magic number: var testCases = new[] {                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = 1 }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatiblePrimitiveItemType"' "Edm.Int32"' "False" /* nullable */' "Edm.String"' "True" /* nullable */)'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataComplexValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataCollectionValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              // inconsistent primitive type                              new ODataProperty() { Name = "Id"' Value = new ODataStreamReferenceValue { } }'                              defaultProperties[1]'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Id")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (same kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataComplexValue()                                  {                                      TypeName = "OtherTestNamespace.OrderComplexType"'                                      Properties = null                                  }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = "some"                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_NonPrimitiveTypeForPrimitiveValue"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataCollectionValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncorrectTypeKindNoTypeName"' "Collection"' "Complex")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              // inconsistent complex type (different kind)                              new ODataProperty()                              {                                  Name = "Address"'                                  Value = new ODataStreamReferenceValue { }                              }'                              defaultProperties[2]'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_MismatchPropertyKindForStreamProperty"' "Address")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("Int32")'                                      Items = null                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("Edm.Int32")' EntityModelUtils.GetCollectionTypeName("Edm.String"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (same kind)                                      Items = new object[] { 1' 2' 3 }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "Edm.Int32"' "Edm.String")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Complex"' "Primitive")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              new ODataProperty()                              {                                  Name = "Scores"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("String")'                                      // inconsistent collection item type (different kind)                                      Items = new object[] { new ODataStreamReferenceValue {} }                                  }                              }'                              defaultProperties[3]                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_StreamReferenceValuesNotSupportedInCollections"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              // inconsistent collection type                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")'                                      Items = null                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("ValidationUtils_IncompatibleType"' EntityModelUtils.GetCollectionTypeName("OtherTestNamespace.OrderComplexType")' EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType"))'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      Items = new object[]                                      {                                          new ODataComplexValue()                                          {                                              // inconsistent item type (same kind)                                              TypeName = "OtherTestNamespace.OrderComplexType"'                                              Properties = new ODataProperty[]                                              {                                                  new ODataProperty { Name = "Street"' Value = "First" }                                              }                                          }                                      }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName"' "OtherTestNamespace.OrderComplexType"' "TestNS.AddressComplexType")'                  }'                  new InconsistentTypeNamesTestCase {                      CreateProperties = () => new ODataProperty[]                          {                              defaultProperties[0]'                              defaultProperties[1]'                              defaultProperties[2]'                              new ODataProperty()                              {                                  Name = "Addresses"'                                  Value = new ODataCollectionValue()                                  {                                      TypeName = EntityModelUtils.GetCollectionTypeName("TestNS.AddressComplexType")'                                      // inconsistent item type (different kind)                                      Items = new object[] { "foo" }                                  }                              }'                          }'                      ExpectedException = ODataExpectedExceptions.ODataException("CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind"' "Primitive"' "Complex")'                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterNavigationLinkTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterNavigationLinkTests.cs,NavigationLinkDepthTests,The following statement contains a magic number: this.CombinatorialEngineProvider.RunCombinations(                  testDescriptors'                  this.WriterTestConfigurationProvider.ExplicitFormatConfigurations.Where(tc => !tc.IsRequest)'                  (testDescriptor' testConfiguration) =>                  {                      testConfiguration = testConfiguration.Clone();                      testConfiguration.MessageWriterSettings.MessageQuotas.MaxNestingDepth = 3;                      testConfiguration.MessageWriterSettings.SetServiceDocumentUri(ServiceDocumentUri);                      TestWriterUtils.WriteAndVerifyODataEdmPayload(testDescriptor' testConfiguration' this.Assert' this.Logger);                  });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,CreateCollectionPropertyDescriptors,The following statement contains a magic number: Func<bool' string[][]> propertiesJsonLightResultsFunc = isRequest => new string[][]              {                  StringUtils.Flatten(                      "{"'                      "$(Indent)" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#Collection(Edm.String)\"'" +                          "\"" + JsonLightConstants.ODataValuePropertyName + "\":["'                      "$(Indent)$(Indent)"'                      "$(Indent)]"'                      "}"                  )'                  StringUtils.Flatten(                      "{"'                      "$(Indent)" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#Collection(Edm.Int32)\"'" +                          "\"" + JsonLightConstants.ODataValuePropertyName + "\":["'                      "$(Indent)$(Indent)0'1'2'3'4'5'6'7'8'9"'                      "$(Indent)]"'                      "}"                  )'                  StringUtils.Flatten(                      "{"'                      "$(Indent)" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#Collection(Edm.Int32)\"'" +                          "\"" + JsonLightConstants.ODataValuePropertyName + "\":["'                      "$(Indent)$(Indent)0'1'2"'                      "$(Indent)]"'                      "}"                  )'                  StringUtils.Flatten(                      "{"'                      "$(Indent)" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#Collection(Edm.String)\"'" +                          "\"" + JsonLightConstants.ODataValuePropertyName + "\":["'                      "$(Indent)$(Indent)\"One\"'\"Two\"'\"Three\""'                      "$(Indent)]"'                      "}"                  )'                  StringUtils.Flatten(                      "{"'                      "$(Indent)" +                          "\"" + JsonLightConstants.ODataPropertyAnnotationSeparator + JsonLightConstants.ODataContextAnnotationName + "\":\"" + JsonLightConstants.DefaultMetadataDocumentUri + "#Collection(Edm.Geography)\"'" +                          "\"" + JsonLightConstants.ODataValuePropertyName + "\":["'                      JsonUtils.GetJsonLines(                          "$(Indent)$(Indent)" +                          SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyCollectionValue) + "'" +                          SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyLineStringValue) + "'" +                          SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiLineStringValue) + "'" +                          SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPointValue) + "'" +                          SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyMultiPolygonValue) + "'" +                          SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPointValue) + "'" +                          SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyPolygonValue) + "'" +                          SpatialUtils.GetSpatialStringValue(ODataFormat.Json' ObjectModelUtils.GeographyValue)' indentDepth: 2)'                      "$(Indent)]"'                      "}"                  )'                  new string[0]'                  new string[0]'              };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterPropertyTests.cs,PrimitiveValueODataTypeAnnotationTest,The following statement contains a magic number: var testDescriptors = testCases.Select(tc =>              {                  EdmModel model = new EdmModel();                    var owningEntityType = new EdmEntityType("TestNS"' "OwningEntityType");                  owningEntityType.AddStructuralProperty("PropertyName"' EdmCoreModel.Instance.GetInt64(isNullable: false));                  model.AddElement(owningEntityType);                    var container = new EdmEntityContainer("TestNS"' "TestContainer");                  model.AddElement(container);                    ODataPrimitiveValue primitiveValue = new ODataPrimitiveValue((Int64)42);                  if (tc.ODataTypeAnnotation != null)                  {                      primitiveValue.TypeAnnotation = tc.ODataTypeAnnotation;                  }                    return new PayloadWriterTestDescriptor<ODataProperty>(                      this.Settings'                      new ODataProperty { Name = "PropertyName"' Value = primitiveValue }'                      (testConfiguration) =>                      {                          if (testConfiguration.Format == ODataFormat.Json)                          {                              return new JsonWriterTestExpectedResults(this.Settings.ExpectedResultSettings)                              {                                  FragmentExtractor = (result) =>                                  {                                      var jsonObject = JsonLightWriterUtils.TrimWhitespace(result).Object();                                      JsonProperty typeProperty = null;                                      if (jsonObject != null)                                      {                                          typeProperty = jsonObject.Property(JsonLightConstants.ODataTypeAnnotationName);                                      }                                        return typeProperty == null ? MissingTypeNameSentinelJsonProperty : typeProperty.RemoveAllAnnotations(true);                                  }'                                  Json = tc.JsonLightTypeName                              };                          }                            throw new NotSupportedException("Format " + testConfiguration.Format.GetType().Name + " is not supported.");                      })                  {                      Model = model'                      PayloadEdmElementContainer = owningEntityType                  };              });
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterRawValueTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterRawValueTests.cs,RawPrimitiveValueTests,The following statement contains a magic number: var testCases = new PayloadWriterTestDescriptor<object> []              {                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)(double)1' "1"' null' TextPlainContentType)' // double                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)new byte[] { 0' 1' 0' 1}' (string)null' new byte[] { 0' 1' 0' 1}' ApplicationOctetStreamContentType)' // binary                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)(Single)1'  "1"' (byte[])null' TextPlainContentType)' // single                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)true' "true"' (byte[])null' TextPlainContentType)' // boolean                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)(byte)1' "1"' (byte[])null' TextPlainContentType)' // byte                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)DateTimeOffset.Parse("2010-10-10T10:10:10Z")' "2010-10-10T10:10:10Z"' (byte[])null' TextPlainContentType)' // DateTimeOffset                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)DateTimeOffset.Parse("2010-10-10T10:10:10+01:00")' "2010-10-10T10:10:10+01:00"' (byte[])null' TextPlainContentType)' // DateTimeOffset (2)                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)DateTimeOffset.Parse("2010-10-10T10:10:10-08:00")' "2010-10-10T10:10:10-08:00"' (byte[])null' TextPlainContentType)' // DateTimeOffset (3)                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)(decimal)1' "1"' (byte[])null' TextPlainContentType)' // Decimal                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)new Guid("11111111-2222-3333-4444-555555555555")' "11111111-2222-3333-4444-555555555555"' (byte[])null' TextPlainContentType)' // Guid                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)(sbyte)1' "1"' (byte[])null' TextPlainContentType)' // SByte                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)(Int16)1' "1"' (byte[])null' TextPlainContentType)' // Int16                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)(Int32)1' "1"' (byte[])null' TextPlainContentType)' // Int32                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)(Int64)1' "1"' (byte[])null' TextPlainContentType)' // Int64                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)"1"' "1"' (byte[])null' TextPlainContentType)' // string                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)TimeSpan.FromMinutes(12.34)' "PT12M20.4S"' (byte[])null' TextPlainContentType)' // Duration                  new PayloadWriterTestDescriptor<object>(this.Settings' (object)string.Empty' string.Empty' (byte[])null' TextPlainContentType)' // empty               };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,ResourceCollectionNamePropertyTests,The following statement contains a magic number: var collectionArrays = interestingCollections.Variations(0' 1' 3);
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,WorkspaceNamesAndResourceCollectionTests,The following statement contains a magic number: int[] collectionSizes = new int[] { 0' 1' 3 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,ResourceCollectionTests,The following statement contains a magic number: int[] collectionSizes = new int[] { 0' 1' 3 };
Magic Number,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterServiceDocumentTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterServiceDocumentTests.cs,SingletonTests,The following statement contains a magic number: int[] singletonSizes = new int[] { 0' 1' 3 };
Duplicate Code,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterErrorTests.cs,CreateODataErrorTestDescriptors,The method contains a code clone-set at the following line numbers (starting from the method definition): ((57' 77)' (143' 163))
Missing Default,Microsoft.Test.Taupo.OData.Writer.Tests.BatchWriter,BatchWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\BatchWriter\BatchWriterStatesTests.cs,InvokeBatchWriterAction,The following switch statement is missing a default case: switch (writerAction)              {                  case BatchWriterAction.StartBatch:                      writer.WriteStartBatch();                      break;                  case BatchWriterAction.EndBatch:                      writer.WriteEndBatch();                      break;                  case BatchWriterAction.StartChangeset:                      writer.WriteStartChangeset();                      break;                  case BatchWriterAction.EndChangeset:                      writer.WriteEndChangeset();                      break;                  case BatchWriterAction.Operation:                      if (testConfiguration.IsRequest)                      {                          writer.CreateOperationRequestMessage(readOperationReady ? "GET" : "POST"' new Uri("http://odata.org")' "4");                      }                      else                      {                          writer.CreateOperationResponseMessage();                      }                        break;                  case BatchWriterAction.GetOperationStream:                      GetOperationStream(setupResult == null ? null : setupResult.Message' testConfiguration);                      break;                  case BatchWriterAction.DisposeOperationStream:                      Stream s = setupResult == null ? null : setupResult.MessageStream;                      if (s != null)                      {                          try                          {                              s.Dispose();                          }                          catch (ObjectDisposedException e)                          {                              // Replace the disposed exception with OData exception so that our type checks work correctly.                              // No need to verify that the Dispose thrown the right type of the exception.                              throw new ODataException(e.Message);                          }                      }                      break;              }
Missing Default,Microsoft.Test.Taupo.OData.Writer.Tests.CollectionWriter,CollectionWriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\CollectionWriter\CollectionWriterStatesTests.cs,InvokeCollectionWriterAction,The following switch statement is missing a default case: switch (writerAction)              {                  case CollectionWriterAction.Start:                      writer.WriteStart(new ODataCollectionStart { Name = "foo" });                      break;                  case CollectionWriterAction.Item:                      writer.WriteItem(42);                      break;                  case CollectionWriterAction.End:                      writer.WriteEnd();                      break;                  case CollectionWriterAction.Error:                      messageWriter.WriteError(new ODataError()' false);                      break;              }
Missing Default,Microsoft.Test.Taupo.OData.Writer.Tests.Common,WriterTestConfiguration,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Common\WriterTestConfiguration.cs,CloneAndApplyBehavior,The following switch statement is missing a default case: switch (behaviorKind)              {                  case TestODataBehaviorKind.Default:                      break;                  case TestODataBehaviorKind.WcfDataServicesClient:                      break;                  case TestODataBehaviorKind.WcfDataServicesServer:                      testConfiguration.MessageWriterSettings.Validations &= ~ValidationKinds.ThrowOnDuplicatePropertyNames;                      break;              }
Missing Default,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterEntryTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterEntryTests.cs,NullPropertyTypeNameTest,The following switch statement is missing a default case: switch (behaviorKind)                                  {                                      case TestODataBehaviorKind.Default:                                          break;                                      case TestODataBehaviorKind.WcfDataServicesClient:                                          expectedTypeName = testCase.ExpectedClientTypeName;                                          break;                                      case TestODataBehaviorKind.WcfDataServicesServer:                                          expectedTypeName = testCase.ExpectedServerTypeName;                                          break;                                  }
Missing Default,Microsoft.Test.Taupo.OData.Writer.Tests.Writer,WriterStatesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Writer.Tests\Writer\WriterStatesTests.cs,InvokeWriterAction,The following switch statement is missing a default case: switch (writerAction)              {                  case WriterAction.StartResource:                      writer.WriteStart(ObjectModelUtils.CreateDefaultEntry());                      break;                  case WriterAction.StartFeed:                      writer.WriteStart(ObjectModelUtils.CreateDefaultFeed());                      break;                  case WriterAction.StartLink:                      writer.WriteStart(ObjectModelUtils.CreateDefaultCollectionLink());                      break;                  case WriterAction.End:                      writer.WriteEnd();                      break;                  case WriterAction.Error:                      messageWriter.WriteError(new ODataError()' false);                      break;              }
