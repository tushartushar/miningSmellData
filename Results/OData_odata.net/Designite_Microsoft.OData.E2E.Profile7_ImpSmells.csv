Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            Assert.True(discountAction.RequestUri.OriginalString.EndsWith("/Products/Microsoft.Test.OData.Services.ODataWCFService.Discount")); " is 131.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            var accessLevelAction = this.testClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).AddAccessRight(expectedAccessLevel); " is 157.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            Assert.True(accessLevelAction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.AddAccessRight")); " is 147.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            var getProductDetailsFunction = this.testClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).GetProductDetails(1); " is 150.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            var getRelatedProductAction = getProductDetailsFunction.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 }' { "ProductDetailID"' 10001 } }).GetRelatedProduct(); " is 171.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            Assert.True(getProductDetailsFunction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=1)")); " is 167.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The length of the statement  "            Assert.True(getRelatedProductAction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=1)(ProductID=10001'ProductDetailID=10001)/Microsoft.Test.OData.Services.ODataWCFService.GetRelatedProduct()")); " is 270.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            Assert.True(discountAction.RequestUri.OriginalString.EndsWith("/Products/Microsoft.Test.OData.Services.ODataWCFService.Discount")); " is 131.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            var accessLevelAction = this.testClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).AddAccessRight(expectedAccessLevel); " is 157.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            Assert.True(accessLevelAction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.AddAccessRight")); " is 147.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            var getProductDetailsAction = this.testClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).GetProductDetails(1); " is 148.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            var getRelatedProductAction = getProductDetailsAction.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 }' { "ProductDetailID"' 10001 } }).GetRelatedProduct(); " is 169.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            Assert.True(getProductDetailsAction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=1)")); " is 165.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The length of the statement  "            Assert.True(getRelatedProductAction.RequestUri.OriginalString.EndsWith("/Products(10001)/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=1)(ProductID=10001'ProductDetailID=10001)/Microsoft.Test.OData.Services.ODataWCFService.GetRelatedProduct()")); " is 270.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet35,The length of the statement  "            companyQuery = this.testClientContext.Company.Select(c => new Company() { Name = c.Name' Address = c.Address' Departments = c.Departments }); " is 141.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet35,The length of the statement  "            Assert.True(getEmployeesCountQuery.RequestUri.OriginalString.EndsWith("/Company/Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount()")); " is 149.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet35,The length of the statement  "            Assert.True(getEmployeesCountQuery.RequestUri.OriginalString.EndsWith("/Company/Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount()")); " is 149.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet35,The length of the statement  "            Assert.True(getHomeAddressQuery.RequestUri.OriginalString.EndsWith("/Company/VipCustomer/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()")); " is 155.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet45,The length of the statement  "            companyQuery = this.testClientContext.Company.Select(c => new Company() { Name = c.Name' Address = c.Address' Departments = c.Departments }); " is 141.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet45,The length of the statement  "            Assert.True(getEmployeesCountQuery.RequestUri.OriginalString.EndsWith("/Company/Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount()")); " is 149.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet45,The length of the statement  "            Assert.True(getEmployeesCountQuery.RequestUri.OriginalString.EndsWith("/Company/Microsoft.Test.OData.Services.ODataWCFService.GetEmployeesCount()")); " is 149.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnSingletonNet45,The length of the statement  "            Assert.True(getHomeAddressQuery.RequestUri.OriginalString.EndsWith("/Company/VipCustomer/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()")); " is 155.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionBoundOnContainedSingleNavigation,The length of the statement  "            var getActualAmountFunction = this.testClientContext.Accounts.ByKey(new Dictionary<string' object> { { "AccountID"' 101 } }).MyGiftCard.GetActualAmount(1); " is 155.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionBoundOnContainedSingleNavigation,The length of the statement  "            Assert.True(getActualAmountFunction.RequestUri.OriginalString.EndsWith("/Accounts(101)/MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=1.0)")); " is 178.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            var stockExchangeQuery = this.testClientContext.PublicCompanyPlus.Select(p => (p as PublicCompanyPlus).StockExchangePlus); " is 122.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.True(stockExchangeQuery.RequestUri.OriginalString.EndsWith("/PublicCompany/Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/StockExchange")); " is 159.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.True(assetsQuery.RequestUri.OriginalString.EndsWith("/PublicCompany/Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/Assets")); " is 145.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            assetsQuery = this.testClientContext.PublicCompanyPlus.CastToPublicCompanyPlus().AssetsPlus.Where(a => a.NamePlus != "Temp") as DataServiceQuery<AssetPlus>; " is 156.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.True(assetsQuery.RequestUri.OriginalString.EndsWith("/PublicCompany/Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/Assets?$filter=Name ne 'Temp'")); " is 168.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "                "/PublicCompany?$expand=Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/LabourUnion&$select=Address'Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/StockExchange")); " is 189.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            var publicCompany3Query = this.testClientContext.PublicCompanyPlus.Expand(p => (p as PublicCompanyPlus).LabourUnionPlus); " is 121.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.True(publicCompany3Query.RequestUri.OriginalString.EndsWith("/PublicCompany?$expand=Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/LabourUnion")); " is 166.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            DataServiceActionQuery changeLabourUnionAction = this.testClientContext.PublicCompanyPlus.CastToPublicCompanyPlus().LabourUnionPlus.ChangeLabourUnionNamePlus("changedLabourUnion"); " is 180.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            Assert.True(changeLabourUnionAction.RequestUri.OriginalString.EndsWith("/PublicCompany/Microsoft.Test.OData.Services.ODataWCFService.PublicCompany/LabourUnion/Microsoft.Test.OData.Services.ODataWCFService.ChangeLabourUnionName")); " is 230.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnDerivedSingleton,The length of the statement  "            var labourUnion = (await this.testClientContext.PublicCompanyPlus.Select(p => (p as PublicCompanyPlus).LabourUnionPlus).GetValueAsync()).NamePlus; " is 146.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The length of the statement  "            Assert.True(discountAction.RequestUri.OriginalString.EndsWith("/GetAllProducts()/Microsoft.Test.OData.Services.ODataWCFService.Discount")); " is 139.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The length of the statement  "            var filterAllProducts = getAllProductsFunction.Where(p => p.SkinColorPlus == ColorPlus.RedPlus) as DataServiceQuery<ProductPlus>; " is 129.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The length of the statement  "            Assert.True(filterAllProducts.RequestUri.OriginalString.EndsWith("/GetAllProducts()?$filter=SkinColor eq Microsoft.Test.OData.Services.ODataWCFService.Color'Red'")); " is 165.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The length of the statement  "            var productsNameQuery = this.testClientContext.GetProductsByAccessLevelPlus(AccessLevelPlus.ReadPlus | AccessLevelPlus.ExecutePlus); " is 132.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The length of the statement  "            Assert.True(Uri.UnescapeDataString(productsNameQuery.RequestUri.OriginalString).EndsWith("/GetProductsByAccessLevel(accessLevel=Microsoft.Test.OData.Services.ODataWCFService.AccessLevel'Read'Execute')")); " is 204.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport45,The length of the statement  "            var product = (await (this.testClientContext.ProductsPlus.Take(1) as DataServiceQuery<ProductPlus>).ExecuteAsync()).Single(); " is 125.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport45,The length of the statement  "            product = (await (this.testClientContext.ProductsPlus.Take(1) as DataServiceQuery<ProductPlus>).ExecuteAsync()).Single(); " is 121.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            var queryAccount = this.testClientContext.AccountsPlus.Where(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result > 1) as DataServiceQuery<AccountPlus>; " is 169.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.True(queryAccount.RequestUri.OriginalString.EndsWith("/Accounts?$filter=MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.5) gt 1.0")); " is 177.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryAccount = this.testClientContext.AccountsPlus.Where(a => 1 != a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result) as DataServiceQuery<AccountPlus>; " is 166.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.True(queryAccount.RequestUri.OriginalString.EndsWith("/Accounts?$filter=1.0 ne MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.5)")); " is 177.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            var queryPeople = this.testClientContext.PeoplePlus.Where(p => p.GetHomeAddressPlus().GetValueAsync().Result.FamilyNamePlus != "name") as DataServiceQuery<PersonPlus>; " is 167.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.True(queryPeople.RequestUri.OriginalString.EndsWith("/People?$filter=$it/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()/FamilyName ne 'name'")); " is 167.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryPeople = this.testClientContext.PeoplePlus.Where(p => "name" != p.GetHomeAddressPlus().GetValueAsync().Result.FamilyNamePlus) as DataServiceQuery<PersonPlus>; " is 163.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.True(queryPeople.RequestUri.OriginalString.EndsWith("/People?$filter='name' ne $it/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()/FamilyName")); " is 167.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            var queryProducts = this.testClientContext.ProductsPlus.Where(p => p.GetProductDetailsPlus(2).Count() > 1) as DataServiceQuery<ProductPlus>; " is 140.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.True(queryProducts.RequestUri.OriginalString.EndsWith("/Products?$filter=$it/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=2)/$count gt 1")); " is 172.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryProducts = this.testClientContext.ProductsPlus.Where(p => 1 <= p.GetProductDetailsPlus(2).Count()) as DataServiceQuery<ProductPlus>; " is 137.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.True(queryProducts.RequestUri.OriginalString.EndsWith("/Products?$filter=1 le $it/Microsoft.Test.OData.Services.ODataWCFService.GetProductDetails(count=2)/$count")); " is 172.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryAccount = this.testClientContext.AccountsPlus.OrderBy(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result) as DataServiceQuery<AccountPlus>; " is 163.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.True(queryAccount.RequestUri.OriginalString.EndsWith("/Accounts?$orderby=MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.5)")); " is 171.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryAccount = this.testClientContext.AccountsPlus.OrderByDescending(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result) as DataServiceQuery<AccountPlus>; " is 173.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.True(queryAccount.RequestUri.OriginalString.EndsWith("/Accounts?$orderby=MyGiftCard/Microsoft.Test.OData.Services.ODataWCFService.GetActualAmount(bonusRate=0.5) desc")); " is 176.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryPeople = this.testClientContext.PeoplePlus.OrderBy(p => p.GetHomeAddressPlus().GetValueAsync().Result.FamilyNamePlus) as DataServiceQuery<PersonPlus>; " is 155.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.True(queryPeople.RequestUri.OriginalString.EndsWith("/People?$orderby=$it/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()/FamilyName")); " is 158.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            queryPeople = this.testClientContext.PeoplePlus.OrderByDescending(p => p.GetHomeAddressPlus().GetValueAsync().Result.FamilyNamePlus) as DataServiceQuery<PersonPlus>; " is 165.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The length of the statement  "            Assert.True(queryPeople.RequestUri.OriginalString.EndsWith("/People?$orderby=$it/Microsoft.Test.OData.Services.ODataWCFService.GetHomeAddress()/FamilyName desc")); " is 163.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,PreferCustomInstanceAnotationTest,The length of the statement  "            context.SendingRequest2 += (sender' eventArgs) => ((HttpWebRequestMessage)eventArgs.RequestMessage).SetHeader("Prefer"' "odata.include-annotations=*"); " is 151.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,PreferCustomInstanceAnotationTest,The length of the statement  "            context.Configurations.ResponsePipeline.OnEntryEnded(readingEntryArgs => value = (readingEntryArgs.Entry.InstanceAnnotations).SingleOrDefault().Name);            " is 150.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The length of the statement  "                new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)' " is 140.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The length of the statement  "                new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)' " is 140.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The length of the statement  "                new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "1" select c) as DataServiceQuery<Driver>).RequestUri)' " is 129.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The length of the statement  "                new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "3" select c) as DataServiceQuery<Driver>).RequestUri) " is 128.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The length of the statement  "            Assert.True(countOfBatchParts > 0 && (countOfTimesSenderCalled - countOfBatchParts) == 1' "countOfBatchParts > 0 && (countOfTimesSenderCalled - countOfBatchParts ) == 1"); " is 171.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_AllNestedTest,The length of the statement  "            var query = context.Customer.Where(c => c.Logins.All(l => l.Orders.All(o => o.OrderId > 0))) as DataServiceQuery<Customer>; " is 123.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByDescendingThenByDescendingTest,The length of the statement  "            this.EnqueueCallback(() => Assert.Equal("namedpersonalabsentnegationbelowstructuraldeformattercreatebackupterrestrial"' customers.First().Name)); " is 145.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByThenByDescendingTest,The length of the statement  "                .Where(c => c.Name != null && c.PrimaryContactInfo != null && c.PrimaryContactInfo.WorkPhone != null && c.PrimaryContactInfo.WorkPhone.PhoneNumber != null) " is 155.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByThenByDescendingTest,The length of the statement  "                    Assert.Equal("enumeratetrademarkexecutionbrfalsenesteddupoverflowspacebarseekietfbeforeobservedstart"' customers.First().Name); " is 127.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByThenByTest,The length of the statement  "                    Assert.Equal("enumeratetrademarkexecutionbrfalsenesteddupoverflowspacebarseekietfbeforeobservedstart"' customers.Last().Name); " is 126.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectPropertiesFromEntityandExpandedEntity,The length of the statement  "                         select new Computer {ComputerId = c.ComputerId' ComputerDetail = new ComputerDetail {ComputerDetailId = c.ComputerDetail.ComputerDetailId}} " is 139.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoEntity_FromSingleEntityTest,The length of the statement  "                    Assert.Equal("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name); " is 120.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingConstructor_FromSingleEntityTest,The length of the statement  "                    Assert.Equal("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name); " is 120.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingInitializers_FromSingleEntityTest,The length of the statement  "                    Assert.Equal("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name); " is 120.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectProperty_FromSingleEntityTest,The length of the statement  "                    Assert.Equal("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name); " is 120.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectTwoProperties_FromSingleEntityTest,The length of the statement  "                    Assert.Equal("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name); " is 120.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdatePropertyClientTest,The length of the statement  "            var queryNameAr = this.testClientContext.BeginExecute<string>(new Uri("Company/Name"' UriKind.Relative)' null' null).EnqueueWait(this); " is 135.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdatePropertyClientTest,The length of the statement  "            queryCompany = this.testClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' Address = c.Address' Name = c.Name }); " is 135.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdateNavigationCollectionPropertyClientTest,The length of the statement  "            var selectCompany = this.testClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' Departments = c.Departments }); " is 133.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdateNavigationCollectionPropertyClientTest,The length of the statement  "            var queryDepartment = this.testClientContext.Departments.Expand(d => d.Company).Where(d => d.DepartmentID == tmpDepartmentId) as DataServiceQuery<Department>; " is 158.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdateNavigationSingletonPropertyClientTest,The length of the statement  "            var queryVipCustomerAr = this.testClientContext.BeginExecute<Customer>(new Uri("VipCustomer"' UriKind.Relative)' null' null).EnqueueWait(this); " is 143.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdateNavigationSingletonPropertyClientTest,The length of the statement  "            queryCompany = this.testClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' VipCustomer = c.VipCustomer }); " is 128.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousSingletonClientTest,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousSingletonClientTest.cs,SingletonQueryUpdateNavigationSingleEntityPropertyClientTest,The length of the statement  "            queryCompany = this.testClientContext.Company.Select(c => new Company { CompanyID = c.CompanyID' CoreDepartment = c.CoreDepartment }); " is 134.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousTestsExtensionMethods,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousTestsExtensionMethodsDesktop.cs,EnqueueTestComplete,The length of the statement  "            //If someday all the test cases are changed to the way that Linq_OrderByDescendingThenByDescendingTest is written' then this method should do nothing' just to be able to write test cases in the same way on all 4 platforms.This method is specific to SL. " is 252.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ServiceOperationTests,The length of the statement  "            var ar200 = context.BeginExecute<int>(new Uri("GetCustomerCount/"' UriKind.Relative)' null' null' "GET").EnqueueWait(this); " is 123.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            ComputerDetail cd1 = new ComputerDetail { ComputerDetailId = 101' SpecificationsBag = new ObservableCollection<string>() }; " is 123.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            Customer c1 = new Customer { Name = "nill"' CustomerId = 1007' Auditing = new AuditInfo { ModifiedBy = "No-one"' ModifiedDate = DateTimeOffset.Now' Concurrency = new ConcurrencyInfo { Token = "Test"' QueriedDateTime = DateTimeOffset.MinValue } } }; " is 248.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            AuditInfo a1 = new AuditInfo { ModifiedBy = "some-one"' ModifiedDate = DateTimeOffset.MinValue' Concurrency = new ConcurrencyInfo { Token = "Test"' QueriedDateTime = DateTimeOffset.MinValue } }; " is 194.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            var ar1 = context.BeginExecute(new Uri("Person/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee" + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries"' UriKind.Relative)' null' null' "POST"' new BodyOperationParameter("n"' 100)).EnqueueWait(this); " is 279.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            var ar2 = context.BeginExecute(new Uri("ComputerDetail(" + cd1.ComputerDetailId + ")" + "/Microsoft.Test.OData.Services.AstoriaDefaultService.ResetComputerDetailsSpecifications"' UriKind.Relative)' null' null' "POST"' new BodyOperationParameter("specifications"' specifications)' new BodyOperationParameter("purchaseTime"' purchaseTime)).EnqueueWait(this); " is 356.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            Assert.Equal(specifications.Aggregate(""' (current' item) => current + item)' cd1.SpecificationsBag.Aggregate(""' (current' item) => current + item)); " is 150.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            var ar3 = context.BeginExecute(new Uri("Customer(1007)/Microsoft.Test.OData.Services.AstoriaDefaultService.ChangeCustomerAuditInfo"' UriKind.Relative)' null' null' "POST"' new BodyOperationParameter("auditInfo"' a1)).EnqueueWait(this); " is 235.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The length of the statement  "            var query = (from c in context.Customer where c.CustomerId == c1.CustomerId select c.Auditing) as DataServiceQuery<AuditInfo>; " is 126.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsNoParams,The length of the statement  "            var ar2 = context.BeginExecute(new Uri("Person(1006)/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee" + "/Microsoft.Test.OData.Services.AstoriaDefaultService.Sack"' UriKind.Relative)' null' null' "POST").EnqueueWait(this); " is 235.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsNoParams,The length of the statement  "            var ar1 = context.BeginExecute<Computer>(new Uri("Computer(-10)" + "/Microsoft.Test.OData.Services.AstoriaDefaultService.GetComputer"' UriKind.Relative)' null' null' "POST").EnqueueWait(this); " is 192.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,SetDerivedTypeNavigationLinkTest,The length of the statement  "            var query = context.CreateQuery<Person>("Person").Expand(p => (p as Employee).Manager).Where(p => p.PersonId == personId) as DataServiceQuery<Person>; " is 150.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,SetDerivedTypeNavigationLinkTest,The length of the statement  "            Assert.NotNull(context.Links.SingleOrDefault(l => l.SourceProperty == "Manager" && l.Source == person && l.Target == employee)); " is 128.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddBaseTypeNavigationLinkTest,The length of the statement  "            Assert.NotNull(context.Links.SingleOrDefault(l => l.SourceProperty == "PersonMetadata" && l.Source == person && l.Target == personMetadata)); " is 141.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteMediaLinkEntryTest,The length of the statement  "            // When we issue a POST request' the ID and edit-media link are not updated on the client' so we need to get the server values.  " is 127.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteNamedStreamTest,The length of the statement  "            // When we issue a POST request' the ID and edit-media link are not updated on the client' so we need to get the server values.  " is 127.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The length of the statement  "            var resp = (await ((DataServiceQuery<Customer>)(context.Customer.Expand(c => c.Orders).Where(c => c.CustomerId == -10))).ExecuteAsync()) as QueryOperationResponse<Customer>; " is 173.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetReadStreamTest,The length of the statement  "            context.SetSaveStream(car' "Photo"' mediaEntry' true' new DataServiceRequestArgs { ContentType = "application/binary" }); " is 121.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetReadStreamTest,The length of the statement  "            receiveStream = (await context.GetReadStreamAsync(car' "Photo"' new DataServiceRequestArgs { AcceptContentType = "application/binary" })).Stream; " is 145.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,ExecuteBatchTest,The length of the statement  "            var qr = await context.ExecuteBatchAsync(new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)' new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)' new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "1" select c) as DataServiceQuery<Driver>).RequestUri)' new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "3" select c) as DataServiceQuery<Driver>).RequestUri)); " is 583.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,ExecuteBatchTest,The length of the statement  "            Assert.True(countOfBatchParts > 0 && (countOfTimesSenderCalled - countOfBatchParts) == 1' "countOfBatchParts > 0 && (countOfTimesSenderCalled - countOfBatchParts ) == 1"); " is 171.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The length of the statement  "            await context.ExecuteAsync(new Uri(queryable.RequestUri + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries")' " is 131.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The length of the statement  "            await context.ExecuteAsync<int>(new Uri(queryable.RequestUri + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries")' " is 136.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The length of the statement  "            int resultValue = (await context.ExecuteAsync<int>(new Uri("GetCustomerCount"' UriKind.Relative)' "GET"' true)).Single(); " is 121.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The length of the statement  "            queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Where(c => c.CustomerId > -5)).GetAllPagesAsync()).ToList().Count; " is 141.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The length of the statement  "            queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Select(c => new Customer() { CustomerId = c.CustomerId' Name = c.Name })).GetAllPagesAsync()).ToList().Count(); " is 186.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The length of the statement  "            queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Take(4)).GetAllPagesAsync()).ToList().Count(); " is 121.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The length of the statement  "            queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.OrderBy(c => c.Name)).GetAllPagesAsync()).ToList().Count(); " is 134.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The length of the statement  "            queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Skip(4)).GetAllPagesAsync()).ToList().Count(); " is 121.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,PagingOnNavigationProperty,The length of the statement  "            var query = context.Customer.ByKey(new Dictionary<string' object> { { "CustomerId"' -10 } }).Orders.IncludeTotalCount(); " is 120.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,PagingOnNavigationProperty,The length of the statement  "            var queryOrderCount = (await context.Customer.ByKey(new Dictionary<string' object> { { "CustomerId"' -10 } }).Orders.GetAllPagesAsync()).ToList().Count; " is 152.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,UseDataServiceCollectionToTrackAllPages,The length of the statement  "            var customerCount = ((await context.Customer.IncludeTotalCount().ExecuteAsync()) as QueryOperationResponse<Customer>).TotalCount; " is 129.
Long Statement,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,UseDataServiceCollectionToTrackAllPages,The length of the statement  "            var customers = new DataServiceCollection<Customer>(context' await context.Customer.GetAllPagesAsync()' TrackingMode.AutoChangeTracking' null' null' null); " is 155.
Long Statement,Microsoft.OData.E2E.Profile111,EndToEndTestBase,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\EndToEndTestBase.cs,ResetDataSource,The length of the statement  "                // the reason why this is an empty catch is because the reset call may return a 404 page not found and in that case the we need to " is 130.
Long Statement,Microsoft.OData.E2E.Profile111,EndToEndTestBase,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\EndToEndTestBase.cs,ResetDataSource,The length of the statement  "                // catch it instead of having the test fail. If it does return 404 its fine this is just a reset call which makes the Datasource remak itself  " is 141.
Empty Catch Block,Microsoft.OData.E2E.Profile111,EndToEndTestBase,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\EndToEndTestBase.cs,ResetDataSource,The method has an empty catch block.
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var discountAction = this.testClientContext.Products.Discount(50);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var queryProduct = this.testClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } });
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var accessLevelAction = this.testClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).AddAccessRight(expectedAccessLevel);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var getProductDetailsFunction = this.testClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).GetProductDetails(1);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var getRelatedProductAction = getProductDetailsFunction.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 }' { "ProductDetailID"' 10001 } }).GetRelatedProduct();
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: var getRelatedProductAction = getProductDetailsFunction.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 }' { "ProductDetailID"' 10001 } }).GetRelatedProduct();
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet35,The following statement contains a magic number: Assert.Equal(5' pd.ProductID);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var product = Product.CreateProduct(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var discountAction = this.testClientContext.Products.Discount(50);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var queryProduct = this.testClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } });
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var accessLevelAction = this.testClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).AddAccessRight(expectedAccessLevel);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var getProductDetailsAction = this.testClientContext.Products.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 } }).GetProductDetails(1);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var getRelatedProductAction = getProductDetailsAction.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 }' { "ProductDetailID"' 10001 } }).GetRelatedProduct();
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: var getRelatedProductAction = getProductDetailsAction.ByKey(new Dictionary<string' object> { { "ProductID"' 10001 }' { "ProductDetailID"' 10001 } }).GetRelatedProduct();
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnEntitySetNet45,The following statement contains a magic number: Assert.Equal(5' pd.ProductID);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionBoundOnContainedSingleNavigation,The following statement contains a magic number: var getActualAmountFunction = this.testClientContext.Accounts.ByKey(new Dictionary<string' object> { { "AccountID"' 101 } }).MyGiftCard.GetActualAmount(1);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var product = ProductPlus.CreateProductPlus(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var product = ProductPlus.CreateProductPlus(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var product = ProductPlus.CreateProductPlus(10001' "10001"' "2"' 2.0f' 2' true);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var discountAction = getAllProductsFunction.DiscountPlus(50);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: Assert.Equal(unitPrice * 50 / 100' p.UnitPricePlus);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: Assert.Equal(unitPrice * 50 / 100' p.UnitPricePlus);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnFunctionImport,The following statement contains a magic number: var getBossEmailsFunction = this.testClientContext.GetBossEmailsPlus(0' 10);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport35,The following statement contains a magic number: var discountAction = this.testClientContext.DiscountPlus(50);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport35,The following statement contains a magic number: Assert.Equal(originalPrice * 50 / 100' product.UnitPricePlus);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport35,The following statement contains a magic number: Assert.Equal(originalPrice * 50 / 100' product.UnitPricePlus);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport45,The following statement contains a magic number: var discountAction = this.testClientContext.DiscountPlus(50);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport45,The following statement contains a magic number: Assert.Equal(originalPrice * 50 / 100' product.UnitPricePlus);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,DelayQueryOnActionImport45,The following statement contains a magic number: Assert.Equal(originalPrice * 50 / 100' product.UnitPricePlus);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: var queryAccount = this.testClientContext.AccountsPlus.Where(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result > 1) as DataServiceQuery<AccountPlus>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: queryAccount = this.testClientContext.AccountsPlus.Where(a => 1 != a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result) as DataServiceQuery<AccountPlus>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: var queryProducts = this.testClientContext.ProductsPlus.Where(p => p.GetProductDetailsPlus(2).Count() > 1) as DataServiceQuery<ProductPlus>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: queryProducts = this.testClientContext.ProductsPlus.Where(p => 1 <= p.GetProductDetailsPlus(2).Count()) as DataServiceQuery<ProductPlus>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: queryAccount = this.testClientContext.AccountsPlus.OrderBy(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result) as DataServiceQuery<AccountPlus>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousDelayQueryTests2,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousDelayQueryTests.cs,FunctionAndFunctionImportInFilterAndOrderBy,The following statement contains a magic number: queryAccount = this.testClientContext.AccountsPlus.OrderByDescending(a => a.MyGiftCardPlus.GetActualAmountPlus(0.5).GetValueAsync().Result) as DataServiceQuery<AccountPlus>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,AddQueryOption_Custom,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar).ToList();                      Assert.Equal(2' customers.Count);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,AddQueryOption_Filter,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar);                      Assert.Equal(2' customers.Count());                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,AddQueryOption_Select,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar);                      Assert.Equal(2' customers.Count());                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,AddQueryOption_OrderBy,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar);                      Assert.Equal(2' customers.Count());                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,AddQueryOption_TwoQueryOptions,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar);                      Assert.Equal(2' customers.Count());                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The following statement contains a magic number: var arBatch = context.BeginExecuteBatch(                  null'                  null'                  new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)'                  new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)'                  new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "1" select c) as DataServiceQuery<Driver>).RequestUri)'                  new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "3" select c) as DataServiceQuery<Driver>).RequestUri)                  ).EnqueueWait(this);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,ExecuteBatchTest,The following statement contains a magic number: var arBatch = context.BeginExecuteBatch(                  null'                  null'                  new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)'                  new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)'                  new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "1" select c) as DataServiceQuery<Driver>).RequestUri)'                  new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "3" select c) as DataServiceQuery<Driver>).RequestUri)                  ).EnqueueWait(this);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,QueryEntitySetTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar).ToList();                      Assert.Equal(2' customers.Count);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,IncludeTotalCountTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar) as QueryOperationResponse<Computer>;                      Assert.Equal(10' customers.TotalCount);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,IncludeTotalCountTestWithServerDrivenPaging,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar) as QueryOperationResponse<Customer>;                      Assert.Equal(10' customers.TotalCount);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_AllNestedTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar) as QueryOperationResponse<Customer>;                      Assert.Equal(6' customers.TotalCount);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_AllTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar) as QueryOperationResponse<Customer>;                      Assert.Equal(6' customers.TotalCount);                      this.EnqueueTestComplete();                  }'                      null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_AnyNestedTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar) as QueryOperationResponse<Customer>;                      Assert.Equal(4' customers.TotalCount);                      this.EnqueueTestComplete();                  }'                      null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_AnyTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar) as QueryOperationResponse<Customer>;                      Assert.Equal(4' customers.TotalCount);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ExpandTest,The following statement contains a magic number: var query = context.Customer.Expand("Wife").Where(c => c.CustomerId == -10) as DataServiceQuery<Customer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingConstructor_FromSetTest,The following statement contains a magic number: var query = (from c in context.Customer                            select new NonEntityCustomer2(1000' c.Name)) as DataServiceQuery<NonEntityCustomer2>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingConstructor_FromSetTest,The following statement contains a magic number: query.BeginExecute(                  ar =>              {                  var customers = query.EndExecute(ar);                    foreach (var customer in customers)                  {                      Assert.Equal(1000' customer.CustomerId);                      Assert.NotNull(customer.Name);                  }                  this.EnqueueTestComplete();              }'               null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingInitializers_FromSetTest,The following statement contains a magic number: var query = (from c in context.Customer                           select new NonEntityCustomer { CustomerId = 1000' Name = c.Name }) as DataServiceQuery<NonEntityCustomer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingInitializers_FromSetTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customers = query.EndExecute(ar);                        foreach (var customer in customers)                      {                          Assert.Equal(1000' customer.CustomerId);                          Assert.NotNull(customer.Name);                      }                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectPropertiesFromEntityandExpandedEntity,The following statement contains a magic number: var query = (from c in context.Computer                            where c.ComputerId == -10                            select new Computer {ComputerId = c.ComputerId' ComputerDetail = new ComputerDetail {ComputerDetailId = c.ComputerDetail.ComputerDetailId}}                           )as DataServiceQuery<Computer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectPropertiesFromEntityandExpandedEntity,The following statement contains a magic number: Assert.Equal(-10' c1.ComputerId);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectPropertiesFromEntityandExpandedEntity,The following statement contains a magic number: Assert.Equal(-10' c1.ComputerDetail.ComputerDetailId);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectNameStreamProperty,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new Customer { CustomerId = c.CustomerId' Video = c.Video}) as DataServiceQuery<Customer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectNameStreamProperty,The following statement contains a magic number: query.BeginExecute(                     ar =>                     {                         var c1 = query.EndExecute(ar).SingleOrDefault();                         Assert.Equal(-10' c1.CustomerId);                         Assert.NotNull(c1.Video);                         this.EnqueueTestComplete();                     }'                     null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByCanonicalFunctionString,The following statement contains a magic number: Assert.Equal(-8' value0[1].CustomerId);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByCanonicalFunctionDateTime,The following statement contains a magic number: var q2 = (from c in context.ComputerDetail                        orderby c.PurchaseDate.Day == 15 && c.PurchaseDate.Year == 2020                        select c) as DataServiceQuery<ComputerDetail>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByCanonicalFunctionDateTime,The following statement contains a magic number: var q2 = (from c in context.ComputerDetail                        orderby c.PurchaseDate.Day == 15 && c.PurchaseDate.Year == 2020                        select c) as DataServiceQuery<ComputerDetail>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByCanonicalFunctionDateTime,The following statement contains a magic number: Assert.True(value2.First().ComputerDetailId == -9);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByCanonicalFunctionDateTime,The following statement contains a magic number: Assert.True(value2.Last().ComputerDetailId == -10);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_OrderByCanonicalFunctionInt,The following statement contains a magic number: Assert.Equal(5309' value3.Last().ManagersPersonId);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_FilterCanonicalFunctionMath,The following statement contains a magic number: Assert.Equal(4' value1.Count);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_FilterCanonicalFunctionDate,The following statement contains a magic number: var q2 = (from c in context.ComputerDetail                         where c.PurchaseDate.Day == 15 && c.PurchaseDate.Year == 2020                         select c) as DataServiceQuery<ComputerDetail>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_FilterCanonicalFunctionDate,The following statement contains a magic number: var q2 = (from c in context.ComputerDetail                         where c.PurchaseDate.Day == 15 && c.PurchaseDate.Year == 2020                         select c) as DataServiceQuery<ComputerDetail>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_FilterCanonicalFunctionDate,The following statement contains a magic number: Assert.Equal(-10' value2.ComputerDetailId);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_FilterCanonicalFunctionInt,The following statement contains a magic number: var q4 = (from c in context.Person.OfType<Employee>()                        where c.ManagersPersonId==47                        select c) as DataServiceQuery<Employee>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,LoadAsyncTest,The following statement contains a magic number: dataServiceCollection.LoadCompleted +=                  (sender' e) =>                  {                      if (e.Error == null)                      {                          if (dataServiceCollection.Continuation != null)                          {                              dataServiceCollection.LoadNextPartialSetAsync();                          }                          else                          {                              this.EnqueueTestComplete();                              Assert.Equal(10' dataServiceCollection.Count);                          }                      }                  };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoEntity_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new EntityCustomer { Name = c.Name }) as DataServiceQuery<EntityCustomer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingConstructor_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new NonEntityCustomer2(1000' c.Name)) as DataServiceQuery<NonEntityCustomer2>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingConstructor_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new NonEntityCustomer2(1000' c.Name)) as DataServiceQuery<NonEntityCustomer2>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingConstructor_FromSingleEntityTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customer = query.EndExecute(ar).Single();                        Assert.Equal(1000' customer.CustomerId);                      Assert.Equal("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingInitializers_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new NonEntityCustomer { CustomerId = 1000' Name = c.Name }) as DataServiceQuery<NonEntityCustomer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingInitializers_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new NonEntityCustomer { CustomerId = 1000' Name = c.Name }) as DataServiceQuery<NonEntityCustomer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectIntoNonEntityUsingInitializers_FromSingleEntityTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customer = query.EndExecute(ar).Single();                        Assert.Equal(1000' customer.CustomerId);                      Assert.Equal("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectMappedProperties_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new Customer { CustomerId = c.CustomerId }) as DataServiceQuery<Customer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectMappedProperties_FromSingleEntityTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customer = query.EndExecute(ar).Single();                        Assert.Equal(-10' customer.CustomerId);                      Assert.Equal(null' customer.Name);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectNavigationProperty_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new Customer { Wife = c.Wife }) as DataServiceQuery<Customer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectProperty_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new Customer { Name = c.Name }) as DataServiceQuery<Customer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectTwoProperties_FromSingleEntityTest,The following statement contains a magic number: var query = (from c in context.Customer                           where c.CustomerId == -10                           select new Customer { Name = c.Name' CustomerId = c.CustomerId }) as DataServiceQuery<Customer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_ProjectTwoProperties_FromSingleEntityTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var customer = query.EndExecute(ar).Single();                        Assert.Equal(-10' customer.CustomerId);                      Assert.Equal("commastartedtotalnormaloffsetsregisteredgroupcelestialexposureconventionsimportcastclass"' customer.Name);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_SkipTakeTest,The following statement contains a magic number: var query = context.Computer.OrderBy(c => c.ComputerId).Skip(1).Take(3) as DataServiceQuery<Computer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_SkipTakeTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var computers = query.EndExecute(ar).ToList();                      Assert.Equal(-9' computers.First().ComputerId);                      Assert.Equal(-7' computers.Last().ComputerId);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_SkipTakeTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var computers = query.EndExecute(ar).ToList();                      Assert.Equal(-9' computers.First().ComputerId);                      Assert.Equal(-7' computers.Last().ComputerId);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_SkipTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var computers = query.EndExecute(ar).ToList();                     Assert.Equal(-9' computers.First().ComputerId);                      Assert.Equal(-1' computers.Last().ComputerId);                        this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_TakeTest,The following statement contains a magic number: var query = context.Computer.OrderBy(c => c.ComputerId).Take(2) as DataServiceQuery<Computer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_TakeTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var computers = query.EndExecute(ar).ToList();                      Assert.Equal(-10' computers.First().ComputerId);                      Assert.Equal(-9' computers.Last().ComputerId);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousQueryTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousQueryTests.cs,Linq_TakeTest,The following statement contains a magic number: query.BeginExecute(                  ar =>                  {                      var computers = query.EndExecute(ar).ToList();                      Assert.Equal(-10' computers.First().ComputerId);                      Assert.Equal(-9' computers.Last().ComputerId);                      this.EnqueueTestComplete();                  }'                  null);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,PreferHeader,The following statement contains a magic number: Assert.Equal(201' returnedValue.StatusCode);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,PreferHeader,The following statement contains a magic number: c1.CustomerId = 2;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,PreferHeader,The following statement contains a magic number: Assert.Equal(204' returnedValue.StatusCode);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,PreferHeader,The following statement contains a magic number: Assert.Equal(200' returnedValue.StatusCode);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ServiceOperationTests,The following statement contains a magic number: Assert.Equal(10' count);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The following statement contains a magic number: Employee e1 = new Employee { Salary = 300' Name = "bill"' PersonId = 1005 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The following statement contains a magic number: Employee e1 = new Employee { Salary = 300' Name = "bill"' PersonId = 1005 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The following statement contains a magic number: ComputerDetail cd1 = new ComputerDetail { ComputerDetailId = 101' SpecificationsBag = new ObservableCollection<string>() };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The following statement contains a magic number: Customer c1 = new Customer { Name = "nill"' CustomerId = 1007' Auditing = new AuditInfo { ModifiedBy = "No-one"' ModifiedDate = DateTimeOffset.Now' Concurrency = new ConcurrencyInfo { Token = "Test"' QueriedDateTime = DateTimeOffset.MinValue } } };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The following statement contains a magic number: var ar1 = context.BeginExecute(new Uri("Person/Microsoft.Test.OData.Services.AstoriaDefaultService.Employee" + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries"' UriKind.Relative)' null' null' "POST"' new BodyOperationParameter("n"' 100)).EnqueueWait(this);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsParams,The following statement contains a magic number: Assert.Equal(400' e1.Salary);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsNoParams,The following statement contains a magic number: Employee e1 = new Employee { Name = "tim"' Salary = 300' Title = "bill"' PersonId = 1006 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsNoParams,The following statement contains a magic number: Employee e1 = new Employee { Name = "tim"' Salary = 300' Title = "bill"' PersonId = 1006 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,ActionTestsNoParams,The following statement contains a magic number: Assert.Equal(-10' comp.ComputerId);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,SetDerivedTypeNavigationLinkTest,The following statement contains a magic number: const int personId = -6;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,SetDerivedTypeNavigationLinkTest,The following statement contains a magic number: var employee = new Employee() { PersonId = 122222' ManagersPersonId = 2222' Salary = 544444444 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,SetDerivedTypeNavigationLinkTest,The following statement contains a magic number: var employee = new Employee() { PersonId = 122222' ManagersPersonId = 2222' Salary = 544444444 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,SetDerivedTypeNavigationLinkTest,The following statement contains a magic number: var employee = new Employee() { PersonId = 122222' ManagersPersonId = 2222' Salary = 544444444 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddBaseTypeNavigationLinkTest,The following statement contains a magic number: const int personId = -4;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddBaseTypeNavigationLinkTest,The following statement contains a magic number: var personMetadata = new PersonMetadata { PersonId = 12432 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkSetLinkTest,The following statement contains a magic number: Customer c1 = new Customer { CustomerId = 1004 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkSetLinkTest,The following statement contains a magic number: Customer c2 = new Customer { CustomerId = 1006 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkSetLinkTest,The following statement contains a magic number: Order o1 = new Order { OrderId = 999 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkAddRelatedObjectTestDerivedTypes,The following statement contains a magic number: Employee e1 = new Employee { PersonId = 3000 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkAddRelatedObjectTestDerivedTypes,The following statement contains a magic number: Employee e2 = new Employee { PersonId = 3001 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkAddRelatedObjectTest,The following statement contains a magic number: Customer c1 = new Customer { CustomerId = 1000 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkAddRelatedObjectTest,The following statement contains a magic number: Order o1 = new Order { OrderId = 1001 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkAddRelatedObjectTest,The following statement contains a magic number: Order o2 = new Order { OrderId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteAssociationLinkAddRelatedObjectTest,The following statement contains a magic number: Assert.Equal(2' c1.Orders.Count);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteTest,The following statement contains a magic number: var personQuery = context.Person.Where(p => p.PersonId == 1000) as DataServiceQuery<Person>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteTest,The following statement contains a magic number: var person = people.SingleOrDefault(p => p.PersonId == 1000);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteTest,The following statement contains a magic number: person = Person.CreatePerson(1000);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteTest,The following statement contains a magic number: person = people.SingleOrDefault(p => p.PersonId == 1000);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteBatchTest,The following statement contains a magic number: int numberOfPeople = 10;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteBatchTest,The following statement contains a magic number: context.AddToPerson(new Person { PersonId = 1000 + i });
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteBatchTest,The following statement contains a magic number: var query = context.Person.Where(p => p.PersonId >= 1000) as DataServiceQuery<Person>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteMediaLinkEntryTest,The following statement contains a magic number: var car = new Car { VIN = 1000 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteMediaLinkEntryTest,The following statement contains a magic number: car = cars.SingleOrDefault(c => c.VIN == 1000);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteNamedStreamTest,The following statement contains a magic number: var car = new Car { VIN = 1000 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,AddUpdateDeleteNamedStreamTest,The following statement contains a magic number: car = cars.SingleOrDefault(c => c.VIN == 1000);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,GetStream,The following statement contains a magic number: return new MemoryStream(new byte[] { 64' 65' 66 });
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,GetStream,The following statement contains a magic number: return new MemoryStream(new byte[] { 64' 65' 66 });
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsynchronousUpdateTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsynchronousUpdateTests.cs,GetStream,The following statement contains a magic number: return new MemoryStream(new byte[] { 64' 65' 66 });
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,SaveChangesTest,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,SaveChangesTest,The following statement contains a magic number: Assert.True((response.First() as ChangeOperationResponse).StatusCode == 201' "StatusCode == 201");
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,SaveChangesTest,The following statement contains a magic number: Order o1 = new Order { OrderId = 1000' CustomerId = 1' Concurrency = new ConcurrencyInfo() { Token = "token1" } };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,SaveChangesTest,The following statement contains a magic number: expectedPropertyCount = 2;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,SaveChangesTest,The following statement contains a magic number: Order order = new Order { OrderId = 1000 + i };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,SaveChangesTest,The following statement contains a magic number: i <= 9
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,QueryEntitySetPagingTest,The following statement contains a magic number: Assert.Equal(2' currentPageCount);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,QueryEntitySetPagingTest,The following statement contains a magic number: Assert.Equal(2' currentPageCount);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The following statement contains a magic number: var c1 = new Customer() { CustomerId = -10 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The following statement contains a magic number: Order order = new Order() { OrderId = 1000 + i };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The following statement contains a magic number: i <= 9
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The following statement contains a magic number: var resp = (await ((DataServiceQuery<Customer>)(context.Customer.Expand(c => c.Orders).Where(c => c.CustomerId == -10))).ExecuteAsync()) as QueryOperationResponse<Customer>;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The following statement contains a magic number: Assert.True(customer.Orders.Count == 4);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,LoadPropertyTest,The following statement contains a magic number: Assert.True(customer.Orders.Count == 6);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetReadStreamTest,The following statement contains a magic number: var car = new Car { VIN = 1000 };
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetStream,The following statement contains a magic number: return new MemoryStream(new byte[] { 64' 65' 66 });
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetStream,The following statement contains a magic number: return new MemoryStream(new byte[] { 64' 65' 66 });
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetStream,The following statement contains a magic number: return new MemoryStream(new byte[] { 64' 65' 66 });
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,ExecuteBatchTest,The following statement contains a magic number: var qr = await context.ExecuteBatchAsync(new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)' new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)' new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "1" select c) as DataServiceQuery<Driver>).RequestUri)' new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "3" select c) as DataServiceQuery<Driver>).RequestUri));
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,ExecuteBatchTest,The following statement contains a magic number: var qr = await context.ExecuteBatchAsync(new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -8 select c) as DataServiceQuery<Customer>).RequestUri)' new DataServiceRequest<Customer>(((from c in context.Customer where c.CustomerId == -6 select c) as DataServiceQuery<Customer>).RequestUri)' new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "1" select c) as DataServiceQuery<Driver>).RequestUri)' new DataServiceRequest<Driver>(((from c in context.Driver where c.Name == "3" select c) as DataServiceQuery<Driver>).RequestUri));
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The following statement contains a magic number: await context.ExecuteAsync(new Uri(queryable.RequestUri + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries")'                  "POST"'                  new BodyOperationParameter("n"' 5));
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The following statement contains a magic number: Assert.Equal(expectedEmployee0Salary + 5' currentEmployees.First().Salary);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The following statement contains a magic number: await context.ExecuteAsync<int>(new Uri(queryable.RequestUri + "/Microsoft.Test.OData.Services.AstoriaDefaultService.IncreaseSalaries")'                  "POST"'                  new BodyOperationParameter("n"' 5));
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The following statement contains a magic number: Assert.Equal(expectedEmployee0Salary + 10' currentEmployees.First().Salary);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,ActionFunction,The following statement contains a magic number: Assert.Equal(10' resultValue);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The following statement contains a magic number: query = ((DataServiceQuery<Customer>)context.Customer.Where(c => c.CustomerId > -5)).IncludeTotalCount();
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The following statement contains a magic number: queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Where(c => c.CustomerId > -5)).GetAllPagesAsync()).ToList().Count;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The following statement contains a magic number: queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Take(4)).GetAllPagesAsync()).ToList().Count();
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The following statement contains a magic number: Assert.Equal(4' queryCustomersCount);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The following statement contains a magic number: queryCustomersCount = (await ((DataServiceQuery<Customer>)context.Customer.Skip(4)).GetAllPagesAsync()).ToList().Count();
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetAllPagesAsyncTest,The following statement contains a magic number: Assert.Equal(allCustomersCount - 4' queryCustomersCount);
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,PagingOnNavigationProperty,The following statement contains a magic number: var query = context.Customer.ByKey(new Dictionary<string' object> { { "CustomerId"' -10 } }).Orders.IncludeTotalCount();
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,PagingOnNavigationProperty,The following statement contains a magic number: var queryOrderCount = (await context.Customer.ByKey(new Dictionary<string' object> { { "CustomerId"' -10 } }).Orders.GetAllPagesAsync()).ToList().Count;
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetParitalPagesAsyncTest,The following statement contains a magic number: ++count == 3
Magic Number,Microsoft.OData.E2E.Profile111.AsynchronousTests,AsyncMethodTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\AsynchronousTests\AsyncMethodTests.cs,GetParitalPagesAsyncTest,The following statement contains a magic number: Assert.Equal(2' sentRequestCount);
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,LoadPropertyCollection,The following statement contains a magic number: var querry = (from c in context.Customer                            where c.CustomerId == -10                            select c) as DataServiceQuery<Customer>;
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,LoadPropertyCollection,The following statement contains a magic number: o.OrderId = (134);
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,LoadPropertyCollection,The following statement contains a magic number: var o1 = new Order { OrderId = 1220 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,AddDeleteEntitySave,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,RemoveEntityTwice,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,RemoveEntityTwice,The following statement contains a magic number: Customer c2 = new Customer { CustomerId = 1003 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,RemoveParentEntityWithLinks,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,RemoveParentEntityWithLinks,The following statement contains a magic number: Order o = new Order { OrderId = 2001' Customer = c' CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,RemoveParentEntityWithLinks,The following statement contains a magic number: Order o = new Order { OrderId = 2001' Customer = c' CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,RemoveParentEntityWithLinks,The following statement contains a magic number: VerifyCtxCount(context' 2' 1);
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,RemoveChildEntityWithLinks,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,RemoveChildEntityWithLinks,The following statement contains a magic number: Order o = new Order { OrderId = 2001' Customer = c' CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,RemoveChildEntityWithLinks,The following statement contains a magic number: Order o = new Order { OrderId = 2001' Customer = c' CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,RemoveChildEntityWithLinks,The following statement contains a magic number: VerifyCtxCount(context' 2' 1);
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,ClearListTest,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,ClearListTest,The following statement contains a magic number: Customer c2 = new Customer { CustomerId = 1003 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,ClearListTest,The following statement contains a magic number: Customer c3 = new Customer { CustomerId = 1004 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,ClearListTest,The following statement contains a magic number: Order o = new Order { OrderId = 2001' Customer = c' CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,ClearListTest,The following statement contains a magic number: Order o = new Order { OrderId = 2001' Customer = c' CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,ClearListTest,The following statement contains a magic number: VerifyCtxCount(context' 4' 1);
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,DeletingInModifiedState,The following statement contains a magic number: Customer modified = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,DeletingInModifiedState,The following statement contains a magic number: VerifyCtxCount(context' 4' 0);
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,DeletingInModifiedState,The following statement contains a magic number: modified.CustomerId = 100002;
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,DeletingInDetachedState,The following statement contains a magic number: Customer detached = new Customer { CustomerId = 1003 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,DeletingInDeletedState,The following statement contains a magic number: Customer deleted = new Customer { CustomerId = 1004 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,DeletingInUnchangedState,The following statement contains a magic number: Customer unchanged = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,AddSaveRemoveSaveEntity,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,AddSaveUpdateSaveEntity,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,AddSaveUpdateSaveEntity,The following statement contains a magic number: c.CustomerId = 1003;
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,AddSaveUnchangedSaveEntity,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
Magic Number,Microsoft.OData.E2E.Profile111,BindingTests,C:\research\architectureSmells\repos\OData_odata.net\test\EndToEndTests\Microsoft.OData.E2E.Portable\BindingTests.cs,AddSaveDetachedSaveEntity,The following statement contains a magic number: Customer c = new Customer { CustomerId = 1002 };
