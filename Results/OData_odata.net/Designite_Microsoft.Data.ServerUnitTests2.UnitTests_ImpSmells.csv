Implementation smell,Namespace,Class,File,Method,Description
Long Method,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,ConfigurationBatchTest,The method has 108 lines of code.
Long Method,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The method has 141 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The method has 111 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The method has 169 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The method has 102 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The method has 192 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The method has 107 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobStreamQueryOptionTests,The method has 104 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The method has 440 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The method has 270 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The method has 343 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The method has 348 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobClientInsertTests,The method has 124 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerXSDPClientTest,The method has 151 lines of code.
Long Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,SendRequest,The method has 105 lines of code.
Long Method,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,InvalidOtherUriTests,The method has 103 lines of code.
Long Method,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The method has 111 lines of code.
Long Method,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The method has 119 lines of code.
Long Method,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OverwriteHeaders,The method has 110 lines of code.
Long Method,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerKeyTypesTest,The method has 120 lines of code.
Complex Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,SendRequest,Cyclomatic complexity of the method is 15
Complex Method,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidateMediaResourceFromStorage,Cyclomatic complexity of the method is 10
Complex Method,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetModel,Cyclomatic complexity of the method is 8
Complex Method,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OverwriteHeaders,Cyclomatic complexity of the method is 20
Complex Method,AstoriaUnitTests.Tests,PlainSerializersTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\PlainSerializersTest.cs,PlainSerializersBasicTest,Cyclomatic complexity of the method is 8
Long Parameter List,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Batch_UpdateMLE,The method has 5 parameters. Parameters: method' payload' writer' dataServiceMaxVersion' requestContent
Long Parameter List,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Batch_PostMR,The method has 6 parameters. Parameters: entitySet' entityType' contentType' slug' writer' buffer
Long Parameter List,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,SendRequest,The method has 12 parameters. Parameters: serviceType' request' requestMethod' requestUri' ifMatch' ifNoneMatch' requestAccept' requestContentType' slug' requestBody' expectedStatusCode' includePreference
Long Parameter List,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetItemPayload,The method has 5 parameters. Parameters: format' baseUri' id' description' name
Long Parameter List,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetPhotoPayload,The method has 7 parameters. Parameters: format' baseUri' expectedPhotoID' description' name' rating' thumbNail
Long Parameter List,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetCustomerPayload,The method has 6 parameters. Parameters: format' baseUri' customerID' companyName' address' city
Long Parameter List,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidateItemFromResponse,The method has 5 parameters. Parameters: request' responseFormat' expectedID' expectedDescription' expectedName
Long Parameter List,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidatePhotoMLEOnContext,The method has 5 parameters. Parameters: expectedPhotoID' expectedPhotoDescription' expectedPhotoName' expectedPhotoRating' expectedThumbNail
Long Parameter List,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidatePhotoMLEFromResponse,The method has 12 parameters. Parameters: request' responseFormat' expectedType' expectedPhotoID' expectedPhotoDescription' expectedPhotoName' expectedPhotoRating' expectedThumbNail' expectedMleETag' expectedMediaResourceETag' validateCustomResponseHeaders' editLinkHasTypeSegment
Long Parameter List,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidateCustomersMLEFromResponse,The method has 7 parameters. Parameters: request' responseFormat' customerID' companyName' address' city' validateCustomResponseHeaders
Long Parameter List,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The method has 6 parameters. Parameters: request' protocolVersion' versions' requestDSV' requestMDSV' exception
Long Parameter List,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,GetResponseStream,The method has 6 parameters. Parameters: location' responseFormat' uri' dataServiceType' httpMethodName' payload
Long Parameter List,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,VerifyPayload,The method has 6 parameters. Parameters: uri' dataServiceType' testCallback' web3sXpaths' jsonXPaths' atomXPaths
Long Parameter List,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,VerifyPayload,The method has 5 parameters. Parameters: uri' dataServiceType' responseFormat' testCallback' xPaths
Long Parameter List,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,VerifyXPaths,The method has 5 parameters. Parameters: resultStream' responseFormat' web3sXPaths' jsonXPaths' atomXPaths
Long Identifier,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,,The length of the parameter HasStreamAttributeInComplexType is 31.
Long Identifier,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,,The length of the parameter ManagerNavigationPropertyRelValue is 33.
Long Identifier,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,,The length of the parameter DirectReportsNavigationLinkXPath is 32.
Long Identifier,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,,The length of the parameter DirectReportsAssociationLinkXPath is 33.
Long Statement,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,TestExceedMaxBatchCount,The length of the statement  "                            "<entry xmlns:ads='http://docs.oasis-open.org/odata/ns/data' xmlns:adsm='http://docs.oasis-open.org/odata/ns/metadata' xmlns='http://www.w3.org/2005/Atom' adsm:type='#AstoriaUnitTests.Stubs.Customer'>\r\n" + " is 207.
Long Statement,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,TestExceedMaxBatchCount,The length of the statement  "                            "<entry xmlns:ads='http://docs.oasis-open.org/odata/ns/data' xmlns:adsm='http://docs.oasis-open.org/odata/ns/metadata' xmlns='http://www.w3.org/2005/Atom' adsm:type='#AstoriaUnitTests.Stubs.Customer'>\r\n" + " is 207.
Long Statement,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,AllowModificationWithOutChangeset,The length of the statement  "                            string requestContent = File.ReadAllText(Path.Combine(batchRequestsDirectory' "ModificationOutsideChangesetbatch" + ".txt")); " is 125.
Long Statement,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,AllowModificationWithOutChangeset,The length of the statement  "                                string actualResponse = BatchTestUtil.GetResponse(requestContent' contextType' WebServerLocation.InProcess' dataServiceVersion); " is 128.
Long Statement,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,UriCompositionRulesChangedOnServer,The length of the statement  "                                string actualResponse = BatchTestUtil.GetResponse(requestContent' contextType' WebServerLocation.InProcess' dataServiceVersion); " is 128.
Long Statement,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The length of the statement  "                        ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed"' "boundary") " is 148.
Long Statement,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The length of the statement  "                        ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;param=value"' "boundary") " is 160.
Long Statement,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The length of the statement  "                        ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70") " is 134.
Long Statement,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The length of the statement  "                        ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70") " is 134.
Long Statement,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The length of the statement  "                        ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;boundary=one;boundary=two"' "boundary") " is 174.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobClrMetadataTest,The length of the statement  "                        string path = Path.Combine(targetPath' "BlobClrMetadataTest" + Enum.GetName(typeof(WebServerLocation)' table["Location"]) + ".xml"); " is 132.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEdmMetadataTest,The length of the statement  "                            Path.Combine(Path.Combine(TestUtil.GeneratedFilesLocation' "BlobSupportTest_BlobEdmMetadataTest")' "Northwind.WithStream.csdl.returned.xml")); " is 142.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobETagTest,The length of the statement  "                    string photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' id' "sample photo payload"' "sample photo"' rating' new byte[] { 1' 2' 3' 4 }); " is 160.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobETagTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Folders(0)/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' null' photoPayload' 201)); " is 173.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                    new Dimension("Location"' new WebServerLocation[] { WebServerLocation.InProcessStreamedWcf' WebServerLocation.InProcess' WebServerLocation.InProcessWcf })); " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect. " is 169.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500)); " is 148.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201)); " is 149.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                                payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled); " is 142.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true)); " is 174.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200)); " is 177.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200)); " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204)); " is 179.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200)); " is 177.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405)); " is 203.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200)); " is 177.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true)); " is 174.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true)); " is 172.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */ " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405)); " is 235.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204)); " is 221.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The length of the statement  "                            Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog); " is 1009.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,EdmBlobWithInheritanceTest,The length of the statement  "                    new Dimension("Location"' new WebServerLocation[] { WebServerLocation.InProcessStreamedWcf' WebServerLocation.InProcess' WebServerLocation.InProcessWcf })); " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,EdmBlobWithInheritanceTest,The length of the statement  "                            System.Diagnostics.Trace.WriteLine(string.Format("Exception from SendRequest():\r\n{0}\r\nCall Stack:\r\n{1}"' e.Message' e.StackTrace)); " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201)); " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                            itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled); " is 150.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204)); " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200)); " is 150.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400)); " is 142.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200)); " is 134.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400)); " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204)); " is 148.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200)); " is 134.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400)); " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204)); " is 146.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200)); " is 134.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */ " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405)); " is 204.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204)); " is 194.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                    new Dimension("Location"' new WebServerLocation[] { WebServerLocation.InProcessStreamedWcf' WebServerLocation.InProcess' WebServerLocation.InProcessWcf })); " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 }); " is 121.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect. " is 169.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500)); " is 136.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201)); " is 138.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                            photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled); " is 152.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204)); " is 162.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200)); " is 150.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false); " is 125.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200)); " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200)); " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false); " is 125.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204)); " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200)); " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405)); " is 175.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200)); " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200)); " is 134.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204)); " is 160.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200)); " is 150.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false); " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204)); " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200)); " is 150.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false); " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */ " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405)); " is 204.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204)); " is 197.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does. " is 157.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto; " is 143.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200)); " is 147.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false); " is 214.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The length of the statement  "                        Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog); " is 1207.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 }); " is 121.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403)); " is 136.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403)); " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403)); " is 165.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403)); " is 173.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405)); " is 153.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403)); " is 146.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201)); " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204)); " is 151.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200)); " is 151.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 }); " is 131.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204)); " is 197.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 }); " is 131.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204)); " is 195.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201)); " is 138.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Folders(0)/Items/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204)); " is 170.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Items/$ref?$id=Items(500)"' null' null' null' null' null' null' 204)); " is 154.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Folders(0)/Items"' null' null' accept' binaryContentType' slug' buffer' 201)); " is 149.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204)); " is 162.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items(500)/RelatedFolders/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204)); " is 179.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNotNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedFolders.SingleOrDefault(f => f.ID == 0)); " is 121.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/RelatedFolders/$ref?$id=Folders(0)"' null' null' null' null' null' null' 204)); " is 163.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items(500)/RelatedFolders"' null' null' accept' UnitTestsUtil.JsonLightMimeType' null' payload' 201)); " is 173.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNotNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedFolders.SingleOrDefault(f => f.ID == 333)); " is 123.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/RelatedFolders(333)"' null' null' null' null' null' null' 204)); " is 148.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedFolders.SingleOrDefault(f => f.ID == 333)); " is 120.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items(500)/RelatedItems/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204)); " is 177.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/RelatedItems/$ref?$id=Items(1)"' null' null' null' null' null' null' 204)); " is 159.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items(500)/RelatedItems"' null' null' accept' binaryContentType' slug' buffer' 201)); " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNotNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedItems.SingleOrDefault(i => i.ID == id)); " is 120.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/RelatedItems(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204)); " is 169.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201)); " is 138.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204)); " is 169.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204)); " is 138.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204)); " is 177.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204)); " is 146.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204)); " is 169.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204)); " is 138.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The length of the statement  "                        string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 }); " is 121.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201)); " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The length of the statement  "                        ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false); " is 125.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200)); " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204)); " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200)); " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200)); " is 132.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204)); " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200)); " is 130.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsTrue(!request.ResponseHeaders.Keys.Any(k => string.Compare(k' "etag"' StringComparison.OrdinalIgnoreCase) == 0)' "etag header should not be there."); " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 500)); " is 133.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200)); " is 130.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200)); " is 130.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 500)); " is 133.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 500)); " is 133.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200)); " is 130.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200)); " is 130.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' "'"' null' null' null' null' null' 400)); " is 125.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' "\"\""' null' null' null' null' null' 400)); " is 128.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' "\"'\""' null' null' null' null' null' 400)); " is 131.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' "W/"' null' null' null' null' null' 400)); " is 129.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' "W/'"' null' null' null' null' null' 400)); " is 127.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' "W/\"\""' null' null' null' null' null' 412)); " is 133.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' "W/\"'\""' null' null' null' null' null' 412)); " is 134.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' null' null' null' contentTypeP1' null' buffer' 204)); " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsTrue(!request.ResponseHeaders.Keys.Any(k => string.Compare(k' "etag"' StringComparison.OrdinalIgnoreCase) == 0)' "etag header should not be there."); " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200)); " is 130.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsTrue(!request.ResponseHeaders.Keys.Any(k => string.Compare(k' "etag"' StringComparison.OrdinalIgnoreCase) == 0)' "etag header should not be there."); " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' null' null' null' contentTypeP1' null' buffer' 204)); " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsTrue(!request.ResponseHeaders.Keys.Any(k => string.Compare(k' "etag"' StringComparison.OrdinalIgnoreCase) == 0)' "etag header should not be there."); " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200)); " is 130.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsTrue(!request.ResponseHeaders.Keys.Any(k => string.Compare(k' "etag"' StringComparison.OrdinalIgnoreCase) == 0)' "etag header should not be there."); " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' "W/\"someetag\""' null' UnitTestsUtil.AtomFormat' contentTypeP100' "100"' buffer' 400)); " is 170.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' "W/\"someetag\""' UnitTestsUtil.AtomFormat' contentTypeP100' "100"' buffer' 400)); " is 170.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200)); " is 130.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsTrue(string.IsNullOrEmpty(request.ResponseETag)' "If blob has no etag' we shouldn't see the etag for the MLE."); " is 121.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' "W/\"someetag\""' null' null' null' null' null' 912)); " is 145.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' "W/\"someetag\""' null' null' null' null' 200)); " is 142.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Exception e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 500); " is 129.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.AreEqual("The method 'IDataServiceStreamProvider.GetStreamETag' returned an entity tag with invalid format."' e.InnerException.Message); " is 143.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200)); " is 130.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.AreEqual("\"BlobETag123\""' request.ResponseETag' "The Blob has an etag' we expect to see it in the response header."); " is 126.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' "\"BlobETag123\""' null' null' null' null' null' 200)); " is 143.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.AreEqual("\"BlobETag123\""' request.ResponseETag' "The Blob has an etag' we expect to see it in the response header."); " is 126.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' "W/\"BlobETag456\""' null' null' null' null' null' 912)); " is 148.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' "\"BlobETag123\""' null' null' null' null' 200)); " is 143.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.AreEqual("W/\"BlobETag456\""' request.ResponseETag' "The Blob has an etag' we expect to see it in the response header."); " is 128.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' "W/\"BlobETag456\""' null' null' null' null' 304)); " is 145.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.AreEqual("W/\"BlobETag456\""' request.ResponseETag' "The Blob has an etag' we expect to see it in the response header."); " is 128.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' "W/\"BlobETag456\""' null' null' null' null' 304)); " is 145.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.AreEqual("W/\"BlobETag456\""' request.ResponseETag' "The Blob has an etag' we expect to see it in the response header."); " is 128.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200)); " is 123.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' request.ResponseETag' null' null' null' null' null' 200)); " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' request.ResponseETag' null' null' null' null' 304)); " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' "W/\"someetag\""' null' null' null' null' null' 412)); " is 138.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' "W/\"someetag\""' null' null' null' null' 200)); " is 135.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        string payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' "Photo Description"' "Photo Name"' 1234' new byte[] { 1' 2' 3' 4 }); " is 147.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        // Should fail because etag value is not specified for If-Match' make sure by removing the stream etag the MLE etag is still working " is 132.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' null' null' null' UnitTestsUtil.AtomFormat' null' payload' 400)); " is 149.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' null' null' null' UnitTestsUtil.AtomFormat' null' payload' 400)); " is 151.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' null' "W/\"someetag\""' null' UnitTestsUtil.AtomFormat' null' payload' 400)); " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' null' "W/\"someetag\""' null' UnitTestsUtil.AtomFormat' null' payload' 400)); " is 163.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' "W/\"someetag\""' null' null' UnitTestsUtil.AtomFormat' null' payload' 412)); " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' "W/\"someetag\""' null' null' UnitTestsUtil.AtomFormat' null' payload' 412)); " is 163.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200)); " is 123.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' null' UnitTestsUtil.AtomFormat' null' payload' 204)); " is 162.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' null' UnitTestsUtil.AtomFormat' null' payload' 204)); " is 164.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' null' null' null' contentTypeP1' null' buffer' 204)); " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' "W/\"someetag\""' null' null' contentTypeP1' null' buffer' 900)); " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' null' "W/\"someetag\""' null' contentTypeP1' null' buffer' 900)); " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' null' null' null' contentTypeP1' null' buffer' 900)); " is 144.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' "W/\"someetag\""' null' null' contentTypeP1' null' buffer' 912)); " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' "\"BlobETag789\""' null' null' contentTypeP1' null' buffer' 204)); " is 154.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)/$value"' null' null' null' null' null' null' 405 /* DELETE MR -- not allowed */)); " is 167.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)/$value"' "W/\"someetag\""' null' null' null' null' null' 405 /* DELETE MR -- not allowed */)); " is 179.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)/$value"' null' "W/\"someetag\""' null' null' null' null' 405 /* DELETE MR -- not allowed */)); " is 179.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Exception e = SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' null' null' null' null' null' null' 400); " is 125.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.AreEqual(string.Format("Since entity type '{0}' has one or more etag properties' If-Match HTTP header must be specified for DELETE/PUT operations on this type."' typeof(Photo).FullName)' e.InnerException.Message); " is 220.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        e = SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' null' "W/\"someetag\""' null' null' null' null' 400); " is 127.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' "W/\"someetag\""' null' null' null' null' null' 412)); " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200)); " is 123.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' null' null' null' null' 204)); " is 142.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobResolveTypeNegativeTest,The length of the statement  "                        Exception e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' null' "image/jpeg"' "1234"' buffer' 500); " is 132.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobResolveTypeNegativeTest,The length of the statement  "                        Assert.AreEqual("The method 'IDataServiceStreamProvider.ResolveType' must return a valid resource type name."' e.InnerException.Message); " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobResolveTypeNegativeTest,The length of the statement  "                        e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' null' "image/jpeg"' "1234"' buffer' 500); " is 122.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobResolveTypeNegativeTest,The length of the statement  "                        Assert.AreEqual("The method 'IDataServiceStreamProvider.ResolveType' must return a valid resource type name."' e.InnerException.Message); " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobResolveTypeNegativeTest,The length of the statement  "                        e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' null' "image/jpeg"' "1234"' buffer' 500); " is 122.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobResolveTypeNegativeTest,The length of the statement  "                        Assert.AreEqual("The method 'IDataServiceStreamProvider.ResolveType' must return a valid resource type name."' e.InnerException.Message); " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Batch_GetMLE,The length of the statement  "                writer.WriteLine("GET {0}({1}) HTTP/1.1"' entitySet' expectedID.GetType() == typeof(string) ? "'" + expectedID + "'" : expectedID); " is 131.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Batch_GetMR,The length of the statement  "                writer.WriteLine("GET {0}({1})/$value HTTP/1.1"' entitySet' expectedID.GetType() == typeof(string) ? "'" + expectedID + "'" : expectedID); " is 138.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The length of the statement  "                                e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201); " is 154.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The length of the statement  "                                e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200); " is 145.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The length of the statement  "                                e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200); " is 134.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The length of the statement  "                                e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204); " is 147.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The length of the statement  "                            //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204); " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The length of the statement  "                                Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200)); " is 123.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The length of the statement  "                                e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204); " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The length of the statement  "                                Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200)); " is 123.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The length of the statement  "                                e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204); " is 153.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The length of the statement  "                                Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200)); " is 123.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The length of the statement  "                                Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204)); " is 151.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobStreamQueryOptionTests,The length of the statement  "                        Exception e = SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' null' null' null' null' 400); " is 122.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobStreamQueryOptionTests,The length of the statement  "                        Exception ex = SendRequest(typeof(PhotoDataService)' request' "POST"' requestString' null' null' null' UnitTestsUtil.AtomFormat' null' null' 400); " is 146.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobStreamQueryOptionTests,The length of the statement  "                            Exception ex = SendRequest(typeof(PhotoDataService)' request' verb' requestString' null' null' null' UnitTestsUtil.AtomFormat' null' "some content"' 400); " is 154.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobStreamQueryOptionTests,The length of the statement  "                        Exception ex = SendRequest(typeof(PhotoDataService)' request' "DELETE"' requestString' null' null' null' UnitTestsUtil.AtomFormat' null' "some content"' 400); " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetStreamContentTypeTest,The length of the statement  "                        ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetStreamContentType' must not return a null or empty string.$" " is 124.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetStreamContentTypeTest,The length of the statement  "                        ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetStreamContentType' must not return a null or empty string.$" " is 124.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetStreamContentTypeTest,The length of the statement  "                                Exception e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' "image/png"' UnitTestsUtil.AtomFormat' null' null' testCase.ExpectedHTTPError); " is 179.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetReadStreamUriTest,The length of the statement  "                                    Exception e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' format' null' null' null' testCase.ExpectedStatusCode); " is 148.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetReadStreamUriTest,The length of the statement  "                                        string expectedReadStreamUri = testCase.GetReadStreamUriOverride(null' null) == null ? null : testCase.GetReadStreamUriOverride(null' null).OriginalString; " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobQueryStringHeaderTest,The length of the statement  "                            Exception e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items?Query-String-Header-Force-Error=yes"' null' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' "slug"' buffer' 418); " is 200.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobCallbackQueryOptionTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201)); " is 149.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobCallbackQueryOptionTest,The length of the statement  "                        // Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "MERGE"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true)); " is 177.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobCallbackQueryOptionTest,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value?$callback=foo"' blobETag' null' null' null' slug' null' 200)); " is 184.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"' " is 133.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"' " is 136.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."' " is 308.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"' " is 148.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"' " is 153.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."' " is 323.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"' " is 149.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."' " is 325.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"' " is 138.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"' " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"' " is 153.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"' " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"' " is 154.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"' " is 160.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")' " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"' " is 123.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"' " is 128.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"' " is 124.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                        RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"' " is 130.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                                DataServiceStreamProvider.GetStreamETagOverride = (entity' context) => "\"" + ((RowEntityTypeWithIDAsKey)entity).Properties["Name"] + "\""; " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                                DataServiceStreamProvider.GetStreamETagOverride = (entity' context) => "\"" + ((RowComplexType)entity).Properties["Name"] + "\""; " is 129.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                            TestUtil.AssertExceptionExpected(e' testCase.ErrorMessage != null' testCase.RequestUri.Contains("/$value") && !OpenWebDataServiceHelper.EnableBlobServer); " is 154.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                                            expectedETag = CustomRowBasedOpenTypesContext.customers.Single(c => (int)c.Properties["ID"] == 0).Properties["GuidValue"].ToString(); " is 133.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                                        xpaths.Add("boolean(/atom:entry[contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' '" + etag + "')])"); " is 122.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                                            xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' adsm:properties/ads:GuidValue))])"); " is 165.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                                            xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' atom:content/adsm:properties/ads:GuidValue))])"); " is 178.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                                        xpaths.Add("not(//atom:entry/atom:link[@rel='edit-media' and not(contains(../adsm:properties/ads:Name' substring-before(substring-after(@adsm:etag' '\"')' '\"')))])"); " is 167.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                                if (testCase.RequestUri.Contains("/$value") && !OpenWebDataServiceHelper.EnableBlobServer && testCase.StatusCode == 200) " is 120.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The length of the statement  "                                    string errMsg = DataServicesResourceUtil.GetString("BadRequest_InvalidUriForMediaResource"' new Uri(new Uri(request.BaseUri)' request.RequestUriString).AbsoluteUri); " is 165.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                    new Dimension("Location"' new[] { WebServerLocation.InProcess' WebServerLocation.InProcessWcf' WebServerLocation.InProcessStreamedWcf })' " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200)); " is 140.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200)); " is 138.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200)); " is 138.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200)); " is 138.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200)); " is 150.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200)); " is 125.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200)); " is 125.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200)); " is 151.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200)); " is 151.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200)); " is 162.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200)); " is 162.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" }) " is 146.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200)); " is 125.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200)); " is 174.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"' " is 121.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"); " is 127.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200)); " is 176.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200)); " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"' " is 124.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200)); " is 230.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"' " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"' " is 205.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"' " is 212.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"); " is 226.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"' " is 136.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"' " is 171.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"); " is 231.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200)); " is 191.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"); " is 206.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                            "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"); " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"' " is 149.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The length of the statement  "                        //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"); " is 196.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTestsClientQueries_EFProvider,The length of the statement  "                        // "/Order_Details(OrderID=10285'ProductID=1)?$select=Quantity'Orders/Customers/CompanyName'Orders/Customers/Orders/ShipCity&$expand=Orders/Customers/Orders" " is 157.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                    new Dimension("Location"' new[] { WebServerLocation.InProcess' WebServerLocation.InProcessWcf' WebServerLocation.InProcessStreamedWcf })' " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "not(/atom:entry[contains(atom:id' 'Orders(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src)"' " is 146.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "/Orders(0)?$select=ID&$expand=Customer($select=Name)'Customer($expand=Orders($select=ID))'Customer($expand=Orders($expand=OrderDetails($select=Quantity)))"' " is 157.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "/GetOrderByIdQueryable?id=0&$select=ID&$expand=Customer($select=Name)'Customer($expand=Orders($select=ID))'Customer($expand=Orders($expand=OrderDetails($select=Quantity)))"' " is 174.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content)"' " is 148.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/adsm:properties)"' " is 151.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"' " is 153.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[not(ads:ID)])"' " is 177.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[count(*) != 1])"' " is 179.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='OrderDetails']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"' " is 219.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='OrderDetails']/adsm:inline/atom:feed/atom:entry/adsm:properties)"' " is 217.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='OrderDetails']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/ads:Quantity)"' " is 243.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='OrderDetails']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[count(*) != 1])"' " is 245.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content)"' " is 148.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/adsm:properties)"' " is 151.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "boolean    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/*)"' " is 154.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"' " is 153.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='OrderDetails'])"' " is 168.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='OrderDetails']/adsm:inline/atom:entry/atom:content/*)"' " is 206.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                        OpenWebDataServiceHelper.ProcessingRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessingRequestHandler); " is 166.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                        OpenWebDataServiceHelper.ProcessingChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessingChangesetHandler); " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                        OpenWebDataServiceHelper.ProcessedChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessedChangesetHandler); " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                        OpenWebDataServiceHelper.ProcessedRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessedRequestHandler); " is 164.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The length of the statement  "                                Assert.IsNull(SendRequest(typeof(CustomRowBasedContext)' request' "GET"' queryString' null' null' accept' null' null' null' 200)); " is 130.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                    new Dimension("Location"' new[] { WebServerLocation.InProcess' WebServerLocation.InProcessWcf' WebServerLocation.InProcessStreamedWcf })' " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "not(/atom:entry[contains(atom:id' 'Orders(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src)"' " is 146.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag])= count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 160.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "/Orders(0)?$select=ID'Customer&$expand=Customer($select=Name;$expand=Orders($select=ID;$expand=Customer($select=ID)))"' " is 120.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "/GetOrderByIdQueryable?id=0&$select=ID&$expand=Customer($select=Name;$expand=Orders($select=ID;$expand=Customer($select=ID)))" " is 127.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content)"' " is 148.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/adsm:properties)"' " is 151.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"' " is 153.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[not(ads:ID)])"' " is 177.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[count(*) != 1])"' " is 179.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/@src)"' " is 205.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"' " is 203.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties/ads:ID)"' " is 210.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"' " is 202.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[count(*) != 1])"' " is 218.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content)"' " is 148.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/adsm:properties)"' " is 151.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/*)"' " is 150.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"' " is 153.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer'])"' " is 164.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"' " is 203.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"' " is 202.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content[not(@src)])"' " is 211.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"' " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                    "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])" " is 155.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                        OpenWebDataServiceHelper.ProcessingRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessingRequestHandler); " is 166.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                        OpenWebDataServiceHelper.ProcessingChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessingChangesetHandler); " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                        OpenWebDataServiceHelper.ProcessedChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessedChangesetHandler); " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                        OpenWebDataServiceHelper.ProcessedRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessedRequestHandler); " is 164.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The length of the statement  "                                Assert.IsNull(SendRequest(typeof(CustomRowBasedOpenTypesContext)' request' "GET"' queryString' null' null' accept' null' null' null' 200)); " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_EFProvider,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Orders?$expand=Customers"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200)); " is 172.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_EFProvider,The length of the statement  "                                SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' queryString' null' null' accept' null' null' null' 200); " is 123.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_ReflectionProvider,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items?$expand=ParentFolder"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200)); " is 161.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderBy_IDSPAndOpenTypesProvider,The length of the statement  "                    new Dimension("Location"' new[] { WebServerLocation.InProcess' WebServerLocation.InProcessWcf' WebServerLocation.InProcessStreamedWcf })' " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderBy_IDSPAndOpenTypesProvider,The length of the statement  "                    OpenWebDataServiceHelper.ProcessingRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessingRequestHandler); " is 166.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderBy_IDSPAndOpenTypesProvider,The length of the statement  "                    OpenWebDataServiceHelper.ProcessingChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessingChangesetHandler); " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderBy_IDSPAndOpenTypesProvider,The length of the statement  "                    OpenWebDataServiceHelper.ProcessedChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessedChangesetHandler); " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderBy_IDSPAndOpenTypesProvider,The length of the statement  "                    OpenWebDataServiceHelper.ProcessedRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessedRequestHandler); " is 164.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderBy_IDSPAndOpenTypesProvider,The length of the statement  "                            Assert.IsNull(SendRequest(contextType' request' "GET"' "/Customers?$expand=BestFriend"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200)); " is 150.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,VerifyOrder,The length of the statement  "                XPathNodeIterator responseIter = response.CreateNavigator().Select("/atom:feed/atom:entry"' TestUtil.TestNamespaceManager); " is 123.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetBaselineSortingXPathExpr,The length of the statement  "                string orderBy = ((queryString.Split('?')[1]).Split('&')).Where(s => s.ToLower().StartsWith("$orderby")).FirstOrDefault(); " is 122.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,AddSingleSort,The length of the statement  "                sortingExprBuilder.Append("atom:category/following-sibling::*[local-name()!='link']/descendant::ads:").Append(segments[segments.Length - 1]).Append("[parent::adsm:properties]"); " is 177.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,AddSingleSort,The length of the statement  "                XmlDataType sortingDataType = numberSorting.Count(s => s == segments[segments.Length - 1]) > 0 ? XmlDataType.Number : XmlDataType.Text; " is 135.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_NegativeCases,The length of the statement  "                    OpenWebDataServiceHelper.ProcessingRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessingRequestHandler); " is 166.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_NegativeCases,The length of the statement  "                    OpenWebDataServiceHelper.ProcessingChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessingChangesetHandler); " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_NegativeCases,The length of the statement  "                    OpenWebDataServiceHelper.ProcessedChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessedChangesetHandler); " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_NegativeCases,The length of the statement  "                    OpenWebDataServiceHelper.ProcessedRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessedRequestHandler); " is 164.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_NegativeCases,The length of the statement  "                        Exception e = SendRequest(typeof(CustomRowBasedContext)' request' testCase.Method' testCase.QueryString' null' null' null' null' null' body' 400); " is 146.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_EFProvider,The length of the statement  "                    Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200)); " is 157.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_EFProvider,The length of the statement  "                    int customersCount = customersAsAtom.SelectNodes("/atom:feed/atom:entry[atom:link[@rel = 'edit' and @title = 'Customers']]"' TestUtil.TestNamespaceManager).Count; " is 162.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_EFProvider,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' queryString' null' null' "application/atom+xml'application/xml"' null' null' null' 200)); " is 170.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_EFProvider,The length of the statement  "                                string phone = "W/\"'" + Uri.EscapeDataString(entryNode.SelectSingleNode("adsm:properties/ads:Phone"' TestUtil.TestNamespaceManager).InnerText) + "'\""; " is 152.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_EFProvider,The length of the statement  "                            UnitTestsUtil.VerifyXPathResultCount(atomResponse' expectedCount' new string[] { "/atom:feed/atom:entry[atom:link[@rel = 'edit' and @title = 'Customers']]" }); " is 159.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_IDSPAndOpenTypesProvider,The length of the statement  "                    new Dimension("Location"' new[] { WebServerLocation.InProcess' WebServerLocation.InProcessWcf' WebServerLocation.InProcessStreamedWcf })' " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_IDSPAndOpenTypesProvider,The length of the statement  "                    OpenWebDataServiceHelper.ProcessingRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessingRequestHandler); " is 166.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_IDSPAndOpenTypesProvider,The length of the statement  "                    OpenWebDataServiceHelper.ProcessingChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessingChangesetHandler); " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_IDSPAndOpenTypesProvider,The length of the statement  "                    OpenWebDataServiceHelper.ProcessedChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessedChangesetHandler); " is 139.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_IDSPAndOpenTypesProvider,The length of the statement  "                    OpenWebDataServiceHelper.ProcessedRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessedRequestHandler); " is 164.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_IDSPAndOpenTypesProvider,The length of the statement  "                            Assert.IsNull(SendRequest(contextType' request' "GET"' "/Customers"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200)); " is 131.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_IDSPAndOpenTypesProvider,The length of the statement  "                                    UnitTestsUtil.VerifyXPathResultCount(atomResponse' testCase.Value /*expected count*/' new string[] { "/atom:feed/atom:entry" }); " is 128.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The length of the statement  "                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200)); " is 140.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The length of the statement  "                                    Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200)); " is 125.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The length of the statement  "                                    UnitTestsUtil.VerifyXPathResultCount(atomResponse' testCase.Value /*expected count*/' new string[] { "/atom:feed/atom:entry" }); " is 128.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidateResponseNodes,The length of the statement  "                string xpath = string.Format("/atom:feed/atom:entry[position() > {0} and position() <= {1}]"' skip' top != null ? skip + top : int.MaxValue); " is 141.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidateResponseNodes,The length of the statement  "                XmlNodeList responseCustomersNodeList = atomResponse.SelectNodes("/atom:feed/atom:entry"' TestUtil.TestNamespaceManager); " is 121.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidateResponseNodes,The length of the statement  "                    string atomCustomersId = atomCustomersNodeList[nodeIdx].SelectSingleNode("atom:id"' TestUtil.TestNamespaceManager).InnerText; " is 125.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidateResponseNodes,The length of the statement  "                    string responseCustomersId = responseCustomersNodeList[nodeIdx].SelectSingleNode("atom:id"' TestUtil.TestNamespaceManager).InnerText; " is 133.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobTopSkipNegative,The length of the statement  "                        Exception e = SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' queryString' null' null' format' null' null' null' expectedStatusCode); " is 152.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobClientInsertTests,The length of the statement  "                    DataServiceRequestArgs arg1 = new DataServiceRequestArgs() { ContentType = DataServiceStreamProvider.GetContentType(p1) }; " is 122.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobClientInsertTests,The length of the statement  "                    DataServiceRequestArgs arg2 = new DataServiceRequestArgs() { ContentType = DataServiceStreamProvider.GetContentType(p2) }; " is 122.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerClientMismatchHasStreamTest,The length of the statement  "                                expectedMsg = String.Format(ODataLibResourceUtil.GetString("ValidationUtils_ResourceWithoutMediaResourceAndMLEType")' CustomRowBasedContext.CustomerFullName); " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerClientMismatchHasStreamTest,The length of the statement  "                                expectedMsg = String.Format(ODataLibResourceUtil.GetString("ValidationUtils_ResourceWithMediaResourceAndNonMLEType")' CustomRowBasedContext.CustomerFullName); " is 158.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerXSDPClientTest,The length of the statement  "                        var dsq = ctx.CreateQuery<MyMLECustomer>("Customers").Expand("Orders").Execute() as QueryOperationResponse<MyMLECustomer>; " is 122.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerXSDPClientTest,The length of the statement  "                                    Assert.AreEqual(CustomRowBasedContext.customers.Single(sc => sc.ID == c.ID).TypeName' ctx.GetEntityDescriptor(c).ServerTypeName); " is 129.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerXSDPClientTest,The length of the statement  "                                    Assert.AreEqual(CustomRowBasedOpenTypesContext.customers.Single(sc => (int)sc.Properties["ID"] == c.ID).TypeName' ctx.GetEntityDescriptor(c).ServerTypeName); " is 157.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerXSDPClientTest,The length of the statement  "                                    Assert.AreEqual(((IEnumerable<RowEntityTypeWithIDAsKey>)CustomRowBasedContext.customers.Single(sc => sc.ID == c.ID).Properties["Orders"]).Count()' c.Orders.Count); " is 163.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerXSDPClientTest,The length of the statement  "                                    Assert.AreEqual(((IEnumerable<RowComplexType>)CustomRowBasedOpenTypesContext.customers.Single(sc => (int)sc.Properties["ID"] == c.ID).Properties["Orders"]).Count()' c.Orders.Count); " is 181.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerXSDPClientTest,The length of the statement  "                                        Assert.AreEqual(CustomRowBasedContext.orders.Single(so => so.ID == o.ID).TypeName' ctx.GetEntityDescriptor(o).ServerTypeName); " is 126.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerXSDPClientTest,The length of the statement  "                                        Assert.AreEqual(CustomRowBasedOpenTypesContext.orders.Single(so => (int)so.Properties["ID"] == o.ID).TypeName' ctx.GetEntityDescriptor(o).ServerTypeName); " is 154.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerXSDPClientTest,The length of the statement  "                        DataServiceCollection<MyCustomer> customers = new DataServiceCollection<MyCustomer>(ctx.Execute<MyCustomer>(new Uri("/Customers"' UriKind.Relative))' TrackingMode.None); " is 169.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerXSDPClientTest,The length of the statement  "                        DataServiceCollection<MyOrder> orders = new DataServiceCollection<MyOrder>(ctx.Execute<MyOrder>(new Uri("/Orders"' UriKind.Relative))' TrackingMode.None); " is 154.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,SendRequest,The length of the statement  "                    Assert.AreEqual(0' InterceptorChecker.ChangeInterceptorInvokeCount' "InterceptorChecker.ChangeInterceptorInvokeCount is zero"); " is 127.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,SendRequest,The length of the statement  "                    Assert.AreEqual(0' InterceptorChecker.QueryInterceptorInvokeCount' "InterceptorChecker.QueryInterceptorInvokeCount is zero"); " is 125.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,SendRequest,The length of the statement  "                        System.Diagnostics.Trace.WriteLine(string.Format("Exception from SendRequest():\r\n{0}\r\nCall Stack:\r\n{1}"' e.Message' e.StackTrace)); " is 137.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,SendRequest,The length of the statement  "                        // The Stream Provider throws 304' even though it's not treated as a failure' it goes through the exception path on the server... " is 129.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetItemPayload,The length of the statement  "<entry xml:base=""{0}"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns=""http://www.w3.org/2005/Atom""> " is 172.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetPhotoPayload,The length of the statement  "<entry xml:base=""{0}"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns=""http://www.w3.org/2005/Atom""> " is 172.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetPhotoPayload,The length of the statement  "  <m:properties xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data""> " is 124.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetCustomerPayload,The length of the statement  "<entry xml:base=""{0}"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns=""http://www.w3.org/2005/Atom""> " is 172.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetCustomerPayload,The length of the statement  "  <m:properties xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data""> " is 124.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidateItemOnContext,The length of the statement  "                Assert.AreEqual(0' DataServiceStreamProvider.UnDisposedInstances' "Expecting 0 DataServiceStreamProvider.UnDisposedInstances' but found " + DataServiceStreamProvider.UnDisposedInstances); " is 187.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidatePhotoMLEFromResponse,The length of the statement  "                //    sb.AppendFormat("          atom:link[@rel='edit-media' and @href ='{0}' @adsm:etag='{1}'] and\r\n"' expectedEditMediaLink' expectedMediaResourceETag); " is 156.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidatePhotoMLEFromResponse,The length of the statement  "                sb.AppendFormat("                         ads:ThumbNail='{0}']\r\n"' expectedThumbNail == null ? "" : Convert.ToBase64String(expectedThumbNail)); " is 145.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidatePhotoMLEFromResponse,The length of the statement  "                    Assert.IsTrue(Regex.Match(responsePayloadText' "<entry\\s+[^>]*?m:etag=\"" + Regex.Escape(expectedMleETag) + "\"").Success); " is 124.
Long Statement,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,ValidatePhotoMLEFromResponse,The length of the statement  "                    Assert.IsTrue(Regex.Match(responsePayloadText' "<link\\s+[^>]*?m:etag=\"" + Regex.Escape(expectedMediaResourceETag) + "\"").Success); " is 133.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,ClassInitialize,The length of the statement  "            services[services.Length - 1] = GetUnitTestServiceDefinition(DSPDataProviderKind.CustomProvider' true /*openType*/' false /*namedStreams*/); " is 140.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,FilterEntitySetWithTypeIdentifier,The length of the statement  "            string xPath = "/atom:entry[atom:category/@term='#" + ManagerTypeName + "' and atom:id='http://host/People(2)' and atom:content/adsm:properties/ads:ID='2']"; " is 157.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,FilterSingleEntityWithTypeIdentifier,The length of the statement  "            string xPath = "/atom:entry[atom:category/@term='#" + ManagerTypeName + "' and atom:id='http://host/People(2)' and atom:content/adsm:properties/ads:ID='2']"; " is 157.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNavigationPropertyTests,The length of the statement  "                        "/atom:entry[atom:category/@term='#" + ManagerTypeName + "' and contains(atom:id' 'People(2)') and atom:content/adsm:properties/ads:ID='2']"' " is 141.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNavigationPropertyTests,The length of the statement  "                        "count(/atom:feed/atom:entry/atom:link)=12"' // Andy has edit' Manager' DR and address link' Marcelo has edit' Manager' Address links " is 133.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNavigationPropertyTests,The length of the statement  "                        "/atom:feed/atom:entry/atom:link[@rel='edit' and contains(@href' 'People(2)')]"' // BUG BUG : the title must be manager' since the instance is manager type  " is 155.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNavigationPropertyTests,The length of the statement  "                        "/atom:feed/atom:entry/atom:link[@rel='edit' and contains(@href''People(2)')]" // BUG BUG : In the above case' its writes out employee' but now its writes manager " is 162.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNavigationPropertyTests,The length of the statement  "                                   "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and atom:id='http://host/People(3)' and atom:content/adsm:properties/ads:ID='3']"' " is 143.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("/People?$expand={0}/Manager"' EmployeeTypeName)}' // all the employees must have the Manager property expanded " is 125.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}']/atom:link[@title='Manager']/adsm:inline)=3"' EmployeeTypeName)' " is 134.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}']/atom:link[@title='Manager']/adsm:inline)=2"' ManagerTypeName) }' " is 135.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$expand={0}/Manager"' ManagerTypeName) }' // all the managers must have the Manager property expanded " is 153.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}']/atom:link[@title='Manager']/adsm:inline)=2"' ManagerTypeName) }' " is 135.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$expand={0}/DirectReports"' ManagerTypeName) }' // all the managers must have the DirectReports property expanded " is 165.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}']/atom:link[@title='DirectReports']/adsm:inline/atom:feed)=2"' ManagerTypeName) }' " is 151.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$expand={0}/Manager'{1}/DirectReports"' EmployeeTypeName' ManagerTypeName) }' " is 129.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}']/atom:link[@title='DirectReports']/adsm:inline/atom:feed)=2"' ManagerTypeName) }' " is 151.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$expand={0}/DirectReports($expand={1}/Manager'{0}/DirectReports)"' ManagerTypeName' EmployeeTypeName) }' " is 156.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}']/atom:link[@title='DirectReports']/adsm:inline/atom:feed)=2"' ManagerTypeName)' " is 149.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}']/atom:link[@title='DirectReports']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Manager'])>4"' ManagerTypeName)' " is 188.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}']/atom:link[@title='DirectReports']/adsm:inline/atom:feed/atom:entry/atom:link[@title='DirectReports']/adsm:inline)=1"' ManagerTypeName) " is 205.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}' or atom:category/@term='#{1}']/atom:link[@title='Address']/adsm:inline)=5"' EmployeeTypeName' ManagerTypeName)' // all the employees must have the address property expanded " is 242.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term!='#{0}' and atom:category/@term!='#{1}']/atom:link[@title='Address']/adsm:inline)=0"' EmployeeTypeName' ManagerTypeName)' // none employee should not have address expanded " is 234.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$expand={0}/Address' {1}/Address"' EmployeeTypeName' CustomerTypeName) }'  " is 125.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category[@term='#{0}' or @term='#{1}']]/atom:link[@title='Address']/adsm:inline/atom:entry/atom:category[@term='#{2}'])=5"' EmployeeTypeName' ManagerTypeName' EmployeeAddressTypeName)' // all the employees must have the address property expanded " is 293.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category[@term='#{0}']]/atom:link[@title='Address']/adsm:inline/atom:entry/atom:category[@term='#{1}'])=1"' CustomerTypeName' CustomerAddressTypeName)' // all the customers must have the address property expanded " is 260.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyExpandTest,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category[@term!='#{0}' and @term!='#{1}' and @term!='#{2}']]/atom:link[@title='Address']/adsm:inline)=0"' EmployeeTypeName' ManagerTypeName' CustomerTypeName)' // none employees and customers should not have address expanded " is 272.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(//atom:entry[atom:category/@term!='#{0}']/adsm:properties[count(*)!=0])=0"' ManagerTypeName)' // non-manager type should have 0 properties projected " is 169.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(//atom:entry[atom:category/@term='#{0}']/adsm:properties[count(*)!=1])=0"' ManagerTypeName)' // Manager types should have only one property projected " is 170.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(//atom:entry[atom:category/@term='#{0}']/adsm:properties/*[local-name()!='ID'])=0"' ManagerTypeName)'  // Manager types should have only ID property projected " is 179.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$select=ID&$expand={0}/Manager"' EmployeeTypeName) }' // all the employees must have the Manager link property " is 162.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        "count(//atom:entry[atom:category/@term='#AstoriaUnitTests.Tests.People']/atom:link[@rel!=edit])=0"' // people type should only have edit links " is 143.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(//atom:entry[atom:category/@term='#{0}' or atom:category/@term='#{1}']/atom:link)>15"' EmployeeTypeName' ManagerTypeName) // there should be 5 employee or manager types with edit and manager navigation and association links " is 244.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$select=ID&$expand={0}/Manager"' ManagerTypeName) }' // all the managers must have the Manager link property " is 160.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(//atom:entry[atom:category/@term='#{0}']/atom:link[@title='Manager'])>4"' ManagerTypeName) // there should be 2 manager types with manager navigation and association links " is 192.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$select=ID&$expand={0}/Manager"' EmployeeTypeName) }' // all the employees must have the Manager property expanded " is 166.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        "count(/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='ID'])=0"' // only ID properties are projected for all entries " is 136.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        "count(/atom:feed/atom:entry[atom:category/@term='#AstoriaUnitTests.Tests.People']/atom:link[@rel!=edit])=0"' // people type should only have edit links " is 152.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}' or atom:category/@term='#{1}']/atom:link)=15"' EmployeeTypeName' ManagerTypeName)' // there should be 5 employee or manager types with edit and manager links " is 227.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$select=ID&$expand={0}/Manager($select=Name)"' EmployeeTypeName) }' // all the employees must have the Manager property expanded " is 180.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        "count(/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='ID'])=0"' // only ID properties are projected for all entries " is 136.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        "count(/atom:feed/atom:entry[atom:category/@term='#AstoriaUnitTests.Tests.People']/atom:link[@rel!=edit])=0"' // people type should only have edit links " is 152.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}' or atom:category/@term='#{1}']/atom:link)=15"' EmployeeTypeName' ManagerTypeName)' // there should be 5 employee or manager types with edit and manager links " is 227.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(//atom:link[@title='Manager']/adsm:inline)=5"' EmployeeTypeName' ManagerTypeName)' // all the manager links must be expanded " is 145.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        "count(//adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name'])=0"' // expanded entries should have only property " is 135.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$select=ID'{0}/FullName"' EmployeeTypeName) }' // project full name for employees " is 133.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        "count(/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='ID' and local-name()!=FullName])=0"' // only ID and FullName properties must be projected for all entries " is 180.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term!='#{0}' and atom:category/@term!='#{1}']/atom:content/adsm:properties[count(*)!=1])=0"' EmployeeTypeName' ManagerTypeName)' // People and Customer should have only one property i.e. ID " is 247.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term!='#{0}' and atom:category/@term!='#{1}']/atom:content/adsm:properties/*[local-name()!='ID'])=0"' EmployeeTypeName' ManagerTypeName)' // People and Customershould have only one property i.e. ID " is 255.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category[@term='#{0}' or @term='#{1}']]/atom:content/adsm:properties[count(*)!=2])=0"' EmployeeTypeName' ManagerTypeName)' // Employee and Manager should have only 2 properties i.e. ID and FullName " is 245.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$select=ID'{0}/FullName'{1}/FullName"' EmployeeTypeName' CustomerTypeName) }' // project full name for employees and customer " is 177.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        "count(/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='ID' and local-name()!=FullName])=0"' // only ID and FullName properties must be projected for all entries " is 180.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}']/atom:content/adsm:properties[count(*)!=1])=0"' PeopleTypeName)' // People should have only one property i.e. ID " is 182.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}']/atom:content/adsm:properties/*[local-name()!='ID'])=0"' PeopleTypeName)' // People should have only one property i.e. ID " is 191.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category[@term='#{0}' or @term='3{1}' or @term='3{2}']]/atom:content/adsm:properties[count(*)!=2])=0"' EmployeeTypeName' ManagerTypeName' CustomerTypeName)' // Employee'Manager and Customer should have only 2 properties i.e. ID and FullName " is 288.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$select=ID'{0}/FullName'{1}/FullName"' ManagerTypeName' CustomerTypeName) }' // project full name for manager and customer types " is 180.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        "count(/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='ID' and local-name()!=FullName])=0"' // only ID and FullName properties must be projected for all entries " is 180.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category[@term='#{0}' or @term='#{1}']]/atom:content/adsm:properties[count(*)!=1])=0"' PeopleTypeName' EmployeeTypeName)' // People and employee should have only one property i.e. ID " is 230.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category[@term='#{0}' or @term='#{1}']]/atom:content/adsm:properties/*[local-name()!='ID'])=0"' PeopleTypeName' EmployeeTypeName)' // People and employee should have only one property i.e. ID " is 239.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyProjectionTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category[@term='#{0}' or @term='#{1}']]/atom:content/adsm:properties[count(*)!=2])=0"' ManagerTypeName' CustomerTypeName)' // Manager and Customer should have only 2 properties i.e. ID and FullName " is 245.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyFilterTestsWithAnyAll,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$filter={0}/DirectReports/{0}/any(m: m/DirectReports/{0}/any() eq false)"' ManagerTypeName) }' " is 146.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyFilterTestsWithAnyAll,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$filter={0}/DirectReports/{0}/any(m: m/DirectReports/{0}/any() eq false and not($it/{0}/DirectReports/all(dr: isof(dr' '{0}'))))"' ManagerTypeName) }' " is 202.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyFilterTestsWithAnyAll,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$filter={1}/Manager/DirectReports/{0}/any(m: m/DirectReports/{0}/any())"' ManagerTypeName' EmployeeTypeName) }' " is 163.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,ExpandWithSDP,The length of the statement  "                        String.Format("//atom:link[@rel='next' and @href=\"http://host/People/{0}?$orderby=FullName'ID%20asc&$skiptoken='Jian%20Li''4\"]"' EmployeeTypeName) }' " is 151.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,ExpandWithSDP,The length of the statement  "                        String.Format("//atom:link[@rel='next' and @href=\"http://host/People?$orderby={0}/Manager/Name'ID%20asc&$skiptoken=null'5\"]"' EmployeeTypeName) }' " is 148.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,ExpandWithSDP,The length of the statement  "                    RequestUris = new string[] { String.Format("/People/{0}?$expand={1}/DirectReports"' EmployeeTypeName' ManagerTypeName) }' " is 121.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,ExpandWithSDP,The length of the statement  "                        String.Format("/atom:feed/atom:link[@rel='next' and @href='http://host/People/{0}?$expand={1}/DirectReports&$skiptoken=3']"' EmployeeTypeName' ManagerTypeName)' " is 160.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,ExpandWithSDP,The length of the statement  "                        String.Format("/atom:feed/atom:entry/atom:link/adsm:inline/atom:feed/atom:link[@rel='next' and @href='http://host/People(2)/{0}/DirectReports?$skiptoken=4']"' ManagerTypeName) }' " is 178.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,ExpandWithSDP,The length of the statement  "                        String.Format("/atom:feed/atom:link[@rel='next' and @href='http://host/People?$expand={0}/DirectReports&$skiptoken=2']"' ManagerTypeName)' " is 138.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,ExpandWithSDP,The length of the statement  "                        String.Format("/atom:feed/atom:entry/atom:link/adsm:inline/atom:feed/atom:link[@rel='next' and @href='http://host/People(2)/{0}/DirectReports?$skiptoken=4']"' ManagerTypeName) }' " is 178.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,InvalidOtherUriTests,The length of the statement  "                        ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyNotDeclared"' PeopleTypeName' EmployeeTypeName) }' " is 120.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,InvalidOtherUriTests,The length of the statement  "                    //    ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier"' "$filter"' EmployeeTypeName) }' " is 157.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,InvalidOtherUriTests,The length of the statement  "                    //    ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_InvalidTypeIdentifier_MustBeASubType"' EmployeeTypeName' ManagerTypeName) }' " is 153.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,InvalidOtherUriTests,The length of the statement  "                    //    ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier"' "$filter"' ManagerTypeName) }' " is 156.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,InvalidOtherUriTests,The length of the statement  "                        ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_TypeIdentifierCannotBeSpecifiedAfterTypeIdentifier"' ManagerTypeName' ManagerTypeName) }' " is 160.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,InvalidOtherUriTests,The length of the statement  "                        ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_InvalidTypeSpecified"' EmployeeTypeName' ManagerTypeName)' " is 120.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,InvalidOtherUriTests,The length of the statement  "                        ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_InvalidTypeSpecified"' EmployeeTypeName' ManagerTypeName)' " is 120.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedProperty_OpenAndDeclaredPropertyWithSameName,The length of the statement  "                var fullNameProperty = new ResourceProperty("FullName"' ResourcePropertyKind.Primitive' ResourceType.GetPrimitiveResourceType(typeof(string))) { CanReflectOnInstanceTypeProperty = false }; " is 188.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedProperty_OpenAndDeclaredPropertyWithSameName,The length of the statement  "            var serviceWithOpenTypes = new DSPUnitTestServiceDefinition(metadata' DSPDataProviderKind.CustomProvider' GetDefaultData(metadata)); " is 132.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedProperty_OpenAndDeclaredPropertyWithSameName,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$select=ID'{0}/FullName"' EmployeeTypeName) }' // project full name for employees " is 133.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedProperty_OpenAndDeclaredPropertyWithSameName,The length of the statement  "                        "count(/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='ID' and local-name()!=FullName])=0"' // only ID and FullName properties must be projected for all entries " is 180.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedProperty_OpenAndDeclaredPropertyWithSameName,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term!='#{0}' and atom:category/@term!='#{1}']/atom:content/adsm:properties[count(*)!=1])=0"' EmployeeTypeName' ManagerTypeName)' // People and Customer should have only one property i.e. ID " is 247.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedProperty_OpenAndDeclaredPropertyWithSameName,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term!='#{0}' and atom:category/@term!='#{1}']/atom:content/adsm:properties/*[local-name()!='ID'])=0"' EmployeeTypeName' ManagerTypeName)' // People and Customershould have only one property i.e. ID " is 255.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedProperty_OpenAndDeclaredPropertyWithSameName,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category[@term='#{0}' or @term='3{1}']]/atom:content/adsm:properties[count(*)!=2])=0"' EmployeeTypeName' ManagerTypeName)' // Employee and Manager should have only 2 properties i.e. ID and FullName " is 245.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedProperty_OpenAndDeclaredPropertyWithSameName,The length of the statement  "                        "count(/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='ID' and local-name()!=FullName])=0"' // all entries should have FullName and ID projected out " is 168.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedProperty_OpenAndDeclaredPropertyWithSameName,The length of the statement  "                        "count(/atom:feed/atom:entry/atom:content/adsm:properties[count(*)!=2])=0"' // all entries should have only 2 properties " is 120.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyInsertTests,The length of the statement  "                        XPaths = new string[] { "/atom:entry[atom:category/@term='#" + ManagerTypeName + "' and contains(atom:id' 'People(10)') and atom:content/adsm:properties[ads:ID='10' and ads:Name='Anthony']]" }' " is 193.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyInsertTests,The length of the statement  "                        XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(10)') and atom:content/adsm:properties[ads:ID='10' and ads:Name='Sarah']]" }' " is 192.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyInsertTests,The length of the statement  "                        XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(10)') and atom:content/adsm:properties[ads:ID='10' and ads:Name='Sarah']]" }' " is 192.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The length of the statement  "            #region Update Requests to Top Level Entity (With Type Identifier and most derived type) - specifying the type name is optional " is 127.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The length of the statement  "                                XPaths = new string[] { "/atom:entry[atom:category/@term='#" + ManagerTypeName + "' and contains(atom:id' 'People(2)') and atom:content/adsm:properties[ads:ID='2' and ads:Name='Anthony']]" } } } " is 194.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The length of the statement  "                                XPaths = new string[] { "/atom:entry[atom:category/@term='#" + ManagerTypeName + "' and contains(atom:id' 'People(2)') and atom:content/adsm:properties[ads:ID='2' and ads:Name='Anthony']]" } } } " is 194.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The length of the statement  "            #region Update Requests to Top Level Entity (With Type Identifier and not most derived type) - must specify the type name " is 121.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The length of the statement  "                                XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(3)') and atom:content/adsm:properties[ads:ID='3' and ads:Name='Sarah']]" } } } " is 193.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The length of the statement  "                                XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(3)') and atom:content/adsm:properties[ads:ID='3' and ads:Name='Sarah']]" } } } " is 193.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The length of the statement  "                                XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(3)') and atom:content/adsm:properties[ads:ID='3' and ads:Name='Sarah']]" } } } " is 193.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The length of the statement  "                                XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(3)') and atom:content/adsm:properties[ads:ID='3' and ads:Name='Sarah']]" } } } " is 193.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                        String.Format("//atom:link[@rel='next' and @href='http://host/People?$select={0}/Photo&$skiptoken=2']"' ManagerTypeName)' " is 121.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                        String.Format("count(//atom:entry/adsm:properties[count(*)!=0])=0"' ManagerTypeName)' // none of the entries should have the any properties serialized " is 150.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                        String.Format("count(//atom:entry[atom:category/@term='#{0}']/atom:link[@rel='{1}'])=2"' ManagerTypeName' photoLinkRelValue)' // Manager types should have named streams link serialized " is 184.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                        String.Format("count(//atom:entry[atom:category/@term!='#{0}']/atom:link[@rel='{1}'])=0"' ManagerTypeName' photoLinkRelValue)'  // Non manager types should not have any named streams link serialized " is 198.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$select=ID'{0}/Photo'{1}/Photo"' CustomerTypeName' EmployeeTypeName) }' " is 123.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                        String.Format("//atom:link[@rel='next' and @href='http://host/People?$select=ID'{0}/Photo'{1}/Photo&$skiptoken=2']"' CustomerTypeName' EmployeeTypeName)' " is 153.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$select=ID'{0}/Photo'{1}/Photo"' CustomerTypeName' EmployeeTypeName) }' " is 123.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                        "count(/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='ID'])=0"' // only ID properties are projected for all entries " is 136.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}']/atom:link[@rel='{1}'])=0"' PeopleTypeName' photoLinkRelValue)' // people type should not have the named stream link serialized " is 197.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category/@term!='#{0}']/atom:link[@rel='{1}'])={2}"' PeopleTypeName' photoLinkRelValue' PeopleSetCount - 1)' // all non-people should have the named stream link serialized " is 219.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$select=ID'{0}/Photo'{1}/Photo"' CustomerTypeName' ManagerTypeName) }' " is 122.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                        String.Format("//atom:link[@rel='next' and @href='http://host/People?$select=ID'{0}/Photo'{1}/Photo&$skiptoken=2']"' CustomerTypeName' ManagerTypeName)' " is 152.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                    RequestUris = new string[] { String.Format("/People?$select=ID'{0}/Photo'{1}/Photo"' CustomerTypeName' ManagerTypeName) }' " is 122.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                        "count(/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='ID'])=0"' // only ID properties are projected for all entries " is 136.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category[@term='#{0}' or @term='3{1}']]/atom:link[@rel='{2}'])=0"' PeopleTypeName' EmployeeTypeName' photoLinkRelValue)' // people and employee type should not have the named stream link serialized " is 245.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The length of the statement  "                        String.Format("count(/atom:feed/atom:entry[atom:category[@term!='{0}' and @term!='{1}']]/atom:link[@rel='{2}'])=3"' PeopleTypeName' EmployeeTypeName' photoLinkRelValue)' // all non-people should have the named stream link serialized " is 232.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DataServiceIdShouldNotContainTypeSegment,The length of the statement  "            var payloadBuilder = new PayloadBuilder() { TypeName = ManagerTypeName }.AddProperty("ID"' 10).AddProperty("Name"' "Anthony"); " is 126.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DataServiceIdShouldNotContainTypeSegment,The length of the statement  "                Assert.IsTrue(locationHeader.EndsWith(ManagerTypeName)' "Expected the location header (which should come from the edit link) to end with a type segment."); " is 155.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DataServiceIdShouldNotContainTypeSegment,The length of the statement  "                // The value of the "Location" header should come from the edit link (which' in this case' should have a type segment). The value of the "OData-EntityId" header should come from the ID' which will never have a type segment. " is 223.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DataServiceIdShouldNotContainTypeSegment,The length of the statement  "                // Verify that OData-EntityId isn't coming from the edit link by checking that OData-EntityId is not the same as Location when Location has a type segment. " is 155.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,NoMetadataOptionShouldWorkForDerivedTypes,The length of the statement  "                UnitTestsUtil.VerifyXPathExists(response' String.Format("/{0}/value/{1}[count({0})=7]"' JsonValidator.ObjectString' JsonValidator.ArrayString)); " is 144.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,SendRequestAndVerifyXPaths,The length of the statement  "                                if (IsValidScenario(request' protocolVersion' testCase.Version' new ServiceVersion(requestDSV)' new ServiceVersion(requestMDSV)' exception)) " is 140.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The length of the statement  "                    expectedErrorMessages.Add(DataServicesResourceUtil.GetString("DataService_DSVTooLow"' requestDSV.ToString()' versions.MinRequestDSV.Version / 10' versions.MinRequestDSV.Version % 10)); " is 184.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The length of the statement  "                    expectedErrorMessages.Add(DataServicesResourceUtil.GetString("DataService_MaxDSVTooLow"' requestMDSV.ToString()' versions.MinRequestMDSV.Version / 10' versions.MinRequestMDSV.Version % 10)); " is 190.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The length of the statement  "                // Since enableRelationshipLinks is true' the response will be 3.0 if the MPV is set to 3.0. For V1/V2 servers' this setting is ignored " is 135.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The length of the statement  "                if (protocolVersion == ODataProtocolVersion.V4 && requestMDSV != null && requestMDSV.ToProtocolVersion() < protocolVersion) " is 123.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The length of the statement  "                    expectedErrorMessages.Add(DataServicesResourceUtil.GetString("DataService_MaxDSVTooLow"' requestMDSV.ToString()' 4' 0)); " is 120.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The length of the statement  "                    Assert.IsTrue(expectedErrorMessages.Contains(exception.InnerException.Message)' "Didn't find the expected error message"); " is 122.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The length of the statement  "            Assert.IsTrue(requestDSV == null || requestDSV.Version >= versions.MinRequestDSV.Version' "Request DSV should be equal or greater than the min required DSV"); " is 158.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The length of the statement  "            Assert.IsTrue(requestMDSV == null || requestMDSV.Version >= versions.MinRequestMDSV.Version' "Request MDSV should be equal or greater than the min required MDSV"); " is 163.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetModel,The length of the statement  "                fullNameProperty = new ResourceProperty("FullName"' ResourcePropertyKind.Primitive' ResourceType.GetPrimitiveResourceType(typeof(string))) { CanReflectOnInstanceTypeProperty = false }; " is 184.
Long Statement,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetDefaultData,The length of the statement  "            addresses.AddRange(new object[] { andyAddress' pratikAddress' jimmyAddress' shyamAddress' marceloAddress' customer1Address }); " is 126.
Long Statement,AstoriaUnitTests.Tests,DbContextTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,BasicQueryTests,The length of the statement  "                    "/atom:feed/atom:entry/atom:content/adsm:properties[ads:ID=1 and ads:Location='NE'] | /atom:entry/atom:link[@href='12345']"' " is 124.
Long Statement,AstoriaUnitTests.Tests,DbContextTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,BasicQueryTests,The length of the statement  "                    "/atom:feed/atom:entry/atom:content/adsm:properties[ads:ID=2 and ads:Location='NW'] | /atom:entry/atom:link[@href='67890']"' " is 124.
Long Statement,AstoriaUnitTests.Tests,DbContextTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,BasicQueryTests,The length of the statement  "                    "/atom:feed/atom:entry/atom:content/adsm:properties[ads:ID=3 and ads:Location='E'] | /atom:entry/atom:link[@href='02468']" " is 122.
Long Statement,AstoriaUnitTests.Tests,DbContextTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,BasicQueryTests,The length of the statement  "                    "/atom:feed/atom:entry/atom:link[@title='FloorCalls']/adsm:inline/atom:feed/atom:entry/atom:link[@href='FloorCalls(1)']"' " is 121.
Long Statement,AstoriaUnitTests.Tests,DbContextTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,BasicQueryTests,The length of the statement  "                    "/atom:feed/atom:entry/atom:link[@title='FloorCalls']/adsm:inline/atom:feed/atom:entry/atom:link[@href='FloorCalls(2)']" " is 120.
Long Statement,AstoriaUnitTests.Tests,DbContextTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,BasicUpdateTests,The length of the statement  "            ICollection<Tuple<string' string' string' string>> payloadsAndVerifications = new List<Tuple<string' string' string' string>> " is 125.
Long Statement,AstoriaUnitTests.Tests,DbContextTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,BasicUpdateTests,The length of the statement  "                    "/atom:entry/atom:content/adsm:properties[ads:ID=3 and ads:Up='true' and ads:Down='true'] | /atom:entry/atom:category[@term='2']")' " is 131.
Long Statement,AstoriaUnitTests.Tests,DbContextTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,DbEntityValidationFailureProducesUsableMessage,The length of the statement  "                Assert.AreEqual("The field SerialNumber must be a string with a minimum length of 5 and a maximum length of 5."' exception.InnerException.Message' "Didn't get the expected error message"); " is 188.
Long Statement,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackSuccessQueryTest,The length of the statement  "                    "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json&$callback=foo"' " is 142.
Long Statement,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackAndFormatSuccessVersionTest,The length of the statement  "                    Assert.AreEqual("text/javascript;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"' request.ResponseHeaders["content-type"]); " is 158.
Long Statement,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallBackInBatchRequestTest,The length of the statement  "                    Assert.IsTrue(response.Contains(str)' String.Format("The response:\r\n{0}\r\nDoes not contain the string:\r\n{1}."' response' str)); " is 132.
Long Statement,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackFailOnMetadataRequest,The length of the statement  "                    Assert.IsTrue(actualText.Contains("The requested media type 'Metadata' is not compatible with the $callback query option.")); " is 125.
Long Statement,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackOptionValueTest,The length of the statement  "                    { "?$callback=jQuery18209805240577502099_1348783118115&$format=json&_=1348783118119"' "jQuery18209805240577502099_1348783118115" }' " is 131.
Long Statement,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackOptionValueTest,The length of the statement  "                    { "?$callback=" + Uri.EscapeDataString("A string with characters :%*+'/.") + "&$format=json"' "A string with characters :%*+'/." }' " is 131.
Long Statement,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackOptionValueTest,The length of the statement  "                    { "?$callback=" + "<script>$.getJSON(\"http://something.com\"'function (data) {alert(data.value);});</script>" + "&$format=json"' "<script>$.getJSON(\"http://something.com\"'function (data) {alert(data.value);});</script>" }' " is 225.
Long Statement,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatSmokeTest,The length of the statement  "            const string expectedJsonLight = @"{""@odata.context"":""BASE_URI$metadata#Customers(1)/Address""'""StreetAddress"":""Line1""'""City"":""Redmond""'""State"":""WA""'""PostalCode"":""98052""}"; " is 191.
Long Statement,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The length of the statement  "                    UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"' " is 140.
Long Statement,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The length of the statement  "                    UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"' " is 140.
Long Statement,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The length of the statement  "                    UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"' " is 140.
Long Statement,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The length of the statement  "                    UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"' " is 139.
Long Statement,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The length of the statement  "                    ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"' " is 122.
Long Statement,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The length of the statement  "                    UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"' " is 158.
Long Statement,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The length of the statement  "                    UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"' " is 176.
Long Statement,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The length of the statement  "                    UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"' " is 132.
Long Statement,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The length of the statement  "                    UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"' " is 147.
Long Statement,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,SetDollarFormatInBuildingRequest,The length of the statement  "                            TestUtil.AssertContains(e.InnerException.Message' "A supported MIME type could not be found that matches the acceptable MIME types for the request."); " is 150.
Long Statement,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,SetDollarFormatInBuildingRequest,The length of the statement  "                            // Assert.AreEqual(DataServicesClientResourceUtil.GetString("DataServiceClientFormat_ValidServiceModelRequiredForAtom")' e.InnerException.Message); " is 147.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,PrimitiveCustomAnnotationOnErrorShouldGetWrittenInJsonLight,The length of the statement  "                webRequest.ErrorResponseContent.Should().Be("{\"error\":{\"code\":\"\"'\"message\":\"Resource not found for the segment 'ThisDoesNotExist'.\"'\"@location.error\":66}}"); " is 169.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,MultipleCustomAnnotationOnErrorShouldGetWrittenInJsonLight,The length of the statement  "                webRequest.ErrorResponseContent.Should().Be("{\"error\":{\"code\":\"\"'\"message\":\"Resource not found for the segment 'ThisDoesNotExist'.\"'\"@location.error\":77'\"@location.error2\":\"AdditionalAnnotationValue\"}}"); " is 220.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,ComplexCollectionAnnotationOnErrorShouldGetWrittenInJsonLight,The length of the statement  "                webRequest.ErrorResponseContent.Should().Be("{\"error\":{\"code\":\"\"'\"message\":\"Resource not found for the segment 'ThisDoesNotExist'.\"'\"location.error@odata.type\":\"#Collection(Int32)\"'\"@location.error\":[1'2'3'4]}}"); " is 229.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,EmptyCollectionAnnotationOnErrorShouldGetWrittenInJsonLight,The length of the statement  "                webRequest.ErrorResponseContent.Should().Be("{\"error\":{\"code\":\"\"'\"message\":\"Resource not found for the segment 'ThisDoesNotExist'.\"'\"location.error@odata.type\":\"#Collection(Int32)\"'\"@location.error\":[]}}"); " is 222.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BatchCustomAnnotationOnInnerRequestErrorShouldGetWrittenInJsonLight,The length of the statement  "            batchQueryOperation.AppendLine("GET Customers(1)/Addresssss?Override-Accept=" + UnitTestsUtil.JsonLightMimeType + " HTTP/1.1"); " is 127.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BatchCustomAnnotationOnInnerRequestErrorShouldGetWrittenInJsonLight,The length of the statement  "                webRequest.GetResponseStreamAsText().Should().Contain("{\"error\":{\"code\":\"\"'\"message\":\"Resource not found for the segment 'Addresssss'.\"'\"location.error@odata.type\":\"#Collection(String)\"'\"@location.error\":[\"404\"'\"10/10/2012 1:02:03 AM +00:00\"]}}"); " is 267.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,FailedTopLevelBatchRequestShouldBeXmlRegardlessOfCustomAnnotation,The length of the statement  "            batchQueryOperation.AppendLine("GET Customers(1)/Address?Override-Accept=" + UnitTestsUtil.JsonLightMimeType + " HTTP/1.1"); " is 124.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BadCustomAnnotationOnErrorCausesInStreamErrorInErrorPayload,The length of the statement  "                AnnotationValue = new ODataCollectionValue {Items = new[] { "item1"' new object() }}; // the new object is not a supported primitive type. " is 138.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BadCustomAnnotationOnErrorCausesInStreamErrorInErrorPayload,The length of the statement  "                webRequest.ErrorResponseContent.Should().Be("{\"error\":{\"code\":\"\"'\"message\":\"Resource not found for the segment 'ThisDoesNotExist'.\"'\"@location.error\":[\"item1\"{\"error\":{\"code\":\"500\"'\"message\":\"An error occurred while trying to write an error payload.\"}}"); " is 279.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BadCustomAnnotationOnErrorWithVerboseErrorsCausesInStreamErrorInErrorPayload,The length of the statement  "                AnnotationValue = new ODataCollectionValue { Items = new[] { "item1"' new object() } }; // the new object is not a supported primitive type. " is 140.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BadCustomAnnotationOnErrorWithVerboseErrorsCausesInStreamErrorInErrorPayload,The length of the statement  "                const string expected = "{\"error\":{\"code\":\"\"'\"message\":\"Resource not found for the segment 'ThisDoesNotExist'.\"'\"@location.error\":[\"item1\"{\"error\":{\"code\":\"500\"'\"message\":\"An error occurred while trying to write an error payload.\"'\"innererror\":{\"message\":\"The value of type 'System.Object' is not supported and cannot be converted to a JSON representation.\""; " is 389.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BadCustomAnnotationOnErrorWithBatchRequestCausesInStreamErrorInErrorPayload,The length of the statement  "            batchQueryOperation.AppendLine("GET Customers(1)/Addresssss?Override-Accept=" + UnitTestsUtil.JsonLightMimeType + " HTTP/1.1"); " is 127.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BadCustomAnnotationOnErrorWithBatchRequestCausesInStreamErrorInErrorPayload,The length of the statement  "                // For batch request if ODL fails when writing error' HandleException is called twice and ODataError annotation cannot be be written correctly " is 142.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BadCustomAnnotationOnErrorWithBatchRequestCausesInStreamErrorInErrorPayload,The length of the statement  "                webRequest.GetResponseStreamAsText().Should().Contain("{\"error\":{\"code\":\"\"'\"message\":\"Resource not found for the segment 'Addresssss'.\"'\"@location.error\":[123<?xml"); " is 178.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,CustomAnnotationOnErrorShouldBeIgnoredInAtom,The length of the statement  "                webRequest.ErrorResponseContent.Should().Be("<?xml version=\"1.0\" encoding=\"utf-8\"?><m:error xmlns:m=\"http://docs.oasis-open.org/odata/ns/metadata\"><m:code /><m:message>Resource not found for the segment 'ThisDoesNotExist'.</m:message></m:error>"); " is 253.
Long Statement,AstoriaUnitTests.Tests,ModifyErrorMessageInHandleExceptionServiceMultipleAnnotation,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,HandleException,The length of the statement  "                args.InstanceAnnotations.Add(new ODataInstanceAnnotation("location.error2"' new ODataPrimitiveValue("AdditionalAnnotationValue"))); " is 131.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,SetOverrideVariousTypeHeaderValueWithQueryString,The length of the statement  "                request.RequestUriString = "/Customers(1)?Override-Accept=" + Uri.EscapeDataString("application/*'application/atom+xml;") + "&Override-Date=" + Uri.EscapeDataString("Wed' 01 Aug 2012 23:23:21 GMT") + "&Override-MyHeader=200"; " is 225.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,ServiceOperationParameterWithQueryStringHeader,The length of the statement  "                "/GetCustomer?Override-Accept="+ UnitTestsUtil.JsonLightMimeType + "&param1='blahblah'&param2=200" + "&Override-MyHeader=myheadervalue"' " is 136.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,ServiceOperationParameterWithQueryStringHeader,The length of the statement  "                "/GetCustomer?param1='blahblah'&Override-Accept="+ UnitTestsUtil.JsonLightMimeType + "&Override-MyHeader=myheadervalue" + "&param2=200"' " is 136.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,GetQueryStringItemEdgeTest,The length of the statement  "                webRequest.RequestUriString = "/Customers(1)?TestCaseSensitive=true" + "&lowercaseheader=lowercaseheadervalue" + "&UPPERCASEHEADER=UPPERCASEHEADERVALUE"; " is 153.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,SetOverrideBadMaxDataServiceVersionHeaderWithQueryString,The length of the statement  "                Assert.IsTrue(request.GetResponseStreamAsText().Contains("Request version '4.a;' specified for header 'OData-MaxVersion' is not valid")); " is 137.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,CanOverloadUpdateRequestWithHeader,The length of the statement  "                        webRequest.RequestUriString = "/Customers(1)/Name?Override-If-Match=" + webRequest.ResponseETag.Replace(correctGuid' reversedGuid); " is 131.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,CanOverloadUpdateRequestWithHeader,The length of the statement  "                        Assert.IsTrue(webRequest.GetResponseStreamAsText().Contains("TheTest/$metadata#Customers(1)/Name\"'\"value\":\"Name3\"")); " is 122.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OnStartProcessingRequestCanOverrideAcceptHeaderInBatchOperationWithHeader,The length of the statement  "                ExpectedResponsePayloadContains = new[] { "OData-Version: 4.0"' "Content-Type: application/json;odata.metadata=minimal" }' " is 122.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OnStartProcessingRequestCanOverrideAcceptHeaderInBatchOperationWithQueryItem,The length of the statement  "            batchQueryOperation.AppendLine("GET Customers(1)/Address?Override-Accept=" + UnitTestsUtil.JsonLightMimeType + " HTTP/1.1"); " is 124.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,CanOverrideAcceptHeaderToBatchRequestWithQueryItem,The length of the statement  "            batchQueryOperation.AppendLine("GET Customers(1)/Address?Override-Accept=" + UnitTestsUtil.JsonLightMimeType + " HTTP/1.1"); " is 124.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,DollarFormatShouldFailOnTopLevelBatch,The length of the statement  "            RunBatchTest(test' typeof(ModifyHeaderOnStartProcessingRequestTestService)' "/$batch?$format=multipart/mixed"' () => DataServicesResourceUtil.GetString("RequestQueryProcessor_FormatNotApplicable")); " is 198.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,RunBatchTest,The length of the statement  "                            Assert.IsTrue(response.Contains(str.Replace("BASE_URI"' request.BaseUri + "/"))' String.Format("The response:\r\n{0}\r\nDoes not contain the string:\r\n{1}."' response' str)); " is 175.
Long Statement,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OverwriteHeaders,The length of the statement  "            overrideMaxDataServiceVersion = overrideMaxDataServiceVersion ?? operationContext.RequestHeaders.Get("Override-MaxDataServiceVersion"); " is 135.
Long Statement,AstoriaUnitTests.Tests,NonNullablePropertiesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,ClassInitialize,The length of the statement  "                currentCode.Insert(currentCode.ToString().IndexOf("public class PeopleType")' "using System.ComponentModel.DataAnnotations;\n\n"); " is 130.
Long Statement,AstoriaUnitTests.Tests,NonNullablePropertiesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,NonNullableComplexPropertyTest,The length of the statement  "                        request.SetRequestStreamAsText(@"<entry xml:base='http://host/' xmlns:d='http://docs.oasis-open.org/odata/ns/data' xmlns:m='http://docs.oasis-open.org/odata/ns/metadata' xmlns='http://www.w3.org/2005/Atom'> " is 206.
Long Statement,AstoriaUnitTests.Tests,NonNullablePropertiesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,NonNullableComplexPropertyTest,The length of the statement  "                        Assert.AreEqual("EntityFramework"' exception.InnerException.Source' "Source expected: EntityFramework' actual: " + exception.InnerException.Source); " is 148.
Long Statement,AstoriaUnitTests.Tests,NonNullablePropertiesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,NonNullableComplexPropertyTest,The length of the statement  "                        Assert.AreEqual(500' request.ResponseStatusCode' "Status code expected: 500" + "' actual: " + request.ResponseStatusCode); " is 122.
Long Statement,AstoriaUnitTests.Tests,NonNullablePropertiesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,NonNullableTopLevelPropertiesTest,The length of the statement  "                            Assert.AreEqual("System.Data.Entity"' exception.InnerException.Source' "Source expected: System.Data.Entity' actual: " + exception.InnerException.Source); " is 154.
Long Statement,AstoriaUnitTests.Tests,NonNullablePropertiesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,NonNullableTopLevelPropertiesTest,The length of the statement  "                            Assert.AreEqual(500' request.ResponseStatusCode' "Status code expected: 500" + "' actual: " + request.ResponseStatusCode); " is 122.
Long Statement,AstoriaUnitTests.Tests,NonNullablePropertiesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,NonNullableTopLevelPropertiesTest,The length of the statement  "                            Assert.AreEqual(500' request.ResponseStatusCode' "Status code expected: 500" + "' actual: " + request.ResponseStatusCode); " is 122.
Long Statement,AstoriaUnitTests.Tests,PlainSerializersTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\PlainSerializersTest.cs,PlainSerializersBasicTest,The length of the statement  "                            typeData.VerifyAreEqual(dataContextSetup.MemberValue' typeData.ValueFromXmlText(reader.ReadToEnd()' request.Accept)' request.Accept); " is 133.
Long Statement,AstoriaUnitTests.Tests,PlainSerializersTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\PlainSerializersTest.cs,PlainSerializersMimeOverrideTest,The length of the statement  "                Assert.AreEqual( DataServicesResourceUtil.GetString("DataServiceException_UnsupportedMediaType")' exception.InnerException.Message); " is 132.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerBasicTest,The length of the statement  "                                String.Format("/{0}/{1}/BestFriend/{2}/uri[text()='http://host/Customers(0)/BestFriend']"' arr' obj' JsonValidator.Deferred) }; " is 127.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerBasicTest,The length of the statement  "                                "/atom:feed/atom:entry[atom:title='' and atom:id='http://host/Customers(0)' and atom:category/@term='#AstoriaUnitTests.Stubs.Customer']"' " is 137.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerBasicTest,The length of the statement  "                                "/atom:feed/atom:entry[atom:title='' and atom:id='http://host/Customers(1)' and atom:category/@term='#AstoriaUnitTests.Stubs.CustomerWithBirthday']"' " is 149.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerBasicTest,The length of the statement  "                                "/atom:feed/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/related/Orders' and @href='Customers(1)/AstoriaUnitTests.Stubs.CustomerWithBirthday/Orders' and @title='Orders' and 0=count(@adsm:inline) and @type='application/atom+xml;type=feed']"' " is 258.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerBasicTest,The length of the statement  "                                "/atom:feed/atom:entry/atom:link[@rel='http://docs.oasis-open.org/odata/ns/related/BestFriend' and @href='Customers(1)/AstoriaUnitTests.Stubs.CustomerWithBirthday/BestFriend' and @title='BestFriend' and 0=count(@adsm:inline) and @type='application/atom+xml;type=entry']"}; " is 272.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,AtomSerializerLinks,The length of the statement  "                    element = TestUtil.AssertSelectSingleElement(document' "/atom:feed/atom:entry[1]/atom:link[@rel='http://docs.oasis-open.org/odata/ns/related/Orders']"); " is 152.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,AtomSerializerLinks,The length of the statement  "                    element = TestUtil.AssertSelectSingleElement(document' "/atom:feed/atom:entry[1]/atom:link[@rel='http://docs.oasis-open.org/odata/ns/related/BestFriend']"); " is 156.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,GeneralSerializerDates,The length of the statement  "                        XmlElement element = TestUtil.AssertSelectSingleElement(document' "/atom:entry/atom:content/adsm:properties/ads:Birthday"); " is 123.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,GeneralSerializerDates,The length of the statement  "                    Trace.WriteLine("Original DateTime:   [" + birthday.ToString("yyyy-MM-dd HH:mm:ss:fffffff ZZZ K") + "] - kind is " + birthday.Kind); " is 132.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,Web3SSerializerCycleDetectionTest,The length of the statement  "                UnitTestsUtil.VerifyInvalidRequest(null' "/Values"' typeof(TypedCustomDataContext<TypedEntity<int' CircularReferenceType>>)' UnitTestsUtil.JsonLightMimeType' "GET"' 500); " is 170.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,Web3SSerializerCycleDetectionTest,The length of the statement  "                UnitTestsUtil.VerifyInvalidRequest(null' "/Values"' typeof(TypedCustomDataContext<TypedEntity<int' CircularReferenceType>>)' UnitTestsUtil.AtomFormat' "GET"' 500); " is 163.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,Web3SSerializerBasicTypesTest,The length of the statement  "                            String.Format("/Object/value/{0}/{1}/odata.type[text()='#{2}']"' JsonValidator.ArrayString' JsonValidator.ObjectString' typeName) " is 129.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,Web3SSerializerBasicTypesTest,The length of the statement  "                            VerifySingleNodePresent(document' String.Format("/Object/value/{0}/{1}/StaticProperty"' JsonValidator.ArrayString' JsonValidator.ObjectString)' false); " is 151.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,CountTest,The length of the statement  "                    //    var q = ((DataServiceQuery<TypedEntity<int' int>>)dataContextSetup.CreateQuery<Customers>("Customers").Take(2)).IncludeTotalCount(); " is 138.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,CountTest,The length of the statement  "                    //    QueryOperationResponse<TypedEntity<int' int>> response = q.Execute() as QueryOperationResponse<TypedEntity<int' int>>; " is 124.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerKeyTypesTest,The length of the statement  "                                    (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase) && dataContextSetup.Id.GetType() == typeof(string) && ((string)dataContextSetup.Id).Length > 1024 * 1024)) " is 185.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerKeyTypesTest,The length of the statement  "                                typeData.VerifyAreEqual(idValue' typeData.ValueFromXmlText(serializedValue' keySyntax' responseFormat)' responseFormat); " is 120.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerKeyTypesTest,The length of the statement  "                                string queryUri = new Uri(queryable.ToString()' UriKind.Absolute).GetComponents(UriComponents.Path' UriFormat.Unescaped); " is 121.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerKeyTypesTest,The length of the statement  "                                string responseUri = new Uri(TestUtil.AssertSelectSingleElement(document' linkPath).InnerText' UriKind.Absolute).GetComponents(UriComponents.Path' UriFormat.Unescaped); " is 168.
Long Statement,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,Web3SSerializerInvalidKeyTypesTest,The length of the statement  "                    UnitTestsUtil.VerifyInvalidRequest(null' "/Values"' dataContextSetup.DataServiceType' UnitTestsUtil.AtomFormat' "GET"' 500); " is 124.
Complex Conditional,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerKeyTypesTest,The conditional expression  "!typeData.IsTypeSupportedAsKey || dataContextSetup.Id == null ||                                      (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase) && dataContextSetup.Id.GetType() == typeof(string) && ((string)dataContextSetup.Id).Length > 1024 * 1024)"  is complex.
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,ConfigurationBatchTest,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                      new Dimension("MaxBatchCount"' new int[] { -1' 0' 1' 2' 10 })'                      new Dimension("MaxChangeSetCount"' new int[] { -1' 0' 1' 2' 10 })'                      new Dimension("BatchCount"' new int[] { 0' 1' 2 })'                      new Dimension("ChangeSetCount"' new int[] { 0' 1' 2 })                      );
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,ConfigurationBatchTest,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                      new Dimension("MaxBatchCount"' new int[] { -1' 0' 1' 2' 10 })'                      new Dimension("MaxChangeSetCount"' new int[] { -1' 0' 1' 2' 10 })'                      new Dimension("BatchCount"' new int[] { 0' 1' 2 })'                      new Dimension("ChangeSetCount"' new int[] { 0' 1' 2 })                      );
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,ConfigurationBatchTest,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                      new Dimension("MaxBatchCount"' new int[] { -1' 0' 1' 2' 10 })'                      new Dimension("MaxChangeSetCount"' new int[] { -1' 0' 1' 2' 10 })'                      new Dimension("BatchCount"' new int[] { 0' 1' 2 })'                      new Dimension("ChangeSetCount"' new int[] { 0' 1' 2 })                      );
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,ConfigurationBatchTest,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                      new Dimension("MaxBatchCount"' new int[] { -1' 0' 1' 2' 10 })'                      new Dimension("MaxChangeSetCount"' new int[] { -1' 0' 1' 2' 10 })'                      new Dimension("BatchCount"' new int[] { 0' 1' 2 })'                      new Dimension("ChangeSetCount"' new int[] { 0' 1' 2 })                      );
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,ConfigurationBatchTest,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                      new Dimension("MaxBatchCount"' new int[] { -1' 0' 1' 2' 10 })'                      new Dimension("MaxChangeSetCount"' new int[] { -1' 0' 1' 2' 10 })'                      new Dimension("BatchCount"' new int[] { 0' 1' 2 })'                      new Dimension("ChangeSetCount"' new int[] { 0' 1' 2 })                      );
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,ConfigurationBatchTest,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                      new Dimension("MaxBatchCount"' new int[] { -1' 0' 1' 2' 10 })'                      new Dimension("MaxChangeSetCount"' new int[] { -1' 0' 1' 2' 10 })'                      new Dimension("BatchCount"' new int[] { 0' 1' 2 })'                      new Dimension("ChangeSetCount"' new int[] { 0' 1' 2 })                      );
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,ConfigurationBatchTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' delegate(Hashtable values)                  {                      int maxBatchCount = (int)values["MaxBatchCount"];                      int maxChangeSetCount = (int)values["MaxChangeSetCount"];                      int batchCount = (int)values["BatchCount"];                      int changeSetCount = (int)values["ChangeSetCount"];                      TestUtil.ClearConfiguration();                      using (CustomDataContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      using (StaticCallbackManager<InitializeServiceArgs>.RegisterStatic((sender' args) =>                          {                              args.Config.SetEntitySetAccessRule("*"' EntitySetRights.All);                              args.Config.MaxBatchCount = maxBatchCount;                              args.Config.MaxChangesetCount = maxChangeSetCount;                              args.Config.UseVerboseErrors = true;                          }))                      {                          request.ServiceType = typeof(TypedDataService<CustomDataContext>);                          request.RequestUriString = "/$batch";                          request.HttpMethod = "POST";                          request.Accept = "*/*";                          string boundary = "boundary";                          request.RequestContentType = String.Format("{0}; boundary={1}"' UnitTestsUtil.MimeMultipartMixed' boundary);                            int customerId = 1000;                          int contentId = 0;                          StringBuilder payload = new StringBuilder();                          for (int i = 0; i < batchCount; i++)                          {                              StringBuilder batchElement = new StringBuilder();                              if (i % 2 == 0)                              {                                  string changesetBoundary = "cs";                                  for (int j = 0; j < changeSetCount; j++)                                  {                                      StringBuilder changeSetElement = new StringBuilder();                                      changeSetElement.AppendLine("<entry " + TestUtil.CommonPayloadNamespaces + ">");                                      changeSetElement.AppendLine(AtomUpdatePayloadBuilder.GetCategoryXml("AstoriaUnitTests.Stubs.Customer"));                                      changeSetElement.AppendLine(" <content type='application/xml'><adsm:properties>");                                      changeSetElement.AppendLine("  <ads:Name>A New Customer</ads:Name>");                                      changeSetElement.AppendLine("  <ads:ID>" + customerId++ + "</ads:ID>");                                      changeSetElement.AppendLine(" </adsm:properties></content></entry>");                                        int length = changeSetElement.Length;                                      changeSetElement.Insert(0'                                          "--" + changesetBoundary + "\r\n" +                                          "Content-Type: application/http\r\n" +                                          "Content-Transfer-Encoding: binary\r\n" +                                          "Content-ID: " + (++contentId).ToString() + "\r\n" +                                          "\r\n" +                                          "POST /Customers HTTP/1.1\r\n" +                                          "Content-Type: application/atom+xml;type=entry\r\n" +                                          "Content-Length: " + length + "\r\n" +                                          "\r\n");                                      batchElement.Append(changeSetElement.ToString());                                  }                                    batchElement.AppendLine("--" + changesetBoundary + "--");                                  int batchLength = batchElement.Length;                                  batchElement.Insert(0'                                      "--" + boundary + "\r\n" +                                      "Content-Type: multipart/mixed; boundary=" + changesetBoundary + "\r\n" +                                      "Content-Length: " + batchLength + "\r\n" +                                      "\r\n");                              }                              else                              {                                  // Do a GET request.                                  batchElement.AppendLine("--" + boundary);                                  batchElement.AppendLine("Content-Type: application/http");                                  batchElement.AppendLine("Content-Transfer-Encoding: binary");                                  batchElement.AppendLine();                                  batchElement.AppendLine("GET /Customers HTTP/1.1");                                  batchElement.AppendLine("Content-Length: 0");                                  batchElement.AppendLine();                              }                                payload.Append(batchElement.ToString());                          }                            payload.AppendLine("--" + boundary + "--");                            string payloadText = payload.ToString();                          Trace.WriteLine("Payload text:");                          Trace.WriteLine(payloadText);                          request.SetRequestStreamAsText(payloadText);                            // Build a payload.                          Exception exception = TestUtil.RunCatching(request.SendRequest);                          TestUtil.AssertExceptionExpected(exception'                              maxBatchCount < 0'                              maxChangeSetCount < 0);                          if (exception == null)                          {                              string text = request.GetResponseStreamAsText();                              if (maxBatchCount < batchCount ||                                  (batchCount > 0 && maxChangeSetCount < changeSetCount))                              {                                  TestUtil.AssertContains(text' "error");                              }                              else                              {                                  TestUtil.AssertContainsFalse(text' "error");                              }                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,ConfigurationBatchTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' delegate(Hashtable values)                  {                      int maxBatchCount = (int)values["MaxBatchCount"];                      int maxChangeSetCount = (int)values["MaxChangeSetCount"];                      int batchCount = (int)values["BatchCount"];                      int changeSetCount = (int)values["ChangeSetCount"];                      TestUtil.ClearConfiguration();                      using (CustomDataContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      using (StaticCallbackManager<InitializeServiceArgs>.RegisterStatic((sender' args) =>                          {                              args.Config.SetEntitySetAccessRule("*"' EntitySetRights.All);                              args.Config.MaxBatchCount = maxBatchCount;                              args.Config.MaxChangesetCount = maxChangeSetCount;                              args.Config.UseVerboseErrors = true;                          }))                      {                          request.ServiceType = typeof(TypedDataService<CustomDataContext>);                          request.RequestUriString = "/$batch";                          request.HttpMethod = "POST";                          request.Accept = "*/*";                          string boundary = "boundary";                          request.RequestContentType = String.Format("{0}; boundary={1}"' UnitTestsUtil.MimeMultipartMixed' boundary);                            int customerId = 1000;                          int contentId = 0;                          StringBuilder payload = new StringBuilder();                          for (int i = 0; i < batchCount; i++)                          {                              StringBuilder batchElement = new StringBuilder();                              if (i % 2 == 0)                              {                                  string changesetBoundary = "cs";                                  for (int j = 0; j < changeSetCount; j++)                                  {                                      StringBuilder changeSetElement = new StringBuilder();                                      changeSetElement.AppendLine("<entry " + TestUtil.CommonPayloadNamespaces + ">");                                      changeSetElement.AppendLine(AtomUpdatePayloadBuilder.GetCategoryXml("AstoriaUnitTests.Stubs.Customer"));                                      changeSetElement.AppendLine(" <content type='application/xml'><adsm:properties>");                                      changeSetElement.AppendLine("  <ads:Name>A New Customer</ads:Name>");                                      changeSetElement.AppendLine("  <ads:ID>" + customerId++ + "</ads:ID>");                                      changeSetElement.AppendLine(" </adsm:properties></content></entry>");                                        int length = changeSetElement.Length;                                      changeSetElement.Insert(0'                                          "--" + changesetBoundary + "\r\n" +                                          "Content-Type: application/http\r\n" +                                          "Content-Transfer-Encoding: binary\r\n" +                                          "Content-ID: " + (++contentId).ToString() + "\r\n" +                                          "\r\n" +                                          "POST /Customers HTTP/1.1\r\n" +                                          "Content-Type: application/atom+xml;type=entry\r\n" +                                          "Content-Length: " + length + "\r\n" +                                          "\r\n");                                      batchElement.Append(changeSetElement.ToString());                                  }                                    batchElement.AppendLine("--" + changesetBoundary + "--");                                  int batchLength = batchElement.Length;                                  batchElement.Insert(0'                                      "--" + boundary + "\r\n" +                                      "Content-Type: multipart/mixed; boundary=" + changesetBoundary + "\r\n" +                                      "Content-Length: " + batchLength + "\r\n" +                                      "\r\n");                              }                              else                              {                                  // Do a GET request.                                  batchElement.AppendLine("--" + boundary);                                  batchElement.AppendLine("Content-Type: application/http");                                  batchElement.AppendLine("Content-Transfer-Encoding: binary");                                  batchElement.AppendLine();                                  batchElement.AppendLine("GET /Customers HTTP/1.1");                                  batchElement.AppendLine("Content-Length: 0");                                  batchElement.AppendLine();                              }                                payload.Append(batchElement.ToString());                          }                            payload.AppendLine("--" + boundary + "--");                            string payloadText = payload.ToString();                          Trace.WriteLine("Payload text:");                          Trace.WriteLine(payloadText);                          request.SetRequestStreamAsText(payloadText);                            // Build a payload.                          Exception exception = TestUtil.RunCatching(request.SendRequest);                          TestUtil.AssertExceptionExpected(exception'                              maxBatchCount < 0'                              maxChangeSetCount < 0);                          if (exception == null)                          {                              string text = request.GetResponseStreamAsText();                              if (maxBatchCount < batchCount ||                                  (batchCount > 0 && maxChangeSetCount < changeSetCount))                              {                                  TestUtil.AssertContains(text' "error");                              }                              else                              {                                  TestUtil.AssertContainsFalse(text' "error");                              }                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The following statement contains a magic number: var testCases = new BatchContentTypeTestCase[]                  {                      // Completely wrong content type                      new BatchContentTypeTestCase                      {                          ContentType = "text/plain"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "text/plain")                      }'                      // Just type is correct' subtype is wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/text"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "multipart/text")                      }'                      // No boundary - still wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed"' "boundary")                      }'                      // Some other parameter but no boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;param=value"' "boundary")                      }'                      // Empty boundary - fails                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary="'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      // Two boundary parameters - wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=one;boundary=two"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;boundary=one;boundary=two"' "boundary")                      }'                      // Valid simple boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - mimetype using different casing                      new BatchContentTypeTestCase                      {                          ContentType = "MultiPart/mIxed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - boundary parameter name different casing                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;BounDary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The following statement contains a magic number: var testCases = new BatchContentTypeTestCase[]                  {                      // Completely wrong content type                      new BatchContentTypeTestCase                      {                          ContentType = "text/plain"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "text/plain")                      }'                      // Just type is correct' subtype is wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/text"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "multipart/text")                      }'                      // No boundary - still wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed"' "boundary")                      }'                      // Some other parameter but no boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;param=value"' "boundary")                      }'                      // Empty boundary - fails                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary="'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      // Two boundary parameters - wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=one;boundary=two"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;boundary=one;boundary=two"' "boundary")                      }'                      // Valid simple boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - mimetype using different casing                      new BatchContentTypeTestCase                      {                          ContentType = "MultiPart/mIxed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - boundary parameter name different casing                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;BounDary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The following statement contains a magic number: var testCases = new BatchContentTypeTestCase[]                  {                      // Completely wrong content type                      new BatchContentTypeTestCase                      {                          ContentType = "text/plain"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "text/plain")                      }'                      // Just type is correct' subtype is wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/text"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "multipart/text")                      }'                      // No boundary - still wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed"' "boundary")                      }'                      // Some other parameter but no boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;param=value"' "boundary")                      }'                      // Empty boundary - fails                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary="'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      // Two boundary parameters - wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=one;boundary=two"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;boundary=one;boundary=two"' "boundary")                      }'                      // Valid simple boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - mimetype using different casing                      new BatchContentTypeTestCase                      {                          ContentType = "MultiPart/mIxed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - boundary parameter name different casing                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;BounDary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The following statement contains a magic number: var testCases = new BatchContentTypeTestCase[]                  {                      // Completely wrong content type                      new BatchContentTypeTestCase                      {                          ContentType = "text/plain"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "text/plain")                      }'                      // Just type is correct' subtype is wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/text"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "multipart/text")                      }'                      // No boundary - still wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed"' "boundary")                      }'                      // Some other parameter but no boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;param=value"' "boundary")                      }'                      // Empty boundary - fails                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary="'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      // Two boundary parameters - wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=one;boundary=two"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;boundary=one;boundary=two"' "boundary")                      }'                      // Valid simple boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - mimetype using different casing                      new BatchContentTypeTestCase                      {                          ContentType = "MultiPart/mIxed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - boundary parameter name different casing                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;BounDary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The following statement contains a magic number: var testCases = new BatchContentTypeTestCase[]                  {                      // Completely wrong content type                      new BatchContentTypeTestCase                      {                          ContentType = "text/plain"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "text/plain")                      }'                      // Just type is correct' subtype is wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/text"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "multipart/text")                      }'                      // No boundary - still wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed"' "boundary")                      }'                      // Some other parameter but no boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;param=value"' "boundary")                      }'                      // Empty boundary - fails                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary="'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      // Two boundary parameters - wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=one;boundary=two"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;boundary=one;boundary=two"' "boundary")                      }'                      // Valid simple boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - mimetype using different casing                      new BatchContentTypeTestCase                      {                          ContentType = "MultiPart/mIxed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - boundary parameter name different casing                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;BounDary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The following statement contains a magic number: var testCases = new BatchContentTypeTestCase[]                  {                      // Completely wrong content type                      new BatchContentTypeTestCase                      {                          ContentType = "text/plain"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "text/plain")                      }'                      // Just type is correct' subtype is wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/text"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "multipart/text")                      }'                      // No boundary - still wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed"' "boundary")                      }'                      // Some other parameter but no boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;param=value"' "boundary")                      }'                      // Empty boundary - fails                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary="'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      // Two boundary parameters - wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=one;boundary=two"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;boundary=one;boundary=two"' "boundary")                      }'                      // Valid simple boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - mimetype using different casing                      new BatchContentTypeTestCase                      {                          ContentType = "MultiPart/mIxed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - boundary parameter name different casing                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;BounDary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The following statement contains a magic number: var testCases = new BatchContentTypeTestCase[]                  {                      // Completely wrong content type                      new BatchContentTypeTestCase                      {                          ContentType = "text/plain"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "text/plain")                      }'                      // Just type is correct' subtype is wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/text"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = DataServicesClientResourceUtil.GetString("Batch_ExpectedContentType"' "multipart/text")                      }'                      // No boundary - still wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed"' "boundary")                      }'                      // Some other parameter but no boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;param=value"' "boundary")                      }'                      // Empty boundary - fails                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary="'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=;param=value"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("ValidationUtils_InvalidBatchBoundaryDelimiterLength"' string.Empty' "70")                      }'                      // Two boundary parameters - wrong                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=one;boundary=two"'                          ExpectedErrorStatusCode = 400'                          ExpectedClientErrorMessage = ODataLibResourceUtil.GetString("MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads"' "multipart/mixed;boundary=one;boundary=two"' "boundary")                      }'                      // Valid simple boundary                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - mimetype using different casing                      new BatchContentTypeTestCase                      {                          ContentType = "MultiPart/mIxed;boundary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                      // Valid simple boundary - boundary parameter name different casing                      new BatchContentTypeTestCase                      {                          ContentType = "multipart/mixed;BounDary=batchboundary"'                          PayloadBatchBoundary = "batchboundary"                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The following statement contains a magic number: TestUtil.RunCombinations(                      testCases'                      (testCase) =>                      {                          using (TestWebRequest request = serverService.CreateForInProcess())                          {                              request.RequestContentType = testCase.ContentType;                              request.SetRequestStreamAsText(string.Format(                                  "--{0}\r\n" +                                  "Content-Type: multipart/mixed; boundary=changesetresponse_00000001-0000-0000-0000-000000000000\r\n\r\n" +                                  "--changesetresponse_00000001-0000-0000-0000-000000000000\r\n" +                                  "--changesetresponse_00000001-0000-0000-0000-000000000000--\r\n" +                                  "--{0}--\r\n"' testCase.PayloadBatchBoundary));                              request.RequestUriString = "/$batch";                              request.HttpMethod = "POST";                                Exception exception = TestUtil.RunCatching(request.SendRequest);                                int actualStatusCode = 0;                              if (exception != null)                              {                                  actualStatusCode = request.ResponseStatusCode;                              }                              else                              {                                  Assert.AreEqual(202' request.ResponseStatusCode' "Wrong response code for no-exception request.");                                  BatchWebRequest batchResponse = BatchWebRequest.FromResponse(InMemoryWebRequest.FromResponse(request));                                  if (batchResponse.Parts.Count > 0)                                  {                                      actualStatusCode = batchResponse.Parts[0].ResponseStatusCode;                                      if (actualStatusCode == 200) actualStatusCode = 0;                                  }                              }                                Assert.AreEqual(testCase.ExpectedErrorStatusCode' actualStatusCode' "Wrong status code.");                          }                            using (TestWebRequest request = clientService.CreateForInProcessWcf())                          {                              request.StartService();                                clientService.ProcessRequestOverride = clientRequest =>                              {                                  var clientResponse = new InMemoryWebRequest();                                  clientResponse.SetResponseStatusCode(202);                                  clientResponse.ResponseHeaders["Content-Type"] = testCase.ContentType;                                  clientResponse.SetResponseStreamAsText(string.Format(                                      "--{0}\r\n" +                                      "Content-Type: application/http\r\n" +                                      "Content-Transfer-Encoding: binary\r\n" +                                      "\r\n" +                                      "200 OK\r\n" +                                      "<feed xmlns='http://www.w3.org/2005/Atom'/>\r\n" +                                      "--{0}--\r\n"'                                      testCase.PayloadBatchBoundary));                                  return clientResponse;                              };                                DataServiceContext ctx = new DataServiceContext(request.ServiceRoot);                              Exception exception = TestUtil.RunCatching(() => ctx.ExecuteBatch(ctx.CreateQuery<Customer>("/Customers")));                                if (exception != null)                              {                                  exception = ((DataServiceRequestException)exception).InnerException;                                  Assert.AreEqual(testCase.ExpectedClientErrorMessage' exception.Message' "Unexpected error message.");                              }                              else                              {                                  Assert.IsNull(testCase.ExpectedClientErrorMessage' "Expected exception' but none was thrown.");                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The following statement contains a magic number: TestUtil.RunCombinations(                      testCases'                      (testCase) =>                      {                          using (TestWebRequest request = serverService.CreateForInProcess())                          {                              request.RequestContentType = testCase.ContentType;                              request.SetRequestStreamAsText(string.Format(                                  "--{0}\r\n" +                                  "Content-Type: multipart/mixed; boundary=changesetresponse_00000001-0000-0000-0000-000000000000\r\n\r\n" +                                  "--changesetresponse_00000001-0000-0000-0000-000000000000\r\n" +                                  "--changesetresponse_00000001-0000-0000-0000-000000000000--\r\n" +                                  "--{0}--\r\n"' testCase.PayloadBatchBoundary));                              request.RequestUriString = "/$batch";                              request.HttpMethod = "POST";                                Exception exception = TestUtil.RunCatching(request.SendRequest);                                int actualStatusCode = 0;                              if (exception != null)                              {                                  actualStatusCode = request.ResponseStatusCode;                              }                              else                              {                                  Assert.AreEqual(202' request.ResponseStatusCode' "Wrong response code for no-exception request.");                                  BatchWebRequest batchResponse = BatchWebRequest.FromResponse(InMemoryWebRequest.FromResponse(request));                                  if (batchResponse.Parts.Count > 0)                                  {                                      actualStatusCode = batchResponse.Parts[0].ResponseStatusCode;                                      if (actualStatusCode == 200) actualStatusCode = 0;                                  }                              }                                Assert.AreEqual(testCase.ExpectedErrorStatusCode' actualStatusCode' "Wrong status code.");                          }                            using (TestWebRequest request = clientService.CreateForInProcessWcf())                          {                              request.StartService();                                clientService.ProcessRequestOverride = clientRequest =>                              {                                  var clientResponse = new InMemoryWebRequest();                                  clientResponse.SetResponseStatusCode(202);                                  clientResponse.ResponseHeaders["Content-Type"] = testCase.ContentType;                                  clientResponse.SetResponseStreamAsText(string.Format(                                      "--{0}\r\n" +                                      "Content-Type: application/http\r\n" +                                      "Content-Transfer-Encoding: binary\r\n" +                                      "\r\n" +                                      "200 OK\r\n" +                                      "<feed xmlns='http://www.w3.org/2005/Atom'/>\r\n" +                                      "--{0}--\r\n"'                                      testCase.PayloadBatchBoundary));                                  return clientResponse;                              };                                DataServiceContext ctx = new DataServiceContext(request.ServiceRoot);                              Exception exception = TestUtil.RunCatching(() => ctx.ExecuteBatch(ctx.CreateQuery<Customer>("/Customers")));                                if (exception != null)                              {                                  exception = ((DataServiceRequestException)exception).InnerException;                                  Assert.AreEqual(testCase.ExpectedClientErrorMessage' exception.Message' "Unexpected error message.");                              }                              else                              {                                  Assert.IsNull(testCase.ExpectedClientErrorMessage' "Expected exception' but none was thrown.");                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,BatchContentTypeTest,The following statement contains a magic number: TestUtil.RunCombinations(                      testCases'                      (testCase) =>                      {                          using (TestWebRequest request = serverService.CreateForInProcess())                          {                              request.RequestContentType = testCase.ContentType;                              request.SetRequestStreamAsText(string.Format(                                  "--{0}\r\n" +                                  "Content-Type: multipart/mixed; boundary=changesetresponse_00000001-0000-0000-0000-000000000000\r\n\r\n" +                                  "--changesetresponse_00000001-0000-0000-0000-000000000000\r\n" +                                  "--changesetresponse_00000001-0000-0000-0000-000000000000--\r\n" +                                  "--{0}--\r\n"' testCase.PayloadBatchBoundary));                              request.RequestUriString = "/$batch";                              request.HttpMethod = "POST";                                Exception exception = TestUtil.RunCatching(request.SendRequest);                                int actualStatusCode = 0;                              if (exception != null)                              {                                  actualStatusCode = request.ResponseStatusCode;                              }                              else                              {                                  Assert.AreEqual(202' request.ResponseStatusCode' "Wrong response code for no-exception request.");                                  BatchWebRequest batchResponse = BatchWebRequest.FromResponse(InMemoryWebRequest.FromResponse(request));                                  if (batchResponse.Parts.Count > 0)                                  {                                      actualStatusCode = batchResponse.Parts[0].ResponseStatusCode;                                      if (actualStatusCode == 200) actualStatusCode = 0;                                  }                              }                                Assert.AreEqual(testCase.ExpectedErrorStatusCode' actualStatusCode' "Wrong status code.");                          }                            using (TestWebRequest request = clientService.CreateForInProcessWcf())                          {                              request.StartService();                                clientService.ProcessRequestOverride = clientRequest =>                              {                                  var clientResponse = new InMemoryWebRequest();                                  clientResponse.SetResponseStatusCode(202);                                  clientResponse.ResponseHeaders["Content-Type"] = testCase.ContentType;                                  clientResponse.SetResponseStreamAsText(string.Format(                                      "--{0}\r\n" +                                      "Content-Type: application/http\r\n" +                                      "Content-Transfer-Encoding: binary\r\n" +                                      "\r\n" +                                      "200 OK\r\n" +                                      "<feed xmlns='http://www.w3.org/2005/Atom'/>\r\n" +                                      "--{0}--\r\n"'                                      testCase.PayloadBatchBoundary));                                  return clientResponse;                              };                                DataServiceContext ctx = new DataServiceContext(request.ServiceRoot);                              Exception exception = TestUtil.RunCatching(() => ctx.ExecuteBatch(ctx.CreateQuery<Customer>("/Customers")));                                if (exception != null)                              {                                  exception = ((DataServiceRequestException)exception).InnerException;                                  Assert.AreEqual(testCase.ExpectedClientErrorMessage' exception.Message' "Unexpected error message.");                              }                              else                              {                                  Assert.IsNull(testCase.ExpectedClientErrorMessage' "Expected exception' but none was thrown.");                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,SendMoreThan100RequestsInBatch,The following statement contains a magic number: i < 101
Magic Number,AstoriaUnitTests.Tests,BatchTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BatchTests.cs,SendMoreThan100RequestsInBatch,The following statement contains a magic number: Assert.IsFalse(batchRequest.Parts.Any(p => p.ResponseStatusCode != 200)' "All the requests should succeed");
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobETagTest,The following statement contains a magic number: int rating = 5;
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobETagTest,The following statement contains a magic number: string photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' id' "sample photo payload"' "sample photo"' rating' new byte[] { 1' 2' 3' 4 });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobETagTest,The following statement contains a magic number: string photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' id' "sample photo payload"' "sample photo"' rating' new byte[] { 1' 2' 3' 4 });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobETagTest,The following statement contains a magic number: string photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' id' "sample photo payload"' "sample photo"' rating' new byte[] { 1' 2' 3' 4 });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobETagTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(2);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobETagTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(2);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobETagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Folders(0)/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' null' photoPayload' 201));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: int bufferSize = 1024 * 64;
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: int bufferSize = 1024 * 64;
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobObjectContextTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          WebServerLocation location = (WebServerLocation)table["Location"];                          bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                            using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                          {                              byte[] buffer = (byte[])table["Buffers"];                              FillBuffer(buffer);                              string format = (string)table["Format"];                              string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();                                string expectedID = slug;                              NorthwindModel.Customers customer = NorthwindModel.Customers.CreateCustomers(expectedID' "");                              string contentType = DataServiceStreamProvider.GetContentType(customer);                                // POST Media Link Entry -- not supported                              // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                              string payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' format' slug' payload' 500));                                // POST Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));                              payload = request.GetResponseStreamAsText();                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                if (format == UnitTestsUtil.AtomFormat)                              {                                  payload = Regex.Replace(payload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                              }                                // PATCH the same response payload back to the MLE.                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // GET Media Resource                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // GET Media Link Entry                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')"' null' null' format' null' slug' null' 200));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' null' null' false);                                // PUT Media Resource                              FillBuffer(buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' buffer' 204));                              Assert.AreEqual(""' request.GetResponseStreamAsText());                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Resource -- Not supported. Expect 405.                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' new byte[] { 1' 2' 3' 4 }' 405));                              // The stream property for Customer should not be updated.                              ValidateMediaResourceFromStorage(typeof(NorthwindModel.Customers)' null' expectedID' buffer);                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' contentType' slug' null' 200));                              ValidateMediaResourceFromGet(typeof(NorthwindModel.Customers)' request' expectedID' buffer);                                // PATCH Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "Address"' "City");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PATCH"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "Address"' "City"' false);                                // PUT Media Link Entry                              payload = GetCustomerPayload(format' request.BaseUri' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond");                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "PUT"' "/Customers('" + expectedID + "')"' null' null' format' format' slug' payload' 200' true));                              ValidateCustomersMLEFromResponse(request' format' expectedID' "Microsoft"' "One Microsoft Way"' "Redmond"' false);                                /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                              // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')/$value"' blobETag' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 405));                                // DELETE Media Link Entry                              string path = DataServiceStreamProvider.GetStoragePath(customer);                              Assert.IsTrue(File.Exists(path));                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "DELETE"' "/Customers('" + expectedID + "')"' null' null' null' isChunkedRequest ? "text/plain" : null' slug' isChunkedRequest ? "0" : null' 204));                              Assert.IsFalse(File.Exists(path));                                Assert.AreEqual("[DataServiceStreamProvider-GetWriteStream-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose]"' DataServiceStreamProvider.CallOrderLog);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,EdmBlobWithInheritanceTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string format = (string)table["Format"];                        using (var conn = ocs.PopulateData.CreateTableAndPopulateData())                      using (TestUtil.RestoreStaticValueOnDispose(typeof(OpenWebDataServiceHelper)' "ForceVerboseErrors"))                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          string expectedID = "1";                            OpenWebDataServiceHelper.ForceVerboseErrors = true;                            // GET an instance of a type derived from a type marked with HasStream=true.                                                  request.DataServiceType = typeof(ocs.CustomObjectContext);                          request.RequestUriString = "/CustomerBlobs(" + expectedID + ")";                          request.HttpMethod = "GET";                          request.Accept = format;                            Exception e = TestUtil.RunCatching(request.SendRequest);                            if (e != null)                          {                              System.Diagnostics.Trace.WriteLine(string.Format("Exception from SendRequest():\r\n{0}\r\nCall Stack:\r\n{1}"' e.Message' e.StackTrace));                          }                            Assert.IsNull(e);                            // Check that the response is an MLE.                              Assert.AreEqual(200' request.ResponseStatusCode);                            const string expectedTypeName = "AstoriaUnitTests.ObjectContextStubs.Types.CustomerBlobWithBirthday";                          string baseUriWithSlash = request.BaseUri.EndsWith("/") ? request.BaseUri : request.BaseUri + "/";                          string expectedIdUri = baseUriWithSlash + "CustomerBlobs(" + expectedID + ")";                          string expectedEditLink = "CustomerBlobs(" + expectedID + ")" + "/" + expectedTypeName;                          string expectedEditMediaLink = expectedEditLink + "/$value";                          string expectedSrcUri = ocs.CustomObjectContext.DummyReadStreamUri.OriginalString;                          string expectedContentType = ocs.CustomObjectContext.DummyContentType;                            string[] xPaths = null;                          xPaths = new string[] {                              String.Format(@"/atom:entry[atom:category/@term=""#{0}"" and                                          atom:id=""{1}"" and                                          atom:content[@type=""{2}"" and @src=""{3}""] and                                          atom:link[@rel=""edit-media"" and @href =""{4}"" ] and                                          atom:link[@rel=""edit"" and @title=""CustomerBlob"" and @href =""{5}""] and                                          adsm:properties[ads:ID=""{6}""]                              ]"'                              expectedTypeName'                              expectedIdUri'                              expectedContentType'                              expectedSrcUri'                              expectedEditMediaLink'                              expectedEditLink'                              expectedID)                          };                            UnitTestsUtil.VerifyXPaths(request.GetResponseStream()' format' xPaths);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextItemTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                      string accept = (string)table["Accept"];                      string contentType = (string)table["ContentType"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation(location))                      {                          int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Item {0} Description"' id);                          string name = string.Format("Item {0}"' id);                          string itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            // POST non-MLE                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Item).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' null' itemPayload' 201));                            itemPayload = request.GetResponseStreamAsText();                          ValidateItemOnContext(id' description' name);                            if (accept == UnitTestsUtil.AtomFormat)                          {                              itemPayload = Regex.Replace(itemPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the Item.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' itemPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // GET non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 400));                            // GET non-MLE                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                          string etag = request.ResponseETag;                            // PATCH non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PATCH non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            // PUT non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' etag' null' null' contentType' null' itemPayload' 400));                            // PUT non-MLE                          description = description + TestUtil.Random.Next().ToString();                          name = name + TestUtil.Random.Next().ToString();                          itemPayload = GetItemPayload(contentType' request.BaseUri' id' description' name);                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' etag' null' null' contentType' null' itemPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateItemOnContext(id' description' name);                          etag = request.ResponseETag;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' etag' null' accept' null' null' null' 200));                          ValidateItemFromResponse(request' accept' id' description' name);                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE non-MLE/$value                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Item i = FindItem(id);                          Assert.IsNotNull(i);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' etag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindItem(id));                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: int oneK = 1024;
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: int bufferSize = 64 * oneK;
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: byte[] smallBuffer = new byte[200];
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: byte[] largeBuffer = new byte[TestUtil.Random.Next(10 * oneMB' 20 * oneMB)];
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: byte[] largeBuffer = new byte[TestUtil.Random.Next(10 * oneMB' 20 * oneMB)];
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPhotoTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      WebServerLocation location = (WebServerLocation)table["Location"];                      bool isChunkedRequest = location == WebServerLocation.InProcessStreamedWcf;                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          byte[] buffer = isChunkedRequest ? largeBuffer : smallBuffer;                          FillBuffer(buffer);                          string accept = (string)table["Accept"];                            int id = TestUtil.Random.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = TestUtil.Random.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = "\"BlobETag123\"";                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MLE -- not supported                          // When the server sees POST on the MLE' it simply tries to create the MR. IDataServiceStreamProvider.GetWriteStream() should fail because the content type is incorrect.                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 500));                            // POST MR                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                            photoPayload = request.GetResponseStreamAsText();                            if (accept == UnitTestsUtil.AtomFormat)                          {                              photoPayload = Regex.Replace(photoPayload' @"\s*<link\s+rel=""(?:(?!edit)|(?!edit-media)).*?/>\s*"' ""' RegexOptions.Multiline | RegexOptions.Compiled);                          }                            // PATCH the same response payload back to the MLE.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          string mleETag = request.ResponseETag;                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                          Assert.AreEqual(blobETag' request.ResponseETag);                            // GET Media Link Entry                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' mleETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            // PUT Media Resource                          FillBuffer(buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' blobETag' null' null' binaryContentType' null' buffer' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // PATCH Media Resource -- Not supported. Expect 405.                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 405));                          // The stream property for Customer should not be updated.                          ValidateMediaResourceFromStorage(typeof(Photo)' null' id' buffer);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' buffer);                            // Blob update modifies Photo.LastUpdated timestamp' we need to get the new etag value                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' accept' null' null' null' 200));                            // PATCH Media Link Entry                          description = "Merged Description";                          name = "Merged Name";                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 4321' new byte[] { 4' 3' 2' 1 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 4321' new byte[] { 4' 3' 2' 1 }' request.ResponseETag' blobETag' false);                            // PUT Media Link Entry                          description = null;                          name = null;                          photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' 1234' new byte[] { 1' 2' 3' 4 });                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")"' request.ResponseETag' null' null' accept' null' photoPayload' 204));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' request.ResponseETag' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' description' name' 1234' new byte[] { 1' 2' 3' 4 }' request.ResponseETag' blobETag' false);                          mleETag = request.ResponseETag;                            /* For chunked requests we need to send a "0" meaning that this is the last chunk. In this case we need to provide contentType as well */                          // DELETE Media Resource -- not supported                          Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' null' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 405));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string path = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(File.Exists(path));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' mleETag' null' null' isChunkedRequest ? "text/plain" : null' null' isChunkedRequest ? "0" : null' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(File.Exists(path));                            // GET Media Link Entry for photo entity of a derived type that does not explicitly declare the [HasStreamAttribute] but should be treated as though it does.                          DerivedFromPhoto derivedPhoto = PhotoDataServiceContext._items.Where(i => i.GetType() == typeof(DerivedFromPhoto)).First() as DerivedFromPhoto;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + derivedPhoto.ID + ")"' null' null' accept' null' null' null' 200));                          ValidatePhotoMLEFromResponse(request' accept' typeof(DerivedFromPhoto)' derivedPhoto.ID' derivedPhoto.Description' derivedPhoto.Name' derivedPhoto.Rating' derivedPhoto.ThumbNail' request.ResponseETag' null' false);                          mleETag = request.ResponseETag;                            Assert.AreEqual("[DataServiceStreamProvider-ResolveType-GetWriteStream-Dispose][DataServiceStreamProvider-ResolveType-GetWriteStream-StreamBufferSize-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetWriteStream-StreamBufferSize-GetStreamETag-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamContentType-GetReadStream-GetStreamETag-StreamBufferSize-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose][DataServiceStreamProvider-DeleteStream-Dispose][DataServiceStreamProvider-GetStreamETag-GetReadStreamUri-GetStreamContentType-Dispose]"' DataServiceStreamProvider.CallOrderLog);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobReflectionContextPermissionTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                          using (PhotoDataServiceContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              PhotoDataService.Right = EntitySetRights.AllRead;                                byte[] buffer = new byte[20];                              FillBuffer(buffer);                              string accept = (string)table["Accept"];                                int id = TestUtil.Random.Next(10' int.MaxValue);                              string description = string.Format("Photo {0} Description"' id);                              string name = string.Format("Photo {0}"' id);                              int rating = TestUtil.Random.Next();                              string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                                string slug = id.ToString();                              string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                                // POST MLE                              request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' accept' slug' photoPayload' 403));                                // POST MR                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 403));                                // PATCH the same response payload back to the MLE.                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + id + ")"' request.ResponseETag' null' accept' accept' null' photoPayload' 403));                                // PUT Media Resource                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' request.ResponseETag' null' null' binaryContentType' null' buffer' 403));                                // DELETE Media Resource -- not supported                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")/$value"' String.Empty' null' null' null' null' null' 405));                                // DELETE Media Link Entry                              Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' String.Empty' null' null' null' null' null' 403));                                // INSERT a new MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteAppend;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' UnitTestsUtil.AtomFormat' binaryContentType' slug' buffer' 201));                                // DELETE an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.WriteDelete | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));                                // Get an existing MLE                              TestUtil.ClearConfiguration();                              PhotoDataService.Right = EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + 1 + ")"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                                // PATCH the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteMerge | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                // PUT the same response payload back to the MLE.                              TestUtil.ClearConfiguration();                              photoPayload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' description' name' rating' new byte[] { 1' 2' 3' 4 });                              PhotoDataService.Right = EntitySetRights.WriteReplace | EntitySetRights.ReadSingle;                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + 1 + ")"' request.ResponseETag' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' null' photoPayload' 204));                                TestUtil.ClearConfiguration();                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: byte[] buffer = new byte[20];
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: int id = 500;
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(3);                          InterceptorChecker.ValidateChangeInterceptor(1);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Folders(0)/Items/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(1);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Items/$ref?$id=Items(500)"' null' null' null' null' null' null' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: id = 501;
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(2);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(2);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Folders(0)/Items"' null' null' accept' binaryContentType' slug' buffer' 201));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(1);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Items(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(3);                          InterceptorChecker.ValidateChangeInterceptor(1);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items(500)/RelatedFolders/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNotNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedFolders.SingleOrDefault(f => f.ID == 0));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(1);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/RelatedFolders/$ref?$id=Folders(0)"' null' null' null' null' null' null' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedFolders.SingleOrDefault(f => f.ID == 0));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(2);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(2);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items(500)/RelatedFolders"' null' null' accept' UnitTestsUtil.JsonLightMimeType' null' payload' 201));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNotNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedFolders.SingleOrDefault(f => f.ID == 333));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNotNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedFolders.SingleOrDefault(f => f.ID == 333));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(1);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/RelatedFolders(333)"' null' null' null' null' null' null' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(PhotoDataServiceContext._folders.SingleOrDefault(f => f.ID == 333));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedFolders.SingleOrDefault(f => f.ID == 333));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedFolders.SingleOrDefault(f => f.ID == 333));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(3);                          InterceptorChecker.ValidateChangeInterceptor(1);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items(500)/RelatedItems/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNotNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedItems.SingleOrDefault(i => i.ID == 1));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(1);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/RelatedItems/$ref?$id=Items(1)"' null' null' null' null' null' null' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedItems.SingleOrDefault(i => i.ID == 1));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: id = 502;
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(2);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(2);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items(500)/RelatedItems"' null' null' accept' binaryContentType' slug' buffer' 201));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNotNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedItems.SingleOrDefault(i => i.ID == id));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                      {                          InterceptorChecker.ValidateQueryInterceptor(2);                          InterceptorChecker.ValidateChangeInterceptor(1);                      };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/RelatedItems(" + id + ")"' request.ResponseETag' null' null' null' null' null' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobPostBindingTest,The following statement contains a magic number: Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).RelatedItems.SingleOrDefault(i => i.ID == id));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateMLEWithEmptyContentETagTest,The following statement contains a magic number: Assert.AreEqual(412' req.ResponseStatusCode' "The request should have failed due to mismatch in ETags");
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobUpdateBindingTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string method = (string)table["Method"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(PhotoDataService)))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcess())                      {                          byte[] buffer = new byte[20];                          FillBuffer(buffer);                          string accept = UnitTestsUtil.AtomFormat;                            int id = 500;                          string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                            int photoCount = PhotoDataServiceContext._items.Count;                          int folderCount = PhotoDataServiceContext._folders.Count;                            ///////////////////////////////////////                          // Folders/Photos                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' buffer' 201));                          Assert.AreEqual(++photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Items.SingleOrDefault(i => i.ID == id));                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          string payload = string.Format("<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items({0})' />"' id);                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Folders(0)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon.ID == id);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Folders(0)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._folders.Single(f => f.ID == 0).Icon);                            ///////////////////////////////////////                          // Photos/Folders                            // Set Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Folders(0)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/ParentFolder/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder.ID == 0);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/ParentFolder/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).ParentFolder);                            ///////////////////////////////////////                          // Photos/Photos                            // Insert Link                          request.RequestHeaders.Clear();                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(3);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          payload = "<ref xmlns='http://docs.oasis-open.org/odata/ns/metadata' id='/Items(1)' />";                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' method' "/Items(500)/Icon/$ref"' null' null' accept' UnitTestsUtil.MimeApplicationXml' null' payload' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsTrue(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon.ID == 1);                            // Delete Link                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(1);                          };                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(500)/Icon/$ref"' null' null' null' null' null' null' 204));                          Assert.AreEqual(photoCount' PhotoDataServiceContext._items.Count);                          Assert.AreEqual(folderCount' PhotoDataServiceContext._folders.Count);                          Assert.IsNull(PhotoDataServiceContext._items.Single(i => i.ID == 500).Icon);                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: const long oneGB = 1024 * 1024 * 1024;
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: const long oneGB = 1024 * 1024 * 1024;
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: const long oneGB = 1024 * 1024 * 1024;
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      // Setting the size to 2GB + 1KB. 1KB is to test that we are good when passing 2GB boundary.                       // 4 GB adds too much to test execution time.                      using (LargeStream stream1 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1024 + 2 * oneGB))                      using (LargeStream stream2 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1 * oneGB))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          DataServiceStreamProvider.SetupLargeStreamStorage();                            string accept = UnitTestsUtil.AtomFormat;                            int id = rand.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = rand.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = null;                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream1);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream1);                            // PUT Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream2);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream2);                            // Get the etag value before we can delete.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string key = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      // Setting the size to 2GB + 1KB. 1KB is to test that we are good when passing 2GB boundary.                       // 4 GB adds too much to test execution time.                      using (LargeStream stream1 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1024 + 2 * oneGB))                      using (LargeStream stream2 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1 * oneGB))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          DataServiceStreamProvider.SetupLargeStreamStorage();                            string accept = UnitTestsUtil.AtomFormat;                            int id = rand.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = rand.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = null;                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream1);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream1);                            // PUT Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream2);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream2);                            // Get the etag value before we can delete.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string key = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      // Setting the size to 2GB + 1KB. 1KB is to test that we are good when passing 2GB boundary.                       // 4 GB adds too much to test execution time.                      using (LargeStream stream1 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1024 + 2 * oneGB))                      using (LargeStream stream2 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1 * oneGB))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          DataServiceStreamProvider.SetupLargeStreamStorage();                            string accept = UnitTestsUtil.AtomFormat;                            int id = rand.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = rand.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = null;                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream1);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream1);                            // PUT Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream2);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream2);                            // Get the etag value before we can delete.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string key = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      // Setting the size to 2GB + 1KB. 1KB is to test that we are good when passing 2GB boundary.                       // 4 GB adds too much to test execution time.                      using (LargeStream stream1 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1024 + 2 * oneGB))                      using (LargeStream stream2 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1 * oneGB))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          DataServiceStreamProvider.SetupLargeStreamStorage();                            string accept = UnitTestsUtil.AtomFormat;                            int id = rand.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = rand.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = null;                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream1);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream1);                            // PUT Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream2);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream2);                            // Get the etag value before we can delete.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string key = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      // Setting the size to 2GB + 1KB. 1KB is to test that we are good when passing 2GB boundary.                       // 4 GB adds too much to test execution time.                      using (LargeStream stream1 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1024 + 2 * oneGB))                      using (LargeStream stream2 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1 * oneGB))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          DataServiceStreamProvider.SetupLargeStreamStorage();                            string accept = UnitTestsUtil.AtomFormat;                            int id = rand.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = rand.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = null;                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream1);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream1);                            // PUT Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream2);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream2);                            // Get the etag value before we can delete.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string key = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      // Setting the size to 2GB + 1KB. 1KB is to test that we are good when passing 2GB boundary.                       // 4 GB adds too much to test execution time.                      using (LargeStream stream1 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1024 + 2 * oneGB))                      using (LargeStream stream2 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1 * oneGB))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          DataServiceStreamProvider.SetupLargeStreamStorage();                            string accept = UnitTestsUtil.AtomFormat;                            int id = rand.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = rand.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = null;                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream1);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream1);                            // PUT Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream2);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream2);                            // Get the etag value before we can delete.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string key = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      // Setting the size to 2GB + 1KB. 1KB is to test that we are good when passing 2GB boundary.                       // 4 GB adds too much to test execution time.                      using (LargeStream stream1 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1024 + 2 * oneGB))                      using (LargeStream stream2 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1 * oneGB))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          DataServiceStreamProvider.SetupLargeStreamStorage();                            string accept = UnitTestsUtil.AtomFormat;                            int id = rand.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = rand.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = null;                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream1);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream1);                            // PUT Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream2);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream2);                            // Get the etag value before we can delete.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string key = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      // Setting the size to 2GB + 1KB. 1KB is to test that we are good when passing 2GB boundary.                       // 4 GB adds too much to test execution time.                      using (LargeStream stream1 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1024 + 2 * oneGB))                      using (LargeStream stream2 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1 * oneGB))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          DataServiceStreamProvider.SetupLargeStreamStorage();                            string accept = UnitTestsUtil.AtomFormat;                            int id = rand.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = rand.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = null;                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream1);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream1);                            // PUT Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream2);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream2);                            // Get the etag value before we can delete.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string key = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      // Setting the size to 2GB + 1KB. 1KB is to test that we are good when passing 2GB boundary.                       // 4 GB adds too much to test execution time.                      using (LargeStream stream1 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1024 + 2 * oneGB))                      using (LargeStream stream2 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1 * oneGB))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          DataServiceStreamProvider.SetupLargeStreamStorage();                            string accept = UnitTestsUtil.AtomFormat;                            int id = rand.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = rand.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = null;                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream1);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream1);                            // PUT Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream2);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream2);                            // Get the etag value before we can delete.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string key = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      // Setting the size to 2GB + 1KB. 1KB is to test that we are good when passing 2GB boundary.                       // 4 GB adds too much to test execution time.                      using (LargeStream stream1 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1024 + 2 * oneGB))                      using (LargeStream stream2 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1 * oneGB))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          DataServiceStreamProvider.SetupLargeStreamStorage();                            string accept = UnitTestsUtil.AtomFormat;                            int id = rand.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = rand.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = null;                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream1);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream1);                            // PUT Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream2);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream2);                            // Get the etag value before we can delete.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string key = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      // Setting the size to 2GB + 1KB. 1KB is to test that we are good when passing 2GB boundary.                       // 4 GB adds too much to test execution time.                      using (LargeStream stream1 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1024 + 2 * oneGB))                      using (LargeStream stream2 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1 * oneGB))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          DataServiceStreamProvider.SetupLargeStreamStorage();                            string accept = UnitTestsUtil.AtomFormat;                            int id = rand.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = rand.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = null;                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream1);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream1);                            // PUT Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream2);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream2);                            // Get the etag value before we can delete.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string key = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobLargeStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      // Setting the size to 2GB + 1KB. 1KB is to test that we are good when passing 2GB boundary.                       // 4 GB adds too much to test execution time.                      using (LargeStream stream1 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1024 + 2 * oneGB))                      using (LargeStream stream2 = new LargeStream((byte)rand.Next(byte.MinValue' byte.MaxValue)' 1 * oneGB))                      using (PhotoDataServiceContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          DataServiceStreamProvider.SetupLargeStreamStorage();                            string accept = UnitTestsUtil.AtomFormat;                            int id = rand.Next(10' int.MaxValue);                          string description = string.Format("Photo {0} Description"' id);                          string name = string.Format("Photo {0}"' id);                          int rating = rand.Next();                          string photoPayload = GetPhotoPayload(accept' request.BaseUri' id' description' name' rating' new byte[] { 1' 2' 3' 4 });                            string slug = id.ToString();                          string binaryContentType = DataServiceStreamProvider.GetContentType(new Photo() { ID = id });                          string blobETag = null;                          DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) => blobETag;                            // POST MR                          request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' binaryContentType' slug' stream1' 201));                          ValidatePhotoMLEFromResponse(request' accept' typeof(Photo)' id' null' null' 0' null' request.ResponseETag' blobETag' false);                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream1);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream1);                            // PUT Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(" + id + ")/$value"' null' null' null' binaryContentType' null' stream2' 204));                          Assert.AreEqual(""' request.GetResponseStreamAsText());                          ValidateMediaResourceFromStorage(typeof(Photo)' request' id' stream2);                            // GET Media Resource                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")/$value"' null' null' null' null' null' null' 200));                          ValidateMediaResourceFromGet(typeof(Photo)' request' id' stream2);                            // Get the etag value before we can delete.                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(" + id + ")"' null' null' null' null' null' null' 200));                            // DELETE Media Link Entry                          Photo p = FindPhoto(id);                          Assert.IsNotNull(p);                          string key = DataServiceStreamProvider.GetStoragePath(p);                          Assert.IsTrue(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(" + id + ")"' request.ResponseETag' null' null' "text/plain"' null' "0"' 204));                          Assert.IsNull(FindPhoto(id));                          Assert.IsFalse(DataServiceStreamProvider.LargeStreamStorage.ContainsKey(key));                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: string contentTypeP100 = DataServiceStreamProvider.GetContentType(new Photo() { ID = 100 });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 500));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 500));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 500));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' "'"' null' null' null' null' null' 400));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' "\"\""' null' null' null' null' null' 400));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' "\"'\""' null' null' null' null' null' 400));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' "W/"' null' null' null' null' null' 400));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' "W/'"' null' null' null' null' null' 400));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' "W/\"\""' null' null' null' null' null' 412));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' "W/\"'\""' null' null' null' null' null' 412));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' null' null' null' contentTypeP1' null' buffer' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' null' null' null' contentTypeP1' null' buffer' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' "W/\"someetag\""' null' UnitTestsUtil.AtomFormat' contentTypeP100' "100"' buffer' 400));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' "W/\"someetag\""' UnitTestsUtil.AtomFormat' contentTypeP100' "100"' buffer' 400));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' "W/\"someetag\""' null' null' null' null' null' 912));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' "W/\"someetag\""' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Exception e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 500);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' "\"BlobETag123\""' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' "W/\"BlobETag456\""' null' null' null' null' null' 912));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' "\"BlobETag123\""' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' "W/\"BlobETag456\""' null' null' null' null' 304));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' null' "W/\"BlobETag456\""' null' null' null' null' 304));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' request.ResponseETag' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' request.ResponseETag' null' null' null' null' 304));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' "W/\"someetag\""' null' null' null' null' null' 412));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' "W/\"someetag\""' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: string payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' "Photo Description"' "Photo Name"' 1234' new byte[] { 1' 2' 3' 4 });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: string payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' "Photo Description"' "Photo Name"' 1234' new byte[] { 1' 2' 3' 4 });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: string payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' "Photo Description"' "Photo Name"' 1234' new byte[] { 1' 2' 3' 4 });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: string payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' "Photo Description"' "Photo Name"' 1234' new byte[] { 1' 2' 3' 4 });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' null' null' null' UnitTestsUtil.AtomFormat' null' payload' 400));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' null' null' null' UnitTestsUtil.AtomFormat' null' payload' 400));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' null' "W/\"someetag\""' null' UnitTestsUtil.AtomFormat' null' payload' 400));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' null' "W/\"someetag\""' null' UnitTestsUtil.AtomFormat' null' payload' 400));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' "W/\"someetag\""' null' null' UnitTestsUtil.AtomFormat' null' payload' 412));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' "W/\"someetag\""' null' null' UnitTestsUtil.AtomFormat' null' payload' 412));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' null' UnitTestsUtil.AtomFormat' null' payload' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' null' UnitTestsUtil.AtomFormat' null' payload' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' null' null' null' contentTypeP1' null' buffer' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' "W/\"someetag\""' null' null' contentTypeP1' null' buffer' 900));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' null' "W/\"someetag\""' null' contentTypeP1' null' buffer' 900));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' null' null' null' contentTypeP1' null' buffer' 900));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' "W/\"someetag\""' null' null' contentTypeP1' null' buffer' 912));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' "\"BlobETag789\""' null' null' contentTypeP1' null' buffer' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)/$value"' null' null' null' null' null' null' 405 /* DELETE MR -- not allowed */));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)/$value"' "W/\"someetag\""' null' null' null' null' null' 405 /* DELETE MR -- not allowed */));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)/$value"' null' "W/\"someetag\""' null' null' null' null' 405 /* DELETE MR -- not allowed */));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Exception e = SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' null' null' null' null' null' null' 400);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: e = SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' null' "W/\"someetag\""' null' null' null' null' 400);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNotNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' "W/\"someetag\""' null' null' null' null' null' 412));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobEtagTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' null' null' null' null' 204));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobResolveTypeNegativeTest,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobResolveTypeNegativeTest,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobResolveTypeNegativeTest,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobResolveTypeNegativeTest,The following statement contains a magic number: Exception e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' null' "image/jpeg"' "1234"' buffer' 500);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobResolveTypeNegativeTest,The following statement contains a magic number: e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' null' "image/jpeg"' "1234"' buffer' 500);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobResolveTypeNegativeTest,The following statement contains a magic number: e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' null' "image/jpeg"' "1234"' buffer' 500);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: string contentTypeP123 = DataServiceStreamProvider.GetContentType(new Photo() { ID = 123 });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                      new Dimension("Accepts"' accepts)'                      new Dimension("ContentTypes"' contentTypes)'                      new Dimension("StreamBufferSize"' new int[] { 0' -1' 4000 }));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAcceptContentTypeHeaderTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string accept = (string)table["Accepts"];                          string contentType = (string)table["ContentTypes"];                          DataServiceStreamProvider.DefaultStreamBufferSize = (int)table["StreamBufferSize"];                            using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              Exception e;                              bool fail;                                // POST Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  bool fail415 = accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*";                                  bool fail500 = contentType != contentTypeP123;                                  request.RequestHeaders["CustomRequestHeader_ItemType"] = typeof(Photo).FullName;                                  e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items"' null' null' accept' contentType' "123"' buffer' fail415 ? 415 : fail500 ? 500 : 201);                                  TestUtil.AssertExceptionExpected(e' fail415' fail500);                              }                                // GET Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == UnitTestsUtil.AtomFormat || accept == contentTypeP123);                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // GET Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = (accept == contentTypeP123 || accept == contentTypeP1 || accept == "image/*");                                  e = SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' accept' contentType' null' null' fail ? 415 : 200);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Resource                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  fail = contentType != contentTypeP1;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // MERGE Media Resource -- not supported                              //using (PhotoDataServiceContext.CreateChangeScope())                              //{                              //    fail = contentType != contentTypeP1;                              //    e = SendRequest(typeof(PhotoDataService)' request' "MERGE"' "/Items(1)/$value"' blobETag' null' accept' contentType' null' buffer' fail ? 500 : 204);                              //    TestUtil.AssertExceptionExpected(e' fail);                              //}                                string payload = null;                              if (contentType == UnitTestsUtil.AtomFormat)                              {                                  payload = GetPhotoPayload(UnitTestsUtil.AtomFormat' request.BaseUri' 1' null' null' 0' null);                              }                                // MERGE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PATCH"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // PUT Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  fail = contentType != UnitTestsUtil.AtomFormat;                                  e = SendRequest(typeof(PhotoDataService)' request' "PUT"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' payload' fail ? 415 : 204);                                  TestUtil.AssertExceptionExpected(e' fail);                              }                                // DELETE Media Link Entry                              using (PhotoDataServiceContext.CreateChangeScope())                              {                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)"' null' null' null' null' null' null' 200));                                  Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "DELETE"' "/Items(1)"' request.ResponseETag' null' accept' contentType' null' null' 204));                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobStreamQueryOptionTests,The following statement contains a magic number: Exception e = SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' null' null' null' null' 400);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobStreamQueryOptionTests,The following statement contains a magic number: Exception ex = SendRequest(typeof(PhotoDataService)' request' "POST"' requestString' null' null' null' UnitTestsUtil.AtomFormat' null' null' 400);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobStreamQueryOptionTests,The following statement contains a magic number: Exception ex = SendRequest(typeof(PhotoDataService)' request' verb' requestString' null' null' null' UnitTestsUtil.AtomFormat' null' "some content"' 400);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobStreamQueryOptionTests,The following statement contains a magic number: Exception ex = SendRequest(typeof(PhotoDataService)' request' "DELETE"' requestString' null' null' null' UnitTestsUtil.AtomFormat' null' "some content"' 400);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetStreamContentTypeTest,The following statement contains a magic number: var testCases = new[] {                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return null;                              }'                          ExpectedHTTPError = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetStreamContentType' must not return a null or empty string.$"                      }'                        new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return string.Empty;                              }'                          ExpectedHTTPError = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetStreamContentType' must not return a null or empty string.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "a";                              }'                          ExpectedHTTPError = 400'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Media type is unspecified.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "image/";                              }'                          ExpectedHTTPError = 400'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Media type requires a subtype definition.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "a/a";                              }'                          ExpectedHTTPError = 415'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Unsupported media type requested.$"                      }                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetStreamContentTypeTest,The following statement contains a magic number: var testCases = new[] {                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return null;                              }'                          ExpectedHTTPError = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetStreamContentType' must not return a null or empty string.$"                      }'                        new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return string.Empty;                              }'                          ExpectedHTTPError = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetStreamContentType' must not return a null or empty string.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "a";                              }'                          ExpectedHTTPError = 400'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Media type is unspecified.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "image/";                              }'                          ExpectedHTTPError = 400'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Media type requires a subtype definition.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "a/a";                              }'                          ExpectedHTTPError = 415'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Unsupported media type requested.$"                      }                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetStreamContentTypeTest,The following statement contains a magic number: var testCases = new[] {                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return null;                              }'                          ExpectedHTTPError = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetStreamContentType' must not return a null or empty string.$"                      }'                        new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return string.Empty;                              }'                          ExpectedHTTPError = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetStreamContentType' must not return a null or empty string.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "a";                              }'                          ExpectedHTTPError = 400'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Media type is unspecified.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "image/";                              }'                          ExpectedHTTPError = 400'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Media type requires a subtype definition.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "a/a";                              }'                          ExpectedHTTPError = 415'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Unsupported media type requested.$"                      }                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetStreamContentTypeTest,The following statement contains a magic number: var testCases = new[] {                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return null;                              }'                          ExpectedHTTPError = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetStreamContentType' must not return a null or empty string.$"                      }'                        new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return string.Empty;                              }'                          ExpectedHTTPError = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetStreamContentType' must not return a null or empty string.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "a";                              }'                          ExpectedHTTPError = 400'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Media type is unspecified.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "image/";                              }'                          ExpectedHTTPError = 400'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Media type requires a subtype definition.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "a/a";                              }'                          ExpectedHTTPError = 415'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Unsupported media type requested.$"                      }                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetStreamContentTypeTest,The following statement contains a magic number: var testCases = new[] {                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return null;                              }'                          ExpectedHTTPError = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetStreamContentType' must not return a null or empty string.$"                      }'                        new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return string.Empty;                              }'                          ExpectedHTTPError = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetStreamContentType' must not return a null or empty string.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "a";                              }'                          ExpectedHTTPError = 400'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Media type is unspecified.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "image/";                              }'                          ExpectedHTTPError = 400'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Media type requires a subtype definition.$"                      }'                      new {                          GetStreamContentTypeOverride = (Func<object' DataServiceOperationContext' string>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return "a/a";                              }'                          ExpectedHTTPError = 415'                           ExpectedExceptionType = typeof(DataServiceException)'                          ExceptionMsgRegex = "^Unsupported media type requested.$"                      }                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetReadStreamUriTest,The following statement contains a magic number: var testCases = new[] {                      new {                          GetReadStreamUriOverride = (Func<object' DataServiceOperationContext' Uri>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return new Uri("some/relative/uri"' UriKind.Relative);                              }'                          ExpectedStatusCode = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetReadStreamUri' must return an absolute Uri or null.$"                      }'                        new {                          GetReadStreamUriOverride = (Func<object' DataServiceOperationContext' Uri>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return new Uri("http://some/absolute/uri"' UriKind.Absolute);                              }'                          ExpectedStatusCode = 200'                           ExpectedExceptionType = default(Type)'                          ExceptionMsgRegex = default(string)                      }'                      new {                          GetReadStreamUriOverride = (Func<object' DataServiceOperationContext' Uri>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return null;                              }'                          ExpectedStatusCode = 200'                          ExpectedExceptionType = default(Type)'                          ExceptionMsgRegex = default(string)                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetReadStreamUriTest,The following statement contains a magic number: var testCases = new[] {                      new {                          GetReadStreamUriOverride = (Func<object' DataServiceOperationContext' Uri>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return new Uri("some/relative/uri"' UriKind.Relative);                              }'                          ExpectedStatusCode = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetReadStreamUri' must return an absolute Uri or null.$"                      }'                        new {                          GetReadStreamUriOverride = (Func<object' DataServiceOperationContext' Uri>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return new Uri("http://some/absolute/uri"' UriKind.Absolute);                              }'                          ExpectedStatusCode = 200'                           ExpectedExceptionType = default(Type)'                          ExceptionMsgRegex = default(string)                      }'                      new {                          GetReadStreamUriOverride = (Func<object' DataServiceOperationContext' Uri>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return null;                              }'                          ExpectedStatusCode = 200'                          ExpectedExceptionType = default(Type)'                          ExceptionMsgRegex = default(string)                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetReadStreamUriTest,The following statement contains a magic number: var testCases = new[] {                      new {                          GetReadStreamUriOverride = (Func<object' DataServiceOperationContext' Uri>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return new Uri("some/relative/uri"' UriKind.Relative);                              }'                          ExpectedStatusCode = 500'                           ExpectedExceptionType = typeof(InvalidOperationException)'                          ExceptionMsgRegex = "^The method 'IDataServiceStreamProvider.GetReadStreamUri' must return an absolute Uri or null.$"                      }'                        new {                          GetReadStreamUriOverride = (Func<object' DataServiceOperationContext' Uri>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return new Uri("http://some/absolute/uri"' UriKind.Absolute);                              }'                          ExpectedStatusCode = 200'                           ExpectedExceptionType = default(Type)'                          ExceptionMsgRegex = default(string)                      }'                      new {                          GetReadStreamUriOverride = (Func<object' DataServiceOperationContext' Uri>)                              delegate(object entity' DataServiceOperationContext operationContext) {                                   return null;                              }'                          ExpectedStatusCode = 200'                          ExpectedExceptionType = default(Type)'                          ExceptionMsgRegex = default(string)                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobQueryStringHeaderTest,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobQueryStringHeaderTest,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobQueryStringHeaderTest,The following statement contains a magic number: byte[] buffer = new byte[] { 1' 2' 3' 4 };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobQueryStringHeaderTest,The following statement contains a magic number: Exception e = SendRequest(typeof(PhotoDataService)' request' "POST"' "/Items?Query-String-Header-Force-Error=yes"' null' null' UnitTestsUtil.AtomFormat' UnitTestsUtil.AtomFormat' "slug"' buffer' 418);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobCallbackQueryOptionTest,The following statement contains a magic number: string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobCallbackQueryOptionTest,The following statement contains a magic number: string slug = "C" + TestUtil.Random.Next(1000' 9999).ToString();
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobCallbackQueryOptionTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "POST"' "/Customers"' null' null' format' contentType' slug' buffer' 201));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobCallbackQueryOptionTest,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers('" + expectedID + "')/$value?$callback=foo"' blobETag' null' null' null' slug' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: var TestCases = new[]                  {                      //                      // No query options                      //                      new                      {                          RequestUri = "/Customers"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                                          new                      {                          RequestUri = "/GetAllCustomersQueryable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                                              RequestUri = "/GetCustomerByIdQueryable?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                        //                      // Row Count                      //                      new                      {                          RequestUri = "/Customers/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'Customers' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$count?id=0&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdQueryable' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$count?$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$count?id=0"'                          Accept = new string[] { UnitTestsUtil.MimeTextPlain }'                          ErrorMessage = "The request URI is not valid. $count cannot be applied to the segment 'GetCustomerByIdDirectValue' since $count can only follow an entity set' a collection navigation property' a structural property of collection type' an operation returning collection type or an operation import returning collection type."'                          StatusCode = 404'                      }'                      new                      {                          RequestUri = "/Customers?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$count=true&$select=Name&$top=1000&$skip=0&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'&$expand=Orders"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Media Resources                      //                      new                      {                          RequestUri = "/Customers/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("PathParser_CannotUseValueOnCollection")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable/$value"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = ODataLibResourceUtil.GetString("RequestUriProcessor_MustBeLeafSegment"' "GetAllCustomersEnumerable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue/$value?id=0"'                          Accept = new string[] { "CustomType/CustomSubType" }'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed"' "GetCustomerByIdDirectValue")'                          StatusCode = 404'                      }'                        //                      // Projection                      //                      new                      {                          RequestUri = "/Customers?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                        //                      // Mix of query options                      //                      new                      {                          RequestUri = "/Customers?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/Customers(0)?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/Customers(0)/Address?$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersQueryable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QuerySetOptionsNotApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdQueryable/Address?id=0&$filter=City eq 'Redmond'"'                          Accept = new string[] { UnitTestsUtil.MimeApplicationXml }'                          ErrorMessage = default(string)'                          StatusCode = 200'                      }'                      new                      {                          RequestUri = "/GetAllCustomersEnumerable?$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                      new                      {                          RequestUri = "/GetCustomerByIdDirectValue?id=0&$select=Name&$top=1&$skip=1&$orderby=NameAsHtml&$filter=Address/City eq 'Redmond'"'                          Accept = UnitTestsUtil.ResponseFormats'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryNoOptionsApplicable")'                          StatusCode = 400'                      }'                  };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      var testCase = TestCases[(int)table["TestCaseIdx"]];                        foreach (string accept in testCase.Accept)                      {                          using (TestUtil.MetadataCacheCleaner())                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(OpenWebDataServiceHelper)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (CustomRowBasedContext.CreateChangeScope())                          using (CustomRowBasedOpenTypesContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              request.DataServiceType = (Type)table["DataServiceType"];                                if (request.DataServiceType == typeof(CustomRowBasedContext))                              {                                  DataServiceStreamProvider.GetStreamETagOverride = (entity' context) => "\"" + ((RowEntityTypeWithIDAsKey)entity).Properties["Name"] + "\"";                              }                              else                              {                                  DataServiceStreamProvider.GetStreamETagOverride = (entity' context) => "\"" + ((RowComplexType)entity).Properties["Name"] + "\"";                              }                                OpenWebDataServiceHelper.EnableBlobServer.Value = (bool)table["IsBlobService"];                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (type) =>                              {                                  if (type == typeof(IDataServiceStreamProvider))                                  {                                      return new DataServiceStreamProvider();                                  }                                    return null;                              };                                request.HttpMethod = "GET";                              request.RequestUriString = testCase.RequestUri;                              request.Accept = accept;                              SetCustomRequestHeaders(request);                              Exception e = TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(e' testCase.ErrorMessage != null' testCase.RequestUri.Contains("/$value") && !OpenWebDataServiceHelper.EnableBlobServer);                              if (e == null)                              {                                  if (accept == UnitTestsUtil.MimeTextPlain)                                  {                                      string responseText = request.GetResponseStreamAsText();                                      int count;                                      int.TryParse(responseText' out count);                                      if (request.DataServiceType == typeof(CustomRowBasedContext))                                      {                                          Assert.AreEqual(CustomRowBasedContext.customers.Count' count);                                      }                                      else                                      {                                          Assert.AreEqual(CustomRowBasedOpenTypesContext.customers.Count' count);                                      }                                  }                                  else                                  {                                      List<string> xpaths = new List<string>();                                      if (request.RequestUriString.Contains("$count=true"))                                      {                                          int count;                                          if (request.DataServiceType == typeof(CustomRowBasedOpenTypesContext))                                          {                                              count = CustomRowBasedOpenTypesContext.customers.Count;                                          }                                          else                                          {                                              count = CustomRowBasedContext.customers.Count;                                          }                                            xpaths.Add("boolean(/atom:feed[adsm:count=" + count + "])");                                      }                                        // verify entity (or MLE) header etag                                      if (request.ResponseETag != null && !request.RequestUriString.Contains("/$value"))                                      {                                          string expectedETag;                                          if (request.DataServiceType == typeof(CustomRowBasedContext))                                          {                                              expectedETag = CustomRowBasedContext.customers.Single(c => c.ID == 0).Properties["GuidValue"].ToString();                                          }                                          else                                          {                                              expectedETag = CustomRowBasedOpenTypesContext.customers.Single(c => (int)c.Properties["ID"] == 0).Properties["GuidValue"].ToString();                                          }                                            Assert.AreEqual("W/\"" + expectedETag + "\""' request.ResponseETag);                                      }                                        // verify entity (or MLE) etag in payload                                      if (request.ResponseETag != null)                                      {                                          // for single entry                                          string etag = request.ResponseETag.Substring(8' request.ResponseETag.Length - 8 - 2);                                          xpaths.Add("boolean(/atom:entry[contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' '" + etag + "')])");                                      }                                      else                                      {                                          // for feed                                          //TODO: Server not generating eTag correctly                                          //xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(@adsm:etag)])");                                          if (OpenWebDataServiceHelper.EnableBlobServer)                                          {                                              xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' adsm:properties/ads:GuidValue))])");                                          }                                          else                                          {                                              xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' atom:content/adsm:properties/ads:GuidValue))])");                                          }                                      }                                        // verify MR header etag                                      if (testCase.RequestUri.Contains("/$value"))                                      {                                          Assert.IsNotNull(request.ResponseETag);                                          Assert.AreEqual("\"Customer 0\""' request.ResponseETag);                                      }                                        // verify MR etag in payload                                      if (OpenWebDataServiceHelper.EnableBlobServer)                                      {                                          xpaths.Add("not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])");                                          xpaths.Add("not(//atom:entry/atom:link[@rel='edit-media' and not(contains(../adsm:properties/ads:Name' substring-before(substring-after(@adsm:etag' '\"')' '\"')))])");                                      }                                        if (accept == UnitTestsUtil.AtomFormat)                                      {                                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                          UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' xpaths.ToArray());                                      }                                  }                              }                              else                              {                                  if (testCase.RequestUri.Contains("/$value") && !OpenWebDataServiceHelper.EnableBlobServer && testCase.StatusCode == 200)                                  {                                      string errMsg = DataServicesResourceUtil.GetString("BadRequest_InvalidUriForMediaResource"' new Uri(new Uri(request.BaseUri)' request.RequestUriString).AbsoluteUri);                                      UnitTestsUtil.VerifyTestException(e' 400' errMsg);                                  }                                  else                                  {                                      UnitTestsUtil.VerifyTestException(e' testCase.StatusCode' testCase.ErrorMessage);                                  }                              }                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      var testCase = TestCases[(int)table["TestCaseIdx"]];                        foreach (string accept in testCase.Accept)                      {                          using (TestUtil.MetadataCacheCleaner())                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(OpenWebDataServiceHelper)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (CustomRowBasedContext.CreateChangeScope())                          using (CustomRowBasedOpenTypesContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              request.DataServiceType = (Type)table["DataServiceType"];                                if (request.DataServiceType == typeof(CustomRowBasedContext))                              {                                  DataServiceStreamProvider.GetStreamETagOverride = (entity' context) => "\"" + ((RowEntityTypeWithIDAsKey)entity).Properties["Name"] + "\"";                              }                              else                              {                                  DataServiceStreamProvider.GetStreamETagOverride = (entity' context) => "\"" + ((RowComplexType)entity).Properties["Name"] + "\"";                              }                                OpenWebDataServiceHelper.EnableBlobServer.Value = (bool)table["IsBlobService"];                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (type) =>                              {                                  if (type == typeof(IDataServiceStreamProvider))                                  {                                      return new DataServiceStreamProvider();                                  }                                    return null;                              };                                request.HttpMethod = "GET";                              request.RequestUriString = testCase.RequestUri;                              request.Accept = accept;                              SetCustomRequestHeaders(request);                              Exception e = TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(e' testCase.ErrorMessage != null' testCase.RequestUri.Contains("/$value") && !OpenWebDataServiceHelper.EnableBlobServer);                              if (e == null)                              {                                  if (accept == UnitTestsUtil.MimeTextPlain)                                  {                                      string responseText = request.GetResponseStreamAsText();                                      int count;                                      int.TryParse(responseText' out count);                                      if (request.DataServiceType == typeof(CustomRowBasedContext))                                      {                                          Assert.AreEqual(CustomRowBasedContext.customers.Count' count);                                      }                                      else                                      {                                          Assert.AreEqual(CustomRowBasedOpenTypesContext.customers.Count' count);                                      }                                  }                                  else                                  {                                      List<string> xpaths = new List<string>();                                      if (request.RequestUriString.Contains("$count=true"))                                      {                                          int count;                                          if (request.DataServiceType == typeof(CustomRowBasedOpenTypesContext))                                          {                                              count = CustomRowBasedOpenTypesContext.customers.Count;                                          }                                          else                                          {                                              count = CustomRowBasedContext.customers.Count;                                          }                                            xpaths.Add("boolean(/atom:feed[adsm:count=" + count + "])");                                      }                                        // verify entity (or MLE) header etag                                      if (request.ResponseETag != null && !request.RequestUriString.Contains("/$value"))                                      {                                          string expectedETag;                                          if (request.DataServiceType == typeof(CustomRowBasedContext))                                          {                                              expectedETag = CustomRowBasedContext.customers.Single(c => c.ID == 0).Properties["GuidValue"].ToString();                                          }                                          else                                          {                                              expectedETag = CustomRowBasedOpenTypesContext.customers.Single(c => (int)c.Properties["ID"] == 0).Properties["GuidValue"].ToString();                                          }                                            Assert.AreEqual("W/\"" + expectedETag + "\""' request.ResponseETag);                                      }                                        // verify entity (or MLE) etag in payload                                      if (request.ResponseETag != null)                                      {                                          // for single entry                                          string etag = request.ResponseETag.Substring(8' request.ResponseETag.Length - 8 - 2);                                          xpaths.Add("boolean(/atom:entry[contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' '" + etag + "')])");                                      }                                      else                                      {                                          // for feed                                          //TODO: Server not generating eTag correctly                                          //xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(@adsm:etag)])");                                          if (OpenWebDataServiceHelper.EnableBlobServer)                                          {                                              xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' adsm:properties/ads:GuidValue))])");                                          }                                          else                                          {                                              xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' atom:content/adsm:properties/ads:GuidValue))])");                                          }                                      }                                        // verify MR header etag                                      if (testCase.RequestUri.Contains("/$value"))                                      {                                          Assert.IsNotNull(request.ResponseETag);                                          Assert.AreEqual("\"Customer 0\""' request.ResponseETag);                                      }                                        // verify MR etag in payload                                      if (OpenWebDataServiceHelper.EnableBlobServer)                                      {                                          xpaths.Add("not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])");                                          xpaths.Add("not(//atom:entry/atom:link[@rel='edit-media' and not(contains(../adsm:properties/ads:Name' substring-before(substring-after(@adsm:etag' '\"')' '\"')))])");                                      }                                        if (accept == UnitTestsUtil.AtomFormat)                                      {                                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                          UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' xpaths.ToArray());                                      }                                  }                              }                              else                              {                                  if (testCase.RequestUri.Contains("/$value") && !OpenWebDataServiceHelper.EnableBlobServer && testCase.StatusCode == 200)                                  {                                      string errMsg = DataServicesResourceUtil.GetString("BadRequest_InvalidUriForMediaResource"' new Uri(new Uri(request.BaseUri)' request.RequestUriString).AbsoluteUri);                                      UnitTestsUtil.VerifyTestException(e' 400' errMsg);                                  }                                  else                                  {                                      UnitTestsUtil.VerifyTestException(e' testCase.StatusCode' testCase.ErrorMessage);                                  }                              }                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      var testCase = TestCases[(int)table["TestCaseIdx"]];                        foreach (string accept in testCase.Accept)                      {                          using (TestUtil.MetadataCacheCleaner())                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(OpenWebDataServiceHelper)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (CustomRowBasedContext.CreateChangeScope())                          using (CustomRowBasedOpenTypesContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              request.DataServiceType = (Type)table["DataServiceType"];                                if (request.DataServiceType == typeof(CustomRowBasedContext))                              {                                  DataServiceStreamProvider.GetStreamETagOverride = (entity' context) => "\"" + ((RowEntityTypeWithIDAsKey)entity).Properties["Name"] + "\"";                              }                              else                              {                                  DataServiceStreamProvider.GetStreamETagOverride = (entity' context) => "\"" + ((RowComplexType)entity).Properties["Name"] + "\"";                              }                                OpenWebDataServiceHelper.EnableBlobServer.Value = (bool)table["IsBlobService"];                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (type) =>                              {                                  if (type == typeof(IDataServiceStreamProvider))                                  {                                      return new DataServiceStreamProvider();                                  }                                    return null;                              };                                request.HttpMethod = "GET";                              request.RequestUriString = testCase.RequestUri;                              request.Accept = accept;                              SetCustomRequestHeaders(request);                              Exception e = TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(e' testCase.ErrorMessage != null' testCase.RequestUri.Contains("/$value") && !OpenWebDataServiceHelper.EnableBlobServer);                              if (e == null)                              {                                  if (accept == UnitTestsUtil.MimeTextPlain)                                  {                                      string responseText = request.GetResponseStreamAsText();                                      int count;                                      int.TryParse(responseText' out count);                                      if (request.DataServiceType == typeof(CustomRowBasedContext))                                      {                                          Assert.AreEqual(CustomRowBasedContext.customers.Count' count);                                      }                                      else                                      {                                          Assert.AreEqual(CustomRowBasedOpenTypesContext.customers.Count' count);                                      }                                  }                                  else                                  {                                      List<string> xpaths = new List<string>();                                      if (request.RequestUriString.Contains("$count=true"))                                      {                                          int count;                                          if (request.DataServiceType == typeof(CustomRowBasedOpenTypesContext))                                          {                                              count = CustomRowBasedOpenTypesContext.customers.Count;                                          }                                          else                                          {                                              count = CustomRowBasedContext.customers.Count;                                          }                                            xpaths.Add("boolean(/atom:feed[adsm:count=" + count + "])");                                      }                                        // verify entity (or MLE) header etag                                      if (request.ResponseETag != null && !request.RequestUriString.Contains("/$value"))                                      {                                          string expectedETag;                                          if (request.DataServiceType == typeof(CustomRowBasedContext))                                          {                                              expectedETag = CustomRowBasedContext.customers.Single(c => c.ID == 0).Properties["GuidValue"].ToString();                                          }                                          else                                          {                                              expectedETag = CustomRowBasedOpenTypesContext.customers.Single(c => (int)c.Properties["ID"] == 0).Properties["GuidValue"].ToString();                                          }                                            Assert.AreEqual("W/\"" + expectedETag + "\""' request.ResponseETag);                                      }                                        // verify entity (or MLE) etag in payload                                      if (request.ResponseETag != null)                                      {                                          // for single entry                                          string etag = request.ResponseETag.Substring(8' request.ResponseETag.Length - 8 - 2);                                          xpaths.Add("boolean(/atom:entry[contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' '" + etag + "')])");                                      }                                      else                                      {                                          // for feed                                          //TODO: Server not generating eTag correctly                                          //xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(@adsm:etag)])");                                          if (OpenWebDataServiceHelper.EnableBlobServer)                                          {                                              xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' adsm:properties/ads:GuidValue))])");                                          }                                          else                                          {                                              xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' atom:content/adsm:properties/ads:GuidValue))])");                                          }                                      }                                        // verify MR header etag                                      if (testCase.RequestUri.Contains("/$value"))                                      {                                          Assert.IsNotNull(request.ResponseETag);                                          Assert.AreEqual("\"Customer 0\""' request.ResponseETag);                                      }                                        // verify MR etag in payload                                      if (OpenWebDataServiceHelper.EnableBlobServer)                                      {                                          xpaths.Add("not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])");                                          xpaths.Add("not(//atom:entry/atom:link[@rel='edit-media' and not(contains(../adsm:properties/ads:Name' substring-before(substring-after(@adsm:etag' '\"')' '\"')))])");                                      }                                        if (accept == UnitTestsUtil.AtomFormat)                                      {                                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                          UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' xpaths.ToArray());                                      }                                  }                              }                              else                              {                                  if (testCase.RequestUri.Contains("/$value") && !OpenWebDataServiceHelper.EnableBlobServer && testCase.StatusCode == 200)                                  {                                      string errMsg = DataServicesResourceUtil.GetString("BadRequest_InvalidUriForMediaResource"' new Uri(new Uri(request.BaseUri)' request.RequestUriString).AbsoluteUri);                                      UnitTestsUtil.VerifyTestException(e' 400' errMsg);                                  }                                  else                                  {                                      UnitTestsUtil.VerifyTestException(e' testCase.StatusCode' testCase.ErrorMessage);                                  }                              }                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      var testCase = TestCases[(int)table["TestCaseIdx"]];                        foreach (string accept in testCase.Accept)                      {                          using (TestUtil.MetadataCacheCleaner())                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(OpenWebDataServiceHelper)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (CustomRowBasedContext.CreateChangeScope())                          using (CustomRowBasedOpenTypesContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              request.DataServiceType = (Type)table["DataServiceType"];                                if (request.DataServiceType == typeof(CustomRowBasedContext))                              {                                  DataServiceStreamProvider.GetStreamETagOverride = (entity' context) => "\"" + ((RowEntityTypeWithIDAsKey)entity).Properties["Name"] + "\"";                              }                              else                              {                                  DataServiceStreamProvider.GetStreamETagOverride = (entity' context) => "\"" + ((RowComplexType)entity).Properties["Name"] + "\"";                              }                                OpenWebDataServiceHelper.EnableBlobServer.Value = (bool)table["IsBlobService"];                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (type) =>                              {                                  if (type == typeof(IDataServiceStreamProvider))                                  {                                      return new DataServiceStreamProvider();                                  }                                    return null;                              };                                request.HttpMethod = "GET";                              request.RequestUriString = testCase.RequestUri;                              request.Accept = accept;                              SetCustomRequestHeaders(request);                              Exception e = TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(e' testCase.ErrorMessage != null' testCase.RequestUri.Contains("/$value") && !OpenWebDataServiceHelper.EnableBlobServer);                              if (e == null)                              {                                  if (accept == UnitTestsUtil.MimeTextPlain)                                  {                                      string responseText = request.GetResponseStreamAsText();                                      int count;                                      int.TryParse(responseText' out count);                                      if (request.DataServiceType == typeof(CustomRowBasedContext))                                      {                                          Assert.AreEqual(CustomRowBasedContext.customers.Count' count);                                      }                                      else                                      {                                          Assert.AreEqual(CustomRowBasedOpenTypesContext.customers.Count' count);                                      }                                  }                                  else                                  {                                      List<string> xpaths = new List<string>();                                      if (request.RequestUriString.Contains("$count=true"))                                      {                                          int count;                                          if (request.DataServiceType == typeof(CustomRowBasedOpenTypesContext))                                          {                                              count = CustomRowBasedOpenTypesContext.customers.Count;                                          }                                          else                                          {                                              count = CustomRowBasedContext.customers.Count;                                          }                                            xpaths.Add("boolean(/atom:feed[adsm:count=" + count + "])");                                      }                                        // verify entity (or MLE) header etag                                      if (request.ResponseETag != null && !request.RequestUriString.Contains("/$value"))                                      {                                          string expectedETag;                                          if (request.DataServiceType == typeof(CustomRowBasedContext))                                          {                                              expectedETag = CustomRowBasedContext.customers.Single(c => c.ID == 0).Properties["GuidValue"].ToString();                                          }                                          else                                          {                                              expectedETag = CustomRowBasedOpenTypesContext.customers.Single(c => (int)c.Properties["ID"] == 0).Properties["GuidValue"].ToString();                                          }                                            Assert.AreEqual("W/\"" + expectedETag + "\""' request.ResponseETag);                                      }                                        // verify entity (or MLE) etag in payload                                      if (request.ResponseETag != null)                                      {                                          // for single entry                                          string etag = request.ResponseETag.Substring(8' request.ResponseETag.Length - 8 - 2);                                          xpaths.Add("boolean(/atom:entry[contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' '" + etag + "')])");                                      }                                      else                                      {                                          // for feed                                          //TODO: Server not generating eTag correctly                                          //xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(@adsm:etag)])");                                          if (OpenWebDataServiceHelper.EnableBlobServer)                                          {                                              xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' adsm:properties/ads:GuidValue))])");                                          }                                          else                                          {                                              xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' atom:content/adsm:properties/ads:GuidValue))])");                                          }                                      }                                        // verify MR header etag                                      if (testCase.RequestUri.Contains("/$value"))                                      {                                          Assert.IsNotNull(request.ResponseETag);                                          Assert.AreEqual("\"Customer 0\""' request.ResponseETag);                                      }                                        // verify MR etag in payload                                      if (OpenWebDataServiceHelper.EnableBlobServer)                                      {                                          xpaths.Add("not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])");                                          xpaths.Add("not(//atom:entry/atom:link[@rel='edit-media' and not(contains(../adsm:properties/ads:Name' substring-before(substring-after(@adsm:etag' '\"')' '\"')))])");                                      }                                        if (accept == UnitTestsUtil.AtomFormat)                                      {                                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                          UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' xpaths.ToArray());                                      }                                  }                              }                              else                              {                                  if (testCase.RequestUri.Contains("/$value") && !OpenWebDataServiceHelper.EnableBlobServer && testCase.StatusCode == 200)                                  {                                      string errMsg = DataServicesResourceUtil.GetString("BadRequest_InvalidUriForMediaResource"' new Uri(new Uri(request.BaseUri)' request.RequestUriString).AbsoluteUri);                                      UnitTestsUtil.VerifyTestException(e' 400' errMsg);                                  }                                  else                                  {                                      UnitTestsUtil.VerifyTestException(e' testCase.StatusCode' testCase.ErrorMessage);                                  }                              }                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,Blob_ServiceOp_Concurrency_RowCount_QueryOptions,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      var testCase = TestCases[(int)table["TestCaseIdx"]];                        foreach (string accept in testCase.Accept)                      {                          using (TestUtil.MetadataCacheCleaner())                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(OpenWebDataServiceHelper)))                          using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                          using (CustomRowBasedContext.CreateChangeScope())                          using (CustomRowBasedOpenTypesContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForInProcess())                          {                              request.DataServiceType = (Type)table["DataServiceType"];                                if (request.DataServiceType == typeof(CustomRowBasedContext))                              {                                  DataServiceStreamProvider.GetStreamETagOverride = (entity' context) => "\"" + ((RowEntityTypeWithIDAsKey)entity).Properties["Name"] + "\"";                              }                              else                              {                                  DataServiceStreamProvider.GetStreamETagOverride = (entity' context) => "\"" + ((RowComplexType)entity).Properties["Name"] + "\"";                              }                                OpenWebDataServiceHelper.EnableBlobServer.Value = (bool)table["IsBlobService"];                              OpenWebDataServiceHelper.GetServiceCustomizer.Value = (type) =>                              {                                  if (type == typeof(IDataServiceStreamProvider))                                  {                                      return new DataServiceStreamProvider();                                  }                                    return null;                              };                                request.HttpMethod = "GET";                              request.RequestUriString = testCase.RequestUri;                              request.Accept = accept;                              SetCustomRequestHeaders(request);                              Exception e = TestUtil.RunCatching(request.SendRequest);                              TestUtil.AssertExceptionExpected(e' testCase.ErrorMessage != null' testCase.RequestUri.Contains("/$value") && !OpenWebDataServiceHelper.EnableBlobServer);                              if (e == null)                              {                                  if (accept == UnitTestsUtil.MimeTextPlain)                                  {                                      string responseText = request.GetResponseStreamAsText();                                      int count;                                      int.TryParse(responseText' out count);                                      if (request.DataServiceType == typeof(CustomRowBasedContext))                                      {                                          Assert.AreEqual(CustomRowBasedContext.customers.Count' count);                                      }                                      else                                      {                                          Assert.AreEqual(CustomRowBasedOpenTypesContext.customers.Count' count);                                      }                                  }                                  else                                  {                                      List<string> xpaths = new List<string>();                                      if (request.RequestUriString.Contains("$count=true"))                                      {                                          int count;                                          if (request.DataServiceType == typeof(CustomRowBasedOpenTypesContext))                                          {                                              count = CustomRowBasedOpenTypesContext.customers.Count;                                          }                                          else                                          {                                              count = CustomRowBasedContext.customers.Count;                                          }                                            xpaths.Add("boolean(/atom:feed[adsm:count=" + count + "])");                                      }                                        // verify entity (or MLE) header etag                                      if (request.ResponseETag != null && !request.RequestUriString.Contains("/$value"))                                      {                                          string expectedETag;                                          if (request.DataServiceType == typeof(CustomRowBasedContext))                                          {                                              expectedETag = CustomRowBasedContext.customers.Single(c => c.ID == 0).Properties["GuidValue"].ToString();                                          }                                          else                                          {                                              expectedETag = CustomRowBasedOpenTypesContext.customers.Single(c => (int)c.Properties["ID"] == 0).Properties["GuidValue"].ToString();                                          }                                            Assert.AreEqual("W/\"" + expectedETag + "\""' request.ResponseETag);                                      }                                        // verify entity (or MLE) etag in payload                                      if (request.ResponseETag != null)                                      {                                          // for single entry                                          string etag = request.ResponseETag.Substring(8' request.ResponseETag.Length - 8 - 2);                                          xpaths.Add("boolean(/atom:entry[contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' '" + etag + "')])");                                      }                                      else                                      {                                          // for feed                                          //TODO: Server not generating eTag correctly                                          //xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(@adsm:etag)])");                                          if (OpenWebDataServiceHelper.EnableBlobServer)                                          {                                              xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' adsm:properties/ads:GuidValue))])");                                          }                                          else                                          {                                              xpaths.Add("not(//atom:entry[atom:link/@rel='edit' and not(contains(substring-before(substring-after(@adsm:etag' 'W/\"')' '\"')' atom:content/adsm:properties/ads:GuidValue))])");                                          }                                      }                                        // verify MR header etag                                      if (testCase.RequestUri.Contains("/$value"))                                      {                                          Assert.IsNotNull(request.ResponseETag);                                          Assert.AreEqual("\"Customer 0\""' request.ResponseETag);                                      }                                        // verify MR etag in payload                                      if (OpenWebDataServiceHelper.EnableBlobServer)                                      {                                          xpaths.Add("not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])");                                          xpaths.Add("not(//atom:entry/atom:link[@rel='edit-media' and not(contains(../adsm:properties/ads:Name' substring-before(substring-after(@adsm:etag' '\"')' '\"')))])");                                      }                                        if (accept == UnitTestsUtil.AtomFormat)                                      {                                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                          UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' xpaths.ToArray());                                      }                                  }                              }                              else                              {                                  if (testCase.RequestUri.Contains("/$value") && !OpenWebDataServiceHelper.EnableBlobServer && testCase.StatusCode == 200)                                  {                                      string errMsg = DataServicesResourceUtil.GetString("BadRequest_InvalidUriForMediaResource"' new Uri(new Uri(request.BaseUri)' request.RequestUriString).AbsoluteUri);                                      UnitTestsUtil.VerifyTestException(e' 400' errMsg);                                  }                                  else                                  {                                      UnitTestsUtil.VerifyTestException(e' testCase.StatusCode' testCase.ErrorMessage);                                  }                              }                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(InterceptorChecker)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      using (PhotoDataServiceContext.CreateChangeScope())                      {                          request.RequestMaxVersion = "4.0;";                          request.RequestVersion = "4.0;";                            //                          // Make sure when there's no projected properties' we omit the <m:properties /> node                          // This should hold true for both MLE and non-MLE entities.                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                            //                          // Project 1 property                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name']");                            //                          // Project 2 primitive properties                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Name'Description"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/adsm:properties/ads:Description"'                              "/atom:entry/atom:content/@src");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties/*[local-name()!='Name' and local-name()!='Description']");                            //                          // Explicitly project all properties                          //                          foreach (string queryString in new string[] {                               "/Items(1)?$select=*'Icon"'                               "/Items(1)?$select=Name'*"'                               "/Items(1)?$select=*'*"})                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties[count(*)=5]"'                                  "/atom:entry/atom:content/@src");                          }                            // No QueryInterceptor for Service Operation                          BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(0);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/GetPhoto"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/adsm:properties[count(*)=5]"'                              "/atom:entry/atom:content/@src");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                           // Implicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                           // Explicitly project all properties of the expanded entity                          //                           Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(0)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items(1)?$select=Icon&$expand=Icon($select=*)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties");                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                            //                          // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                           //                          foreach (string queryString in new string[] { "/Items(1)?$select=Name'Icon&$expand=Icon"' "/Items(1)?$select=Name'Icon&$expand=Icon($select=*)" })                          {                              Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                              atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              UnitTestsUtil.VerifyXPathExists(                                  atomResponse'                                  "/atom:entry/adsm:properties/ads:Name"'                                  "/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                                  "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties[count(*)=5]");                              UnitTestsUtil.VerifyXPathDoesntExist(                                  atomResponse'                                  "/atom:entry/adsm:properties/*[local-name()!='Name']");                          }                            //                          // Project 1 property in the expanded MLE                          //                            Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name'Items&$expand=Items($select=Name)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // Project nav property in the expanded MLE                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Items($select=ParentFolder)"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties");                            //                          // V1 expand                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Items"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties[count(*)=3])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=5])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties[count(*)=6])=1]"'                              "/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                            //                          // multilevel expand and project' only project 1 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$select=Name&$expand=Icon($select=Name;$expand=ParentFolder($select=Name;$expand=Items($select=Name)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/ads:Name"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/adsm:properties/ads:Name)=2]"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/adsm:properties/ads:Name)=1]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              "/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='Name']");                            //                          // multilevel expand and project' only project 0 property per level                          //                          Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Folders(0)?$expand=Icon($expand=ParentFolder($expand=Items($select=Icon)))"' null' null' accept' null' null' null' 200));                          atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                          UnitTestsUtil.VerifyXPathExists(                              atomResponse'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:content/@src"'                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed[count(atom:entry/atom:content/@src)=2]");                          UnitTestsUtil.VerifyXPathDoesntExist(                              atomResponse'                              "/atom:entry/atom:content/@src"'                              "/atom:entry/adsm:properties"'                              //"/atom:entry/atom:content/adsm:properties"                              //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/adsm:properties");                              "/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/@src");                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:content/adsm:properties"'                          //"/atom:entry/atom:link[@title='Icon']/adsm:inline/atom:entry/atom:link[@title='ParentFolder']/adsm:inline/atom:entry/atom:link[@title='Items']/adsm:inline/atom:feed/atom:entry/adsm:properties");                            BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(5);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTestsClientQueries_EFProvider,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(2);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTestsClientQueries_EFProvider,The following statement contains a magic number: BLOBSupportTest.ValidateInterceptorOverride = () =>                          {                              InterceptorChecker.ValidateQueryInterceptor(4);                              InterceptorChecker.ValidateChangeInterceptor(0);                          };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTestsClientQueries_EFProvider,The following statement contains a magic number: var q2 = from e in ctx.CreateQuery<northwindClient.Order_Details>("Order_Details")                                   where e.OrderID == 10285 && e.ProductID == 1                                   select new                                   {                                       Quantity = e.Quantity'                                       CompanyName = e.Orders.Customers.CompanyName'                                       ShipCities = from o in e.Orders.Customers.Orders                                                    select o.ShipCity                                   };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTestsClientQueries_EFProvider,The following statement contains a magic number: Assert.AreEqual(45' anonEntity.Quantity);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_IDSP,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BlobDataServicePipelineHandlers)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(OpenWebDataServiceHelper)))                      using (CustomRowBasedContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          OpenWebDataServiceHelper.EnableBlobServer.Value = true;                            // Customers are MLEs' Orders are non-MLEs                          var testCases = new[] {                              // Make sure when there's no projected properties' we omit the <m:properties /> node                              // This should hold true for both MLE and non-MLE entities.                              new {                                  QueryStrings = new string[] {                                      "/Customers(0)?$select=Orders"'                                      "/GetCustomerByIdQueryable?id=0&$select=Orders"'                                      "/Orders(0)?$select=OrderDetails"'                                      "/GetOrderByIdQueryable?id=0&$select=OrderDetails"'                                  }'                                  XPathExprs = new string[] {                                      // Orders(0) is not MLE and must not have @src while Customers(0) must have @src because it is an MLE                                       "not(/atom:entry[contains(atom:id' 'Orders(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src)"'                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/atom:content/adsm:properties)"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }                              }'                              // Project 1 property                              new {                                  QueryStrings = new string[] {                                      "/Customers(0)?$select=Name"'                                      "/GetCustomerByIdQueryable?id=0&$select=Name"'                                  }'                                  XPathExprs = new string[] {                                      "boolean(/atom:entry/adsm:properties/ads:Name)"'                                      "boolean(/atom:entry/atom:content/@src)"'                                      "not(/atom:entry/adsm:properties/*[local-name()!='Name'])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // Project 2 primitive properties                              new {                                  QueryStrings = new string[] {                                      "/Customers(0)?$select=Name'Address"'                                      "/GetCustomerByIdQueryable?id=0&$select=Name'Address"'                                  }'                                  XPathExprs = new string[] {                                      "boolean(/atom:entry/adsm:properties/ads:Name)"'                                      "boolean(/atom:entry/adsm:properties/ads:Address)"'                                      "boolean(/atom:entry/atom:content/@src)"'                                      "count(/atom:entry/adsm:properties/*) = 2"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // Explicitly project all properties                              new {                                  QueryStrings = new string[] {                                      "/Customers(0)?$select=*'Orders"'                                       "/Customers(0)?$select=Address'*"'                                       "/Customers(0)?$select=*'*"'                                      "/Customers?$filter=ID eq 0&$select=*"'                                                                            "/GetCustomerByIdQueryable?id=0&$select=*'Orders"'                                       "/GetCustomerByIdQueryable?id=0&$select=Address'*"'                                       "/GetCustomerByIdQueryable?id=0&$select=*'*"'                                      "/GetCustomerByIdQueryable?id=0&$filter=ID eq 0&$select=*"'                                  }'                                  XPathExprs = new string[] {                                      "not((/atom:entry | /atom:feed/atom:entry)/atom:content/adsm:properties)"'                                      "count((/atom:entry | /atom:feed/atom:entry)/adsm:properties/*) = 5"'                                      "boolean((/atom:entry | /atom:feed/atom:entry)/atom:content/@src)"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // Implicitly/Explicitly project all properties of the expanded entity                              new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$select=Customer&$expand=Customer"'  /*Implicit projection */                                      "/Orders(0)?$select=Customer&$expand=Customer($select=*)"' /*Explicit projection */                                      "/GetOrderByIdQueryable?id=0&$select=Customer&$expand=Customer"'  /*Implicit projection */                                      "/GetOrderByIdQueryable?id=0&$select=Customer&$expand=Customer($select=*)" /*Explicit projection */                                    }'                                  XPathExprs = new string[] {                                      "not(/atom:entry/atom:content/@src)"'                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/atom:content/adsm:properties)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/@src)"'                                      "count(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties/*) = 5"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                               new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$select=ID'Customer&$expand=Customer"'                                      "/Orders(0)?$select=ID'Customer&$expand=Customer($select=*)"'                                      "/GetOrderByIdQueryable?id=0&$select=ID'Customer&$expand=Customer"'                                      "/GetOrderByIdQueryable?id=0&$select=ID'Customer&$expand=Customer($select=*)"'                                  }'                                  XPathExprs = new string[] {                                      "boolean(/atom:entry/atom:content/adsm:properties/ads:ID)"'                                      "count(/atom:entry/atom:content/adsm:properties/*) = 1"'                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/atom:content/@src)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/@src)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry[count(adsm:properties/*) != 5])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // Project 1 property in the expanded MLE                              new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$select=ID'Customer&$expand=Customer($select=Name)"'                                      "/GetOrderByIdQueryable?id=0&$select=ID'Customer&$expand=Customer($select=Name)"                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/adsm:content/@src)"'                                      "boolean(/atom:entry/atom:content/adsm:properties/ads:ID)"'                                      "count(/atom:entry/atom:content/adsm:properties/*) = 1"'                                                "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content[not(@src)])"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[not(ads:Name)])"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[count(*) != 1])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // Project nav property in the expanded MLE                              new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$select=ID'Customer&$expand=Customer($expand=Orders)"'                                      "/GetOrderByIdQueryable?id=0&$select=ID'Customer&$expand=Customer($expand=Orders)"}'                                  XPathExprs = new string[] {                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/adsm:content/@src)"'                                      "boolean(/atom:entry/atom:content/adsm:properties/ads:ID)"'                                      "count(/atom:entry/atom:content/adsm:properties/*) = 1"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders'])"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:content[not(@src)])"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties/*)"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // V1 expand                              new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$expand=Customer"'                                      "/GetOrderByIdQueryable?id=0&$expand=Customer"                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/adsm:content/@src)"'                                      "count(/atom:entry/atom:content/adsm:properties/*) = 3"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content[not(@src)])"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[count(*) != 5])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // multilevel expand and project' only project 1 property per level                              new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$select=ID&$expand=Customer($select=Name)'Customer($expand=Orders($select=ID))'Customer($expand=Orders($expand=OrderDetails($select=Quantity)))"'                                      "/GetOrderByIdQueryable?id=0&$select=ID&$expand=Customer($select=Name)'Customer($expand=Orders($select=ID))'Customer($expand=Orders($expand=OrderDetails($select=Quantity)))"'                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/adsm:content/@src)"'                                      "boolean(/atom:entry/atom:content/adsm:properties/ads:ID)"'                                      "count(/atom:entry/atom:content/adsm:properties/*) = 1"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content[not(@src)])"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[not(ads:Name)])"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[count(*) != 1])"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/adsm:properties)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[not(ads:ID)])"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[count(*) != 1])"'                                        "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='OrderDetails']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='OrderDetails']/adsm:inline/atom:feed/atom:entry/adsm:properties)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='OrderDetails']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties/ads:Quantity)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='OrderDetails']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[count(*) != 1])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // multilevel expand and project' only project 0 property per level                              new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$expand=Customer($expand=Orders($expand=OrderDetails))"'                                      "/GetOrderByIdQueryable?id=0&$expand=Customer($expand=Orders($expand=OrderDetails))"                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/adsm:content/@src)"'                                      "count(/atom:entry/atom:content/adsm:properties/*) != 0"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content)"'                                      "boolean    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content[not(@src)])"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/adsm:properties)"'                                      "boolean    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/*)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='OrderDetails'])"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='OrderDetails']/adsm:inline/atom:entry/atom:content/*)"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              new {                                  QueryStrings = new string[] {                                      "/Customers?$top=1&$select=Name&$skip=1"'                                      "/GetAllCustomersQueryable?$top=1&$select=Name&$skip=1"'                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:feed/atom:entry/atom:content/adsm:properties)"'                                      "count(/atom:feed/atom:entry/atom:content[@src]) = 1"'                                      "count(/atom:feed/atom:entry/adsm:properties/ads:Name) = 1"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              new {                                  QueryStrings = new string[] {                                      "/Customers?$select=Name'Address&$filter=ID eq 0"'                                      "/GetAllCustomersQueryable?$select=Name'Address&$filter=ID eq 0"'                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:feed/atom:entry/atom:content/adsm:properties)"'                                      "count(/atom:feed/atom:entry/atom:content[@src]) = 1"'                                      "count(/atom:feed/atom:entry/adsm:properties/*) = 2"'                                      "boolean(/atom:feed/atom:entry/adsm:properties/ads:Name)"'                                      "boolean(/atom:feed/atom:entry/adsm:properties/ads:Address)"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              new {                                  QueryStrings = new string[] {                                      "/Orders?$filter=Customer/ID eq 0&$select=ID"'                                      "/GetAllOrdersQueryable?$filter=Customer/ID eq 0&$select=ID"                                  }'                                  XPathExprs = new string[] {                                      "not    (/atom:feed/atom:entry/atom:content/@src)"'                                      "not    (/atom:feed/atom:entry/adsm:properties)"'                                      "boolean(/atom:feed/atom:entry/atom:content/adsm:properties/ads:ID)"'                                      "not    (/atom:feed/atom:entry/atom:content/adsm:properties[count(*) != 1])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                          };                            DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) =>                          {                                string entityName = entity.GetType().Name;                              string entityId = entity is NorthwindModel.Customers ? "'" + ((NorthwindModel.Customers)entity).CustomerID + "'" :                                                entity is NorthwindModel.Orders ? ((NorthwindModel.Orders)entity).OrderID.ToString() :                                                string.Empty;                                return string.Format("W/\"{0}({1})\""' entityName' entityId);                          };                            OpenWebDataServiceHelper.ProcessingRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessingRequestHandler);                          OpenWebDataServiceHelper.ProcessingChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessingChangesetHandler);                          OpenWebDataServiceHelper.ProcessedChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessedChangesetHandler);                          OpenWebDataServiceHelper.ProcessedRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessedRequestHandler);                          OpenWebDataServiceHelper.GetServiceCustomizer.Value = (type) =>                          {                              if (type == typeof(IDataServiceStreamProvider))                              {                                  return new DataServiceStreamProvider();                              }                                return null;                          };                            foreach (var testCase in testCases)                          {                              foreach (string queryString in testCase.QueryStrings)                              {                                  BLOBSupportTest.ValidateInterceptorOverride = () =>                                  {                                      InterceptorChecker.ValidateQueryInterceptor(0);                                      InterceptorChecker.ValidateChangeInterceptor(0);                                  };                                    Assert.IsNull(SendRequest(typeof(CustomRowBasedContext)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                                  XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                  UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' testCase.XPathExprs);                              }                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobProjectionTests_OpenTypeProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      string accept = (string)table["Accept"];                        using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BlobDataServicePipelineHandlers)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(OpenWebDataServiceHelper)))                      using (CustomRowBasedOpenTypesContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                      {                          OpenWebDataServiceHelper.EnableBlobServer.Value = true;                            // Customers are MLEs' Orders are non-MLEs                          var testCases = new[] {                              // Make sure when there's no projected properties' we omit the <m:properties /> node                              // This should hold true for both MLE and non-MLE entities.                              new {                                  QueryStrings = new string[] {                                      "/Customers(0)?$select=Orders"'                                      "/GetCustomerByIdQueryable?id=0&$select=Orders"'                                      "/Orders(0)?$select=Customer"'                                      "/GetOrderByIdQueryable?id=0&$select=Customer"'                                  }'                                  XPathExprs = new string[] {                                      // Orders(0) is not MLE and must not have @src while Customers(0) must have @src because it is an MLE                                       "not(/atom:entry[contains(atom:id' 'Orders(0)')]/atom:content/@src) or boolean(/atom:entry[contains(atom:id' 'Customers(0)')]/atom:content/@src)"'                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/atom:content/adsm:properties)"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }                              }'                              // Project 1 property                              new {                                  QueryStrings = new string[] {                                      "/Customers(0)?$select=Name"'                                      "/GetCustomerByIdQueryable?id=0&$select=Name"'                                  }'                                  XPathExprs = new string[] {                                      "boolean(/atom:entry/adsm:properties/ads:Name)"'                                      "boolean(/atom:entry/atom:content/@src)"'                                      "not(/atom:entry/adsm:properties/*[local-name()!='Name'])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // Project 2 primitive properties                              new {                                  QueryStrings = new string[] {                                      "/Customers(0)?$select=Name'Address"'                                      "/GetCustomerByIdQueryable?id=0&$select=Name'Address"'                                  }'                                  XPathExprs = new string[] {                                      "boolean(/atom:entry/adsm:properties/ads:Name)"'                                      "boolean(/atom:entry/adsm:properties/ads:Address)"'                                      "boolean(/atom:entry/atom:content/@src)"'                                      "count(/atom:entry/adsm:properties/*) = 2"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // Explicitly project all properties                              new {                                  QueryStrings = new string[] {                                      "/Customers(0)?$select=*'Orders"'                                       "/Customers(0)?$select=Address'*"'                                       "/Customers(0)?$select=*'*"'                                      "/Customers?$filter=ID eq 0&$select=*"'                                                                            "/GetCustomerByIdQueryable?id=0&$select=*'Orders"'                                       "/GetCustomerByIdQueryable?id=0&$select=Address'*"'                                       "/GetCustomerByIdQueryable?id=0&$select=*'*"'                                      "/GetCustomerByIdQueryable?id=0&$filter=ID eq 0&$select=*"'                                  }'                                  XPathExprs = new string[] {                                      "not((/atom:entry | /atom:feed/atom:entry)/atom:content/adsm:properties)"'                                      "count((/atom:entry | /atom:feed/atom:entry)/adsm:properties/*) = 4"'                                      "boolean((/atom:entry | /atom:feed/atom:entry)/atom:content/@src)"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // Implicitly/Explicitly project all properties of the expanded entity                              new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$select=Customer&$expand=Customer"'  /*Implicit projection */                                      "/Orders(0)?$select=Customer&$expand=Customer($select=*)"' /*Explicit projection */                                      "/GetOrderByIdQueryable?id=0&$select=Customer&$expand=Customer"'  /*Implicit projection */                                      "/GetOrderByIdQueryable?id=0&$select=Customer&$expand=Customer($select=*)"' /*Explicit projection */                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:entry/atom:content/@src)"'                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/atom:content/adsm:properties)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/@src)"'                                      "count(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties/*) = 4"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // Project 1 property' expand an MLE and implicitly/explicitly project all properties  of the expanded MLE                               new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$select=ID'Customer&$expand=Customer"'                                      "/Orders(0)?$select=ID'Customer&$expand=Customer($select=*)"'                                      "/GetOrderByIdQueryable?id=0&$select=ID'Customer&$expand=Customer"'                                      "/GetOrderByIdQueryable?id=0&$select=ID'Customer&$expand=Customer($select=*)"'                                  }'                                  XPathExprs = new string[] {                                      "boolean(/atom:entry/atom:content/adsm:properties/ads:ID)"'                                      "count(/atom:entry/atom:content/adsm:properties/*) = 1"'                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/atom:content/@src)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/@src)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry[count(adsm:properties/*) != 4])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag])= count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // Project 1 property in the expanded MLE                              new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$select=ID&$expand=Customer($select=Name)"'                                      "/GetOrderByIdQueryable?id=0&$select=ID'Customer&$expand=Customer($select=Name)"                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/adsm:content/@src)"'                                      "boolean(/atom:entry/atom:content/adsm:properties/ads:ID)"'                                      "count(/atom:entry/atom:content/adsm:properties/*) = 1"'                                                "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content[not(@src)])"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[not(ads:Name)])"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[count(*) != 1])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // Project nav property in the expanded MLE                              new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$select=ID'Customer&$expand=Customer($expand=Orders)"'                                      "/GetOrderByIdQueryable?id=0&$select=ID'Customer&$expand=Customer($expand=Orders)"'                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/adsm:content/@src)"'                                      "boolean(/atom:entry/atom:content/adsm:properties/ads:ID)"'                                      "count(/atom:entry/atom:content/adsm:properties/*) = 1"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders'])"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:content[not(@src)])"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties/*)"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // V1 expand                              new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$expand=Customer"'                                      "/GetOrderByIdQueryable?id=0&$expand=Customer"                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/adsm:content/@src)"'                                      "count(/atom:entry/atom:content/adsm:properties/*) = 2"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content[not(@src)])"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[count(*) != 4])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // multilevel expand and project' only project 1 property per level                              new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$select=ID'Customer&$expand=Customer($select=Name;$expand=Orders($select=ID;$expand=Customer($select=ID)))"'                                      "/GetOrderByIdQueryable?id=0&$select=ID&$expand=Customer($select=Name;$expand=Orders($select=ID;$expand=Customer($select=ID)))"                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/adsm:content/@src)"'                                      "boolean(/atom:entry/atom:content/adsm:properties/ads:ID)"'                                      "count(/atom:entry/atom:content/adsm:properties/*) = 1"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content[not(@src)])"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[not(ads:Name)])"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[count(*) != 1])"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/adsm:properties)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[not(ads:ID)])"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/adsm:properties[count(*) != 1])"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/@src)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties/ads:ID)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties[count(*) != 1])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              // multilevel expand and project' only project 0 property per level                              new {                                  QueryStrings = new string[] {                                      "/Orders(0)?$select=Customer&$expand=Customer($select=Orders;$expand=Orders($expand=Customer))"'                                      "/GetOrderByIdQueryable?id=0&$select=Customer&$expand=Customer($select=Orders;$expand=Orders($expand=Customer))"'                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:entry/adsm:properties)"'                                      "not(/atom:entry/adsm:content/@src)"'                                      "count(/atom:entry/atom:content/adsm:properties/*) = 0"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content)"'                                      "not(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content[not(@src)])"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/adsm:properties)"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/*)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:content/@src)"'                                        "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer'])"'                                      "boolean(/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/adsm:properties)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content/*)"'                                      "not    (/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:link[@title='Orders']/adsm:inline/atom:feed/atom:entry/atom:link[@title='Customer']/adsm:inline/atom:entry/atom:content[not(@src)])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              new {                                  QueryStrings = new string[] {                                      "/Customers?$top=1&$select=Name&$skip=1"'                                      "/GetAllCustomersQueryable?$top=1&$select=Name&$skip=1"'                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:feed/atom:entry/atom:content/adsm:properties)"'                                      "count(/atom:feed/atom:entry/atom:content[@src]) = 1"'                                      "count(/atom:feed/atom:entry/adsm:properties/ads:Name) = 1"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              new {                                  QueryStrings = new string[] {                                      "/Customers?$select=Name'Address&$filter=ID eq 0"'                                      "/GetAllCustomersQueryable?$select=Name'Address&$filter=ID eq 0"'                                  }'                                  XPathExprs = new string[] {                                      "not(/atom:feed/atom:entry/atom:content/adsm:properties)"'                                      "count(/atom:feed/atom:entry/atom:content[@src]) = 1"'                                      "count(/atom:feed/atom:entry/adsm:properties/*) = 2"'                                      "boolean(/atom:feed/atom:entry/adsm:properties/ads:Name)"'                                      "boolean(/atom:feed/atom:entry/adsm:properties/ads:Address)"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                              new {                                  QueryStrings = new string[] {                                      "/Orders?$filter=Customer/ID eq 0&$select=ID"'                                      "/GetAllOrdersQueryable?$filter=Customer/ID eq 0&$select=ID"                                  }'                                  XPathExprs = new string[] {                                      "not    (/atom:feed/atom:entry/atom:content/@src)"'                                      "not    (/atom:feed/atom:entry/adsm:properties)"'                                      "boolean(/atom:feed/atom:entry/atom:content/adsm:properties/ads:ID)"'                                      "not    (/atom:feed/atom:entry/atom:content/adsm:properties[count(*) != 1])"'                                        "not(//atom:entry/atom:link[@rel='edit-media' and not(@adsm:etag)])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @title='OrderDetails'] and @adsm:etag]) = 0"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"] and @adsm:etag]) = count(//atom:entry[atom:link[@rel='edit' and @href=\"Customers(0)\"]])"'                                      "count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)'] and not(@adsm:etag)]) = count(//atom:entry[atom:link[@rel='edit' and @href='Orders(0)']])"                                  }'                              }'                          };                            DataServiceStreamProvider.GetStreamETagOverride = (entity' operationContext) =>                          {                                string entityName = entity.GetType().Name;                              string entityId = entity is NorthwindModel.Customers ? "'" + ((NorthwindModel.Customers)entity).CustomerID + "'" :                                                entity is NorthwindModel.Orders ? ((NorthwindModel.Orders)entity).OrderID.ToString() :                                                string.Empty;                                return string.Format("W/\"{0}({1})\""' entityName' entityId);                          };                            OpenWebDataServiceHelper.ProcessingRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessingRequestHandler);                          OpenWebDataServiceHelper.ProcessingChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessingChangesetHandler);                          OpenWebDataServiceHelper.ProcessedChangeset.Value = new EventHandler<EventArgs>(BlobDataServicePipelineHandlers.ProcessedChangesetHandler);                          OpenWebDataServiceHelper.ProcessedRequest.Value = new EventHandler<DataServiceProcessingPipelineEventArgs>(BlobDataServicePipelineHandlers.ProcessedRequestHandler);                          OpenWebDataServiceHelper.GetServiceCustomizer.Value = (type) =>                          {                              if (type == typeof(IDataServiceStreamProvider))                              {                                  return new DataServiceStreamProvider();                              }                                return null;                          };                            foreach (var testCase in testCases)                          {                              foreach (string queryString in testCase.QueryStrings)                              {                                  BLOBSupportTest.ValidateInterceptorOverride = () =>                                  {                                      InterceptorChecker.ValidateQueryInterceptor(0);                                      InterceptorChecker.ValidateChangeInterceptor(0);                                  };                                    Assert.IsNull(SendRequest(typeof(CustomRowBasedOpenTypesContext)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                                  XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                  UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' testCase.XPathExprs);                              }                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_EFProvider,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Orders?$expand=Customers"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_EFProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                              {                                  DataServiceStreamProvider.SkipValidation = true;                                  string queryString = (string)table["QueryString"];                                  string accept = (string)table["Accept"];                                    SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' queryString' null' null' accept' null' null' null' 200);                                  XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                  Assert.AreEqual("4.0;"' request.ResponseHeaders["OData-Version"]);                                  Assert.IsNull(request.ResponseETag);                                    UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' new string[] {                                       "boolean(/atom:feed)"'                                      "not(/atom:feed/atom:entry[not(@adsm:etag)])" });                                    VerifyOrder(queryString' ordersAsAtom' atomResponse);                              });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_ReflectionProvider,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items?$expand=ParentFolder"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                              {                                  DataServiceStreamProvider.SkipValidation = true;                                  string queryString = (string)table["QueryString"];                                  string accept = (string)table["Accept"];                                    SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200);                                  XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                  Assert.AreEqual("4.0;"' request.ResponseHeaders["OData-Version"]);                                  Assert.IsNull(request.ResponseETag);                                    UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' new string[] {                                       "boolean(/atom:feed)"'                                      "not(/atom:feed/atom:entry[not(@adsm:etag)])" });                                    VerifyOrder(queryString' itemsAsAtom' atomResponse);                              });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderBy_IDSPAndOpenTypesProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (CustomRowBasedContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              string queryString = (string)table["QueryString"];                              string accept = (string)table["Accept"];                              Type contextType = (Type)table["ContextType"];                              request.RequestMaxVersion = "4.0";                                Assert.IsNull(SendRequest(contextType' request' "GET"' "/Customers?$expand=BestFriend"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                              XmlDocument customersAsAtom = UnitTestsUtil.GetResponseAsAtom(request);                                SendRequest(contextType' request' "GET"' queryString' null' null' accept' null' null' null' 200);                              XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                Assert.AreEqual("4.0;"' request.ResponseHeaders["OData-Version"]);                              Assert.IsNull(request.ResponseETag);                                UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' new string[] {                                       "boolean(/atom:feed)"'                                      "not(/atom:feed/atom:entry[not(@adsm:etag)])" });                                VerifyOrder(queryString' customersAsAtom' atomResponse);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderBy_IDSPAndOpenTypesProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (CustomRowBasedContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              string queryString = (string)table["QueryString"];                              string accept = (string)table["Accept"];                              Type contextType = (Type)table["ContextType"];                              request.RequestMaxVersion = "4.0";                                Assert.IsNull(SendRequest(contextType' request' "GET"' "/Customers?$expand=BestFriend"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                              XmlDocument customersAsAtom = UnitTestsUtil.GetResponseAsAtom(request);                                SendRequest(contextType' request' "GET"' queryString' null' null' accept' null' null' null' 200);                              XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                Assert.AreEqual("4.0;"' request.ResponseHeaders["OData-Version"]);                              Assert.IsNull(request.ResponseETag);                                UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' new string[] {                                       "boolean(/atom:feed)"'                                      "not(/atom:feed/atom:entry[not(@adsm:etag)])" });                                VerifyOrder(queryString' customersAsAtom' atomResponse);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndOrderby_NegativeCases,The following statement contains a magic number: Exception e = SendRequest(typeof(CustomRowBasedContext)' request' testCase.Method' testCase.QueryString' null' null' null' null' null' body' 400);
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetTopSkipTestCases,The following statement contains a magic number: return new KeyValuePair<string[]' int>[] {                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=0"'                                  "/Customers?$top=0&skip=0"'                                  "/Customers?$top=0&skip=" + customersCount.ToString()'                                  "/Customers?$top=0&skip=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=" + customersCount.ToString() + "&$top=10"'                                  "/Customers?$skip=" + (customersCount + 10).ToString() + "&$top=10"'                                  "/Customers?$skip=" + int.MaxValue.ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                              }' 0)'                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=0"'                                  "/Customers?$top=" + customersCount.ToString()'                                  "/Customers?$top=" + (customersCount + 10).ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString()'                                  "/Customers?$skip=0&$top=" + customersCount.ToString()'                                  "/Customers?$skip=0&$top=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=0&$top=" + int.MaxValue.ToString()'                              }' customersCount)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=1"                              }' 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=" + ((int)(customersCount / 3)).ToString()                              }' (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=1"                              }' customersCount - 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + ((int)(customersCount / 3)).ToString()                              }' customersCount - (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + (customersCount - 1).ToString() + "&$top=" + (customersCount >> 1).ToString()                              }' 1)'                          };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetTopSkipTestCases,The following statement contains a magic number: return new KeyValuePair<string[]' int>[] {                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=0"'                                  "/Customers?$top=0&skip=0"'                                  "/Customers?$top=0&skip=" + customersCount.ToString()'                                  "/Customers?$top=0&skip=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=" + customersCount.ToString() + "&$top=10"'                                  "/Customers?$skip=" + (customersCount + 10).ToString() + "&$top=10"'                                  "/Customers?$skip=" + int.MaxValue.ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                              }' 0)'                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=0"'                                  "/Customers?$top=" + customersCount.ToString()'                                  "/Customers?$top=" + (customersCount + 10).ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString()'                                  "/Customers?$skip=0&$top=" + customersCount.ToString()'                                  "/Customers?$skip=0&$top=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=0&$top=" + int.MaxValue.ToString()'                              }' customersCount)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=1"                              }' 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=" + ((int)(customersCount / 3)).ToString()                              }' (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=1"                              }' customersCount - 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + ((int)(customersCount / 3)).ToString()                              }' customersCount - (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + (customersCount - 1).ToString() + "&$top=" + (customersCount >> 1).ToString()                              }' 1)'                          };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetTopSkipTestCases,The following statement contains a magic number: return new KeyValuePair<string[]' int>[] {                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=0"'                                  "/Customers?$top=0&skip=0"'                                  "/Customers?$top=0&skip=" + customersCount.ToString()'                                  "/Customers?$top=0&skip=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=" + customersCount.ToString() + "&$top=10"'                                  "/Customers?$skip=" + (customersCount + 10).ToString() + "&$top=10"'                                  "/Customers?$skip=" + int.MaxValue.ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                              }' 0)'                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=0"'                                  "/Customers?$top=" + customersCount.ToString()'                                  "/Customers?$top=" + (customersCount + 10).ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString()'                                  "/Customers?$skip=0&$top=" + customersCount.ToString()'                                  "/Customers?$skip=0&$top=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=0&$top=" + int.MaxValue.ToString()'                              }' customersCount)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=1"                              }' 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=" + ((int)(customersCount / 3)).ToString()                              }' (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=1"                              }' customersCount - 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + ((int)(customersCount / 3)).ToString()                              }' customersCount - (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + (customersCount - 1).ToString() + "&$top=" + (customersCount >> 1).ToString()                              }' 1)'                          };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetTopSkipTestCases,The following statement contains a magic number: return new KeyValuePair<string[]' int>[] {                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=0"'                                  "/Customers?$top=0&skip=0"'                                  "/Customers?$top=0&skip=" + customersCount.ToString()'                                  "/Customers?$top=0&skip=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=" + customersCount.ToString() + "&$top=10"'                                  "/Customers?$skip=" + (customersCount + 10).ToString() + "&$top=10"'                                  "/Customers?$skip=" + int.MaxValue.ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                              }' 0)'                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=0"'                                  "/Customers?$top=" + customersCount.ToString()'                                  "/Customers?$top=" + (customersCount + 10).ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString()'                                  "/Customers?$skip=0&$top=" + customersCount.ToString()'                                  "/Customers?$skip=0&$top=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=0&$top=" + int.MaxValue.ToString()'                              }' customersCount)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=1"                              }' 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=" + ((int)(customersCount / 3)).ToString()                              }' (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=1"                              }' customersCount - 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + ((int)(customersCount / 3)).ToString()                              }' customersCount - (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + (customersCount - 1).ToString() + "&$top=" + (customersCount >> 1).ToString()                              }' 1)'                          };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetTopSkipTestCases,The following statement contains a magic number: return new KeyValuePair<string[]' int>[] {                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=0"'                                  "/Customers?$top=0&skip=0"'                                  "/Customers?$top=0&skip=" + customersCount.ToString()'                                  "/Customers?$top=0&skip=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=" + customersCount.ToString() + "&$top=10"'                                  "/Customers?$skip=" + (customersCount + 10).ToString() + "&$top=10"'                                  "/Customers?$skip=" + int.MaxValue.ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                              }' 0)'                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=0"'                                  "/Customers?$top=" + customersCount.ToString()'                                  "/Customers?$top=" + (customersCount + 10).ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString()'                                  "/Customers?$skip=0&$top=" + customersCount.ToString()'                                  "/Customers?$skip=0&$top=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=0&$top=" + int.MaxValue.ToString()'                              }' customersCount)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=1"                              }' 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=" + ((int)(customersCount / 3)).ToString()                              }' (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=1"                              }' customersCount - 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + ((int)(customersCount / 3)).ToString()                              }' customersCount - (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + (customersCount - 1).ToString() + "&$top=" + (customersCount >> 1).ToString()                              }' 1)'                          };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetTopSkipTestCases,The following statement contains a magic number: return new KeyValuePair<string[]' int>[] {                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=0"'                                  "/Customers?$top=0&skip=0"'                                  "/Customers?$top=0&skip=" + customersCount.ToString()'                                  "/Customers?$top=0&skip=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=" + customersCount.ToString() + "&$top=10"'                                  "/Customers?$skip=" + (customersCount + 10).ToString() + "&$top=10"'                                  "/Customers?$skip=" + int.MaxValue.ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                              }' 0)'                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=0"'                                  "/Customers?$top=" + customersCount.ToString()'                                  "/Customers?$top=" + (customersCount + 10).ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString()'                                  "/Customers?$skip=0&$top=" + customersCount.ToString()'                                  "/Customers?$skip=0&$top=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=0&$top=" + int.MaxValue.ToString()'                              }' customersCount)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=1"                              }' 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=" + ((int)(customersCount / 3)).ToString()                              }' (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=1"                              }' customersCount - 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + ((int)(customersCount / 3)).ToString()                              }' customersCount - (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + (customersCount - 1).ToString() + "&$top=" + (customersCount >> 1).ToString()                              }' 1)'                          };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetTopSkipTestCases,The following statement contains a magic number: return new KeyValuePair<string[]' int>[] {                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=0"'                                  "/Customers?$top=0&skip=0"'                                  "/Customers?$top=0&skip=" + customersCount.ToString()'                                  "/Customers?$top=0&skip=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=" + customersCount.ToString() + "&$top=10"'                                  "/Customers?$skip=" + (customersCount + 10).ToString() + "&$top=10"'                                  "/Customers?$skip=" + int.MaxValue.ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                              }' 0)'                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=0"'                                  "/Customers?$top=" + customersCount.ToString()'                                  "/Customers?$top=" + (customersCount + 10).ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString()'                                  "/Customers?$skip=0&$top=" + customersCount.ToString()'                                  "/Customers?$skip=0&$top=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=0&$top=" + int.MaxValue.ToString()'                              }' customersCount)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=1"                              }' 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=" + ((int)(customersCount / 3)).ToString()                              }' (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=1"                              }' customersCount - 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + ((int)(customersCount / 3)).ToString()                              }' customersCount - (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + (customersCount - 1).ToString() + "&$top=" + (customersCount >> 1).ToString()                              }' 1)'                          };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,GetTopSkipTestCases,The following statement contains a magic number: return new KeyValuePair<string[]' int>[] {                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=0"'                                  "/Customers?$top=0&skip=0"'                                  "/Customers?$top=0&skip=" + customersCount.ToString()'                                  "/Customers?$top=0&skip=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=" + customersCount.ToString() + "&$top=10"'                                  "/Customers?$skip=" + (customersCount + 10).ToString() + "&$top=10"'                                  "/Customers?$skip=" + int.MaxValue.ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                              }' 0)'                          new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=0"'                                  "/Customers?$top=" + customersCount.ToString()'                                  "/Customers?$top=" + (customersCount + 10).ToString()'                                  "/Customers?$top=" + int.MaxValue.ToString()'                                  "/Customers?$skip=0&$top=" + customersCount.ToString()'                                  "/Customers?$skip=0&$top=" + (customersCount + 10).ToString()'                                  "/Customers?$skip=0&$top=" + int.MaxValue.ToString()'                              }' customersCount)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=1"                              }' 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$top=" + ((int)(customersCount / 3)).ToString()                              }' (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=1"                              }' customersCount - 1)'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + ((int)(customersCount / 3)).ToString()                              }' customersCount - (int)(customersCount / 3))'                            new KeyValuePair<string[]' int>(                              new string[]{                                  "/Customers?$skip=" + (customersCount - 1).ToString() + "&$top=" + (customersCount >> 1).ToString()                              }' 1)'                          };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_EFProvider,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' "/Customers"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_EFProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string[] queryStrings = ((KeyValuePair<string[]' int>)table["TestCases"]).Key;                          int expectedCount = ((KeyValuePair<string[]' int>)table["TestCases"]).Value;                            foreach (string queryString in queryStrings)                          {                              Assert.IsNull(SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' queryString' null' null' "application/atom+xml'application/xml"' null' null' null' 200));                                Assert.AreEqual("4.0;"' request.ResponseVersion);                              Assert.IsNull(request.ResponseETag);                                XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                              // Verify we really received AtomPub feed                              // Verify embedded all atom entries have etags                              UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' new string[] {                                   "boolean(/atom:feed)"'                                  "not(/atom:feed/atom:entry[not(@adsm:etag)])"'                              });                                // Verify Etag values. This is equivalent of:                              // "not(/atom:feed/atom:entry[not(contains(@adsm:etag' adsm:properties/ads:Phone))])"'                              // The issue is that etag is UrlEncoded but the property isn't. It's not to do such a                               // conversion in a single XPath query.                              foreach (XmlNode entryNode in atomResponse.SelectNodes("/atom:feed/atom:entry"' TestUtil.TestNamespaceManager))                              {                                  string eTag = entryNode.Attributes[0].Value;                                  string phone = "W/\"'" + Uri.EscapeDataString(entryNode.SelectSingleNode("adsm:properties/ads:Phone"' TestUtil.TestNamespaceManager).InnerText) + "'\"";                                  Assert.AreEqual(eTag' phone' "etag-phone");                              }                                UnitTestsUtil.VerifyXPathResultCount(atomResponse' expectedCount' new string[] { "/atom:feed/atom:entry[atom:link[@rel = 'edit' and @title = 'Customers']]" });                                ValidateResponseNodes(queryString' customersAsAtom' atomResponse);                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_IDSPAndOpenTypesProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (CustomRowBasedContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              string accept = (string)table["Accept"];                              Type contextType = (Type)table["ContextType"];                              request.RequestMaxVersion = "4.0";                                Assert.IsNull(SendRequest(contextType' request' "GET"' "/Customers"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                              XmlDocument customersAsAtom = UnitTestsUtil.GetResponseAsAtom(request);                                int customersCount = customersAsAtom.SelectNodes("/atom:feed/atom:entry"' TestUtil.TestNamespaceManager).Count;                              Assert.IsTrue(customersCount >= 0);                                foreach (KeyValuePair<string[]' int> testCase in GetTopSkipTestCases(customersCount))                              {                                  foreach (string queryString in testCase.Key)                                  {                                      Assert.IsNull(SendRequest(contextType' request' "GET"' queryString' null' null' accept' null' null' null' 200));                                        Assert.AreEqual("4.0;"' request.ResponseHeaders["OData-Version"]);                                      Assert.IsNull(request.ResponseETag);                                        XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                        UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' new string[] {                                       "boolean(/atom:feed)"'                                      "not(/atom:feed/atom:entry[not(@adsm:etag)])" });                                        UnitTestsUtil.VerifyXPathResultCount(atomResponse' testCase.Value /*expected count*/' new string[] { "/atom:feed/atom:entry" });                                        ValidateResponseNodes(queryString' customersAsAtom' atomResponse);                                  }                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_IDSPAndOpenTypesProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          using (CustomRowBasedContext.CreateChangeScope())                          using (TestWebRequest request = TestWebRequest.CreateForLocation((WebServerLocation)table["Location"]))                          {                              string accept = (string)table["Accept"];                              Type contextType = (Type)table["ContextType"];                              request.RequestMaxVersion = "4.0";                                Assert.IsNull(SendRequest(contextType' request' "GET"' "/Customers"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));                              XmlDocument customersAsAtom = UnitTestsUtil.GetResponseAsAtom(request);                                int customersCount = customersAsAtom.SelectNodes("/atom:feed/atom:entry"' TestUtil.TestNamespaceManager).Count;                              Assert.IsTrue(customersCount >= 0);                                foreach (KeyValuePair<string[]' int> testCase in GetTopSkipTestCases(customersCount))                              {                                  foreach (string queryString in testCase.Key)                                  {                                      Assert.IsNull(SendRequest(contextType' request' "GET"' queryString' null' null' accept' null' null' null' 200));                                        Assert.AreEqual("4.0;"' request.ResponseHeaders["OData-Version"]);                                      Assert.IsNull(request.ResponseETag);                                        XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                        UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' new string[] {                                       "boolean(/atom:feed)"'                                      "not(/atom:feed/atom:entry[not(@adsm:etag)])" });                                        UnitTestsUtil.VerifyXPathResultCount(atomResponse' testCase.Value /*expected count*/' new string[] { "/atom:feed/atom:entry" });                                        ValidateResponseNodes(queryString' customersAsAtom' atomResponse);                                  }                              }                          }                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The following statement contains a magic number: Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' "/Items"' null' null' UnitTestsUtil.AtomFormat' null' null' null' 200));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                              new Dimension("Accept"' UnitTestsUtil.ResponseFormats)'                              new Dimension("TestCases"' new KeyValuePair<string[]' int>[] {                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=0"'                                          "/Items?$top=0&skip=0"'                                          "/Items?$top=0&skip=" + itemsCount.ToString()'                                          "/Items?$top=0&skip=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=" + itemsCount.ToString() + "&$top=10"'                                          "/Items?$skip=" + (itemsCount + 10).ToString() + "&$top=10"'                                          "/Items?$skip=" + int.MaxValue.ToString()'                                          "/Items?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                                      }' 0)'                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=0"'                                          "/Items?$top=" + itemsCount.ToString()'                                          "/Items?$top=" + (itemsCount + 10).ToString()'                                          "/Items?$top=" + int.MaxValue.ToString()'                                          "/Items?$skip=0&$top=" + itemsCount.ToString()'                                          "/Items?$skip=0&$top=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=0&$top=" + int.MaxValue.ToString()'                                      }' itemsCount)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=1"                                      }' 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=" + ((int)(itemsCount / 3)).ToString()                                      }' (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=1"                                      }' itemsCount - 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + ((int)(itemsCount / 3)).ToString()                                      }' itemsCount - (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + (itemsCount - 1).ToString() + "&$top=" + (itemsCount >> 1).ToString()                                      }' 1)'                              }));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                              new Dimension("Accept"' UnitTestsUtil.ResponseFormats)'                              new Dimension("TestCases"' new KeyValuePair<string[]' int>[] {                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=0"'                                          "/Items?$top=0&skip=0"'                                          "/Items?$top=0&skip=" + itemsCount.ToString()'                                          "/Items?$top=0&skip=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=" + itemsCount.ToString() + "&$top=10"'                                          "/Items?$skip=" + (itemsCount + 10).ToString() + "&$top=10"'                                          "/Items?$skip=" + int.MaxValue.ToString()'                                          "/Items?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                                      }' 0)'                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=0"'                                          "/Items?$top=" + itemsCount.ToString()'                                          "/Items?$top=" + (itemsCount + 10).ToString()'                                          "/Items?$top=" + int.MaxValue.ToString()'                                          "/Items?$skip=0&$top=" + itemsCount.ToString()'                                          "/Items?$skip=0&$top=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=0&$top=" + int.MaxValue.ToString()'                                      }' itemsCount)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=1"                                      }' 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=" + ((int)(itemsCount / 3)).ToString()                                      }' (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=1"                                      }' itemsCount - 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + ((int)(itemsCount / 3)).ToString()                                      }' itemsCount - (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + (itemsCount - 1).ToString() + "&$top=" + (itemsCount >> 1).ToString()                                      }' 1)'                              }));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                              new Dimension("Accept"' UnitTestsUtil.ResponseFormats)'                              new Dimension("TestCases"' new KeyValuePair<string[]' int>[] {                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=0"'                                          "/Items?$top=0&skip=0"'                                          "/Items?$top=0&skip=" + itemsCount.ToString()'                                          "/Items?$top=0&skip=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=" + itemsCount.ToString() + "&$top=10"'                                          "/Items?$skip=" + (itemsCount + 10).ToString() + "&$top=10"'                                          "/Items?$skip=" + int.MaxValue.ToString()'                                          "/Items?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                                      }' 0)'                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=0"'                                          "/Items?$top=" + itemsCount.ToString()'                                          "/Items?$top=" + (itemsCount + 10).ToString()'                                          "/Items?$top=" + int.MaxValue.ToString()'                                          "/Items?$skip=0&$top=" + itemsCount.ToString()'                                          "/Items?$skip=0&$top=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=0&$top=" + int.MaxValue.ToString()'                                      }' itemsCount)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=1"                                      }' 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=" + ((int)(itemsCount / 3)).ToString()                                      }' (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=1"                                      }' itemsCount - 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + ((int)(itemsCount / 3)).ToString()                                      }' itemsCount - (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + (itemsCount - 1).ToString() + "&$top=" + (itemsCount >> 1).ToString()                                      }' 1)'                              }));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                              new Dimension("Accept"' UnitTestsUtil.ResponseFormats)'                              new Dimension("TestCases"' new KeyValuePair<string[]' int>[] {                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=0"'                                          "/Items?$top=0&skip=0"'                                          "/Items?$top=0&skip=" + itemsCount.ToString()'                                          "/Items?$top=0&skip=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=" + itemsCount.ToString() + "&$top=10"'                                          "/Items?$skip=" + (itemsCount + 10).ToString() + "&$top=10"'                                          "/Items?$skip=" + int.MaxValue.ToString()'                                          "/Items?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                                      }' 0)'                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=0"'                                          "/Items?$top=" + itemsCount.ToString()'                                          "/Items?$top=" + (itemsCount + 10).ToString()'                                          "/Items?$top=" + int.MaxValue.ToString()'                                          "/Items?$skip=0&$top=" + itemsCount.ToString()'                                          "/Items?$skip=0&$top=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=0&$top=" + int.MaxValue.ToString()'                                      }' itemsCount)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=1"                                      }' 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=" + ((int)(itemsCount / 3)).ToString()                                      }' (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=1"                                      }' itemsCount - 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + ((int)(itemsCount / 3)).ToString()                                      }' itemsCount - (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + (itemsCount - 1).ToString() + "&$top=" + (itemsCount >> 1).ToString()                                      }' 1)'                              }));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                              new Dimension("Accept"' UnitTestsUtil.ResponseFormats)'                              new Dimension("TestCases"' new KeyValuePair<string[]' int>[] {                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=0"'                                          "/Items?$top=0&skip=0"'                                          "/Items?$top=0&skip=" + itemsCount.ToString()'                                          "/Items?$top=0&skip=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=" + itemsCount.ToString() + "&$top=10"'                                          "/Items?$skip=" + (itemsCount + 10).ToString() + "&$top=10"'                                          "/Items?$skip=" + int.MaxValue.ToString()'                                          "/Items?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                                      }' 0)'                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=0"'                                          "/Items?$top=" + itemsCount.ToString()'                                          "/Items?$top=" + (itemsCount + 10).ToString()'                                          "/Items?$top=" + int.MaxValue.ToString()'                                          "/Items?$skip=0&$top=" + itemsCount.ToString()'                                          "/Items?$skip=0&$top=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=0&$top=" + int.MaxValue.ToString()'                                      }' itemsCount)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=1"                                      }' 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=" + ((int)(itemsCount / 3)).ToString()                                      }' (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=1"                                      }' itemsCount - 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + ((int)(itemsCount / 3)).ToString()                                      }' itemsCount - (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + (itemsCount - 1).ToString() + "&$top=" + (itemsCount >> 1).ToString()                                      }' 1)'                              }));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                              new Dimension("Accept"' UnitTestsUtil.ResponseFormats)'                              new Dimension("TestCases"' new KeyValuePair<string[]' int>[] {                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=0"'                                          "/Items?$top=0&skip=0"'                                          "/Items?$top=0&skip=" + itemsCount.ToString()'                                          "/Items?$top=0&skip=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=" + itemsCount.ToString() + "&$top=10"'                                          "/Items?$skip=" + (itemsCount + 10).ToString() + "&$top=10"'                                          "/Items?$skip=" + int.MaxValue.ToString()'                                          "/Items?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                                      }' 0)'                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=0"'                                          "/Items?$top=" + itemsCount.ToString()'                                          "/Items?$top=" + (itemsCount + 10).ToString()'                                          "/Items?$top=" + int.MaxValue.ToString()'                                          "/Items?$skip=0&$top=" + itemsCount.ToString()'                                          "/Items?$skip=0&$top=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=0&$top=" + int.MaxValue.ToString()'                                      }' itemsCount)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=1"                                      }' 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=" + ((int)(itemsCount / 3)).ToString()                                      }' (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=1"                                      }' itemsCount - 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + ((int)(itemsCount / 3)).ToString()                                      }' itemsCount - (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + (itemsCount - 1).ToString() + "&$top=" + (itemsCount >> 1).ToString()                                      }' 1)'                              }));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                              new Dimension("Accept"' UnitTestsUtil.ResponseFormats)'                              new Dimension("TestCases"' new KeyValuePair<string[]' int>[] {                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=0"'                                          "/Items?$top=0&skip=0"'                                          "/Items?$top=0&skip=" + itemsCount.ToString()'                                          "/Items?$top=0&skip=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=" + itemsCount.ToString() + "&$top=10"'                                          "/Items?$skip=" + (itemsCount + 10).ToString() + "&$top=10"'                                          "/Items?$skip=" + int.MaxValue.ToString()'                                          "/Items?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                                      }' 0)'                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=0"'                                          "/Items?$top=" + itemsCount.ToString()'                                          "/Items?$top=" + (itemsCount + 10).ToString()'                                          "/Items?$top=" + int.MaxValue.ToString()'                                          "/Items?$skip=0&$top=" + itemsCount.ToString()'                                          "/Items?$skip=0&$top=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=0&$top=" + int.MaxValue.ToString()'                                      }' itemsCount)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=1"                                      }' 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=" + ((int)(itemsCount / 3)).ToString()                                      }' (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=1"                                      }' itemsCount - 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + ((int)(itemsCount / 3)).ToString()                                      }' itemsCount - (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + (itemsCount - 1).ToString() + "&$top=" + (itemsCount >> 1).ToString()                                      }' 1)'                              }));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                              new Dimension("Accept"' UnitTestsUtil.ResponseFormats)'                              new Dimension("TestCases"' new KeyValuePair<string[]' int>[] {                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=0"'                                          "/Items?$top=0&skip=0"'                                          "/Items?$top=0&skip=" + itemsCount.ToString()'                                          "/Items?$top=0&skip=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=" + itemsCount.ToString() + "&$top=10"'                                          "/Items?$skip=" + (itemsCount + 10).ToString() + "&$top=10"'                                          "/Items?$skip=" + int.MaxValue.ToString()'                                          "/Items?$top=" + int.MaxValue.ToString() + "&$skip=" + int.MaxValue.ToString()                                      }' 0)'                                  new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=0"'                                          "/Items?$top=" + itemsCount.ToString()'                                          "/Items?$top=" + (itemsCount + 10).ToString()'                                          "/Items?$top=" + int.MaxValue.ToString()'                                          "/Items?$skip=0&$top=" + itemsCount.ToString()'                                          "/Items?$skip=0&$top=" + (itemsCount + 10).ToString()'                                          "/Items?$skip=0&$top=" + int.MaxValue.ToString()'                                      }' itemsCount)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=1"                                      }' 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$top=" + ((int)(itemsCount / 3)).ToString()                                      }' (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=1"                                      }' itemsCount - 1)'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + ((int)(itemsCount / 3)).ToString()                                      }' itemsCount - (int)(itemsCount / 3))'                                    new KeyValuePair<string[]' int>(                                      new string[]{                                          "/Items?$skip=" + (itemsCount - 1).ToString() + "&$top=" + (itemsCount >> 1).ToString()                                      }' 1)'                              }));
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobAndTopSkip_ReflectionProvider,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                              {                                  DataServiceStreamProvider.SkipValidation = true;                                  string accept = (string)table["Accept"];                                  KeyValuePair<string[]' int> testCase = (KeyValuePair<string[]' int>)table["TestCases"];                                    foreach (string queryString in testCase.Key)                                  {                                      Assert.IsNull(SendRequest(typeof(PhotoDataService)' request' "GET"' queryString' null' null' accept' null' null' null' 200));                                        XmlDocument atomResponse = UnitTestsUtil.GetResponseAsAtom(request);                                      Assert.AreEqual("4.0;"' request.ResponseHeaders["OData-Version"]);                                        Assert.IsNull(request.ResponseETag);                                        UnitTestsUtil.VerifyXPathExpressionResults(atomResponse' true' new string[] {                                       "boolean(/atom:feed)"'                                      "not(/atom:feed/atom:entry[not(@adsm:etag)])" });                                        UnitTestsUtil.VerifyXPathResultCount(atomResponse' testCase.Value /*expected count*/' new string[] { "/atom:feed/atom:entry" });                                        ValidateResponseNodes(queryString' itemsAsAtom' atomResponse);                                  }                              });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobTopSkipNegative,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string format = (string)table["Format"];                          string queryString = (string)table["QueryString"];                            // Note: 500 is not the desired behavior. See: $top and $skip not checked for negative values                          // The current behavior is baselined here.                          int expectedStatusCode = queryString.Contains("=-") ? 500 : 400;                          Exception e = SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' queryString' null' null' format' null' null' null' expectedStatusCode);                          Assert.IsNotNull(e);                          if (expectedStatusCode == 500)                          {                              Assert.IsInstanceOfType(e.InnerException' typeof(ArgumentException));                              Assert.IsTrue(e.InnerException.Message.Contains("must have a non-negative value.\r\nParameter name:"));                          }                          else                          {                              Assert.IsInstanceOfType(e.InnerException' typeof(DataServiceException));                              Assert.IsTrue(e.InnerException.Message.StartsWith("Incorrect format for $"));                          }                          Assert.AreEqual("4.0;"' request.ResponseHeaders["OData-Version"]);                          Assert.IsNull(request.ResponseETag);                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobTopSkipNegative,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string format = (string)table["Format"];                          string queryString = (string)table["QueryString"];                            // Note: 500 is not the desired behavior. See: $top and $skip not checked for negative values                          // The current behavior is baselined here.                          int expectedStatusCode = queryString.Contains("=-") ? 500 : 400;                          Exception e = SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' queryString' null' null' format' null' null' null' expectedStatusCode);                          Assert.IsNotNull(e);                          if (expectedStatusCode == 500)                          {                              Assert.IsInstanceOfType(e.InnerException' typeof(ArgumentException));                              Assert.IsTrue(e.InnerException.Message.Contains("must have a non-negative value.\r\nParameter name:"));                          }                          else                          {                              Assert.IsInstanceOfType(e.InnerException' typeof(DataServiceException));                              Assert.IsTrue(e.InnerException.Message.StartsWith("Incorrect format for $"));                          }                          Assert.AreEqual("4.0;"' request.ResponseHeaders["OData-Version"]);                          Assert.IsNull(request.ResponseETag);                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobTopSkipNegative,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                      {                          string format = (string)table["Format"];                          string queryString = (string)table["QueryString"];                            // Note: 500 is not the desired behavior. See: $top and $skip not checked for negative values                          // The current behavior is baselined here.                          int expectedStatusCode = queryString.Contains("=-") ? 500 : 400;                          Exception e = SendRequest(typeof(NorthwindDefaultStreamService)' request' "GET"' queryString' null' null' format' null' null' null' expectedStatusCode);                          Assert.IsNotNull(e);                          if (expectedStatusCode == 500)                          {                              Assert.IsInstanceOfType(e.InnerException' typeof(ArgumentException));                              Assert.IsTrue(e.InnerException.Message.Contains("must have a non-negative value.\r\nParameter name:"));                          }                          else                          {                              Assert.IsInstanceOfType(e.InnerException' typeof(DataServiceException));                              Assert.IsTrue(e.InnerException.Message.StartsWith("Incorrect format for $"));                          }                          Assert.AreEqual("4.0;"' request.ResponseHeaders["OData-Version"]);                          Assert.IsNull(request.ResponseETag);                      });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobClientInsertTests,The following statement contains a magic number: byte[] buffer = new byte[20];
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobClientInsertTests,The following statement contains a magic number: Photo p = new Photo() { ID = 333' Name = "Photo 333"' Rating = 1' ThumbNail = new byte[] { 1' 2' 3 } };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobClientInsertTests,The following statement contains a magic number: Photo p = new Photo() { ID = 333' Name = "Photo 333"' Rating = 1' ThumbNail = new byte[] { 1' 2' 3 } };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobClientInsertTests,The following statement contains a magic number: Photo p = new Photo() { ID = 333' Name = "Photo 333"' Rating = 1' ThumbNail = new byte[] { 1' 2' 3 } };
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobClientInsertTests,The following statement contains a magic number: Assert.AreEqual(6' response.Count());
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerClientMismatchHasStreamTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BlobDataServicePipelineHandlers)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(OpenWebDataServiceHelper)))                      using (CustomRowBasedOpenTypesContext.CreateChangeScope())                      using (CustomRowBasedContext.CreateChangeScope())                      using (TestWebRequest request = TestWebRequest.CreateForInProcessStreamedWcf())                      {                          OpenWebDataServiceHelper.EnableBlobServer.Value = (bool)table["EnableBlobServer"];                          OpenWebDataServiceHelper.GetServiceCustomizer.Value = (type) =>                          {                              if (type == typeof(IDataServiceStreamProvider))                              {                                  return new DataServiceStreamProvider();                              }                                return null;                          };                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = ODataProtocolVersion.V4;                          OpenWebDataServiceHelper.ForceVerboseErrors = true;                            request.Accept = UnitTestsUtil.AtomFormat;                          request.DataServiceType = (Type)table["ServerContextTypes"];                          request.StartService();                            DataServiceContext ctx = new DataServiceContext(new Uri(request.BaseUri));                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                          ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support;                          ctx.SendingRequest2 += new EventHandler<SendingRequest2EventArgs>(ctx_SendingRequest);                          ctx.ResolveName = (type) =>                          {                              if (type == typeof(Address))                              {                                  return typeof(Address).FullName;                              }                              else if (type == typeof(MyCustomer) || type == typeof(MyMLECustomer))                              {                                  return typeof(Customer).FullName;                              }                              else if (type == typeof(MyOrder))                              {                                  return typeof(Order).FullName;                              }                                return null;                          };                            MyCustomer c1 = ctx.Execute<MyCustomer>(new Uri("/Customers(0)"' UriKind.Relative)).Single();                          string etag = ctx.GetEntityDescriptor(c1).ETag;                          // Clear type info and MLE info from server                          ctx.Detach(c1);                            Type clientType = (Type)table["ClientType"];                          MyCustomer c = (MyCustomer)Activator.CreateInstance(clientType);                          c.ID = 0;                          c.Name = "bob";                          ctx.AttachTo("Customers"' c' etag);                          ctx.UpdateObject(c);                          Exception e = TestUtil.RunCatching(() => ctx.SaveChanges());                          TestUtil.AssertExceptionExpected(                              e'                              OpenWebDataServiceHelper.EnableBlobServer && clientType == typeof(MyCustomer)'                              !OpenWebDataServiceHelper.EnableBlobServer && clientType == typeof(MyMLECustomer));                          if (e != null)                          {                              Assert.IsInstanceOfType(e.InnerException' typeof(DataServiceClientException));                              Assert.AreEqual(400' ((DataServiceClientException)e.InnerException).StatusCode);                              string expectedMsg = String.Empty;                              if (OpenWebDataServiceHelper.EnableBlobServer && clientType == typeof(MyCustomer))                              {                                  expectedMsg = String.Format(ODataLibResourceUtil.GetString("ValidationUtils_ResourceWithoutMediaResourceAndMLEType")' CustomRowBasedContext.CustomerFullName);                              }                              else if (!OpenWebDataServiceHelper.EnableBlobServer && clientType == typeof(MyMLECustomer))                              {                                  expectedMsg = String.Format(ODataLibResourceUtil.GetString("ValidationUtils_ResourceWithMediaResourceAndNonMLEType")' CustomRowBasedContext.CustomerFullName);                              }                              else                              {                                  Assert.Fail("Shouldn't be here...");                              }                                expectedMsg = expectedMsg.Replace("<"' "&lt;").Replace(">"' "&gt;");                              TestUtil.AssertContains(((DataServiceClientException)e.InnerException).Message' expectedMsg);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerXSDPClientTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BlobDataServicePipelineHandlers)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(OpenWebDataServiceHelper)))                      using (CustomRowBasedOpenTypesContext.CreateChangeScope())                      using (CustomRowBasedContext.CreateChangeScope())                      using (TestUtil.MetadataCacheCleaner())                      using (TestWebRequest request = TestWebRequest.CreateForInProcessWcf())                      {                          int pageSize = 1;                            OpenWebDataServiceHelper.EnableBlobServer.Value = true;                          OpenWebDataServiceHelper.GetServiceCustomizer.Value = (type) =>                          {                              if (type == typeof(IDataServiceStreamProvider))                              {                                  return new DataServiceStreamProvider();                              }                                return null;                          };                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = ODataProtocolVersion.V4;                          OpenWebDataServiceHelper.PageSizeCustomizer.Value = (config' type) => config.SetEntitySetPageSize("*"' pageSize);                            request.Accept = UnitTestsUtil.AtomFormat;                          request.DataServiceType = (Type)table["ServerContextTypes"];                          request.StartService();                            DataServiceContext ctx = new DataServiceContext(new Uri(request.BaseUri));                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                          ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support;                          ctx.SendingRequest2 += new EventHandler<SendingRequest2EventArgs>(ctx_SendingRequest);                          if (request.DataServiceType == typeof(CustomRowBasedContext))                          {                              ctx.ResolveName = null;                          }                          else                          {                              ctx.ResolveName = (type) =>                              {                                  if (type == typeof(Address))                                  {                                      return typeof(Address).FullName;                                  }                                    return null;                              };                          }                            var dsq = ctx.CreateQuery<MyMLECustomer>("Customers").Expand("Orders").Execute() as QueryOperationResponse<MyMLECustomer>;                            int totalCustomerCount = 0;                          DataServiceQueryContinuation<MyMLECustomer> continuation1 = null;                          do                          {                              int perPageCustomerCount = 0;                              foreach (MyMLECustomer c in dsq)                              {                                  Assert.AreEqual(c.Name' "Customer " + c.ID);                                  c.Name = c.Name + " Updated";                                  ctx.UpdateObject(c);                                  if (request.DataServiceType == typeof(CustomRowBasedContext))                                  {                                      Assert.AreEqual(CustomRowBasedContext.customers.Single(sc => sc.ID == c.ID).TypeName' ctx.GetEntityDescriptor(c).ServerTypeName);                                  }                                  else                                  {                                      Assert.AreEqual(CustomRowBasedOpenTypesContext.customers.Single(sc => (int)sc.Properties["ID"] == c.ID).TypeName' ctx.GetEntityDescriptor(c).ServerTypeName);                                  }                                    Assert.IsNotNull(ctx.GetEntityDescriptor(c).EditStreamUri);                                    perPageCustomerCount++;                                    int populatedOrderCount = c.Orders.Count;                                  Assert.IsTrue(c.Orders.Count <= pageSize);                                  while (c.Orders.Continuation != null)                                  {                                      ctx.LoadProperty(c' "Orders"' c.Orders.Continuation);                                      Assert.IsTrue(c.Orders.Count - populatedOrderCount <= pageSize);                                      populatedOrderCount = c.Orders.Count;                                  }                                    if (request.DataServiceType == typeof(CustomRowBasedContext))                                  {                                      Assert.AreEqual(((IEnumerable<RowEntityTypeWithIDAsKey>)CustomRowBasedContext.customers.Single(sc => sc.ID == c.ID).Properties["Orders"]).Count()' c.Orders.Count);                                  }                                  else                                  {                                      Assert.AreEqual(((IEnumerable<RowComplexType>)CustomRowBasedOpenTypesContext.customers.Single(sc => (int)sc.Properties["ID"] == c.ID).Properties["Orders"]).Count()' c.Orders.Count);                                  }                                    foreach (MyOrder o in c.Orders)                                  {                                      o.DollarAmount = 9999;                                      ctx.UpdateObject(o);                                        if (request.DataServiceType == typeof(CustomRowBasedContext))                                      {                                          Assert.AreEqual(CustomRowBasedContext.orders.Single(so => so.ID == o.ID).TypeName' ctx.GetEntityDescriptor(o).ServerTypeName);                                      }                                      else                                      {                                          Assert.AreEqual(CustomRowBasedOpenTypesContext.orders.Single(so => (int)so.Properties["ID"] == o.ID).TypeName' ctx.GetEntityDescriptor(o).ServerTypeName);                                      }                                        Assert.IsNull(ctx.GetEntityDescriptor(o).EditStreamUri);                                  }                              }                                Assert.IsTrue(perPageCustomerCount <= pageSize);                              totalCustomerCount += perPageCustomerCount;                              perPageCustomerCount = 0;                          } while ((continuation1 = dsq.GetContinuation()) != null && (dsq = ctx.Execute<MyMLECustomer>(continuation1)) != null);                            if (request.DataServiceType == typeof(CustomRowBasedContext))                          {                              Assert.AreEqual(CustomRowBasedContext.customers.Count' totalCustomerCount);                          }                          else                          {                              Assert.AreEqual(CustomRowBasedOpenTypesContext.customers.Count' totalCustomerCount);                          }                            ctx.SaveChanges();                            //                          // Verify Customers                          //                          DataServiceCollection<MyCustomer> customers = new DataServiceCollection<MyCustomer>(ctx.Execute<MyCustomer>(new Uri("/Customers"' UriKind.Relative))' TrackingMode.None);                          while (customers.Continuation != null)                          {                              customers.Load(ctx.Execute<MyCustomer>(customers.Continuation));                          }                            foreach (MyCustomer c in customers)                          {                              Assert.AreEqual(c.Name' "Customer " + c.ID + " Updated");                              totalCustomerCount--;                          }                            Assert.AreEqual(0' totalCustomerCount);                            //                          // Verify Orders                          //                          DataServiceCollection<MyOrder> orders = new DataServiceCollection<MyOrder>(ctx.Execute<MyOrder>(new Uri("/Orders"' UriKind.Relative))' TrackingMode.None);                          while (orders.Continuation != null)                          {                              orders.Load(ctx.Execute<MyOrder>(orders.Continuation));                          }                            foreach (MyOrder o in orders)                          {                              Assert.AreEqual(9999' o.DollarAmount);                          }                            if (request.DataServiceType == typeof(CustomRowBasedContext))                          {                              Assert.AreEqual(CustomRowBasedContext.orders.Count' orders.Count);                          }                          else                          {                              Assert.AreEqual(CustomRowBasedOpenTypesContext.orders.Count' orders.Count);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,BlobServerXSDPClientTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' table =>                  {                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BLOBSupportTest)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(DataServiceStreamProvider)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(BlobDataServicePipelineHandlers)))                      using (TestUtil.RestoreStaticMembersOnDispose(typeof(OpenWebDataServiceHelper)))                      using (CustomRowBasedOpenTypesContext.CreateChangeScope())                      using (CustomRowBasedContext.CreateChangeScope())                      using (TestUtil.MetadataCacheCleaner())                      using (TestWebRequest request = TestWebRequest.CreateForInProcessWcf())                      {                          int pageSize = 1;                            OpenWebDataServiceHelper.EnableBlobServer.Value = true;                          OpenWebDataServiceHelper.GetServiceCustomizer.Value = (type) =>                          {                              if (type == typeof(IDataServiceStreamProvider))                              {                                  return new DataServiceStreamProvider();                              }                                return null;                          };                          OpenWebDataServiceHelper.MaxProtocolVersion.Value = ODataProtocolVersion.V4;                          OpenWebDataServiceHelper.PageSizeCustomizer.Value = (config' type) => config.SetEntitySetPageSize("*"' pageSize);                            request.Accept = UnitTestsUtil.AtomFormat;                          request.DataServiceType = (Type)table["ServerContextTypes"];                          request.StartService();                            DataServiceContext ctx = new DataServiceContext(new Uri(request.BaseUri));                          //ctx.EnableAtom = true;                          //ctx.Format.UseAtom();                          ctx.UndeclaredPropertyBehavior = UndeclaredPropertyBehavior.Support;                          ctx.SendingRequest2 += new EventHandler<SendingRequest2EventArgs>(ctx_SendingRequest);                          if (request.DataServiceType == typeof(CustomRowBasedContext))                          {                              ctx.ResolveName = null;                          }                          else                          {                              ctx.ResolveName = (type) =>                              {                                  if (type == typeof(Address))                                  {                                      return typeof(Address).FullName;                                  }                                    return null;                              };                          }                            var dsq = ctx.CreateQuery<MyMLECustomer>("Customers").Expand("Orders").Execute() as QueryOperationResponse<MyMLECustomer>;                            int totalCustomerCount = 0;                          DataServiceQueryContinuation<MyMLECustomer> continuation1 = null;                          do                          {                              int perPageCustomerCount = 0;                              foreach (MyMLECustomer c in dsq)                              {                                  Assert.AreEqual(c.Name' "Customer " + c.ID);                                  c.Name = c.Name + " Updated";                                  ctx.UpdateObject(c);                                  if (request.DataServiceType == typeof(CustomRowBasedContext))                                  {                                      Assert.AreEqual(CustomRowBasedContext.customers.Single(sc => sc.ID == c.ID).TypeName' ctx.GetEntityDescriptor(c).ServerTypeName);                                  }                                  else                                  {                                      Assert.AreEqual(CustomRowBasedOpenTypesContext.customers.Single(sc => (int)sc.Properties["ID"] == c.ID).TypeName' ctx.GetEntityDescriptor(c).ServerTypeName);                                  }                                    Assert.IsNotNull(ctx.GetEntityDescriptor(c).EditStreamUri);                                    perPageCustomerCount++;                                    int populatedOrderCount = c.Orders.Count;                                  Assert.IsTrue(c.Orders.Count <= pageSize);                                  while (c.Orders.Continuation != null)                                  {                                      ctx.LoadProperty(c' "Orders"' c.Orders.Continuation);                                      Assert.IsTrue(c.Orders.Count - populatedOrderCount <= pageSize);                                      populatedOrderCount = c.Orders.Count;                                  }                                    if (request.DataServiceType == typeof(CustomRowBasedContext))                                  {                                      Assert.AreEqual(((IEnumerable<RowEntityTypeWithIDAsKey>)CustomRowBasedContext.customers.Single(sc => sc.ID == c.ID).Properties["Orders"]).Count()' c.Orders.Count);                                  }                                  else                                  {                                      Assert.AreEqual(((IEnumerable<RowComplexType>)CustomRowBasedOpenTypesContext.customers.Single(sc => (int)sc.Properties["ID"] == c.ID).Properties["Orders"]).Count()' c.Orders.Count);                                  }                                    foreach (MyOrder o in c.Orders)                                  {                                      o.DollarAmount = 9999;                                      ctx.UpdateObject(o);                                        if (request.DataServiceType == typeof(CustomRowBasedContext))                                      {                                          Assert.AreEqual(CustomRowBasedContext.orders.Single(so => so.ID == o.ID).TypeName' ctx.GetEntityDescriptor(o).ServerTypeName);                                      }                                      else                                      {                                          Assert.AreEqual(CustomRowBasedOpenTypesContext.orders.Single(so => (int)so.Properties["ID"] == o.ID).TypeName' ctx.GetEntityDescriptor(o).ServerTypeName);                                      }                                        Assert.IsNull(ctx.GetEntityDescriptor(o).EditStreamUri);                                  }                              }                                Assert.IsTrue(perPageCustomerCount <= pageSize);                              totalCustomerCount += perPageCustomerCount;                              perPageCustomerCount = 0;                          } while ((continuation1 = dsq.GetContinuation()) != null && (dsq = ctx.Execute<MyMLECustomer>(continuation1)) != null);                            if (request.DataServiceType == typeof(CustomRowBasedContext))                          {                              Assert.AreEqual(CustomRowBasedContext.customers.Count' totalCustomerCount);                          }                          else                          {                              Assert.AreEqual(CustomRowBasedOpenTypesContext.customers.Count' totalCustomerCount);                          }                            ctx.SaveChanges();                            //                          // Verify Customers                          //                          DataServiceCollection<MyCustomer> customers = new DataServiceCollection<MyCustomer>(ctx.Execute<MyCustomer>(new Uri("/Customers"' UriKind.Relative))' TrackingMode.None);                          while (customers.Continuation != null)                          {                              customers.Load(ctx.Execute<MyCustomer>(customers.Continuation));                          }                            foreach (MyCustomer c in customers)                          {                              Assert.AreEqual(c.Name' "Customer " + c.ID + " Updated");                              totalCustomerCount--;                          }                            Assert.AreEqual(0' totalCustomerCount);                            //                          // Verify Orders                          //                          DataServiceCollection<MyOrder> orders = new DataServiceCollection<MyOrder>(ctx.Execute<MyOrder>(new Uri("/Orders"' UriKind.Relative))' TrackingMode.None);                          while (orders.Continuation != null)                          {                              orders.Load(ctx.Execute<MyOrder>(orders.Continuation));                          }                            foreach (MyOrder o in orders)                          {                              Assert.AreEqual(9999' o.DollarAmount);                          }                            if (request.DataServiceType == typeof(CustomRowBasedContext))                          {                              Assert.AreEqual(CustomRowBasedContext.orders.Count' orders.Count);                          }                          else                          {                              Assert.AreEqual(CustomRowBasedOpenTypesContext.orders.Count' orders.Count);                          }                      }                  });
Magic Number,AstoriaUnitTests.Tests,BLOBSupportTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\BLOBSupportTest.cs,EnsureTestHasNoLeakedStreams,The following statement contains a magic number: System.Threading.Thread.Sleep(TimeSpan.FromMilliseconds(10));
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,ExpandWithSDP,The following statement contains a magic number: service.PageSizeCustomizer = (config' serviceType) => { config.SetEntitySetPageSize("People"' 2); };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,InvalidOtherUriTests,The following statement contains a magic number: var errorCases = new ErrorCase[] {  #region invalid expand scenarios                      new ErrorCase() {                          RequestUri = String.Format("/People?$expand={0}"' EmployeeTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyNotDeclared"' PeopleTypeName' EmployeeTypeName) }'  #endregion  #region invalid orderby scenarios                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}"' EmployeeTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_OrderByExpressionNotSingleValue") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}/Manager/{0}"' EmployeeTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_OrderByExpressionNotSingleValue") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}/Manager/{0}"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_OrderByExpressionNotSingleValue") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}/DirectReports/{0}/Manager"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyAccessSourceNotSingleValue"' "Manager") }'  #endregion  #region invalid filter scenarios                      //new ErrorCase() {                      //    RequestUri = String.Format("/People?$filter={0} eq null"' EmployeeTypeName)'                      //    StatusCode = HttpStatusCode.BadRequest'                      //    ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier"' "$filter"' EmployeeTypeName) }'                      //new ErrorCase() {                      //    RequestUri = String.Format("/People?$filter={0}/Manager/{0} eq null"' EmployeeTypeName)'                      //    StatusCode = HttpStatusCode.BadRequest'                      //    ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_InvalidTypeIdentifier_MustBeASubType"' EmployeeTypeName' ManagerTypeName) }'                      //new ErrorCase() {                      //    RequestUri = String.Format("/People?$filter={0}/Manager/{0} eq null"' ManagerTypeName)'                      //    StatusCode = HttpStatusCode.BadRequest'                      //    ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier"' "$filter"' ManagerTypeName) }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$filter={0}/DirectReports/Name eq 'Shyam'"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyAccessSourceNotSingleValue"' "Name") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$filter={0}/DirectReports/{0}/{0}/any()"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_TypeIdentifierCannotBeSpecifiedAfterTypeIdentifier"' ManagerTypeName' ManagerTypeName) }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$filter={0}/DirectReports/{0}"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_FilterExpressionNotSingleValue") }'  #endregion  #region invalid POST scenarios                      // ODataLib was fixed and reports missing type name as an annotation.                      new ErrorCase() { // Type Name must be specified if the resource type has derived types - Atom Format                          RequestUri = "/People/" + EmployeeTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_TypeInformationMustBeSpecifiedForInhertiance")'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder()                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.AtomFormat)'                          RequestContentType = UnitTestsUtil.AtomFormat }'                      // ODataLib was fixed and reports missing type name as an annotation.                      new ErrorCase() { // Type Name must be specified if the resource type has derived types - Json Format                          RequestUri = "/People/" + EmployeeTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_TypeInformationMustBeSpecifiedForInhertiance")'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder()                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.JsonLightMimeType)'                          RequestContentType = UnitTestsUtil.JsonLightMimeType }'                      new ErrorCase() { // Type Name specified must be assignable to the type specified in the uri - Atom Format                          RequestUri = "/People/" + ManagerTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_InvalidTypeSpecified"' EmployeeTypeName' ManagerTypeName)'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder() { TypeName = EmployeeTypeName }                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.AtomFormat)'                          RequestContentType = UnitTestsUtil.AtomFormat }'                      new ErrorCase() { // Type Name specified must be assignable to the type specified in the uri - Json Format                          RequestUri = "/People/" + ManagerTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_InvalidTypeSpecified"' EmployeeTypeName' ManagerTypeName)'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder() { TypeName = EmployeeTypeName }                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.JsonLightMimeType)'                          RequestContentType = UnitTestsUtil.JsonLightMimeType }'  #endregion                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,InvalidOtherUriTests,The following statement contains a magic number: var errorCases = new ErrorCase[] {  #region invalid expand scenarios                      new ErrorCase() {                          RequestUri = String.Format("/People?$expand={0}"' EmployeeTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyNotDeclared"' PeopleTypeName' EmployeeTypeName) }'  #endregion  #region invalid orderby scenarios                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}"' EmployeeTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_OrderByExpressionNotSingleValue") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}/Manager/{0}"' EmployeeTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_OrderByExpressionNotSingleValue") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}/Manager/{0}"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_OrderByExpressionNotSingleValue") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}/DirectReports/{0}/Manager"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyAccessSourceNotSingleValue"' "Manager") }'  #endregion  #region invalid filter scenarios                      //new ErrorCase() {                      //    RequestUri = String.Format("/People?$filter={0} eq null"' EmployeeTypeName)'                      //    StatusCode = HttpStatusCode.BadRequest'                      //    ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier"' "$filter"' EmployeeTypeName) }'                      //new ErrorCase() {                      //    RequestUri = String.Format("/People?$filter={0}/Manager/{0} eq null"' EmployeeTypeName)'                      //    StatusCode = HttpStatusCode.BadRequest'                      //    ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_InvalidTypeIdentifier_MustBeASubType"' EmployeeTypeName' ManagerTypeName) }'                      //new ErrorCase() {                      //    RequestUri = String.Format("/People?$filter={0}/Manager/{0} eq null"' ManagerTypeName)'                      //    StatusCode = HttpStatusCode.BadRequest'                      //    ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier"' "$filter"' ManagerTypeName) }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$filter={0}/DirectReports/Name eq 'Shyam'"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyAccessSourceNotSingleValue"' "Name") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$filter={0}/DirectReports/{0}/{0}/any()"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_TypeIdentifierCannotBeSpecifiedAfterTypeIdentifier"' ManagerTypeName' ManagerTypeName) }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$filter={0}/DirectReports/{0}"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_FilterExpressionNotSingleValue") }'  #endregion  #region invalid POST scenarios                      // ODataLib was fixed and reports missing type name as an annotation.                      new ErrorCase() { // Type Name must be specified if the resource type has derived types - Atom Format                          RequestUri = "/People/" + EmployeeTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_TypeInformationMustBeSpecifiedForInhertiance")'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder()                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.AtomFormat)'                          RequestContentType = UnitTestsUtil.AtomFormat }'                      // ODataLib was fixed and reports missing type name as an annotation.                      new ErrorCase() { // Type Name must be specified if the resource type has derived types - Json Format                          RequestUri = "/People/" + EmployeeTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_TypeInformationMustBeSpecifiedForInhertiance")'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder()                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.JsonLightMimeType)'                          RequestContentType = UnitTestsUtil.JsonLightMimeType }'                      new ErrorCase() { // Type Name specified must be assignable to the type specified in the uri - Atom Format                          RequestUri = "/People/" + ManagerTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_InvalidTypeSpecified"' EmployeeTypeName' ManagerTypeName)'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder() { TypeName = EmployeeTypeName }                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.AtomFormat)'                          RequestContentType = UnitTestsUtil.AtomFormat }'                      new ErrorCase() { // Type Name specified must be assignable to the type specified in the uri - Json Format                          RequestUri = "/People/" + ManagerTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_InvalidTypeSpecified"' EmployeeTypeName' ManagerTypeName)'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder() { TypeName = EmployeeTypeName }                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.JsonLightMimeType)'                          RequestContentType = UnitTestsUtil.JsonLightMimeType }'  #endregion                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,InvalidOtherUriTests,The following statement contains a magic number: var errorCases = new ErrorCase[] {  #region invalid expand scenarios                      new ErrorCase() {                          RequestUri = String.Format("/People?$expand={0}"' EmployeeTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyNotDeclared"' PeopleTypeName' EmployeeTypeName) }'  #endregion  #region invalid orderby scenarios                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}"' EmployeeTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_OrderByExpressionNotSingleValue") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}/Manager/{0}"' EmployeeTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_OrderByExpressionNotSingleValue") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}/Manager/{0}"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_OrderByExpressionNotSingleValue") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}/DirectReports/{0}/Manager"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyAccessSourceNotSingleValue"' "Manager") }'  #endregion  #region invalid filter scenarios                      //new ErrorCase() {                      //    RequestUri = String.Format("/People?$filter={0} eq null"' EmployeeTypeName)'                      //    StatusCode = HttpStatusCode.BadRequest'                      //    ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier"' "$filter"' EmployeeTypeName) }'                      //new ErrorCase() {                      //    RequestUri = String.Format("/People?$filter={0}/Manager/{0} eq null"' EmployeeTypeName)'                      //    StatusCode = HttpStatusCode.BadRequest'                      //    ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_InvalidTypeIdentifier_MustBeASubType"' EmployeeTypeName' ManagerTypeName) }'                      //new ErrorCase() {                      //    RequestUri = String.Format("/People?$filter={0}/Manager/{0} eq null"' ManagerTypeName)'                      //    StatusCode = HttpStatusCode.BadRequest'                      //    ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier"' "$filter"' ManagerTypeName) }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$filter={0}/DirectReports/Name eq 'Shyam'"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyAccessSourceNotSingleValue"' "Name") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$filter={0}/DirectReports/{0}/{0}/any()"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_TypeIdentifierCannotBeSpecifiedAfterTypeIdentifier"' ManagerTypeName' ManagerTypeName) }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$filter={0}/DirectReports/{0}"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_FilterExpressionNotSingleValue") }'  #endregion  #region invalid POST scenarios                      // ODataLib was fixed and reports missing type name as an annotation.                      new ErrorCase() { // Type Name must be specified if the resource type has derived types - Atom Format                          RequestUri = "/People/" + EmployeeTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_TypeInformationMustBeSpecifiedForInhertiance")'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder()                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.AtomFormat)'                          RequestContentType = UnitTestsUtil.AtomFormat }'                      // ODataLib was fixed and reports missing type name as an annotation.                      new ErrorCase() { // Type Name must be specified if the resource type has derived types - Json Format                          RequestUri = "/People/" + EmployeeTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_TypeInformationMustBeSpecifiedForInhertiance")'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder()                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.JsonLightMimeType)'                          RequestContentType = UnitTestsUtil.JsonLightMimeType }'                      new ErrorCase() { // Type Name specified must be assignable to the type specified in the uri - Atom Format                          RequestUri = "/People/" + ManagerTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_InvalidTypeSpecified"' EmployeeTypeName' ManagerTypeName)'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder() { TypeName = EmployeeTypeName }                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.AtomFormat)'                          RequestContentType = UnitTestsUtil.AtomFormat }'                      new ErrorCase() { // Type Name specified must be assignable to the type specified in the uri - Json Format                          RequestUri = "/People/" + ManagerTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_InvalidTypeSpecified"' EmployeeTypeName' ManagerTypeName)'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder() { TypeName = EmployeeTypeName }                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.JsonLightMimeType)'                          RequestContentType = UnitTestsUtil.JsonLightMimeType }'  #endregion                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,InvalidOtherUriTests,The following statement contains a magic number: var errorCases = new ErrorCase[] {  #region invalid expand scenarios                      new ErrorCase() {                          RequestUri = String.Format("/People?$expand={0}"' EmployeeTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyNotDeclared"' PeopleTypeName' EmployeeTypeName) }'  #endregion  #region invalid orderby scenarios                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}"' EmployeeTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_OrderByExpressionNotSingleValue") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}/Manager/{0}"' EmployeeTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_OrderByExpressionNotSingleValue") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}/Manager/{0}"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_OrderByExpressionNotSingleValue") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$orderby={0}/DirectReports/{0}/Manager"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyAccessSourceNotSingleValue"' "Manager") }'  #endregion  #region invalid filter scenarios                      //new ErrorCase() {                      //    RequestUri = String.Format("/People?$filter={0} eq null"' EmployeeTypeName)'                      //    StatusCode = HttpStatusCode.BadRequest'                      //    ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier"' "$filter"' EmployeeTypeName) }'                      //new ErrorCase() {                      //    RequestUri = String.Format("/People?$filter={0}/Manager/{0} eq null"' EmployeeTypeName)'                      //    StatusCode = HttpStatusCode.BadRequest'                      //    ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_InvalidTypeIdentifier_MustBeASubType"' EmployeeTypeName' ManagerTypeName) }'                      //new ErrorCase() {                      //    RequestUri = String.Format("/People?$filter={0}/Manager/{0} eq null"' ManagerTypeName)'                      //    StatusCode = HttpStatusCode.BadRequest'                      //    ErrorMessage = DataServicesResourceUtil.GetString("RequestQueryProcessor_QueryParametersPathCannotEndInTypeIdentifier"' "$filter"' ManagerTypeName) }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$filter={0}/DirectReports/Name eq 'Shyam'"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_PropertyAccessSourceNotSingleValue"' "Name") }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$filter={0}/DirectReports/{0}/{0}/any()"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = DataServicesResourceUtil.GetString("RequestUriProcessor_TypeIdentifierCannotBeSpecifiedAfterTypeIdentifier"' ManagerTypeName' ManagerTypeName) }'                      new ErrorCase() {                          RequestUri = String.Format("/People?$filter={0}/DirectReports/{0}"' ManagerTypeName)'                          StatusCode = HttpStatusCode.BadRequest'                          ErrorMessage = ODataLibResourceUtil.GetString("MetadataBinder_FilterExpressionNotSingleValue") }'  #endregion  #region invalid POST scenarios                      // ODataLib was fixed and reports missing type name as an annotation.                      new ErrorCase() { // Type Name must be specified if the resource type has derived types - Atom Format                          RequestUri = "/People/" + EmployeeTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_TypeInformationMustBeSpecifiedForInhertiance")'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder()                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.AtomFormat)'                          RequestContentType = UnitTestsUtil.AtomFormat }'                      // ODataLib was fixed and reports missing type name as an annotation.                      new ErrorCase() { // Type Name must be specified if the resource type has derived types - Json Format                          RequestUri = "/People/" + EmployeeTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_TypeInformationMustBeSpecifiedForInhertiance")'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder()                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.JsonLightMimeType)'                          RequestContentType = UnitTestsUtil.JsonLightMimeType }'                      new ErrorCase() { // Type Name specified must be assignable to the type specified in the uri - Atom Format                          RequestUri = "/People/" + ManagerTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_InvalidTypeSpecified"' EmployeeTypeName' ManagerTypeName)'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder() { TypeName = EmployeeTypeName }                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.AtomFormat)'                          RequestContentType = UnitTestsUtil.AtomFormat }'                      new ErrorCase() { // Type Name specified must be assignable to the type specified in the uri - Json Format                          RequestUri = "/People/" + ManagerTypeName'                          StatusCode = HttpStatusCode.BadRequest'                          HttpMethodNames = new string[] { "POST" }'                          ErrorMessage = DataServicesResourceUtil.GetString("BadRequest_InvalidTypeSpecified"' EmployeeTypeName' ManagerTypeName)'                          Payload = PayloadGenerator.Generate(                              new PayloadBuilder() { TypeName = EmployeeTypeName }                                  .AddProperty("ID"' 10)                                  .AddProperty("Name"' "Sarah")'                              UnitTestsUtil.JsonLightMimeType)'                          RequestContentType = UnitTestsUtil.JsonLightMimeType }'  #endregion                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyInsertTests,The following statement contains a magic number: var payloadGenerators = new PayloadBuilder[] {                      new PayloadBuilder()                          .AddProperty("ID"' 10)                          .AddProperty("Name"' "Anthony")                          .AddNavigationReferenceProperty("Manager"' new PayloadBuilder() { Uri = "/People(5)" })'                      new PayloadBuilder() { TypeName = ManagerTypeName }                          .AddProperty("ID"' 10)                          .AddProperty("Name"' "Anthony")                          .AddNavigationReferenceProperty("Manager"' new PayloadBuilder() { Uri = "/People(5)" })                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyInsertTests,The following statement contains a magic number: var payloadGenerators = new PayloadBuilder[] {                      new PayloadBuilder()                          .AddProperty("ID"' 10)                          .AddProperty("Name"' "Anthony")                          .AddNavigationReferenceProperty("Manager"' new PayloadBuilder() { Uri = "/People(5)" })'                      new PayloadBuilder() { TypeName = ManagerTypeName }                          .AddProperty("ID"' 10)                          .AddProperty("Name"' "Anthony")                          .AddNavigationReferenceProperty("Manager"' new PayloadBuilder() { Uri = "/People(5)" })                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyInsertTests,The following statement contains a magic number: var testCases = new DerivedPropertyTestCase[] {                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] { String.Format("/People/{0}"' ManagerTypeName)' }'                          XPaths = new string[] { "/atom:entry[atom:category/@term='#" + ManagerTypeName + "' and contains(atom:id' 'People(10)') and atom:content/adsm:properties[ads:ID='10' and ads:Name='Anthony']]" }'                          HttpMethods = new string[] { "POST" }'                          StatusCode = 201'                          Version = testVersion'                      }                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyInsertTests,The following statement contains a magic number: var payloadGenerators = new PayloadBuilder[] {                      new PayloadBuilder() { TypeName = EmployeeTypeName }                          .AddProperty("ID"' 10)                          .AddProperty("Name"' "Sarah")                          .AddNavigationReferenceProperty("Manager"' new PayloadBuilder() { Uri = "/People(2)" })                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyInsertTests,The following statement contains a magic number: var testCases = new DerivedPropertyTestCase[] {                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] { String.Format("/People/{0}"' EmployeeTypeName)' }'                          XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(10)') and atom:content/adsm:properties[ads:ID='10' and ads:Name='Sarah']]" }'                          HttpMethods = new string[] { "POST" }'                          StatusCode = 201'                          Version = testVersion'                      }                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyInsertTests,The following statement contains a magic number: var payloadGenerators = new PayloadBuilder[] {                      new PayloadBuilder() { TypeName = EmployeeTypeName }                          .AddProperty("ID"' 10)                          .AddProperty("Name"' "Sarah")                          .AddNavigationReferenceProperty("Manager"' new PayloadBuilder() { Uri = "/People(2)" })'                      new PayloadBuilder() { TypeName = EmployeeTypeName }                          .AddProperty("ID"' 10)                          .AddProperty("Name"' "Sarah")                          .AddNavigationReferenceProperty("Manager"' new PayloadBuilder() { Uri = "/People(2)" })                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyInsertTests,The following statement contains a magic number: var payloadGenerators = new PayloadBuilder[] {                      new PayloadBuilder() { TypeName = EmployeeTypeName }                          .AddProperty("ID"' 10)                          .AddProperty("Name"' "Sarah")                          .AddNavigationReferenceProperty("Manager"' new PayloadBuilder() { Uri = "/People(2)" })'                      new PayloadBuilder() { TypeName = EmployeeTypeName }                          .AddProperty("ID"' 10)                          .AddProperty("Name"' "Sarah")                          .AddNavigationReferenceProperty("Manager"' new PayloadBuilder() { Uri = "/People(2)" })                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyInsertTests,The following statement contains a magic number: var testCases = new DerivedPropertyTestCase[] {                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] {                              String.Format("/People(2)/{0}/DirectReports"' ManagerTypeName)'                              String.Format("/People(2)/{0}/DirectReports/{1}"' ManagerTypeName' EmployeeTypeName) }'                          XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(10)') and atom:content/adsm:properties[ads:ID='10' and ads:Name='Sarah']]" }'                          HttpMethods = new string[] { "POST" }'                          StatusCode = 201'                          Version = testVersion'                      }                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The following statement contains a magic number: var testCases = new DerivedPropertyTestCase[] {                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] { String.Format("/People(2)/{0}"' ManagerTypeName) }'                          HttpMethods = new string[] { "PATCH" }'                          StatusCode = 204'                          MinProtocolVersion = ODataProtocolVersion.V4'                          VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { String.Format("/People(2)/{0}"' ManagerTypeName) }'                                  XPaths = new string[] { "/atom:entry[atom:category/@term='#" + ManagerTypeName + "' and contains(atom:id' 'People(2)') and atom:content/adsm:properties[ads:ID='2' and ads:Name='Anthony']]" } } }                      }'                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] { String.Format("/People(2)/{0}"' ManagerTypeName) }'                          HttpMethods = new string[] { "PATCH" }'                          StatusCode = 204'                          Version = new ServiceVersions()'                          VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { String.Format("/People(2)/{0}"' ManagerTypeName) }'                                  XPaths = new string[] { "/atom:entry[atom:category/@term='#" + ManagerTypeName + "' and contains(atom:id' 'People(2)') and atom:content/adsm:properties[ads:ID='2' and ads:Name='Anthony']]" } } }                      }                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The following statement contains a magic number: var testCases = new DerivedPropertyTestCase[] {                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] { String.Format("/People(2)/{0}"' ManagerTypeName) }'                          HttpMethods = new string[] { "PATCH" }'                          StatusCode = 204'                          MinProtocolVersion = ODataProtocolVersion.V4'                          VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { String.Format("/People(2)/{0}"' ManagerTypeName) }'                                  XPaths = new string[] { "/atom:entry[atom:category/@term='#" + ManagerTypeName + "' and contains(atom:id' 'People(2)') and atom:content/adsm:properties[ads:ID='2' and ads:Name='Anthony']]" } } }                      }'                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] { String.Format("/People(2)/{0}"' ManagerTypeName) }'                          HttpMethods = new string[] { "PATCH" }'                          StatusCode = 204'                          Version = new ServiceVersions()'                          VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { String.Format("/People(2)/{0}"' ManagerTypeName) }'                                  XPaths = new string[] { "/atom:entry[atom:category/@term='#" + ManagerTypeName + "' and contains(atom:id' 'People(2)') and atom:content/adsm:properties[ads:ID='2' and ads:Name='Anthony']]" } } }                      }                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The following statement contains a magic number: var testCases = new DerivedPropertyTestCase[] {                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] { String.Format("/People(3)/{0}"' EmployeeTypeName) }'                          HttpMethods = new string[] { "PATCH"}'                          StatusCode = 204'                          MinProtocolVersion = ODataProtocolVersion.V4'                          VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { String.Format("/People(3)/{0}"' EmployeeTypeName) }'                                  XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(3)') and atom:content/adsm:properties[ads:ID='3' and ads:Name='Sarah']]" } } }                      }'                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] { String.Format("/People(3)/{0}"' EmployeeTypeName) }'                          HttpMethods = new string[] { "PATCH" }'                          StatusCode = 204'                          Version = new ServiceVersions()'                          VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { String.Format("/People(3)/{0}"' EmployeeTypeName) }'                                  XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(3)') and atom:content/adsm:properties[ads:ID='3' and ads:Name='Sarah']]" } } }                      }                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The following statement contains a magic number: var testCases = new DerivedPropertyTestCase[] {                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] { String.Format("/People(3)/{0}"' EmployeeTypeName) }'                          HttpMethods = new string[] { "PATCH"}'                          StatusCode = 204'                          MinProtocolVersion = ODataProtocolVersion.V4'                          VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { String.Format("/People(3)/{0}"' EmployeeTypeName) }'                                  XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(3)') and atom:content/adsm:properties[ads:ID='3' and ads:Name='Sarah']]" } } }                      }'                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] { String.Format("/People(3)/{0}"' EmployeeTypeName) }'                          HttpMethods = new string[] { "PATCH" }'                          StatusCode = 204'                          Version = new ServiceVersions()'                          VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { String.Format("/People(3)/{0}"' EmployeeTypeName) }'                                  XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(3)') and atom:content/adsm:properties[ads:ID='3' and ads:Name='Sarah']]" } } }                      }                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The following statement contains a magic number: var testCases = new DerivedPropertyTestCase[] {                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] {                              String.Format("/People(2)/{0}/DirectReports(3)"' ManagerTypeName)'                              String.Format("/People(2)/{0}/DirectReports(3)/{1}"' ManagerTypeName' EmployeeTypeName) }'                          HttpMethods = new string[] { "PATCH" }'                          StatusCode = 204'                          MinProtocolVersion = ODataProtocolVersion.V4'                          VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { "/People(3)" }'                                  XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(3)') and atom:content/adsm:properties[ads:ID='3' and ads:Name='Sarah']]" } } }                      }'                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] {                              String.Format("/People(2)/{0}/DirectReports(3)"' ManagerTypeName)'                              String.Format("/People(2)/{0}/DirectReports(3)/{1}"' ManagerTypeName' EmployeeTypeName) }'                          HttpMethods = new string[] { "PATCH" }'                          StatusCode = 204'                          Version = new ServiceVersions()'                          VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { "/People(3)" }'                                  XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(3)') and atom:content/adsm:properties[ads:ID='3' and ads:Name='Sarah']]" } } }                      }                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyUpdateTests,The following statement contains a magic number: var testCases = new DerivedPropertyTestCase[] {                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] {                              String.Format("/People(2)/{0}/DirectReports(3)"' ManagerTypeName)'                              String.Format("/People(2)/{0}/DirectReports(3)/{1}"' ManagerTypeName' EmployeeTypeName) }'                          HttpMethods = new string[] { "PATCH" }'                          StatusCode = 204'                          MinProtocolVersion = ODataProtocolVersion.V4'                          VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { "/People(3)" }'                                  XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(3)') and atom:content/adsm:properties[ads:ID='3' and ads:Name='Sarah']]" } } }                      }'                      new DerivedPropertyTestCase()                      {                          RequestUris = new string[] {                              String.Format("/People(2)/{0}/DirectReports(3)"' ManagerTypeName)'                              String.Format("/People(2)/{0}/DirectReports(3)/{1}"' ManagerTypeName' EmployeeTypeName) }'                          HttpMethods = new string[] { "PATCH" }'                          StatusCode = 204'                          Version = new ServiceVersions()'                          VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { "/People(3)" }'                                  XPaths = new string[] { "/atom:entry[atom:category/@term='#" + EmployeeTypeName + "' and contains(atom:id' 'People(3)') and atom:content/adsm:properties[ads:ID='3' and ads:Name='Sarah']]" } } }                      }                  };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyDeleteTests,The following statement contains a magic number: var testCases = new DerivedPropertyTestCase[] {                  new DerivedPropertyTestCase() {                      RequestUris = new string[] { String.Format("/People(3)/{0}"' EmployeeTypeName) }'                      HttpMethods = new string[] { "DELETE"}'                      StatusCode = 204'                      VerifyXPathsByQuery = new DerivedPropertyTestCase[] {                              new DerivedPropertyTestCase() {                                  RequestUris = new string [] { "/People" }'                                  XPaths = new string[] { "count(/atom:feed/atom:entry)=6" } } }'                      MinProtocolVersion = ODataProtocolVersion.V4'                  }              };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The following statement contains a magic number: namedStreamServiceWithSDP.PageSizeCustomizer = (config' serviceType) => { config.SetEntitySetPageSize("People"' 2); };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedNamedStreamPropertyTests,The following statement contains a magic number: var testCases = new DerivedPropertyTestCase[] {                  new DerivedPropertyTestCase() {                      RequestUris = new string[] {                          String.Format("/People?$select={0}/Photo"' ManagerTypeName) }'                      XPaths = new string[] {                          "count(/atom:feed/atom:entry)=" + 2'                          String.Format("//atom:link[@rel='next' and @href='http://host/People?$select={0}/Photo&$skiptoken=2']"' ManagerTypeName)'                      }'                      Version = testVersion'                      Services = new DSPUnitTestServiceDefinition[] { namedStreamServiceWithSDP }'                  }'                  new DerivedPropertyTestCase() {                      RequestUris = new string[] {                          String.Format("/People?$select={0}/Photo"' ManagerTypeName) }'                      XPaths = new string[] {                          "count(/atom:feed/atom:entry)=" + PeopleSetCount'                          String.Format("count(//atom:entry/adsm:properties[count(*)!=0])=0"' ManagerTypeName)' // none of the entries should have the any properties serialized                          String.Format("count(//atom:entry[atom:category/@term='#{0}']/atom:link[@rel='{1}'])=2"' ManagerTypeName' photoLinkRelValue)' // Manager types should have named streams link serialized                          String.Format("count(//atom:entry[atom:category/@term!='#{0}']/atom:link[@rel='{1}'])=0"' ManagerTypeName' photoLinkRelValue)'  // Non manager types should not have any named streams link serialized                      }'                      Version = testVersion'                      Services = new DSPUnitTestServiceDefinition[] { namedStreamService }'                  }'                  new DerivedPropertyTestCase() {                      RequestUris = new string[] { String.Format("/People?$select=ID'{0}/Photo'{1}/Photo"' CustomerTypeName' EmployeeTypeName) }'                      XPaths = new string[] {                          "count(/atom:feed/atom:entry)=2"'                          String.Format("//atom:link[@rel='next' and @href='http://host/People?$select=ID'{0}/Photo'{1}/Photo&$skiptoken=2']"' CustomerTypeName' EmployeeTypeName)'                      }'                      Version = testVersion'                      Services = new DSPUnitTestServiceDefinition[] { namedStreamServiceWithSDP }'                  }'                  new DerivedPropertyTestCase() {                      RequestUris = new string[] { String.Format("/People?$select=ID'{0}/Photo'{1}/Photo"' CustomerTypeName' EmployeeTypeName) }'                      XPaths = new string[] {                          "count(/atom:feed/atom:entry)=" + PeopleSetCount'                          "count(/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='ID'])=0"' // only ID properties are projected for all entries                          String.Format("count(/atom:feed/atom:entry[atom:category/@term='#{0}']/atom:link[@rel='{1}'])=0"' PeopleTypeName' photoLinkRelValue)' // people type should not have the named stream link serialized                          String.Format("count(/atom:feed/atom:entry[atom:category/@term!='#{0}']/atom:link[@rel='{1}'])={2}"' PeopleTypeName' photoLinkRelValue' PeopleSetCount - 1)' // all non-people should have the named stream link serialized                      }'                      Version = testVersion'                      Services = new DSPUnitTestServiceDefinition[] { namedStreamService }'                  }'                  new DerivedPropertyTestCase() {                      RequestUris = new string[] { String.Format("/People?$select=ID'{0}/Photo'{1}/Photo"' CustomerTypeName' ManagerTypeName) }'                      XPaths = new string[] {                          "count(/atom:feed/atom:entry)=2"'                          String.Format("//atom:link[@rel='next' and @href='http://host/People?$select=ID'{0}/Photo'{1}/Photo&$skiptoken=2']"' CustomerTypeName' ManagerTypeName)'                      }'                      Version = testVersion'                      Services = new DSPUnitTestServiceDefinition[] { namedStreamServiceWithSDP }'                  }'                  new DerivedPropertyTestCase() {                      RequestUris = new string[] { String.Format("/People?$select=ID'{0}/Photo'{1}/Photo"' CustomerTypeName' ManagerTypeName) }'                      XPaths = new string[] {                          "count(/atom:feed/atom:entry)=" + PeopleSetCount'                          "count(/atom:feed/atom:entry/atom:content/adsm:properties/*[local-name()!='ID'])=0"' // only ID properties are projected for all entries                          String.Format("count(/atom:feed/atom:entry[atom:category[@term='#{0}' or @term='3{1}']]/atom:link[@rel='{2}'])=0"' PeopleTypeName' EmployeeTypeName' photoLinkRelValue)' // people and employee type should not have the named stream link serialized                          String.Format("count(/atom:feed/atom:entry[atom:category[@term!='{0}' and @term!='{1}']]/atom:link[@rel='{2}'])=3"' PeopleTypeName' EmployeeTypeName' photoLinkRelValue)' // all non-people should have the named stream link serialized                      }'                      Version = testVersion'                      Services = new DSPUnitTestServiceDefinition[] { namedStreamService }'                  }'              };
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DataServiceIdShouldNotContainTypeSegment,The following statement contains a magic number: var payloadBuilder = new PayloadBuilder() { TypeName = ManagerTypeName }.AddProperty("ID"' 10).AddProperty("Name"' "Anthony");
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,NoMetadataOptionShouldWorkForDerivedTypes,The following statement contains a magic number: Assert.AreEqual(request.ResponseStatusCode' 200' "Request must succeed");
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The following statement contains a magic number: requestDSV = requestMDSV.Version > 20 ? requestMDSV : new ServiceVersion(40);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The following statement contains a magic number: requestDSV = requestMDSV.Version > 20 ? requestMDSV : new ServiceVersion(40);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The following statement contains a magic number: Assert.AreEqual(400' request.ResponseStatusCode' "Expecting bad request");
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The following statement contains a magic number: expectedErrorMessages.Add(DataServicesResourceUtil.GetString("DataService_DSVTooLow"' requestDSV.ToString()' versions.MinRequestDSV.Version / 10' versions.MinRequestDSV.Version % 10));
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The following statement contains a magic number: expectedErrorMessages.Add(DataServicesResourceUtil.GetString("DataService_DSVTooLow"' requestDSV.ToString()' versions.MinRequestDSV.Version / 10' versions.MinRequestDSV.Version % 10));
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The following statement contains a magic number: expectedErrorMessages.Add(DataServicesResourceUtil.GetString("DataService_MaxDSVTooLow"' requestMDSV.ToString()' versions.MinRequestMDSV.Version / 10' versions.MinRequestMDSV.Version % 10));
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The following statement contains a magic number: expectedErrorMessages.Add(DataServicesResourceUtil.GetString("DataService_MaxDSVTooLow"' requestMDSV.ToString()' versions.MinRequestMDSV.Version / 10' versions.MinRequestMDSV.Version % 10));
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,IsValidScenario,The following statement contains a magic number: expectedErrorMessages.Add(DataServicesResourceUtil.GetString("DataService_MaxDSVTooLow"' requestMDSV.ToString()' 4' 0));
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetDefaultData,The following statement contains a magic number: andy.SetValue("ID"' 2);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetDefaultData,The following statement contains a magic number: pratikAddress.SetValue("ID"' 2);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetDefaultData,The following statement contains a magic number: pratik.SetValue("ID"' 3);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetDefaultData,The following statement contains a magic number: jimmyAddress.SetValue("ID"' 3);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetDefaultData,The following statement contains a magic number: jimmy.SetValue("ID"' 4);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetDefaultData,The following statement contains a magic number: shyamAddress.SetValue("ID"' 4);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetDefaultData,The following statement contains a magic number: shyam.SetValue("ID"' 5);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetDefaultData,The following statement contains a magic number: marceloAddress.SetValue("ID"' 5);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetDefaultData,The following statement contains a magic number: marcelo.SetValue("ID"' 6);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetDefaultData,The following statement contains a magic number: customer1Address.SetValue("ID"' 6);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,GetDefaultData,The following statement contains a magic number: customer1.SetValue("ID"' 7);
Magic Number,AstoriaUnitTests.Tests,DerivedPropertyTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DerivedPropertyTests.cs,DerivedPropertyTestCase,The following statement contains a magic number: this.StatusCode = 200;
Magic Number,AstoriaUnitTests.Tests,ElevatorDbContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,ElevatorDbContext,The following statement contains a magic number: Elevator elevator1 = new Elevator { ID = 1' CurrentFloor = 10' Location = "NE"' SerialNumber = "12345" };
Magic Number,AstoriaUnitTests.Tests,ElevatorDbContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,ElevatorDbContext,The following statement contains a magic number: Elevator elevator2 = new Elevator { ID = 2' CurrentFloor = 2' Location = "NW"' SerialNumber = "67890" };
Magic Number,AstoriaUnitTests.Tests,ElevatorDbContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,ElevatorDbContext,The following statement contains a magic number: Elevator elevator2 = new Elevator { ID = 2' CurrentFloor = 2' Location = "NW"' SerialNumber = "67890" };
Magic Number,AstoriaUnitTests.Tests,ElevatorDbContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,ElevatorDbContext,The following statement contains a magic number: Elevator elevator3 = new Elevator { ID = 3' CurrentFloor = 3' Location = "E"' SerialNumber = "02468" };
Magic Number,AstoriaUnitTests.Tests,ElevatorDbContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,ElevatorDbContext,The following statement contains a magic number: Elevator elevator3 = new Elevator { ID = 3' CurrentFloor = 3' Location = "E"' SerialNumber = "02468" };
Magic Number,AstoriaUnitTests.Tests,ElevatorDbContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,ElevatorDbContext,The following statement contains a magic number: FloorCall call1 = new FloorCall { ID = 1' Floor = 9' Up = true };
Magic Number,AstoriaUnitTests.Tests,ElevatorDbContext,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DbContextTest.cs,ElevatorDbContext,The following statement contains a magic number: FloorCall call2 = new FloorCall { ID = 1' Floor = 3' Up = true' Down = true };
Magic Number,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackAndFormatSuccessSmokeTest,The following statement contains a magic number: Assert.AreEqual(200' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackSuccessQueryTest,The following statement contains a magic number: Assert.AreEqual(200' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackAndFormatSuccessVersionTest,The following statement contains a magic number: Assert.AreEqual(200' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackSuccessQueryKeywordTest,The following statement contains a magic number: Assert.AreEqual(204' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackSuccessQueryKeywordTest,The following statement contains a magic number: Assert.AreEqual(200' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackSuccessQueryKeywordTest,The following statement contains a magic number: Assert.AreEqual(200' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallBackInBatchRequestTest,The following statement contains a magic number: var testCase = new SimpleBatchTestCase              {                  RequestPayload = new BatchInfo(new BatchQuery(new Operation(batchQueryOperation.ToString())))'                  ExpectedResponsePayloadContains = new[]                   {                       "Content-Type: text/javascript;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                       "foo({\"@odata.context\":"'                      "\"StreetAddress\":\"Line1\"'\"City\":\"Redmond\"'\"State\":\"WA\"'\"PostalCode\":\"98052\"})"'                  }'                  ResponseStatusCode = 202'                  ResponseETag = default(string)'              };
Magic Number,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackFailOnCUDRequest,The following statement contains a magic number: request.RequestStream = new MemoryStream(new byte[] { 1' 2' 3' });
Magic Number,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackFailOnCUDRequest,The following statement contains a magic number: request.RequestStream = new MemoryStream(new byte[] { 1' 2' 3' });
Magic Number,AstoriaUnitTests.Tests,CallbackQueryOptionFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\CallbackQueryOptionFunctionalTests.cs,CallbackOptionValueTest,The following statement contains a magic number: Assert.AreEqual(200' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatSmokeTest,The following statement contains a magic number: Assert.AreEqual(200' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $metadata tests                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/$metadata?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                    // query keyword tests: covers $format with expand' select' top' skip' orderby' filter' any                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                 new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // query keyword tests : put $format in the middle of uri' covers $format with filter' all' inlinecount                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=json&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=xml&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $ref                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=atom"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                    //parser IEEE754Compatible format parameters                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=true"'                      ExpectedContentType = "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true;charset=utf-8"'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=false"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/json;IEEE754Compatible=unrecognized"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryErrorTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $format with $count                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $value                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryErrorTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $format with $count                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $value                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryErrorTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $format with $count                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $value                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryErrorTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $format with $count                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $value                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryErrorTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $format with $count                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $value                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryErrorTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $format with $count                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $value                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryErrorTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $format with $count                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $value                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatQueryErrorTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // $format with $count                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format with $value                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,EmptyDollarFormatValue,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // No uri parsing error occurs if there are other query options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=&$expand=Orders&$select=ID'Name'Orders"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // Accept header is over-written by empty $format option                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format="'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,EmptyDollarFormatValue,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // No uri parsing error occurs if there are other query options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=&$expand=Orders&$select=ID'Name'Orders"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // Accept header is over-written by empty $format option                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format="'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // use MIME types as format options' also test them with combination with other query keywords                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages&$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*/*;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // $ref' $count' $value with MIME type format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/json;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/xml;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // use MIME types as format options' also test them with combination with other query keywords                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages&$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*/*;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // $ref' $count' $value with MIME type format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/json;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/xml;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // use MIME types as format options' also test them with combination with other query keywords                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages&$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*/*;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // $ref' $count' $value with MIME type format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/json;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/xml;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // use MIME types as format options' also test them with combination with other query keywords                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages&$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*/*;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // $ref' $count' $value with MIME type format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/json;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/xml;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // use MIME types as format options' also test them with combination with other query keywords                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages&$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*/*;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // $ref' $count' $value with MIME type format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/json;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/xml;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // use MIME types as format options' also test them with combination with other query keywords                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages&$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*/*;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // $ref' $count' $value with MIME type format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/json;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/xml;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // use MIME types as format options' also test them with combination with other query keywords                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages&$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*/*;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // $ref' $count' $value with MIME type format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/json;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/xml;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // use MIME types as format options' also test them with combination with other query keywords                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages&$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*/*;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // $ref' $count' $value with MIME type format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/json;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/xml;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // use MIME types as format options' also test them with combination with other query keywords                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages&$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*/*;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // $ref' $count' $value with MIME type format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/json;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/xml;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // use MIME types as format options' also test them with combination with other query keywords                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages&$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*/*;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // $ref' $count' $value with MIME type format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/json;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/xml;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // use MIME types as format options' also test them with combination with other query keywords                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages&$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*/*;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // $ref' $count' $value with MIME type format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/json;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/xml;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatMIMETypeTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // use MIME types as format options' also test them with combination with other query keywords                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)&$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages&$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$expand=Orders&$select=ID'Name'Orders&$top=3&$skip=1&$orderby=ID&$filter=Orders/any(p:p/ID%20ne%200)"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/json;odata.metadata=minimal;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*/*;&$filter=Orders/all(p:p/ID%20ge%200)&inlinecount=allpages"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                    // $ref' $count' $value with MIME type format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationAtomXml'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Orders/$ref?$format=application/json;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 200                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/xml;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/$count?$format=application/json"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/atom%2Bxml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/Name/$value?$format=application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8"'                      ExpectedContentType = applicationJsonLight'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatInvalidFormatTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // jsonlight was removed as a special value' so we want to make sure it fails.                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=jsonlight"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format option is case sentitive                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=Atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // invalid $format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=blah"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atomm"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;json"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml;text/plain;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/atom%2Bxml;application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=text/plain"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatInvalidFormatTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // jsonlight was removed as a special value' so we want to make sure it fails.                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=jsonlight"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format option is case sentitive                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=Atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // invalid $format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=blah"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atomm"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;json"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml;text/plain;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/atom%2Bxml;application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=text/plain"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatInvalidFormatTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // jsonlight was removed as a special value' so we want to make sure it fails.                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=jsonlight"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format option is case sentitive                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=Atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // invalid $format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=blah"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atomm"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;json"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml;text/plain;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/atom%2Bxml;application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=text/plain"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatInvalidFormatTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // jsonlight was removed as a special value' so we want to make sure it fails.                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=jsonlight"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format option is case sentitive                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=Atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // invalid $format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=blah"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atomm"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;json"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml;text/plain;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/atom%2Bxml;application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=text/plain"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatInvalidFormatTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // jsonlight was removed as a special value' so we want to make sure it fails.                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=jsonlight"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format option is case sentitive                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=Atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // invalid $format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=blah"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atomm"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;json"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml;text/plain;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/atom%2Bxml;application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=text/plain"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatInvalidFormatTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // jsonlight was removed as a special value' so we want to make sure it fails.                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=jsonlight"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format option is case sentitive                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=Atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // invalid $format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=blah"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atomm"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;json"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml;text/plain;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/atom%2Bxml;application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=text/plain"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatInvalidFormatTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // jsonlight was removed as a special value' so we want to make sure it fails.                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=jsonlight"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format option is case sentitive                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=Atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // invalid $format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=blah"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atomm"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;json"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml;text/plain;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/atom%2Bxml;application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=text/plain"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatInvalidFormatTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // jsonlight was removed as a special value' so we want to make sure it fails.                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=jsonlight"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format option is case sentitive                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=Atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // invalid $format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=blah"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atomm"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;json"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml;text/plain;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/atom%2Bxml;application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=text/plain"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatInvalidFormatTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // jsonlight was removed as a special value' so we want to make sure it fails.                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=jsonlight"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format option is case sentitive                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=Atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // invalid $format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=blah"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atomm"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;json"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml;text/plain;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/atom%2Bxml;application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=text/plain"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatInvalidFormatTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // jsonlight was removed as a special value' so we want to make sure it fails.                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=jsonlight"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format option is case sentitive                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=Atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // invalid $format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=blah"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atomm"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;json"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml;text/plain;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/atom%2Bxml;application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=text/plain"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,DollarFormatScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\DollarFormatScenarioTests.cs,DollarFormatInvalidFormatTest,The following statement contains a magic number: var testCases = new List<DollarFormatTestCase>()              {                  // jsonlight was removed as a special value' so we want to make sure it fails.                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=jsonlight"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // $format option is case sentitive                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=Atom"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    // invalid $format options                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=blah"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atomm"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom;json"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=atom/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=*"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers(1)/ID?$format=application/xml;text/plain;"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                  new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=application/atom%2Bxml;application/xml"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'                    new DollarFormatTestCase()                  {                      UriString = "/Customers/?$format=text/plain"'                      ExpectedContentType = applicationXml'                      ExpectedStatusCode = 415                  }'              };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,PrimitiveCustomAnnotationOnErrorShouldGetWrittenInJsonLight,The following statement contains a magic number: AnnotationValue = new ODataPrimitiveValue(66);
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,MultipleCustomAnnotationOnErrorShouldGetWrittenInJsonLight,The following statement contains a magic number: AnnotationValue = new ODataPrimitiveValue(77);
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,ComplexCollectionAnnotationOnErrorShouldGetWrittenInJsonLight,The following statement contains a magic number: AnnotationValue = new ODataCollectionValue                  {                      TypeName = "Collection(Edm.Int32)"'                      Items = new object[]{1'2'3'4}                  };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,ComplexCollectionAnnotationOnErrorShouldGetWrittenInJsonLight,The following statement contains a magic number: AnnotationValue = new ODataCollectionValue                  {                      TypeName = "Collection(Edm.Int32)"'                      Items = new object[]{1'2'3'4}                  };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,ComplexCollectionAnnotationOnErrorShouldGetWrittenInJsonLight,The following statement contains a magic number: AnnotationValue = new ODataCollectionValue                  {                      TypeName = "Collection(Edm.Int32)"'                      Items = new object[]{1'2'3'4}                  };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BatchCustomAnnotationOnInnerRequestErrorShouldGetWrittenInJsonLight,The following statement contains a magic number: var test = new SimpleBatchTestCase              {                  RequestPayload = new BatchInfo(new BatchQuery(new Operation(batchQueryOperation.ToString())))'                  ResponseStatusCode = 202'                  ResponseETag = default(string)'                  ResponseVersion = V4'                  RequestDataServiceVersion = V4'                  RequestMaxDataServiceVersion = V4'              };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BatchCustomAnnotationOnInnerRequestErrorShouldGetWrittenInJsonLight,The following statement contains a magic number: AnnotationValue = new ODataCollectionValue                  {                      TypeName = "Collection(Edm.String)"'                      Items = new []                      {                          "404"'                          new DateTimeOffset(2012' 10' 10' 1' 2' 3' new TimeSpan()).ToString()                      }                  };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BatchCustomAnnotationOnInnerRequestErrorShouldGetWrittenInJsonLight,The following statement contains a magic number: AnnotationValue = new ODataCollectionValue                  {                      TypeName = "Collection(Edm.String)"'                      Items = new []                      {                          "404"'                          new DateTimeOffset(2012' 10' 10' 1' 2' 3' new TimeSpan()).ToString()                      }                  };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BatchCustomAnnotationOnInnerRequestErrorShouldGetWrittenInJsonLight,The following statement contains a magic number: AnnotationValue = new ODataCollectionValue                  {                      TypeName = "Collection(Edm.String)"'                      Items = new []                      {                          "404"'                          new DateTimeOffset(2012' 10' 10' 1' 2' 3' new TimeSpan()).ToString()                      }                  };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BatchCustomAnnotationOnInnerRequestErrorShouldGetWrittenInJsonLight,The following statement contains a magic number: AnnotationValue = new ODataCollectionValue                  {                      TypeName = "Collection(Edm.String)"'                      Items = new []                      {                          "404"'                          new DateTimeOffset(2012' 10' 10' 1' 2' 3' new TimeSpan()).ToString()                      }                  };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BatchCustomAnnotationOnInnerRequestErrorShouldGetWrittenInJsonLight,The following statement contains a magic number: AnnotationValue = new ODataCollectionValue                  {                      TypeName = "Collection(Edm.String)"'                      Items = new []                      {                          "404"'                          new DateTimeOffset(2012' 10' 10' 1' 2' 3' new TimeSpan()).ToString()                      }                  };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BatchCustomAnnotationOnInnerRequestErrorShouldGetWrittenInJsonLight,The following statement contains a magic number: webRequest.ResponseStatusCode.Should().Be(202);
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,FailedTopLevelBatchRequestShouldBeXmlRegardlessOfCustomAnnotation,The following statement contains a magic number: var test = new SimpleBatchTestCase              {                  RequestPayload = new BatchInfo(new BatchQuery(new Operation(batchQueryOperation.ToString())))'                  ResponseStatusCode = 400'              };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BadCustomAnnotationOnErrorWithBatchRequestCausesInStreamErrorInErrorPayload,The following statement contains a magic number: var test = new SimpleBatchTestCase              {                  RequestPayload = new BatchInfo(new BatchQuery(new Operation(batchQueryOperation.ToString())))'                  ResponseStatusCode = 202'                  ResponseETag = default(string)'                  ResponseVersion = V4'                  RequestDataServiceVersion = V4'                  RequestMaxDataServiceVersion = V4'              };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BadCustomAnnotationOnErrorWithBatchRequestCausesInStreamErrorInErrorPayload,The following statement contains a magic number: AnnotationValue = new ODataCollectionValue                  {                      Items = new Object[]{123' new Object()} // collection value is wrong so error payload fails to write                  };
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BadCustomAnnotationOnErrorWithBatchRequestCausesInStreamErrorInErrorPayload,The following statement contains a magic number: webRequest.ResponseStatusCode.Should().Be(202);
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,BadCustomAnnotationOnErrorWithBatchRequestCausesInStreamErrorInErrorPayload,The following statement contains a magic number: HandleExceptionCalls.Should().Be(2);
Magic Number,AstoriaUnitTests.Tests,ModifyErrorResponseFunctionalTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,PrimitiveCustomAnnotationOnInStreamError,The following statement contains a magic number: AnnotationValue = new ODataPrimitiveValue(88);
Magic Number,AstoriaUnitTests.Tests,ModifyErrorMessageInHandleExceptionService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,InStreamErrorGetCustomers,The following statement contains a magic number: return this.CurrentDataSource.Customers.AsEnumerable<Customer>().Where(c => c.ID < 5 && this.ThrowForCustomer2(c));
Magic Number,AstoriaUnitTests.Tests,ModifyErrorMessageInHandleExceptionService,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyErrorResponseFunctionalTest.cs,ThrowForCustomer2,The following statement contains a magic number: c.ID == 2
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,CanOverloadPostTunnelingWithHeader,The following statement contains a magic number: Action<TestWebRequest> validateResponse = (TestWebRequest request) =>                  Assert.AreEqual(204' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,CanOverloadPostTunnelingWithQueryItem,The following statement contains a magic number: Action<TestWebRequest> validateResponse = (TestWebRequest request) =>                  Assert.AreEqual(204' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,UserCodeForcedErrorIsThrown,The following statement contains a magic number: Action<TestWebRequest> validateResponse = (TestWebRequest request) =>              {                  var responseBody = request.GetResponseStreamAsText();                  Assert.IsTrue(responseBody.Contains("\"error\":") && responseBody.Contains("teapot"));                  Assert.AreEqual(418' request.ResponseStatusCode);              };
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,UserCodeForcedErrorAndIfVersionHeadersDontMakeSenseWeGetTheRequestedContentTypeAnyway,The following statement contains a magic number: Action<TestWebRequest> validateResponse = (TestWebRequest request) =>              {                  var responseBody = request.GetResponseStreamAsText();                  Assert.IsTrue(responseBody.Contains("error") && responseBody.Contains("teapot"));                  Assert.AreEqual(418' request.ResponseStatusCode);              };
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,SetOverrideVariousTypeHeaderValueWithQueryString,The following statement contains a magic number: Action<TestWebRequest> validateResponse = (TestWebRequest request) =>              {                  Assert.AreEqual(200' request.ResponseStatusCode);                  Assert.IsTrue(request.ResponseContentType.Contains("application/atom+xml;"));                  // Date is a system header and our service will override the user custom value in response                  Assert.AreNotEqual("Wed' 01 Aug 2012 23:23:21 GMT"' request.ResponseHeaders["Date"]);                    // The following response headers are written in ProcessingRequest/OnStartProcessingRequest                  Assert.AreEqual("Wed' 01 Aug 2012 23:23:21 GMT"' request.ResponseHeaders["MyDate"]);                  Assert.AreEqual("200"' request.ResponseHeaders["MyHeader"]);              };
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,ServiceOperationParameterWithQueryStringHeader,The following statement contains a magic number: Action<TestWebRequest> validateResponse = (TestWebRequest request) =>                  {                      Assert.AreEqual(200' request.ResponseStatusCode);                      Assert.IsTrue(request.ResponseContentType.ToLower().Contains(UnitTestsUtil.JsonLightMimeType.ToLower()));                        // The following response header is written in ProcessingRequest/OnStartProcessingRequest                      Assert.AreEqual("myheadervalue"' request.ResponseHeaders["MyHeader"]);                  };
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,GetQueryStringItemEdgeTest,The following statement contains a magic number: Assert.AreEqual(200' webRequest.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,GetQueryStringItemEdgeTest,The following statement contains a magic number: Assert.AreEqual(200' webRequest.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,GetQueryStringItemEdgeTest,The following statement contains a magic number: Assert.AreEqual(200' webRequest.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,GetQueryStringItemEdgeTest,The following statement contains a magic number: Assert.AreEqual(200' webRequest.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,GetQueryStringItemEdgeTest,The following statement contains a magic number: Assert.AreEqual(400' webRequest.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,SetOverrideBadMaxDataServiceVersionHeaderWithQueryString,The following statement contains a magic number: Action<TestWebRequest> validateResponse = (TestWebRequest request) =>              {                  Assert.AreEqual(400' request.ResponseStatusCode);                  Assert.IsTrue(request.GetResponseStreamAsText().Contains("Request version '4.a;' specified for header 'OData-MaxVersion' is not valid"));              };
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,CanOverloadUpdateRequestWithHeader,The following statement contains a magic number: Assert.AreEqual(204' webRequest.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,CanOverloadUpdateRequestWithHeader,The following statement contains a magic number: string correctGuid = webRequest.ResponseETag.Substring(webRequest.ResponseETag.IndexOf('"') + 1' 36);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,CanOverloadUpdateRequestWithHeader,The following statement contains a magic number: Assert.AreEqual(412' webRequest.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,CanOverloadUpdateRequestWithHeader,The following statement contains a magic number: Assert.AreEqual(200' webRequest.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OverloadUpdateRequestWithContentTypeContentLengthHeader,The following statement contains a magic number: Assert.AreEqual(400' webRequest.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OverloadUpdateRequestWithContentTypeContentLengthHeader,The following statement contains a magic number: Assert.AreEqual(204' webRequest.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OnStartProcessingRequestCanOverrideAcceptHeaderInBatchOperationWithHeader,The following statement contains a magic number: var test = new SimpleBatchTestCase              {                  RequestPayload = new BatchInfo(new BatchQuery(new Operation(batchQueryOperation.ToString())))'                  ExpectedResponsePayloadContains = new[] { "OData-Version: 4.0"' "Content-Type: application/json;odata.metadata=minimal" }'                  ResponseStatusCode = 202'                   ResponseETag = default(string)'                   ResponseVersion = V4'                   RequestDataServiceVersion = V4'                   RequestMaxDataServiceVersion = V4'              };
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OnStartProcessingRequestCanOverrideAcceptHeaderInBatchOperationWithQueryItem,The following statement contains a magic number: var test = new SimpleBatchTestCase              {                  RequestPayload = new BatchInfo(new BatchQuery(new Operation(batchQueryOperation.ToString())))'                  ExpectedResponsePayloadContains = new[] { "Content-Type: application/json;odata.metadata=minimal" }'                  ResponseStatusCode = 202'                   ResponseETag = default(string)'                   ResponseVersion = V4'                   RequestDataServiceVersion = V4'                   RequestMaxDataServiceVersion = V4'              };
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,CanOverrideAcceptHeaderToBatchRequestWithQueryItem,The following statement contains a magic number: var test = new SimpleBatchTestCase              {                  RequestPayload = new BatchInfo(new BatchQuery(new Operation(batchQueryOperation.ToString())))'                  ResponseStatusCode = 202'                  ResponseETag = default(string)'                  ResponseVersion = V4'                  RequestDataServiceVersion = V4'                  RequestMaxDataServiceVersion = V4'              };
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,DollarFormatOverrideAcceptHeaderBeingSetInOnStartProcessingRequest,The following statement contains a magic number: var test = new SimpleBatchTestCase              {                  RequestPayload = new BatchInfo(new BatchQuery(new Operation(batchQueryOperation.ToString())))'                  ExpectedResponsePayloadContains = new[] { "Content-Type: application/json;odata.metadata=minimal" }'                  ResponseStatusCode = 202'                  ResponseETag = default(string)'                  ResponseVersion = V4'                  RequestDataServiceVersion = V4'                  RequestMaxDataServiceVersion = V4'              };
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,DollarFormatShouldFailOnTopLevelBatch,The following statement contains a magic number: var test = new SimpleBatchTestCase              {                  RequestPayload = new BatchInfo(new BatchQuery(new Operation(batchQueryOperation.ToString())))'                   ExpectedResponsePayloadContains = new[] {"batch"}'                   ResponseStatusCode = 400'                  ResponseETag = default(string)'                   ResponseVersion = V4'                   RequestDataServiceVersion = V4'                  RequestMaxDataServiceVersion = V4'              };
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OverwriteHeaders,The following statement contains a magic number: throw new DataServiceException(418' "User code threw a teapot exception.");
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OverwriteHeaders,The following statement contains a magic number: throw new DataServiceException(418' "User code threw a testNonExisting exception.");
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OverwriteHeaders,The following statement contains a magic number: throw new DataServiceException(418' "User code threw a testNullKey exception.");
Magic Number,AstoriaUnitTests.Tests,ModifyHeadersScenarioTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\ModifyHeadersScenarioTests.cs,OverwriteHeaders,The following statement contains a magic number: throw new DataServiceException(418' "User code threw a testNullValue exception.");
Magic Number,AstoriaUnitTests.Tests,NonNullablePropertiesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,NonNullableComplexPropertyTest,The following statement contains a magic number: test.TestUtil.RunCombinations(                  new DSPUnitTestServiceDefinition[] { service }'                  new string[] { UnitTestsUtil.AtomFormat }'                  ServiceVersion.ValidVersions' // requestDSV                  ServiceVersion.ValidVersions' // requestMDSV                  ServiceVersion.ValidVersions' // maxProtocolVersion                  (localService' format' requestDSV' requestMDSV' maxProtocolVersion) =>                  {                      if (maxProtocolVersion == null)                      {                          return;                      }                        localService.DataServiceBehavior.MaxProtocolVersion = maxProtocolVersion.ToProtocolVersion();                      using (TestWebRequest request = localService.CreateForInProcess())                      {                          if (requestDSV != null && maxProtocolVersion.ToProtocolVersion() < requestDSV.ToProtocolVersion())                          {                              return;                          }                            request.StartService();                          request.HttpMethod = "POST";                          request.RequestUriString = "/People";                          request.Accept = format;                          if (requestDSV != null) request.RequestVersion = requestDSV.ToString();                          if (requestMDSV != null) request.RequestMaxVersion = requestMDSV.ToString();                            request.RequestContentType = format;                          request.SetRequestStreamAsText(@"<entry xml:base='http://host/' xmlns:d='http://docs.oasis-open.org/odata/ns/data' xmlns:m='http://docs.oasis-open.org/odata/ns/metadata' xmlns='http://www.w3.org/2005/Atom'>      <category term='#AstoriaUnitTests.Tests.PeopleType' scheme='http://docs.oasis-open.org/odata/ns/scheme' />      <content type='application/xml'>        <m:properties>          <d:ID m:type='Edm.Int32'>1</d:ID>          <d:Name>bar</d:Name>          <d:Body></d:Body>          <d:Age>6</d:Age>          <d:Office m:type='#AstoriaUnitTests.Tests.OfficeType' m:null='true'/>        </m:properties>      </content>    </entry>");                          request.HttpMethod = "POST";                          var exception = test.TestUtil.RunCatching(request.SendRequest);                          Assert.IsNotNull(exception' "Exception is always expected.");                          Assert.IsNotNull(exception.InnerException' "InnerException is always expected.");                            // For v1 and v2' provider should throw.                          Assert.AreEqual("EntityFramework"' exception.InnerException.Source' "Source expected: EntityFramework' actual: " + exception.InnerException.Source);                          Assert.AreEqual(500' request.ResponseStatusCode' "Status code expected: 500" + "' actual: " + request.ResponseStatusCode);                      }                  });
Magic Number,AstoriaUnitTests.Tests,NonNullablePropertiesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,NonNullableTopLevelPropertiesTest,The following statement contains a magic number: test.TestUtil.RunCombinations(                  new DSPUnitTestServiceDefinition[]{ service }'                  testCase.HttpMethods'                  testCase.RequestUris'                  new string[] { UnitTestsUtil.JsonLightMimeType }'                  ServiceVersion.ValidVersions' // requestDSV                  ServiceVersion.ValidVersions' // requestMDSV                  ServiceVersion.ValidVersions' // maxProtocolVersion                  (localService' httpMethod' requestUri' format' requestDSV' requestMDSV' maxProtocolVersion) =>                  {                      if (maxProtocolVersion == null)                      {                          return;                      }                        localService.DataServiceBehavior.MaxProtocolVersion = maxProtocolVersion.ToProtocolVersion();                      using (TestWebRequest request = localService.CreateForInProcess())                      {                          if (requestDSV != null && maxProtocolVersion.ToProtocolVersion() < requestDSV.ToProtocolVersion())                          {                              return;                          }                          request.StartService();                          request.HttpMethod = httpMethod;                          request.RequestUriString = requestUri;                          request.Accept = format;                          if (requestDSV != null) request.RequestVersion = requestDSV.ToString();                          if (requestMDSV != null) request.RequestMaxVersion = requestMDSV.ToString();                                                                                  request.RequestContentType = format;                          request.SetRequestStreamAsText(@"{ ""value"" : null }");                            IDisposable dispose = null;                          if (httpMethod != "GET")                          {                              dispose = service.CreateChangeScope(GetDefaultData(service.Metadata));                          }                            var exception = test.TestUtil.RunCatching(request.SendRequest);                          Assert.IsNotNull(exception' "Exception is always expected.");                          Assert.IsNotNull(exception.InnerException' "InnerException is always expected.");                            if (requestUri.Substring(requestUri.LastIndexOf("/") + 1) == "Office")                          {                              Assert.AreEqual("System.Data.Entity"' exception.InnerException.Source' "Source expected: System.Data.Entity' actual: " + exception.InnerException.Source);                              Assert.AreEqual(500' request.ResponseStatusCode' "Status code expected: 500" + "' actual: " + request.ResponseStatusCode);                          }                          else                          {                              // For primitive properties provider decides what to do. For EF' we get an exception with response code of 500.                              Assert.AreEqual(500' request.ResponseStatusCode' "Status code expected: 500" + "' actual: " + request.ResponseStatusCode);                          }                            dispose.Dispose();                      }                  });
Magic Number,AstoriaUnitTests.Tests,NonNullablePropertiesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,NonNullableTopLevelPropertiesTest,The following statement contains a magic number: test.TestUtil.RunCombinations(                  new DSPUnitTestServiceDefinition[]{ service }'                  testCase.HttpMethods'                  testCase.RequestUris'                  new string[] { UnitTestsUtil.JsonLightMimeType }'                  ServiceVersion.ValidVersions' // requestDSV                  ServiceVersion.ValidVersions' // requestMDSV                  ServiceVersion.ValidVersions' // maxProtocolVersion                  (localService' httpMethod' requestUri' format' requestDSV' requestMDSV' maxProtocolVersion) =>                  {                      if (maxProtocolVersion == null)                      {                          return;                      }                        localService.DataServiceBehavior.MaxProtocolVersion = maxProtocolVersion.ToProtocolVersion();                      using (TestWebRequest request = localService.CreateForInProcess())                      {                          if (requestDSV != null && maxProtocolVersion.ToProtocolVersion() < requestDSV.ToProtocolVersion())                          {                              return;                          }                          request.StartService();                          request.HttpMethod = httpMethod;                          request.RequestUriString = requestUri;                          request.Accept = format;                          if (requestDSV != null) request.RequestVersion = requestDSV.ToString();                          if (requestMDSV != null) request.RequestMaxVersion = requestMDSV.ToString();                                                                                  request.RequestContentType = format;                          request.SetRequestStreamAsText(@"{ ""value"" : null }");                            IDisposable dispose = null;                          if (httpMethod != "GET")                          {                              dispose = service.CreateChangeScope(GetDefaultData(service.Metadata));                          }                            var exception = test.TestUtil.RunCatching(request.SendRequest);                          Assert.IsNotNull(exception' "Exception is always expected.");                          Assert.IsNotNull(exception.InnerException' "InnerException is always expected.");                            if (requestUri.Substring(requestUri.LastIndexOf("/") + 1) == "Office")                          {                              Assert.AreEqual("System.Data.Entity"' exception.InnerException.Source' "Source expected: System.Data.Entity' actual: " + exception.InnerException.Source);                              Assert.AreEqual(500' request.ResponseStatusCode' "Status code expected: 500" + "' actual: " + request.ResponseStatusCode);                          }                          else                          {                              // For primitive properties provider decides what to do. For EF' we get an exception with response code of 500.                              Assert.AreEqual(500' request.ResponseStatusCode' "Status code expected: 500" + "' actual: " + request.ResponseStatusCode);                          }                            dispose.Dispose();                      }                  });
Magic Number,AstoriaUnitTests.Tests,NonNullablePropertiesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,GetDefaultData,The following statement contains a magic number: people1.SetValue("Age"' 23);
Magic Number,AstoriaUnitTests.Tests,NonNullablePropertiesTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,GetDefaultData,The following statement contains a magic number: office.SetValue("OfficeNumber"' 100);
Magic Number,AstoriaUnitTests.Tests,NonNullablePropertiesTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\NonNullablePropertiesTests.cs,NonNullablePropertiesTestCase,The following statement contains a magic number: this.ExpectedStatusCode = 500;
Magic Number,AstoriaUnitTests.Tests,PlainSerializersTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\PlainSerializersTest.cs,PlainSerializersMimeOverrideTest,The following statement contains a magic number: Assert.AreEqual(415' request.ResponseStatusCode);
Magic Number,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,JsonWrapperTest,The following statement contains a magic number: c.InternalCustomersList.Add(new Customer() { ID = 1000' Name = "a */" });
Magic Number,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,GeneralSerializerDates,The following statement contains a magic number: CombinatorialEngine engine = CombinatorialEngine.FromDimensions(                      new Dimension("DateTime"' new DateTime[]                       {                           DateTime.Now'                           DateTime.UtcNow'                           new DateTime(/* Ticks for one day */ 864000000000' DateTimeKind.Unspecified)                      })'                      new Dimension("SerializationFormatData"' SerializationFormatData.StructuredValues));
Magic Number,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,GeneralSerializerDates,The following statement contains a magic number: int id = 100;
Magic Number,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,Web3SSerializerCycleDetectionTest,The following statement contains a magic number: EventHandler handler = new EventHandler((sender' e) =>                  {                      var context = (TypedCustomDataContext<TypedEntity<int' CircularReferenceType>>)sender;                      var theValue = new TypedEntity<int' CircularReferenceType>();                        theValue.ID = 1;                      theValue.Member = new CircularReferenceType();                      theValue.Member.Data = 1;                      theValue.Member.OtherInstance = new CircularReferenceType();                      theValue.Member.OtherInstance.Data = 2;                      theValue.Member.OtherInstance.OtherInstance = theValue.Member;                        context.SetValues(new object[] { theValue });                  });
Magic Number,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,Web3SSerializerCycleDetectionTest,The following statement contains a magic number: UnitTestsUtil.VerifyInvalidRequest(null' "/Values"' typeof(TypedCustomDataContext<TypedEntity<int' CircularReferenceType>>)' UnitTestsUtil.JsonLightMimeType' "GET"' 500);
Magic Number,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,Web3SSerializerCycleDetectionTest,The following statement contains a magic number: UnitTestsUtil.VerifyInvalidRequest(null' "/Values"' typeof(TypedCustomDataContext<TypedEntity<int' CircularReferenceType>>)' UnitTestsUtil.AtomFormat' "GET"' 500);
Magic Number,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerKeyTypesTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' delegate(Hashtable values)              {                  string responseFormat = (string)values["responseFormat"];                  TypeData typeData = (TypeData)values["typeData"];                  using (TestWebRequest request = TestWebRequest.CreateForInProcess())                  {                      Type valueType = typeData.ClrType;                      Type entityType = typeof(TypedEntity<'>).MakeGenericType(valueType' typeof(int));                      CustomDataContextSetup dataContextSetup = new CustomDataContextSetup(entityType);                      try                      {                          for (int i = 0; i < typeData.SampleValues.Length; i++)                          {                              TestUtil.TraceScopeForException("Testing sample value..."' delegate()                              {                                  object propertyValue = typeData.SampleValues[i];                                  if (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase))                                  {                                      if (typeData.ClrType == typeof(Double) && Double.IsInfinity((Double)typeData.SampleValues[i]))                                      {                                          propertyValue = (Double)0;                                      }                                      else if (typeData.ClrType == typeof(Single) && Single.IsInfinity((Single)typeData.SampleValues[i]))                                      {                                          propertyValue = (Single)0;                                      }                                  }                                    dataContextSetup.Id = propertyValue;                                  dataContextSetup.MemberValue = i;                                    // If the type is not a supported key type or if the value is null' then skip this case                                  // Ignore the long string for json since test randomly fails with out of memory since we are trying                                  // to allocate 12 MB of string through interop                                  if (!typeData.IsTypeSupportedAsKey || dataContextSetup.Id == null ||                                      (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase) && dataContextSetup.Id.GetType() == typeof(string) && ((string)dataContextSetup.Id).Length > 1024 * 1024))                                  {                                      return;                                  }                                    request.DataServiceType = dataContextSetup.DataServiceType;                                  request.Accept = responseFormat;                                  request.RequestUriString = "/Values";                                    string instanceName = MakeXmlName(entityType);                                    string[] jsonXPaths = new string[]                                  {                                      String.Format("/Object/value/{0}"' JsonValidator.ArrayString)'                                      String.Format("/Object/value//{0}/{1}"' JsonValidator.ArrayString' JsonValidator.ObjectString)'                                      String.Format("/Object/value//{0}/{1}/ID"' JsonValidator.ArrayString' JsonValidator.ObjectString)                                  };                                    string[] atomXPaths = new string[]                                  {                                      "/atom:feed"'                                      "/atom:feed/atom:entry"'                                      "/atom:feed/atom:entry/atom:content/adsm:properties/ads:ID"                                  };                                    string linkPath = null;                                  string idXPath = null;                                  if (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase))                                  {                                      idXPath = jsonXPaths[2];                                      linkPath = "Object/value/Array/Object/url";                                  }                                  else if (String.Equals(responseFormat' AtomFormat' StringComparison.OrdinalIgnoreCase))                                  {                                      idXPath = atomXPaths[2];                                      linkPath = "/atom:feed/atom:entry/atom:id";                                  }                                  else                                  {                                      Assert.Fail("Unsupported mime type");                                  }                                    request.SendRequest();                                    Stream resultStream = request.GetResponseStream();                                  XmlDocument document = VerifyXPaths(resultStream' responseFormat' null' jsonXPaths' atomXPaths);                                  XmlElement idElement = TestUtil.AssertSelectSingleElement(document' idXPath);                                  string serializedValue = idElement.InnerText;                                    object idValue = dataContextSetup.Id;                                  bool keySyntax = false;                                    // Single element' easy to compare.                                  typeData.VerifyAreEqual(idValue' typeData.ValueFromXmlText(serializedValue' keySyntax' responseFormat)' responseFormat);                                    Uri serviceRoot = new Uri("http://host/");                                  var ctx = new DataServiceContext(serviceRoot);                                  MethodInfo createQueryMethod = typeof(Web3SSerializerTest).GetMethod("CreateSingleItemQuery");                                  createQueryMethod = createQueryMethod.MakeGenericMethod(entityType' valueType' typeof(int));                                  IQueryable queryable = (IQueryable)createQueryMethod.Invoke(null' new object[] { ctx' "Values"' propertyValue });                                  string queryUri = new Uri(queryable.ToString()' UriKind.Absolute).GetComponents(UriComponents.Path' UriFormat.Unescaped);                                  string responseUri = new Uri(TestUtil.AssertSelectSingleElement(document' linkPath).InnerText' UriKind.Absolute).GetComponents(UriComponents.Path' UriFormat.Unescaped);                                    if (valueType == typeof(double))                                  {                                      int indexOfStartValue = responseUri.IndexOf("(") + 1;                                      int indexOfEndValue = responseUri.IndexOf(")");                                      string valuePortionOriginal = responseUri.Substring(indexOfStartValue' indexOfEndValue - indexOfStartValue);                                      string valuePortion = valuePortionOriginal.Replace("D"' "");                                      bool needDecimal = true;                                      foreach (char c in valuePortion)                                      {                                          if (!Char.IsDigit(c))                                          {                                              needDecimal = false;                                          }                                      }                                        if (needDecimal)                                      {                                          valuePortion = valuePortion + ".0";                                      }                                        responseUri = responseUri.Replace(valuePortionOriginal' valuePortion);                                  }                                    Assert.AreEqual(responseUri' queryUri' "The response URI and the one generated by the data service client match.");                              });                          }                      }                      finally                      {                          dataContextSetup.Cleanup();                      }                  }              });
Magic Number,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerKeyTypesTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' delegate(Hashtable values)              {                  string responseFormat = (string)values["responseFormat"];                  TypeData typeData = (TypeData)values["typeData"];                  using (TestWebRequest request = TestWebRequest.CreateForInProcess())                  {                      Type valueType = typeData.ClrType;                      Type entityType = typeof(TypedEntity<'>).MakeGenericType(valueType' typeof(int));                      CustomDataContextSetup dataContextSetup = new CustomDataContextSetup(entityType);                      try                      {                          for (int i = 0; i < typeData.SampleValues.Length; i++)                          {                              TestUtil.TraceScopeForException("Testing sample value..."' delegate()                              {                                  object propertyValue = typeData.SampleValues[i];                                  if (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase))                                  {                                      if (typeData.ClrType == typeof(Double) && Double.IsInfinity((Double)typeData.SampleValues[i]))                                      {                                          propertyValue = (Double)0;                                      }                                      else if (typeData.ClrType == typeof(Single) && Single.IsInfinity((Single)typeData.SampleValues[i]))                                      {                                          propertyValue = (Single)0;                                      }                                  }                                    dataContextSetup.Id = propertyValue;                                  dataContextSetup.MemberValue = i;                                    // If the type is not a supported key type or if the value is null' then skip this case                                  // Ignore the long string for json since test randomly fails with out of memory since we are trying                                  // to allocate 12 MB of string through interop                                  if (!typeData.IsTypeSupportedAsKey || dataContextSetup.Id == null ||                                      (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase) && dataContextSetup.Id.GetType() == typeof(string) && ((string)dataContextSetup.Id).Length > 1024 * 1024))                                  {                                      return;                                  }                                    request.DataServiceType = dataContextSetup.DataServiceType;                                  request.Accept = responseFormat;                                  request.RequestUriString = "/Values";                                    string instanceName = MakeXmlName(entityType);                                    string[] jsonXPaths = new string[]                                  {                                      String.Format("/Object/value/{0}"' JsonValidator.ArrayString)'                                      String.Format("/Object/value//{0}/{1}"' JsonValidator.ArrayString' JsonValidator.ObjectString)'                                      String.Format("/Object/value//{0}/{1}/ID"' JsonValidator.ArrayString' JsonValidator.ObjectString)                                  };                                    string[] atomXPaths = new string[]                                  {                                      "/atom:feed"'                                      "/atom:feed/atom:entry"'                                      "/atom:feed/atom:entry/atom:content/adsm:properties/ads:ID"                                  };                                    string linkPath = null;                                  string idXPath = null;                                  if (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase))                                  {                                      idXPath = jsonXPaths[2];                                      linkPath = "Object/value/Array/Object/url";                                  }                                  else if (String.Equals(responseFormat' AtomFormat' StringComparison.OrdinalIgnoreCase))                                  {                                      idXPath = atomXPaths[2];                                      linkPath = "/atom:feed/atom:entry/atom:id";                                  }                                  else                                  {                                      Assert.Fail("Unsupported mime type");                                  }                                    request.SendRequest();                                    Stream resultStream = request.GetResponseStream();                                  XmlDocument document = VerifyXPaths(resultStream' responseFormat' null' jsonXPaths' atomXPaths);                                  XmlElement idElement = TestUtil.AssertSelectSingleElement(document' idXPath);                                  string serializedValue = idElement.InnerText;                                    object idValue = dataContextSetup.Id;                                  bool keySyntax = false;                                    // Single element' easy to compare.                                  typeData.VerifyAreEqual(idValue' typeData.ValueFromXmlText(serializedValue' keySyntax' responseFormat)' responseFormat);                                    Uri serviceRoot = new Uri("http://host/");                                  var ctx = new DataServiceContext(serviceRoot);                                  MethodInfo createQueryMethod = typeof(Web3SSerializerTest).GetMethod("CreateSingleItemQuery");                                  createQueryMethod = createQueryMethod.MakeGenericMethod(entityType' valueType' typeof(int));                                  IQueryable queryable = (IQueryable)createQueryMethod.Invoke(null' new object[] { ctx' "Values"' propertyValue });                                  string queryUri = new Uri(queryable.ToString()' UriKind.Absolute).GetComponents(UriComponents.Path' UriFormat.Unescaped);                                  string responseUri = new Uri(TestUtil.AssertSelectSingleElement(document' linkPath).InnerText' UriKind.Absolute).GetComponents(UriComponents.Path' UriFormat.Unescaped);                                    if (valueType == typeof(double))                                  {                                      int indexOfStartValue = responseUri.IndexOf("(") + 1;                                      int indexOfEndValue = responseUri.IndexOf(")");                                      string valuePortionOriginal = responseUri.Substring(indexOfStartValue' indexOfEndValue - indexOfStartValue);                                      string valuePortion = valuePortionOriginal.Replace("D"' "");                                      bool needDecimal = true;                                      foreach (char c in valuePortion)                                      {                                          if (!Char.IsDigit(c))                                          {                                              needDecimal = false;                                          }                                      }                                        if (needDecimal)                                      {                                          valuePortion = valuePortion + ".0";                                      }                                        responseUri = responseUri.Replace(valuePortionOriginal' valuePortion);                                  }                                    Assert.AreEqual(responseUri' queryUri' "The response URI and the one generated by the data service client match.");                              });                          }                      }                      finally                      {                          dataContextSetup.Cleanup();                      }                  }              });
Magic Number,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerKeyTypesTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' delegate(Hashtable values)              {                  string responseFormat = (string)values["responseFormat"];                  TypeData typeData = (TypeData)values["typeData"];                  using (TestWebRequest request = TestWebRequest.CreateForInProcess())                  {                      Type valueType = typeData.ClrType;                      Type entityType = typeof(TypedEntity<'>).MakeGenericType(valueType' typeof(int));                      CustomDataContextSetup dataContextSetup = new CustomDataContextSetup(entityType);                      try                      {                          for (int i = 0; i < typeData.SampleValues.Length; i++)                          {                              TestUtil.TraceScopeForException("Testing sample value..."' delegate()                              {                                  object propertyValue = typeData.SampleValues[i];                                  if (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase))                                  {                                      if (typeData.ClrType == typeof(Double) && Double.IsInfinity((Double)typeData.SampleValues[i]))                                      {                                          propertyValue = (Double)0;                                      }                                      else if (typeData.ClrType == typeof(Single) && Single.IsInfinity((Single)typeData.SampleValues[i]))                                      {                                          propertyValue = (Single)0;                                      }                                  }                                    dataContextSetup.Id = propertyValue;                                  dataContextSetup.MemberValue = i;                                    // If the type is not a supported key type or if the value is null' then skip this case                                  // Ignore the long string for json since test randomly fails with out of memory since we are trying                                  // to allocate 12 MB of string through interop                                  if (!typeData.IsTypeSupportedAsKey || dataContextSetup.Id == null ||                                      (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase) && dataContextSetup.Id.GetType() == typeof(string) && ((string)dataContextSetup.Id).Length > 1024 * 1024))                                  {                                      return;                                  }                                    request.DataServiceType = dataContextSetup.DataServiceType;                                  request.Accept = responseFormat;                                  request.RequestUriString = "/Values";                                    string instanceName = MakeXmlName(entityType);                                    string[] jsonXPaths = new string[]                                  {                                      String.Format("/Object/value/{0}"' JsonValidator.ArrayString)'                                      String.Format("/Object/value//{0}/{1}"' JsonValidator.ArrayString' JsonValidator.ObjectString)'                                      String.Format("/Object/value//{0}/{1}/ID"' JsonValidator.ArrayString' JsonValidator.ObjectString)                                  };                                    string[] atomXPaths = new string[]                                  {                                      "/atom:feed"'                                      "/atom:feed/atom:entry"'                                      "/atom:feed/atom:entry/atom:content/adsm:properties/ads:ID"                                  };                                    string linkPath = null;                                  string idXPath = null;                                  if (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase))                                  {                                      idXPath = jsonXPaths[2];                                      linkPath = "Object/value/Array/Object/url";                                  }                                  else if (String.Equals(responseFormat' AtomFormat' StringComparison.OrdinalIgnoreCase))                                  {                                      idXPath = atomXPaths[2];                                      linkPath = "/atom:feed/atom:entry/atom:id";                                  }                                  else                                  {                                      Assert.Fail("Unsupported mime type");                                  }                                    request.SendRequest();                                    Stream resultStream = request.GetResponseStream();                                  XmlDocument document = VerifyXPaths(resultStream' responseFormat' null' jsonXPaths' atomXPaths);                                  XmlElement idElement = TestUtil.AssertSelectSingleElement(document' idXPath);                                  string serializedValue = idElement.InnerText;                                    object idValue = dataContextSetup.Id;                                  bool keySyntax = false;                                    // Single element' easy to compare.                                  typeData.VerifyAreEqual(idValue' typeData.ValueFromXmlText(serializedValue' keySyntax' responseFormat)' responseFormat);                                    Uri serviceRoot = new Uri("http://host/");                                  var ctx = new DataServiceContext(serviceRoot);                                  MethodInfo createQueryMethod = typeof(Web3SSerializerTest).GetMethod("CreateSingleItemQuery");                                  createQueryMethod = createQueryMethod.MakeGenericMethod(entityType' valueType' typeof(int));                                  IQueryable queryable = (IQueryable)createQueryMethod.Invoke(null' new object[] { ctx' "Values"' propertyValue });                                  string queryUri = new Uri(queryable.ToString()' UriKind.Absolute).GetComponents(UriComponents.Path' UriFormat.Unescaped);                                  string responseUri = new Uri(TestUtil.AssertSelectSingleElement(document' linkPath).InnerText' UriKind.Absolute).GetComponents(UriComponents.Path' UriFormat.Unescaped);                                    if (valueType == typeof(double))                                  {                                      int indexOfStartValue = responseUri.IndexOf("(") + 1;                                      int indexOfEndValue = responseUri.IndexOf(")");                                      string valuePortionOriginal = responseUri.Substring(indexOfStartValue' indexOfEndValue - indexOfStartValue);                                      string valuePortion = valuePortionOriginal.Replace("D"' "");                                      bool needDecimal = true;                                      foreach (char c in valuePortion)                                      {                                          if (!Char.IsDigit(c))                                          {                                              needDecimal = false;                                          }                                      }                                        if (needDecimal)                                      {                                          valuePortion = valuePortion + ".0";                                      }                                        responseUri = responseUri.Replace(valuePortionOriginal' valuePortion);                                  }                                    Assert.AreEqual(responseUri' queryUri' "The response URI and the one generated by the data service client match.");                              });                          }                      }                      finally                      {                          dataContextSetup.Cleanup();                      }                  }              });
Magic Number,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,SerializerKeyTypesTest,The following statement contains a magic number: TestUtil.RunCombinatorialEngineFail(engine' delegate(Hashtable values)              {                  string responseFormat = (string)values["responseFormat"];                  TypeData typeData = (TypeData)values["typeData"];                  using (TestWebRequest request = TestWebRequest.CreateForInProcess())                  {                      Type valueType = typeData.ClrType;                      Type entityType = typeof(TypedEntity<'>).MakeGenericType(valueType' typeof(int));                      CustomDataContextSetup dataContextSetup = new CustomDataContextSetup(entityType);                      try                      {                          for (int i = 0; i < typeData.SampleValues.Length; i++)                          {                              TestUtil.TraceScopeForException("Testing sample value..."' delegate()                              {                                  object propertyValue = typeData.SampleValues[i];                                  if (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase))                                  {                                      if (typeData.ClrType == typeof(Double) && Double.IsInfinity((Double)typeData.SampleValues[i]))                                      {                                          propertyValue = (Double)0;                                      }                                      else if (typeData.ClrType == typeof(Single) && Single.IsInfinity((Single)typeData.SampleValues[i]))                                      {                                          propertyValue = (Single)0;                                      }                                  }                                    dataContextSetup.Id = propertyValue;                                  dataContextSetup.MemberValue = i;                                    // If the type is not a supported key type or if the value is null' then skip this case                                  // Ignore the long string for json since test randomly fails with out of memory since we are trying                                  // to allocate 12 MB of string through interop                                  if (!typeData.IsTypeSupportedAsKey || dataContextSetup.Id == null ||                                      (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase) && dataContextSetup.Id.GetType() == typeof(string) && ((string)dataContextSetup.Id).Length > 1024 * 1024))                                  {                                      return;                                  }                                    request.DataServiceType = dataContextSetup.DataServiceType;                                  request.Accept = responseFormat;                                  request.RequestUriString = "/Values";                                    string instanceName = MakeXmlName(entityType);                                    string[] jsonXPaths = new string[]                                  {                                      String.Format("/Object/value/{0}"' JsonValidator.ArrayString)'                                      String.Format("/Object/value//{0}/{1}"' JsonValidator.ArrayString' JsonValidator.ObjectString)'                                      String.Format("/Object/value//{0}/{1}/ID"' JsonValidator.ArrayString' JsonValidator.ObjectString)                                  };                                    string[] atomXPaths = new string[]                                  {                                      "/atom:feed"'                                      "/atom:feed/atom:entry"'                                      "/atom:feed/atom:entry/atom:content/adsm:properties/ads:ID"                                  };                                    string linkPath = null;                                  string idXPath = null;                                  if (String.Equals(responseFormat' JsonFormat' StringComparison.OrdinalIgnoreCase))                                  {                                      idXPath = jsonXPaths[2];                                      linkPath = "Object/value/Array/Object/url";                                  }                                  else if (String.Equals(responseFormat' AtomFormat' StringComparison.OrdinalIgnoreCase))                                  {                                      idXPath = atomXPaths[2];                                      linkPath = "/atom:feed/atom:entry/atom:id";                                  }                                  else                                  {                                      Assert.Fail("Unsupported mime type");                                  }                                    request.SendRequest();                                    Stream resultStream = request.GetResponseStream();                                  XmlDocument document = VerifyXPaths(resultStream' responseFormat' null' jsonXPaths' atomXPaths);                                  XmlElement idElement = TestUtil.AssertSelectSingleElement(document' idXPath);                                  string serializedValue = idElement.InnerText;                                    object idValue = dataContextSetup.Id;                                  bool keySyntax = false;                                    // Single element' easy to compare.                                  typeData.VerifyAreEqual(idValue' typeData.ValueFromXmlText(serializedValue' keySyntax' responseFormat)' responseFormat);                                    Uri serviceRoot = new Uri("http://host/");                                  var ctx = new DataServiceContext(serviceRoot);                                  MethodInfo createQueryMethod = typeof(Web3SSerializerTest).GetMethod("CreateSingleItemQuery");                                  createQueryMethod = createQueryMethod.MakeGenericMethod(entityType' valueType' typeof(int));                                  IQueryable queryable = (IQueryable)createQueryMethod.Invoke(null' new object[] { ctx' "Values"' propertyValue });                                  string queryUri = new Uri(queryable.ToString()' UriKind.Absolute).GetComponents(UriComponents.Path' UriFormat.Unescaped);                                  string responseUri = new Uri(TestUtil.AssertSelectSingleElement(document' linkPath).InnerText' UriKind.Absolute).GetComponents(UriComponents.Path' UriFormat.Unescaped);                                    if (valueType == typeof(double))                                  {                                      int indexOfStartValue = responseUri.IndexOf("(") + 1;                                      int indexOfEndValue = responseUri.IndexOf(")");                                      string valuePortionOriginal = responseUri.Substring(indexOfStartValue' indexOfEndValue - indexOfStartValue);                                      string valuePortion = valuePortionOriginal.Replace("D"' "");                                      bool needDecimal = true;                                      foreach (char c in valuePortion)                                      {                                          if (!Char.IsDigit(c))                                          {                                              needDecimal = false;                                          }                                      }                                        if (needDecimal)                                      {                                          valuePortion = valuePortion + ".0";                                      }                                        responseUri = responseUri.Replace(valuePortionOriginal' valuePortion);                                  }                                    Assert.AreEqual(responseUri' queryUri' "The response URI and the one generated by the data service client match.");                              });                          }                      }                      finally                      {                          dataContextSetup.Cleanup();                      }                  }              });
Magic Number,AstoriaUnitTests.Tests,Web3SSerializerTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataServices\UnitTests\ServerUnitTests2\Tests\Web3SSerializerTest.cs,Web3SSerializerInvalidKeyTypesTest,The following statement contains a magic number: UnitTestsUtil.VerifyInvalidRequest(null' "/Values"' dataContextSetup.DataServiceType' UnitTestsUtil.AtomFormat' "GET"' 500);
