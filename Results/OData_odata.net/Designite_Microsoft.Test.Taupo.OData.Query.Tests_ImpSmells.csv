Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The method has 147 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInStringFunctionCallTestCases,The method has 129 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,OrderByBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\OrderByBinderFunctionalTests.cs,OrderByBinderTest,The method has 135 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The method has 105 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The method has 196 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The method has 107 lines of code.
Long Method,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryOptionQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryOptionQueryTokenTests.cs,RunTest,The method has 117 lines of code.
Complex Method,Microsoft.Test.Taupo.OData.Query.Tests.DataClasses,Customer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\DataClasses\Customer.cs,Equals,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,QueryNodeUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\QueryNodeUtils.cs,VerifyQueryNodesAreEqual,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,QueryNodeUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\QueryNodeUtils.cs,ToDebugString,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestUtils.cs,ToOperatorName,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,ParseQuery,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,VerifyQueryTokensAreEqual,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,ToDebugString,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.OData.UriParser,SyntacticTree,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SyntacticTree.cs,ParseUri,Cyclomatic complexity of the method is 12
Long Parameter List,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,ParseQuery,The method has 9 parameters. Parameters: path' filter' orderby' select' expand' skip' top' count' format
Long Parameter List,Microsoft.OData.UriParser,SyntacticTree,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SyntacticTree.cs,SyntacticTree,The method has 11 parameters. Parameters: parameterAliases' path' filter' orderByTokens' select' expand' skip' top' queryCount' format' queryOptions
Long Identifier,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the parameter entityTypeWithPrimitiveProperties is 33.
Long Identifier,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,InvalidExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,,The length of the parameter InvalidPrimitiveLiteralTestCases is 32.
Long Identifier,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,InvalidExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,,The length of the parameter InvalidPrimitiveLiteralSelectTestCases is 38.
Long Identifier,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,,The length of the parameter PropertyAccessIncludingStarNames is 32.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.Common,StronglyTypedDataServiceProviderFactory,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\Common\StronglyTypedDataServiceProviderFactory.cs,CreateQueryProvider,The length of the statement  "            var queryProvider = new ClrBasedQueryProvider(this.Workspace.ObjectLayerAssembly' model' this.Evaluator' this.Repository); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.Common,ClrBasedQueryProvider,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\Common\StronglyTypedDataServiceProviderFactory.cs,GetQueryRootForEntitySet,The length of the statement  "                var rootSetQuery = this.queryRepository.RootQueries.OfType<QueryRootExpression>().FirstOrDefault(rootQuery => rootQuery.Name == entitySet.Name); " is 144.
Long Statement,Microsoft.Test.Taupo.OData.DataServiceProvider,DSPResource,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\Common\DataServiceProvider\DSPResource.cs,GetOpenPropertyValues,The length of the statement  "            List<string> declaredPropertyNames = new List<string>(structuredType.DeclaredProperties.Select(property => property.Name)); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,BinderErrorTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\BinderErrorTests.cs,UnsupportedTokenBinderErrorTest,The length of the statement  "            IEdmModel model = QueryTestMetadata.BuildTestMetadata(this.PrimitiveTypeResolver' this.UntypedDataServiceProviderFactory); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The length of the statement  "            foreach (var operatorKind in QueryTestUtils.BinaryOperatorGroups.Where(og => og.IsRelational).SelectMany(og => og.OperatorKinds)) " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The length of the statement  "            foreach (var operatorKind in QueryTestUtils.BinaryOperatorGroups.Where(og => !og.IsRelational).SelectMany(og => og.OperatorKinds)) " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The length of the statement  "                foreach (var operatorGroupLower in QueryTestUtils.BinaryOperatorGroups.Where(og => og.IsRelational && og.Priority > operatorGroupHigher.Priority)) " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The length of the statement  "                foreach (var operatorGroupLower in QueryTestUtils.BinaryOperatorGroups.Where(og => !og.IsRelational && og.Priority > operatorGroupHigher.Priority)) " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,UnaryOperatorTestCases,The length of the statement  "            BinaryOperatorNode innerBinary = new BinaryOperatorNode(BinaryOperatorKind.Add' new ConstantNode(2)' new ConstantNode(3)); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,UnaryOperatorTestCases,The length of the statement  "            BinaryOperatorNode innerBinary2 = new BinaryOperatorNode(BinaryOperatorKind.Equal' new ConstantNode(true)' new ConstantNode(false)); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,PropertyAccessTestCases,The length of the statement  "            ResourceRangeVariable customersEntityRangeVariable = new ResourceRangeVariable("dummy"' model.ResolveTypeReference("TestNS.Customer"' false).AsEntity()' model.FindEntityContainer("BinderTestMetadata").FindEntitySet("Customers")); " is 229.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,PropertyAccessTestCases,The length of the statement  "            SingleValuePropertyAccessNode propertyAccessNode = new SingleValuePropertyAccessNode(new ResourceRangeVariableReferenceNode(customersEntityRangeVariable.Name' customersEntityRangeVariable)' " is 189.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,PropertyAccessTestCases,The length of the statement  "                ExpectedFilterCondition = new BinaryOperatorNode(BinaryOperatorKind.Equal' propertyAccessNode' new ConstantNode("Vitek")) " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,PropertyAccessTestCases,The length of the statement  "                ExpectedFilterCondition = new BinaryOperatorNode(BinaryOperatorKind.NotEqual' propertyAccessNode2' new ConstantNode("Prague")) " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,TopFilterExpressionTestCases,The length of the statement  "            ResourceRangeVariable entityRangeVariable = new ResourceRangeVariable("dummy"' model.ResolveTypeReference("TestNS.TypeWithPrimitiveProperties"' false).AsEntity()' model.FindEntityContainer("BinderTestMetadata").FindEntitySet("TypesWithPrimitiveProperties")); " is 258.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInStringFunctionCallTestCases,The length of the statement  "            SingleValueFunctionCallNode outer = new SingleValueFunctionCallNode("indexof"' args2' EdmCoreModel.Instance.GetInt32(false)); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInStringFunctionCallTestCases,The length of the statement  "            SingleValueFunctionCallNode outer2 = new SingleValueFunctionCallNode("replace"' args3' EdmCoreModel.Instance.GetString(true)); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInStringFunctionCallTestCases,The length of the statement  "            SingleValueFunctionCallNode outer3 = new SingleValueFunctionCallNode("tolower"' args5' EdmCoreModel.Instance.GetString(true)); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInStringFunctionCallTestCases,The length of the statement  "            SingleValueFunctionCallNode outer4 = new SingleValueFunctionCallNode("toupper"' args6' EdmCoreModel.Instance.GetString(true)); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInStringFunctionCallTestCases,The length of the statement  "            SingleValueFunctionCallNode outer5 = new SingleValueFunctionCallNode("trim"' args7' EdmCoreModel.Instance.GetString(true)); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInStringFunctionCallTestCases,The length of the statement  "            SingleValueFunctionCallNode outer6 = new SingleValueFunctionCallNode("substring"' args8' EdmCoreModel.Instance.GetString(true)); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInStringFunctionCallTestCases,The length of the statement  "            SingleValueFunctionCallNode outer7 = new SingleValueFunctionCallNode("substring"' args9' EdmCoreModel.Instance.GetString(true)); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInStringFunctionCallTestCases,The length of the statement  "            SingleValueFunctionCallNode outer8 = new SingleValueFunctionCallNode("concat"' args11' EdmCoreModel.Instance.GetString(true)); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInStringFunctionCallTestCases,The length of the statement  "            SingleValueFunctionCallNode outer9 = new SingleValueFunctionCallNode("length"' args12' EdmCoreModel.Instance.GetInt32(false)); " is 126.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInDateTimeOffsetFunctionCallTestCases,The length of the statement  "                ExpectedFilterCondition = new BinaryOperatorNode(BinaryOperatorKind.GreaterThan' new SingleValueFunctionCallNode(functionName' args' EdmCoreModel.Instance.GetInt32(false))' new ConstantNode(0)) " is 193.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInMathFunctionCallTestCases,The length of the statement  "                    new { Type = (IEdmPrimitiveTypeReference)EdmCoreModel.Instance.GetDouble(false)' Literal = "42.42"' Value = (object)(double)42.42 }' " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInMathFunctionCallTestCases,The length of the statement  "                    new { Type = (IEdmPrimitiveTypeReference)EdmCoreModel.Instance.GetDecimal(false)' Literal = "42m"' Value = (object)(decimal)42 } " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInMathFunctionCallTestCases,The length of the statement  "                    new SingleValueFunctionCallNode(functionName' new QueryNode[] { new ConstantNode(mathFunctionType.Value) }' mathFunctionType.Type)' " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInMathFunctionCallTestCases,The length of the statement  "                    new ConstantNode(mathFunctionType.Type.AsPrimitive().PrimitiveKind() == EdmPrimitiveTypeKind.Decimal ? (object)0m : (object)0d)) " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,FilterBinderTest,The length of the statement  "            IEdmModel model = QueryTestMetadata.BuildTestMetadata(this.PrimitiveTypeResolver' this.UntypedDataServiceProviderFactory); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,FilterBinderTest,The length of the statement  "                        new ResourceRangeVariable(ExpressionConstants.It' entitySet.EntityType().ToTypeReference(false).AsEntity()' entityCollectionNode) " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,InvalidPropertyAccessTestCases,The length of the statement  "                // TODO: Add tests for invalid source' currently we don't have support for tokens which would bind o a non-single value in a filter expression " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,OrderByBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\OrderByBinderFunctionalTests.cs,OrderByBinderTest,The length of the statement  "            IEdmModel model = QueryTestMetadata.BuildTestMetadata(this.PrimitiveTypeResolver' this.UntypedDataServiceProviderFactory); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,OrderByBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\OrderByBinderFunctionalTests.cs,OrderByBinderTest,The length of the statement  "            ResourceRangeVariable entityRangeVariable = new ResourceRangeVariable("dummy"' model.ResolveTypeReference("TestNS.Customer"' false).AsEntity()' model.FindEntityContainer("BinderTestMetadata").FindEntitySet("Customers")); " is 220.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,OrderByBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\OrderByBinderFunctionalTests.cs,OrderByBinderTest,The length of the statement  "                                    new ResourceRangeVariable(ExpressionConstants.It' model.ResolveTypeReference("TestNS.Customer"' false).AsEntity()' model.FindEntityContainer("BinderTestMetadata").FindEntitySet("Customers")) " is 190.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,QueryNodeUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\QueryNodeUtils.cs,VerifyQueryNodesAreEqual,The length of the statement  "                        VerifyNonResourceRangeVariableReferenceNodesAreEqual((NonResourceRangeVariableReferenceNode) expected' (NonResourceRangeVariableReferenceNode) actual'assert); " is 158.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,QueryNodeUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\QueryNodeUtils.cs,VerifyQueryNodesAreEqual,The length of the statement  "                        VerifyResourceRangeVariableReferenceNodesAreEqual((ResourceRangeVariableReferenceNode)expected' (ResourceRangeVariableReferenceNode)actual' assert); " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,QueryNodeUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\QueryNodeUtils.cs,VerifyQueryNodesAreEqual,The length of the statement  "                        VerifyPropertyAccessQueryNodesAreEqual((SingleValuePropertyAccessNode)expected' (SingleValuePropertyAccessNode)actual' assert); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,QueryNodeUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\QueryNodeUtils.cs,VerifyQueryNodesAreEqual,The length of the statement  "                        VerifySingleValueFunctionCallQueryNodesAreEqual((SingleValueFunctionCallNode)expected' (SingleValueFunctionCallNode)actual' assert); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,QueryNodeUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\QueryNodeUtils.cs,VerifyQueryNodesAreEqual,The length of the statement  "                        throw new Exception("Query node of kind '" + expected.InternalKind.ToString() + "' not yet supported by VerifyQueryNodesAreEqual."); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,QueryNodeUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\QueryNodeUtils.cs,VerifyConvertQueryNodesAreEqual,The length of the statement  "            assert.AreEqual(expected.TypeReference.TestFullName()' actual.TypeReference.TestFullName()' "The target type names differ."); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,QueryNodeUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\QueryNodeUtils.cs,ToDebugString,The length of the statement  "                    result = "BinaryOperator(" + binaryOperator.Left.ToDebugString() + " '" + binaryOperator.OperatorKind.ToOperatorName() + "' " + binaryOperator.Right.ToDebugString() + ")"; " is 171.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,QueryNodeUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\QueryNodeUtils.cs,ToDebugString,The length of the statement  "                    result = "UnaryOperator(" + unaryOperator.OperatorKind.ToOperatorName() + " " + unaryOperator.Operand.ToDebugString() + ")"; " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,QueryNodeUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\QueryNodeUtils.cs,ToDebugString,The length of the statement  "                    result = singleValueFunctionCall.Name + "(" + string.Join("' "' singleValueFunctionCall.Parameters.Select(a => a.ToDebugString())) + ")"; " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,SkipTopBinderTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\SkipTopBinderTests.cs,SkipAndTopBinderTest,The length of the statement  "            IEdmModel model = QueryTestMetadata.BuildTestMetadata(this.PrimitiveTypeResolver' this.UntypedDataServiceProviderFactory); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,SkipTopBinderTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\SkipTopBinderTests.cs,SkipAndTopBinderTest,The length of the statement  "                    ExpectedExceptionMessage = "The $top query option cannot be applied to the query path. Top can only be applied to a collection of entities." " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,SkipTopBinderTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\SkipTopBinderTests.cs,SkipAndTopBinderTest,The length of the statement  "                    ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities." " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,SkipTopBinderTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\SkipTopBinderTests.cs,SkipAndTopBinderTest,The length of the statement  "                    ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities." " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,SkipTopBinderTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\SkipTopBinderTests.cs,SkipAndTopBinderTest,The length of the statement  "                    ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities." " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,RelationalOperatorTypePromotion,The length of the statement  "            IEdmModel model = QueryTestMetadata.BuildTestMetadata(this.PrimitiveTypeResolver' this.StronglyTypedDataServiceProviderFactory); " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,RelationalOperatorTypePromotion,The length of the statement  "                    string filter = testCase.Arguments[0] + " " + QueryTestUtils.ToOperatorName(relationalOperatorKind) + " " + testCase.Arguments[1]; " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ArithmeticOperatorTypePromotion,The length of the statement  "            var metadata = QueryTestMetadata.BuildTestMetadata(this.PrimitiveTypeResolver' this.StronglyTypedDataServiceProviderFactory); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ArithmeticOperatorTypePromotion,The length of the statement  "                    string filter = testCase.Arguments[0] + " " + QueryTestUtils.ToOperatorName(arithmeticOperatorKind) + " " + testCase.Arguments[1] + " le 0"; " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ArithmeticOperatorTypePromotion,The length of the statement  "                        this.Assert.IsNotNull(binaryOperatorNode' "Expected a binary operator as the left argument of the top-level binary operator."); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,NegateTypePromotion,The length of the statement  "            var metadata = QueryTestMetadata.BuildTestMetadata(this.PrimitiveTypeResolver' this.StronglyTypedDataServiceProviderFactory); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,NotTypePromotion,The length of the statement  "            var metadata = QueryTestMetadata.BuildTestMetadata(this.PrimitiveTypeResolver' this.StronglyTypedDataServiceProviderFactory); " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeBinaryErrorTestCases,The length of the statement  "                "A binary operator with incompatible types was detected. Found operand types '{0}' and '{1}' for operator kind '{{0}}'."' " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = bytePropertyDescriptor' Second = bytePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt32(false) }' " is 146.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = decimalPropertyDescriptor' Second = decimalPropertyDescriptor'  PromotedType = (IEdmPrimitiveTypeReference)EdmCoreModel.Instance.GetDecimal(false) }' " is 182.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = doublePropertyDescriptor' Second = doublePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetDouble(false) }' " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = int16PropertyDescriptor' Second = int16PropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt32(false) }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = int32PropertyDescriptor' Second = int32PropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt32(false) }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = int64PropertyDescriptor' Second = int64PropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt64(false) }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = sbytePropertyDescriptor' Second = sbytePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt32(false) }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = singlePropertyDescriptor' Second = singlePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetSingle(false) }' " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = decimalPropertyDescriptor' Second = bytePropertyDescriptor'  PromotedType = (IEdmPrimitiveTypeReference)EdmCoreModel.Instance.GetDecimal(false) }' " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = decimalPropertyDescriptor' Second = int16PropertyDescriptor'  PromotedType = (IEdmPrimitiveTypeReference)EdmCoreModel.Instance.GetDecimal(false) }' " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = decimalPropertyDescriptor' Second = int32PropertyDescriptor'  PromotedType = (IEdmPrimitiveTypeReference)EdmCoreModel.Instance.GetDecimal(false) }' " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = decimalPropertyDescriptor' Second = int64PropertyDescriptor'  PromotedType = (IEdmPrimitiveTypeReference)EdmCoreModel.Instance.GetDecimal(false) }' " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = bytePropertyDescriptor' Second = int16PropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt32(false) }' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = sbytePropertyDescriptor' Second = int16PropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt32(false) }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = bytePropertyDescriptor' Second = int32PropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt32(false) }' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = sbytePropertyDescriptor' Second = int32PropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt32(false) }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = int16PropertyDescriptor' Second = int32PropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt32(false) }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = bytePropertyDescriptor' Second = int64PropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt64(false) }' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = sbytePropertyDescriptor' Second = int64PropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt64(false) }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = int16PropertyDescriptor' Second = int64PropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt64(false) }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = int32PropertyDescriptor' Second = int64PropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetInt64(false) }' " is 148.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = bytePropertyDescriptor' Second = singlePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetSingle(false) }' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = sbytePropertyDescriptor' Second = singlePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetSingle(false) }' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = int16PropertyDescriptor' Second = singlePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetSingle(false) }' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = int32PropertyDescriptor' Second = singlePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetSingle(false) }' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = int64PropertyDescriptor' Second = singlePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetSingle(false) }' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = bytePropertyDescriptor' Second = doublePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetDouble(false) }' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = sbytePropertyDescriptor' Second = doublePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetDouble(false) }' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = int16PropertyDescriptor' Second = doublePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetDouble(false) }' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = int32PropertyDescriptor' Second = doublePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetDouble(false) }' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = int64PropertyDescriptor' Second = doublePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetDouble(false) }' " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeArithmeticTestCases,The length of the statement  "                    new PropertyComparison { First = singlePropertyDescriptor' Second = doublePropertyDescriptor'  PromotedType = EdmCoreModel.Instance.GetDouble(false) }' " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeRelationalTestCases,The length of the statement  "                    new PropertyComparison { First = stringPropertyDescriptor' Second = stringPropertyDescriptor' PromotedType = EdmCoreModel.Instance.GetString(true) }' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeRelationalTestCases,The length of the statement  "                    new PropertyComparison { First = binaryPropertyDescriptor' Second = binaryPropertyDescriptor' PromotedType = EdmCoreModel.Instance.GetBinary(true) }' " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeRelationalTestCases,The length of the statement  "                    new PropertyComparison { First = boolPropertyDescriptor' Second = boolPropertyDescriptor' PromotedType = EdmCoreModel.Instance.GetBoolean(false) }' " is 147.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,TypePromotionTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\TypePromotionTests.cs,ComputeRelationalTestCases,The length of the statement  "                    new PropertyComparison { First = guidPropertyDescriptor' Second = guidPropertyDescriptor' PromotedType = EdmCoreModel.Instance.GetGuid(false) }' " is 144.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.ObjectModel,QueryTokenObjectModelTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\ObjectModel\QueryTokenObjectModelTests.cs,FunctionCallQueryTokenDefaultTest,The length of the statement  "            this.Assert.AreEqual(QueryTokenKind.FunctionCall' functionCall.Kind' "The InternalKind property has an unexpected value."); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.ObjectModel,QueryTokenObjectModelTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\ObjectModel\QueryTokenObjectModelTests.cs,FunctionCallQueryTokenDefaultTest,The length of the statement  "            this.Assert.IsTrue(functionCall.Arguments != null && functionCall.Arguments.Count() == 0' "The Arguments property should NOT be null but is empty."); " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.ObjectModel,QueryTokenObjectModelTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\ObjectModel\QueryTokenObjectModelTests.cs,QueryOptionQueryTokenDefaultTest,The length of the statement  "            this.Assert.AreEqual(QueryTokenKind.CustomQueryOption' queryOption.Kind' "The InternalKind property has an unexpected value."); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.ObjectModel,QueryTokenObjectModelTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\ObjectModel\QueryTokenObjectModelTests.cs,SelectQueryTokenDefaultTest,The length of the statement  "            this.Assert.IsTrue(select.Properties != null && select.Properties.Count() == 0' "The Properties property should NOT be null but is empty."); " is 140.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.ObjectModel,QueryTokenObjectModelTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\ObjectModel\QueryTokenObjectModelTests.cs,ExpandQueryTokenDefaultTest,The length of the statement  "            this.Assert.IsTrue(expand.ExpandTerms != null && expand.ExpandTerms.Count() == 0' "The Properties property should NOT be null but is empty."); " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,ODataTaupoQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\ODataTaupoQueryTest.cs,Initialize,The length of the statement  "            // TODO: This initialize method and code in InjectDependencies is duplicated because of trying to inherit from two class hierarchies. " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,ODataTaupoQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\ODataTaupoQueryTest.cs,Initialize,The length of the statement  "            // One(ODataBaseTestCase) is needed for query tests and the code in ODataTestCaseBase which is copied here is needed for dependency injection " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,ODataTaupoQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\ODataTaupoQueryTest.cs,Initialize,The length of the statement  "            // to work inside MSTest. The other two options are to make all ODataTestCaseBase inherit from ODataBaseTestCase' but that brings in a lot of  " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,ODataTaupoQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\ODataTaupoQueryTest.cs,Initialize,The length of the statement  "            // unnecessary dependencies for all the tests. The other option was to move the duplicated code to a helper' and the helper would work with polymorphism " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,ODataTaupoQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\ODataTaupoQueryTest.cs,Initialize,The length of the statement  "            // but the methods are protected and changing them in the base classes which are in Taupo.Core will require changes to too many files. " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,ODataTaupoQueryTest,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\ODataTaupoQueryTest.cs,InjectDependencies,The length of the statement  "            DependencyInjectionConfigurator dependInjecConfigurator = new DependencyInjectionConfigurator(defaultImplSelector' new Dictionary<string' string>()); " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("VoidServiceOperation"' ServiceOperationResultKind.Void' null' null' "GET"' defaultParams); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("DirectValuePrimitiveServiceOperation"' ServiceOperationResultKind.DirectValue' ResourceType.GetPrimitiveResourceType(typeof(int))' null' "GET"' defaultParams); " is 192.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("DirectValueComplexServiceOperation"' ServiceOperationResultKind.DirectValue' addressType' null' "GET"' defaultParams); " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("DirectValueEntityServiceOperation"' ServiceOperationResultKind.DirectValue' customerType' metadata.ResourceSet("Customers")' "GET"' defaultParams); " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("EnumerationPrimitiveServiceOperation"' ServiceOperationResultKind.Enumeration' ResourceType.GetPrimitiveResourceType(typeof(int))' null' "GET"' defaultParams); " is 192.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("EnumerationComplexServiceOperation"' ServiceOperationResultKind.Enumeration' addressType' null' "GET"' defaultParams); " is 151.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            serviceOperations.Add("EnumerationComplexServiceOperation"' (args) => { return args.Cast<int>().Select(id => CreateAddress(id)); }); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("EnumerationEntityServiceOperation"' ServiceOperationResultKind.Enumeration' customerType' metadata.ResourceSet("Customers")' "GET"' defaultParams); " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            serviceOperations.Add("EnumerationEntityServiceOperation"' (args) => { return args.Cast<int>().Select(id => CreateCustomer(id)); }); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("QuerySinglePrimitiveServiceOperation"' ServiceOperationResultKind.QueryWithSingleResult' ResourceType.GetPrimitiveResourceType(typeof(int))' null' "GET"' defaultParams); " is 202.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            serviceOperations.Add("QuerySinglePrimitiveServiceOperation"' (args) => { return new List<int>() { (int)args[0] }.AsQueryable(); }); " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("QuerySingleComplexServiceOperation"' ServiceOperationResultKind.QueryWithSingleResult' addressType' null' "GET"' defaultParams); " is 161.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            serviceOperations.Add("QuerySingleComplexServiceOperation"' (args) => { return new List<Address>() { CreateAddress((int)args[0]) }.AsQueryable(); }); " is 149.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("QuerySingleEntityServiceOperation"' ServiceOperationResultKind.QueryWithSingleResult' customerType' metadata.ResourceSet("Customers")' "GET"' defaultParams); " is 190.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            serviceOperations.Add("QuerySingleEntityServiceOperation"' (args) => { return new List<Customer>() { CreateCustomer((int)args[0]) }.AsQueryable(); }); " is 150.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("QueryMultiplePrimitiveServiceOperation"' ServiceOperationResultKind.QueryWithMultipleResults' ResourceType.GetPrimitiveResourceType(typeof(int))' null' "GET"' defaultParams); " is 207.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            serviceOperations.Add("QueryMultiplePrimitiveServiceOperation"' (args) => { int i = (int)args[0]; return new List<int>() { i' i + 1 }.AsQueryable(); }); " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("QueryMultipleComplexServiceOperation"' ServiceOperationResultKind.QueryWithMultipleResults' addressType' null' "GET"' defaultParams); " is 166.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            serviceOperations.Add("QueryMultipleComplexServiceOperation"' (args) => { int i = (int)args[0]; return new List<Address>() { CreateAddress(i)' CreateAddress(i + 1) }.AsQueryable(); }); " is 184.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("QueryMultipleEntityServiceOperation"' ServiceOperationResultKind.QueryWithMultipleResults' customerType' metadata.ResourceSet("Customers")' "GET"' defaultParams); " is 195.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            serviceOperations.Add("QueryMultipleEntityServiceOperation"' (args) => { int i = (int)args[0]; return new List<Customer>() { CreateCustomer(i)' CreateCustomer(i + 1) }.AsQueryable(); }); " is 186.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("ServiceOperationWithNoParameters"' ServiceOperationResultKind.QueryWithMultipleResults' customerType' metadata.ResourceSet("Customers")' "GET"' null); " is 183.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            serviceOperations.Add("ServiceOperationWithNoParameters"' (args) => { Debug.Assert(args == null || args.Length == 0); return new List<Customer>() { CreateCustomer(1)' CreateCustomer(2) }.AsQueryable(); }); " is 205.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The length of the statement  "            // metadata.AddServiceOperation("ServiceOperationWithMultipleParameters"' ServiceOperationResultKind.QueryWithMultipleResults' customerType' metadata.ResourceSet("Customers")' "GET"' " is 182.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            EntityDataType entityTypeWithPrimitiveProperties = DataTypes.EntityType.WithName("TestNS"' "TypeWithPrimitiveProperties"); " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("VoidServiceOperation"' defaultParameters' null' ODataServiceOperationResultKind.Void)); " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("DirectValuePrimitiveServiceOperation"' defaultParameters' DataTypes.Integer' ODataServiceOperationResultKind.DirectValue)); " is 163.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("DirectValueComplexServiceOperation"' defaultParameters' addressType' ODataServiceOperationResultKind.DirectValue)); " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("DirectValueEntityServiceOperation"' defaultParameters' customerType' customersSet' ODataServiceOperationResultKind.DirectValue)); " is 169.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("EnumerationPrimitiveServiceOperation"' defaultParameters' DataTypes.CollectionType.WithElementDataType(DataTypes.Integer)' ODataServiceOperationResultKind.Enumeration)); " is 209.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("EnumerationComplexServiceOperation"' defaultParameters' addressType' ODataServiceOperationResultKind.Enumeration)); " is 155.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("EnumerationEntityServiceOperation"' defaultParameters' DataTypes.CollectionOfEntities(customerType.Definition)' customersSet' ODataServiceOperationResultKind.Enumeration)); " is 212.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("QuerySinglePrimitiveServiceOperation"' defaultParameters' DataTypes.Integer' ODataServiceOperationResultKind.QueryWithSingleResult)); " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("QuerySingleComplexServiceOperation"' defaultParameters' addressType' ODataServiceOperationResultKind.QueryWithSingleResult)); " is 165.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("QuerySingleEntityServiceOperation"' defaultParameters' customerType' customersSet' ODataServiceOperationResultKind.QueryWithSingleResult)); " is 179.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("QueryMultiplePrimitiveServiceOperation"' defaultParameters' DataTypes.Integer' ODataServiceOperationResultKind.QueryWithMultipleResults)); " is 178.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("QueryMultipleComplexServiceOperation"' defaultParameters' addressType' ODataServiceOperationResultKind.QueryWithMultipleResults)); " is 170.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("QueryMultipleEntityServiceOperation"' defaultParameters' DataTypes.CollectionOfEntities(customerType.Definition)' customersSet' ODataServiceOperationResultKind.QueryWithMultipleResults)); " is 227.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestMetadata,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestMetadata.cs,BuildTestMetadata,The length of the statement  "            //container.Add(CreateServiceOperation("ServiceOperationWithNoParameters"' new List<FunctionParameter>()' DataTypes.CollectionOfEntities(customerType.Definition)' customersSet' ODataServiceOperationResultKind.QueryWithMultipleResults)); " is 236.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestUtils.cs,VerifyQueryResultsAreEqual,The length of the statement  "                VerificationUtils.VerifyEnumerationsAreEqual(expectedEnumerable.Cast<object>()' actualEnumerable.Cast<object>()' assert); " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,VariousExpressions,The length of the statement  "            foreach (BinaryOperatorKind binaryOperatorKind in QueryTestUtils.BinaryOperatorGroups.Select(bg => bg.OperatorKinds[0])) " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }' " is 170.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }' " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }' " is 165.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }' " is 122.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'  " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))")) " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'  " is 145.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))")) " is 184.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'  " is 173.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))")) " is 212.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'  " is 197.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))")) " is 236.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'  " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))")) " is 175.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'  " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))")) " is 199.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'  " is 125.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))")) " is 164.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'  " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))")) " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'  " is 338.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))")) " is 377.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'  " is 402.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))")) " is 441.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))")) " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'  " is 141.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))")) " is 180.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'  " is 169.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))")) " is 208.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'  " is 193.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))")) " is 232.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'  " is 132.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))")) " is 171.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'  " is 156.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))")) " is 195.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'  " is 121.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))")) " is 160.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'  " is 137.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))")) " is 176.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'  " is 334.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))")) " is 373.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'  " is 398.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The length of the statement  "                ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))")) " is 437.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The length of the statement  "                foreach (var operatorGroupLower in QueryTestUtils.BinaryOperatorGroups.Where(og => og.Priority > operatorGroupHigher.Priority)) " is 127.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,FilterQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\FilterQueryTokenTests.cs,InvalidFilterExpressionsTest,The length of the statement  "                new InvalidExpressionTestCase { Expression = ""' ExpectedErrorMessage = "Expression expected at position 0 in '$(Expression)'." }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,FilterQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\FilterQueryTokenTests.cs,InvalidFilterExpressionsTest,The length of the statement  "                        StringUtils.ResolveVariables(testCase.ExpectedErrorMessage' new Dictionary<string' string>() { { "Expression"' testCase.Expression } })' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,InvalidOrderByExpressionsTest,The length of the statement  "                new InvalidExpressionTestCase { Expression = ""' ExpectedErrorMessage = "Expression expected at position 0 in '$(Expression)'." }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,InvalidOrderByExpressionsTest,The length of the statement  "                new InvalidExpressionTestCase { Expression = "foo'"' ExpectedErrorMessage = "Expression expected at position 4 in '$(Expression)'." }' " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,InvalidOrderByExpressionsTest,The length of the statement  "                new InvalidExpressionTestCase { Expression = "'foo"' ExpectedErrorMessage = "Expression expected at position 0 in '$(Expression)'." }' " is 134.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,InvalidOrderByExpressionsTest,The length of the statement  "                new InvalidExpressionTestCase { Expression = "foo asc'"' ExpectedErrorMessage = "Expression expected at position 8 in '$(Expression)'." }' " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,InvalidOrderByExpressionsTest,The length of the statement  "                new InvalidExpressionTestCase { Expression = "foo desc'"' ExpectedErrorMessage = "Expression expected at position 9 in '$(Expression)'." }' " is 139.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,InvalidOrderByExpressionsTest,The length of the statement  "                new InvalidExpressionTestCase { Expression = "foo asc desc"' ExpectedErrorMessage = "Syntax error at position 12 in '$(Expression)'." }' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,InvalidOrderByExpressionsTest,The length of the statement  "                new InvalidExpressionTestCase { Expression = "foo ASC"' ExpectedErrorMessage = "Syntax error at position 7 in '$(Expression)'." }' " is 130.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,InvalidOrderByExpressionsTest,The length of the statement  "                        StringUtils.ResolveVariables(testCase.ExpectedErrorMessage' new Dictionary<string' string>() { { "Expression"' testCase.Expression } })' " is 136.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,OrderByExpressionTest,The length of the statement  "                    OrderBy = string.Join("'"' tc.Select((t' index) => t.Expression + ((index % 3 == 0) ? "" : ((index % 3 == 1) ? " asc" : " desc"))).ToArray())' " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,NormalizeAndRemoveBuiltInQueryOptions,The length of the statement  "            List<KeyValuePair<string' string>> collection = new List<KeyValuePair<string' string>>(queryOptions.Where(qo => !BuiltInQueryOptions.Contains(qo.Key))); " is 152.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,NormalizeAndRemoveBuiltInQueryOptions,The length of the statement  "            // now replace all 'null' values with string.Empty since an option like 'MyOption=' is parsed as having an empty string as value " is 128.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,VerifySyntaxTreesAreEqualImpl,The length of the statement  "            else if ((expected.OrderByTokens != null && actual.OrderByTokens == null) || (expected.OrderByTokens == null && actual.OrderByTokens != null)) " is 142.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,VerifyBinaryOperatorQueryTokensAreEqual,The length of the statement  "            assert.AreEqual(expected.OperatorKind' actual.OperatorKind' "The binary operator kind doesn't match the expected one."); " is 120.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,VerifyPropertyAccessQueryTokensAreEqual,The length of the statement  "            assert.AreEqual(expected.Identifier' actual.Identifier' "The Name of the property access token doesn't match the expected one."); " is 129.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,VerifyNonRootSegmentQueryTokensAreEqual,The length of the statement  "            assert.AreEqual(expected.Identifier' actual.Identifier' "The Name of the navigation property token doesn't match the expected one."); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,VerifyFunctionParameterTokensAreEqual,The length of the statement  "            assert.AreEqual(expected.ParameterName' actual.ParameterName' "The Name of the function call token doesn't match the expected one."); " is 133.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,ToDebugString,The length of the statement  "                    result = "(" + binary.Left.ToDebugString() + " " + binary.OperatorKind.ToOperatorName() + " " + binary.Right.ToDebugString() + ")"; " is 131.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,ToDebugString,The length of the statement  "                    result = functionCall.Name + "(" + string.Join("' "' functionCall.Arguments.Select(a => a.ToDebugString()).ToArray()) + ")"; " is 124.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,ToDebugString,The length of the statement  "            if (queryDescriptor.Filter != null) queryOptions.Add(new KeyValuePair<string' string>("$filter"' queryDescriptor.Filter.ToDebugString())); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,ToDebugString,The length of the statement  "            if (queryDescriptor.OrderByTokens != null) queryOptions.Add(new KeyValuePair<string' string>("$orderby"' string.Join("'"' queryDescriptor.OrderByTokens.Select(ob => ob.ToDebugString()).ToArray()))); " is 198.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,ToDebugString,The length of the statement  "            if (queryDescriptor.Select != null) queryOptions.Add(new KeyValuePair<string' string>("$select"' queryDescriptor.Select.ToDebugString())); " is 138.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,ToDebugString,The length of the statement  "            if (queryOptions.Count > 0) result += "?" + string.Join("&"' queryOptions.Select(qo => qo.Key + "=" + qo.Value).ToArray()); " is 123.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,SystemQueryOptionsQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SystemQueryOptionsQueryTokenTests.cs,CountExpressionTest,The length of the statement  "            object[] values = new object[] { null' 0' 1' 2' 5' 11111' -2' 12.3' "Foo"' -12.4m' 'c'' (long)int.MaxValue + 1' (long)int.MinValue - 1' 2.3f' "(1)"' "2 + 3"' "int.MaxValue"' "false"' "true"' "False"' "True"' "FaLSE"' "trUE" }; " is 226.
Long Statement,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,SystemQueryOptionsQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SystemQueryOptionsQueryTokenTests.cs,CountExpressionTest,The length of the statement  "                        : string.Format(CultureInfo.InvariantCulture' errorMessageTemplate' value' correctValuesStr).Replace('+'' ' ')    // URI all + will be replace by space " is 151.
Long Statement,Microsoft.OData.UriParser,SyntacticTree,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SyntacticTree.cs,ParseUri,The length of the statement  "            // TODO: we need to decide whether we want to allow multiple system $ query options with the same name (OIPI suggests that this is valid); we currently don't. " is 158.
Long Statement,Microsoft.OData.UriParser,SyntacticTree,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SyntacticTree.cs,TryUriStringToNonNegativeInteger,The length of the statement  "            if (!UriPrimitiveTypeParser.Instance.TryParseUriStringToType(text' EdmCoreModel.Instance.GetInt32(false)' out valueAsObject' out exception)) " is 140.
Complex Conditional,Microsoft.Test.Taupo.OData.Query.Tests.DataClasses,Customer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\DataClasses\Customer.cs,Equals,The conditional expression  "this.Address == null && other.Address != null ||                  this.Address != null && other.Address == null"  is complex.
Complex Conditional,Microsoft.Test.Taupo.OData.Query.Tests.DataClasses,Customer,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\DataClasses\Customer.cs,Equals,The conditional expression  "this.Emails == null && other.Emails != null ||                  this.Emails != null && other.Emails == null"  is complex.
Complex Conditional,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,QueryTokenUtils,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\QueryTokenUtils.cs,VerifySyntaxTreesAreEqualImpl,The conditional expression  "(expected.OrderByTokens != null && actual.OrderByTokens == null) || (expected.OrderByTokens == null && actual.OrderByTokens != null)"  is complex.
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode left = new BinaryOperatorNode(operatorKind' new ConstantNode(1)' new ConstantNode(2));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new FilterTestCase()                  {                      Filter = "1 " + operatorKind.ToOperatorName() + " 2 le 5"'                      ExpectedFilterCondition = new BinaryOperatorNode(BinaryOperatorKind.LessThanOrEqual' left' new ConstantNode(5))                  };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: operatorPairs = operatorPairs.Concat(operatorGroup.OperatorKinds.Variations(2));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: operatorPairs = operatorPairs.Concat(operatorGroup.OperatorKinds.Variations(2));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode innerLeft1 = new BinaryOperatorNode(operatorPair[0]' new ConstantNode(1)' new ConstantNode(2));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode outerLeft1 = new BinaryOperatorNode(operatorPair[1]' innerLeft1' new ConstantNode(3));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new FilterTestCase()                      {                          Filter = "1 " + operatorPair[0].ToOperatorName() + " 2 " + operatorPair[1].ToOperatorName() + " 3 le 5"'                          ExpectedFilterCondition = new BinaryOperatorNode(BinaryOperatorKind.LessThanOrEqual' outerLeft1' new ConstantNode(5))                      };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode innerRight2 = new BinaryOperatorNode(operatorPair[1]' new ConstantNode(2)' new ConstantNode(3));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode innerRight2 = new BinaryOperatorNode(operatorPair[1]' new ConstantNode(2)' new ConstantNode(3));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new FilterTestCase()                      {                          Filter = "1 " + operatorPair[0].ToOperatorName() + " (2 " + operatorPair[1].ToOperatorName() + " 3) le 5"'                          ExpectedFilterCondition = new BinaryOperatorNode(BinaryOperatorKind.LessThanOrEqual' outerLeft2' new ConstantNode(5))                      };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode innerLeft = new BinaryOperatorNode(operatorKindLower' new ConstantNode(1)' new ConstantNode(2));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode outerLeft = new BinaryOperatorNode(operatorKindHigher' innerLeft' new ConstantNode(3));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new FilterTestCase()                              {                                  Filter = "1 " + operatorKindLower.ToOperatorName() + " 2 " + operatorKindHigher.ToOperatorName() + " 3 le 5"'                                  ExpectedFilterCondition = new BinaryOperatorNode(BinaryOperatorKind.LessThanOrEqual' outerLeft' new ConstantNode(5))                              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode innerRight = new BinaryOperatorNode(operatorKindHigher' new ConstantNode(2)' new ConstantNode(3));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode innerRight = new BinaryOperatorNode(operatorKindHigher' new ConstantNode(2)' new ConstantNode(3));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new FilterTestCase()                              {                                  Filter = "1 " + operatorKindLower.ToOperatorName() + " (2 " + operatorKindHigher.ToOperatorName() + " 3) le 5"'                                  ExpectedFilterCondition = new BinaryOperatorNode(BinaryOperatorKind.LessThanOrEqual' outerLeft2' new ConstantNode(5))                              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode innerRight2 = new BinaryOperatorNode(operatorKindLower' new ConstantNode(2)' new ConstantNode(3));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode innerRight2 = new BinaryOperatorNode(operatorKindLower' new ConstantNode(2)' new ConstantNode(3));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new FilterTestCase()                              {                                  Filter = "1 " + operatorKindHigher.ToOperatorName() + " 2 " + operatorKindLower.ToOperatorName() + " 3 le 5"'                                  ExpectedFilterCondition = new BinaryOperatorNode(BinaryOperatorKind.LessThanOrEqual' outerLeft3' new ConstantNode(5))                              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,UnaryOperatorTestCases,The following statement contains a magic number: yield return new FilterTestCase()              {                  Filter = UnaryOperatorKind.Negate.ToOperatorName() + "(1) le 5"'                  ExpectedFilterCondition = new BinaryOperatorNode(BinaryOperatorKind.LessThanOrEqual' left' new ConstantNode(5))              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,UnaryOperatorTestCases,The following statement contains a magic number: yield return new FilterTestCase()              {                  Filter = UnaryOperatorKind.Negate.ToOperatorName() + "(" + UnaryOperatorKind.Negate.ToOperatorName() + "(1)) le 5"'                  ExpectedFilterCondition = new BinaryOperatorNode(BinaryOperatorKind.LessThanOrEqual' outer' new ConstantNode(5))              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,UnaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode innerBinary = new BinaryOperatorNode(BinaryOperatorKind.Add' new ConstantNode(2)' new ConstantNode(3));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,UnaryOperatorTestCases,The following statement contains a magic number: BinaryOperatorNode innerBinary = new BinaryOperatorNode(BinaryOperatorKind.Add' new ConstantNode(2)' new ConstantNode(3));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,UnaryOperatorTestCases,The following statement contains a magic number: yield return new FilterTestCase()              {                  Filter = UnaryOperatorKind.Negate.ToOperatorName() + " (2 " + BinaryOperatorKind.Add.ToOperatorName() + " 3) le 5"'                  ExpectedFilterCondition = new BinaryOperatorNode(BinaryOperatorKind.LessThanOrEqual' outer2' new ConstantNode(5))              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInStringFunctionCallTestCases,The following statement contains a magic number: QueryNode[] args8 = new QueryNode[]                  {                      new ConstantNode("Johny")'                      new ConstantNode (3)                  };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInStringFunctionCallTestCases,The following statement contains a magic number: QueryNode[] args9 = new QueryNode[]                  {                      new ConstantNode("Johny")'                      new ConstantNode(3)'                      new ConstantNode(1)                  };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInDateTimeOffsetFunctionCallTestCases,The following statement contains a magic number: QueryNode[] args = new QueryNode[]                  {                      new ConstantNode(new DateTimeOffset(2010' 12' 9' 14' 10' 20' TimeSpan.Zero))                  };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInDateTimeOffsetFunctionCallTestCases,The following statement contains a magic number: QueryNode[] args = new QueryNode[]                  {                      new ConstantNode(new DateTimeOffset(2010' 12' 9' 14' 10' 20' TimeSpan.Zero))                  };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInDateTimeOffsetFunctionCallTestCases,The following statement contains a magic number: QueryNode[] args = new QueryNode[]                  {                      new ConstantNode(new DateTimeOffset(2010' 12' 9' 14' 10' 20' TimeSpan.Zero))                  };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInDateTimeOffsetFunctionCallTestCases,The following statement contains a magic number: QueryNode[] args = new QueryNode[]                  {                      new ConstantNode(new DateTimeOffset(2010' 12' 9' 14' 10' 20' TimeSpan.Zero))                  };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInDateTimeOffsetFunctionCallTestCases,The following statement contains a magic number: QueryNode[] args = new QueryNode[]                  {                      new ConstantNode(new DateTimeOffset(2010' 12' 9' 14' 10' 20' TimeSpan.Zero))                  };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInDateTimeOffsetFunctionCallTestCases,The following statement contains a magic number: QueryNode[] args = new QueryNode[]                  {                      new ConstantNode(new DateTimeOffset(2010' 12' 9' 14' 10' 20' TimeSpan.Zero))                  };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInMathFunctionCallTestCases,The following statement contains a magic number: var mathFunctionTypes = new[]                  {                      new { Type = (IEdmPrimitiveTypeReference)EdmCoreModel.Instance.GetDouble(false)' Literal = "42.42"' Value = (object)(double)42.42 }'                      new { Type = (IEdmPrimitiveTypeReference)EdmCoreModel.Instance.GetDecimal(false)' Literal = "42m"' Value = (object)(decimal)42 }                  };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,FilterBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\FilterBinderFunctionalTests.cs,BuiltInMathFunctionCallTestCases,The following statement contains a magic number: var mathFunctionTypes = new[]                  {                      new { Type = (IEdmPrimitiveTypeReference)EdmCoreModel.Instance.GetDouble(false)' Literal = "42.42"' Value = (object)(double)42.42 }'                      new { Type = (IEdmPrimitiveTypeReference)EdmCoreModel.Instance.GetDecimal(false)' Literal = "42m"' Value = (object)(decimal)42 }                  };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,OrderByBinderFunctionalTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\OrderByBinderFunctionalTests.cs,OrderByBinderTest,The following statement contains a magic number: OrderByTestCase[] testCases = new OrderByTestCase[]              {                  new OrderByTestCase()                  {                      OrderBy = new string[] { "true" }'                      ExpectedOrderByExpressions = new SingleValueNode[]                      {                          new ConstantNode(true)                      }                  }'                    new OrderByTestCase()                  {                      OrderBy = new string[] { "Name" }'                      ExpectedOrderByExpressions = new SingleValueNode[]                      {                          new SingleValuePropertyAccessNode(                              new ResourceRangeVariableReferenceNode(entityRangeVariable.Name' entityRangeVariable)'                              model.ResolveProperty("TestNS.Customer.Name")                          )                      }                  }'                    new OrderByTestCase()                  {                      OrderBy = new string[] { "3" }'                      ExpectedOrderByExpressions = new SingleValueNode[]                      {                          new ConstantNode(3)                      }                  }'                    new OrderByTestCase()                  {                      OrderBy = new string[] { "null" }'                      ExpectedOrderByExpressions = new SingleValueNode[]                      {                          new ConstantNode(null)                      }                  }'                      new OrderByTestCase()                  {                      OrderBy = new string[] { "Address" }'                      ExpectedExceptionMessage = "The $orderby expression must evaluate to a single value of primitive type."                  }'                    new OrderByTestCase()                  {                      OrderBy = new string[] { "Emails" }'                      ExpectedExceptionMessage = "The $orderby expression must evaluate to a single value of primitive type."                  }'                    new OrderByTestCase()                  {                      OrderBy = new string[] { "NonExistant" }'                      ExpectedExceptionMessage = "Could not find a property named 'NonExistant' on type 'TestNS.Customer'."                  }'                    new OrderByTestCase()                  {                      OrderBy = new string[] { "Name"' "ID" }'                      ExpectedOrderByExpressions = new SingleValueNode[]                      {                          new SingleValuePropertyAccessNode(                              new ResourceRangeVariableReferenceNode(entityRangeVariable.Name' entityRangeVariable)'                              model.ResolveProperty("TestNS.Customer.Name")                          )'                          new SingleValuePropertyAccessNode(                              new ResourceRangeVariableReferenceNode(entityRangeVariable.Name' entityRangeVariable)'                               model.ResolveProperty("TestNS.Customer.ID")                          )'                      }                  }'                    new OrderByTestCase()                  {                      OrderBy = new string[] { "Name"' "Address" }'                      ExpectedExceptionMessage = "The $orderby expression must evaluate to a single value of primitive type."                  }'                    new OrderByTestCase()                  {                      OrderBy = new string[] { "Name"' "Emails" }'                      ExpectedExceptionMessage = "The $orderby expression must evaluate to a single value of primitive type."                  }'                    new OrderByTestCase()                  {                      OrderBy = new string[] { "Name"' "NonExistant" }'                      ExpectedExceptionMessage = "Could not find a property named 'NonExistant' on type 'TestNS.Customer'."                  }'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,SkipTopBinderTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\SkipTopBinderTests.cs,SkipAndTopBinderTest,The following statement contains a magic number: var testCases = new[]              {                  new SkipTopTestCase                  {                      Query = "/Customers?$skip=2"'                      ExpectedSkipClause = 2                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$top=2"'                      ExpectedTopClause = 2                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$skip=3&$top=2"'                      ExpectedTopClause = 2'                      ExpectedSkipClause = 3                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$top=2&$skip=3"'                      ExpectedTopClause = 2'                      ExpectedSkipClause = 3                  }'                  // TODO: enable those?                  /*                   new SkipTopTestCase                  {                      Query = "/Customers(0)?$top=100"'                      ExpectedExceptionMessage = "The $top query option cannot be applied to the query path. Top can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?$skip=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?$skip=100&top=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?top=100&$skip=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                   */              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,SkipTopBinderTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\SkipTopBinderTests.cs,SkipAndTopBinderTest,The following statement contains a magic number: var testCases = new[]              {                  new SkipTopTestCase                  {                      Query = "/Customers?$skip=2"'                      ExpectedSkipClause = 2                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$top=2"'                      ExpectedTopClause = 2                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$skip=3&$top=2"'                      ExpectedTopClause = 2'                      ExpectedSkipClause = 3                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$top=2&$skip=3"'                      ExpectedTopClause = 2'                      ExpectedSkipClause = 3                  }'                  // TODO: enable those?                  /*                   new SkipTopTestCase                  {                      Query = "/Customers(0)?$top=100"'                      ExpectedExceptionMessage = "The $top query option cannot be applied to the query path. Top can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?$skip=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?$skip=100&top=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?top=100&$skip=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                   */              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,SkipTopBinderTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\SkipTopBinderTests.cs,SkipAndTopBinderTest,The following statement contains a magic number: var testCases = new[]              {                  new SkipTopTestCase                  {                      Query = "/Customers?$skip=2"'                      ExpectedSkipClause = 2                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$top=2"'                      ExpectedTopClause = 2                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$skip=3&$top=2"'                      ExpectedTopClause = 2'                      ExpectedSkipClause = 3                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$top=2&$skip=3"'                      ExpectedTopClause = 2'                      ExpectedSkipClause = 3                  }'                  // TODO: enable those?                  /*                   new SkipTopTestCase                  {                      Query = "/Customers(0)?$top=100"'                      ExpectedExceptionMessage = "The $top query option cannot be applied to the query path. Top can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?$skip=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?$skip=100&top=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?top=100&$skip=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                   */              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,SkipTopBinderTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\SkipTopBinderTests.cs,SkipAndTopBinderTest,The following statement contains a magic number: var testCases = new[]              {                  new SkipTopTestCase                  {                      Query = "/Customers?$skip=2"'                      ExpectedSkipClause = 2                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$top=2"'                      ExpectedTopClause = 2                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$skip=3&$top=2"'                      ExpectedTopClause = 2'                      ExpectedSkipClause = 3                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$top=2&$skip=3"'                      ExpectedTopClause = 2'                      ExpectedSkipClause = 3                  }'                  // TODO: enable those?                  /*                   new SkipTopTestCase                  {                      Query = "/Customers(0)?$top=100"'                      ExpectedExceptionMessage = "The $top query option cannot be applied to the query path. Top can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?$skip=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?$skip=100&top=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?top=100&$skip=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                   */              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,SkipTopBinderTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\SkipTopBinderTests.cs,SkipAndTopBinderTest,The following statement contains a magic number: var testCases = new[]              {                  new SkipTopTestCase                  {                      Query = "/Customers?$skip=2"'                      ExpectedSkipClause = 2                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$top=2"'                      ExpectedTopClause = 2                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$skip=3&$top=2"'                      ExpectedTopClause = 2'                      ExpectedSkipClause = 3                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$top=2&$skip=3"'                      ExpectedTopClause = 2'                      ExpectedSkipClause = 3                  }'                  // TODO: enable those?                  /*                   new SkipTopTestCase                  {                      Query = "/Customers(0)?$top=100"'                      ExpectedExceptionMessage = "The $top query option cannot be applied to the query path. Top can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?$skip=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?$skip=100&top=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?top=100&$skip=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                   */              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.MetadataBinder,SkipTopBinderTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\MetadataBinder\SkipTopBinderTests.cs,SkipAndTopBinderTest,The following statement contains a magic number: var testCases = new[]              {                  new SkipTopTestCase                  {                      Query = "/Customers?$skip=2"'                      ExpectedSkipClause = 2                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$top=2"'                      ExpectedTopClause = 2                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$skip=3&$top=2"'                      ExpectedTopClause = 2'                      ExpectedSkipClause = 3                  }'                  new SkipTopTestCase                  {                      Query = "/Customers?$top=2&$skip=3"'                      ExpectedTopClause = 2'                      ExpectedSkipClause = 3                  }'                  // TODO: enable those?                  /*                   new SkipTopTestCase                  {                      Query = "/Customers(0)?$top=100"'                      ExpectedExceptionMessage = "The $top query option cannot be applied to the query path. Top can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?$skip=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?$skip=100&top=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                  new SkipTopTestCase                  {                      Query = "/Customers(0)?top=100&$skip=100"'                      ExpectedExceptionMessage = "The $skip query option cannot be applied to the query path. Skip can only be applied to a collection of entities."                  }'                   */              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomers,The following statement contains a magic number: return new Customer[]              {                  CreateCustomer(1)'                  CreateCustomer(2)'                  CreateCustomer(3)'                  CreateCustomer(4)'                  CreateCustomer(5)'                  CreateCustomer(6)'                  CreateCustomer(7)'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomers,The following statement contains a magic number: return new Customer[]              {                  CreateCustomer(1)'                  CreateCustomer(2)'                  CreateCustomer(3)'                  CreateCustomer(4)'                  CreateCustomer(5)'                  CreateCustomer(6)'                  CreateCustomer(7)'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomers,The following statement contains a magic number: return new Customer[]              {                  CreateCustomer(1)'                  CreateCustomer(2)'                  CreateCustomer(3)'                  CreateCustomer(4)'                  CreateCustomer(5)'                  CreateCustomer(6)'                  CreateCustomer(7)'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomers,The following statement contains a magic number: return new Customer[]              {                  CreateCustomer(1)'                  CreateCustomer(2)'                  CreateCustomer(3)'                  CreateCustomer(4)'                  CreateCustomer(5)'                  CreateCustomer(6)'                  CreateCustomer(7)'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomers,The following statement contains a magic number: return new Customer[]              {                  CreateCustomer(1)'                  CreateCustomer(2)'                  CreateCustomer(3)'                  CreateCustomer(4)'                  CreateCustomer(5)'                  CreateCustomer(6)'                  CreateCustomer(7)'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomers,The following statement contains a magic number: return new Customer[]              {                  CreateCustomer(1)'                  CreateCustomer(2)'                  CreateCustomer(3)'                  CreateCustomer(4)'                  CreateCustomer(5)'                  CreateCustomer(6)'                  CreateCustomer(7)'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateCustomer,The following statement contains a magic number: switch (id)              {                  case 1:                      Address address1 = CreateAddress(1);                      List<string> emails1 = new List<string>() { "bill.meyer@odata.org"' "b.meyer@odata.org" };                      return new Customer { ID = 1' Name = "Bill Meyer"' Emails = emails1' Address = address1 };                    case 2:                      Address address2 = CreateAddress(2);                      List<string> emails2 = new List<string>() { "john.deer@odata.org"' "j.deer@odata.org" };                      return new Customer { ID = 2' Name = "John Deer"' Emails = emails2' Address = address2 };                    case 3:                      Address address3 = CreateAddress(3);                      List<string> emails3 = new List<string>() { "john.doe@odata.org"' "j.doe@odata.org" };                      return new Customer { ID = 3' Name = "John Doe"' Emails = emails3' Address = address3 };                    case 4:                      Address address4 = CreateAddress(4);                      List<string> emails4 = new List<string>() { "hannah.hannah@odata.org"' "h.hannah@odata.org"' "h.h@odata.org" };                      return new Customer { ID = 4' Name = "hannah hannah"' Emails = emails4' Address = address4 };                    case 5:                      Address address5 = CreateAddress(5);                      List<string> emails5 = new List<string>() { "john.doe@somewhere.org" };                      return new Customer { ID = 5' Name = "John Doe"' Emails = emails5' Address = address5 };                    case 6:                      Address address6 = CreateAddress(6);                      List<string> emails6 = new List<string>() { "j.d@mycompany.com" };                      return new Customer { ID = 6' Name = "John Doe"' Emails = emails6' Address = address6 };                    case 7:                      // NOTE: this customer has the same address as customer #6                      Address address7 = CreateAddress(6);                      List<string> emails7 = new List<string>() { "anne@home.at" };                      return new Customer { ID = 6' Name = "Anne Miller"' Emails = emails7' Address = address7 };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateAddress,The following statement contains a magic number: switch (id)              {                  case 1:                      return new Address { City = "Vienna"' Zip = 1120 };                  case 2:                      return new Address { City = "Prague"' Zip = 1234 };                  case 3:                      return new Address { City = "Redmond"' Zip = 98052 };                  case 4:                      return new Address { City = "Seattle"' Zip = 94004 };                  case 5:                      return new Address { City = "Seattle"' Zip = 94005 };                  case 6:                      return new Address { City = "Bellevue"' Zip = 98008 };                  default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateAddress,The following statement contains a magic number: switch (id)              {                  case 1:                      return new Address { City = "Vienna"' Zip = 1120 };                  case 2:                      return new Address { City = "Prague"' Zip = 1234 };                  case 3:                      return new Address { City = "Redmond"' Zip = 98052 };                  case 4:                      return new Address { City = "Seattle"' Zip = 94004 };                  case 5:                      return new Address { City = "Seattle"' Zip = 94005 };                  case 6:                      return new Address { City = "Bellevue"' Zip = 98008 };                  default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateAddress,The following statement contains a magic number: switch (id)              {                  case 1:                      return new Address { City = "Vienna"' Zip = 1120 };                  case 2:                      return new Address { City = "Prague"' Zip = 1234 };                  case 3:                      return new Address { City = "Redmond"' Zip = 98052 };                  case 4:                      return new Address { City = "Seattle"' Zip = 94004 };                  case 5:                      return new Address { City = "Seattle"' Zip = 94005 };                  case 6:                      return new Address { City = "Bellevue"' Zip = 98008 };                  default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateAddress,The following statement contains a magic number: switch (id)              {                  case 1:                      return new Address { City = "Vienna"' Zip = 1120 };                  case 2:                      return new Address { City = "Prague"' Zip = 1234 };                  case 3:                      return new Address { City = "Redmond"' Zip = 98052 };                  case 4:                      return new Address { City = "Seattle"' Zip = 94004 };                  case 5:                      return new Address { City = "Seattle"' Zip = 94005 };                  case 6:                      return new Address { City = "Bellevue"' Zip = 98008 };                  default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateAddress,The following statement contains a magic number: switch (id)              {                  case 1:                      return new Address { City = "Vienna"' Zip = 1120 };                  case 2:                      return new Address { City = "Prague"' Zip = 1234 };                  case 3:                      return new Address { City = "Redmond"' Zip = 98052 };                  case 4:                      return new Address { City = "Seattle"' Zip = 94004 };                  case 5:                      return new Address { City = "Seattle"' Zip = 94005 };                  case 6:                      return new Address { City = "Bellevue"' Zip = 98008 };                  default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateAddress,The following statement contains a magic number: switch (id)              {                  case 1:                      return new Address { City = "Vienna"' Zip = 1120 };                  case 2:                      return new Address { City = "Prague"' Zip = 1234 };                  case 3:                      return new Address { City = "Redmond"' Zip = 98052 };                  case 4:                      return new Address { City = "Seattle"' Zip = 94004 };                  case 5:                      return new Address { City = "Seattle"' Zip = 94005 };                  case 6:                      return new Address { City = "Bellevue"' Zip = 98008 };                  default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateAddress,The following statement contains a magic number: switch (id)              {                  case 1:                      return new Address { City = "Vienna"' Zip = 1120 };                  case 2:                      return new Address { City = "Prague"' Zip = 1234 };                  case 3:                      return new Address { City = "Redmond"' Zip = 98052 };                  case 4:                      return new Address { City = "Seattle"' Zip = 94004 };                  case 5:                      return new Address { City = "Seattle"' Zip = 94005 };                  case 6:                      return new Address { City = "Bellevue"' Zip = 98008 };                  default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateAddress,The following statement contains a magic number: switch (id)              {                  case 1:                      return new Address { City = "Vienna"' Zip = 1120 };                  case 2:                      return new Address { City = "Prague"' Zip = 1234 };                  case 3:                      return new Address { City = "Redmond"' Zip = 98052 };                  case 4:                      return new Address { City = "Seattle"' Zip = 94004 };                  case 5:                      return new Address { City = "Seattle"' Zip = 94005 };                  case 6:                      return new Address { City = "Bellevue"' Zip = 98008 };                  default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateAddress,The following statement contains a magic number: switch (id)              {                  case 1:                      return new Address { City = "Vienna"' Zip = 1120 };                  case 2:                      return new Address { City = "Prague"' Zip = 1234 };                  case 3:                      return new Address { City = "Redmond"' Zip = 98052 };                  case 4:                      return new Address { City = "Seattle"' Zip = 94004 };                  case 5:                      return new Address { City = "Seattle"' Zip = 94005 };                  case 6:                      return new Address { City = "Bellevue"' Zip = 98008 };                  default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateAddress,The following statement contains a magic number: switch (id)              {                  case 1:                      return new Address { City = "Vienna"' Zip = 1120 };                  case 2:                      return new Address { City = "Prague"' Zip = 1234 };                  case 3:                      return new Address { City = "Redmond"' Zip = 98052 };                  case 4:                      return new Address { City = "Seattle"' Zip = 94004 };                  case 5:                      return new Address { City = "Seattle"' Zip = 94005 };                  case 6:                      return new Address { City = "Bellevue"' Zip = 98008 };                  default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateAddress,The following statement contains a magic number: switch (id)              {                  case 1:                      return new Address { City = "Vienna"' Zip = 1120 };                  case 2:                      return new Address { City = "Prague"' Zip = 1234 };                  case 3:                      return new Address { City = "Redmond"' Zip = 98052 };                  case 4:                      return new Address { City = "Seattle"' Zip = 94004 };                  case 5:                      return new Address { City = "Seattle"' Zip = 94005 };                  case 6:                      return new Address { City = "Bellevue"' Zip = 98008 };                  default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateMultiKey,The following statement contains a magic number: switch (id)              {                  case 1:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.2' NonKey = "NonKey" };                    case 2:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42' NonKey = "NonKey" };                    case 3:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.42' NonKey = "NonKey" };                    case 4:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 0.0' NonKey = "foo" };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateMultiKey,The following statement contains a magic number: switch (id)              {                  case 1:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.2' NonKey = "NonKey" };                    case 2:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42' NonKey = "NonKey" };                    case 3:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.42' NonKey = "NonKey" };                    case 4:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 0.0' NonKey = "foo" };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateMultiKey,The following statement contains a magic number: switch (id)              {                  case 1:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.2' NonKey = "NonKey" };                    case 2:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42' NonKey = "NonKey" };                    case 3:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.42' NonKey = "NonKey" };                    case 4:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 0.0' NonKey = "foo" };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateMultiKey,The following statement contains a magic number: switch (id)              {                  case 1:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.2' NonKey = "NonKey" };                    case 2:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42' NonKey = "NonKey" };                    case 3:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.42' NonKey = "NonKey" };                    case 4:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 0.0' NonKey = "foo" };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateMultiKey,The following statement contains a magic number: switch (id)              {                  case 1:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.2' NonKey = "NonKey" };                    case 2:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42' NonKey = "NonKey" };                    case 3:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.42' NonKey = "NonKey" };                    case 4:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 0.0' NonKey = "foo" };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateMultiKey,The following statement contains a magic number: switch (id)              {                  case 1:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.2' NonKey = "NonKey" };                    case 2:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42' NonKey = "NonKey" };                    case 3:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.42' NonKey = "NonKey" };                    case 4:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 0.0' NonKey = "foo" };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateMultiKey,The following statement contains a magic number: switch (id)              {                  case 1:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.2' NonKey = "NonKey" };                    case 2:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42' NonKey = "NonKey" };                    case 3:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.42' NonKey = "NonKey" };                    case 4:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 0.0' NonKey = "foo" };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateMultiKey,The following statement contains a magic number: switch (id)              {                  case 1:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.2' NonKey = "NonKey" };                    case 2:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42' NonKey = "NonKey" };                    case 3:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.42' NonKey = "NonKey" };                    case 4:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 0.0' NonKey = "foo" };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateMultiKey,The following statement contains a magic number: switch (id)              {                  case 1:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.2' NonKey = "NonKey" };                    case 2:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42' NonKey = "NonKey" };                    case 3:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.42' NonKey = "NonKey" };                    case 4:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 0.0' NonKey = "foo" };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateMultiKey,The following statement contains a magic number: switch (id)              {                  case 1:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.2' NonKey = "NonKey" };                    case 2:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42' NonKey = "NonKey" };                    case 3:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 42.42' NonKey = "NonKey" };                    case 4:                      return new MultiKey() { Keya = 42' KeyA = "foo"' KeyB = 0.0' NonKey = "foo" };                    default:                      throw new NotSupportedException();              }
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The following statement contains a magic number: serviceOperations.Add("ServiceOperationWithNoParameters"' (args) => { Debug.Assert(args == null || args.Length == 0); return new List<Customer>() { CreateCustomer(1)' CreateCustomer(2) }.AsQueryable(); });
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The following statement contains a magic number: serviceOperations.Add("ServiceOperationWithMultipleParameters"' (args) =>               {                  Debug.Assert(args != null' "args != null");                  Debug.Assert(args.Length == 3' "args.Length == 3");                  Debug.Assert(args[0] is int' "args[0] is int");                  Debug.Assert(args[1] is string' "args[1] is string");                  Debug.Assert(args[2] == null || args[2] is bool?' "args[2] is bool?");                   return new List<Customer>() { CreateCustomer(1)' CreateCustomer(2) }.AsQueryable();               });
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The following statement contains a magic number: serviceOperations.Add("ServiceOperationWithMultipleParameters"' (args) =>               {                  Debug.Assert(args != null' "args != null");                  Debug.Assert(args.Length == 3' "args.Length == 3");                  Debug.Assert(args[0] is int' "args[0] is int");                  Debug.Assert(args[1] is string' "args[1] is string");                  Debug.Assert(args[2] == null || args[2] is bool?' "args[2] is bool?");                   return new List<Customer>() { CreateCustomer(1)' CreateCustomer(2) }.AsQueryable();               });
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The following statement contains a magic number: serviceOperations.Add("ServiceOperationWithMultipleParameters"' (args) =>               {                  Debug.Assert(args != null' "args != null");                  Debug.Assert(args.Length == 3' "args.Length == 3");                  Debug.Assert(args[0] is int' "args[0] is int");                  Debug.Assert(args[1] is string' "args[1] is string");                  Debug.Assert(args[2] == null || args[2] is bool?' "args[2] is bool?");                   return new List<Customer>() { CreateCustomer(1)' CreateCustomer(2) }.AsQueryable();               });
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests,QueryTestData,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\QueryTestData.cs,CreateServiceOperations,The following statement contains a magic number: serviceOperations.Add("ServiceOperationWithMultipleParameters"' (args) =>               {                  Debug.Assert(args != null' "args != null");                  Debug.Assert(args.Length == 3' "args.Length == 3");                  Debug.Assert(args[0] is int' "args[0] is int");                  Debug.Assert(args[1] is string' "args[1] is string");                  Debug.Assert(args[2] == null || args[2] is bool?' "args[2] is bool?");                   return new List<Customer>() { CreateCustomer(1)' CreateCustomer(2) }.AsQueryable();               });
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,VariousExpressions,The following statement contains a magic number: yield return new ExpressionTestCase()              {                  Expression = "42"'                  ExpectedToken = new LiteralToken(42)              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,VariousExpressions,The following statement contains a magic number: yield return new ExpressionTestCase()              {                  Expression = "(42)"'                  ExpectedToken = new LiteralToken(42)              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,PrimitiveLiteralTestCases,The following statement contains a magic number: return new[]              {                  // Null                  new ExpressionTestCase { Expression = "null"' ExpectedToken = new LiteralToken(null) }'                    // String                  new ExpressionTestCase { Expression = "''"' ExpectedToken = new LiteralToken("") }'                  new ExpressionTestCase { Expression = "'some'"' ExpectedToken = new LiteralToken("some") }'                  new ExpressionTestCase { Expression = "'foo''bar'"' ExpectedToken = new LiteralToken("foo'bar") }'                    // Boolean                  new ExpressionTestCase { Expression = "true"' ExpectedToken = new LiteralToken(true) }'                  new ExpressionTestCase { Expression = "false"' ExpectedToken = new LiteralToken(false) }'                    // DateTimeOffset                  new ExpressionTestCase { Expression = "2004-09-14T21:00:04-08:00"' ExpectedToken = new LiteralToken(new DateTimeOffset(2004' 09' 14' 21' 0' 4' new TimeSpan(-8' 0' 0))) }'                    // Duration                  new ExpressionTestCase { Expression = "duration'PT21H4S'"' ExpectedToken = new LiteralToken(new TimeSpan(21' 00' 04)) }'                    // Decimal                  new ExpressionTestCase { Expression = "42m"' ExpectedToken = new LiteralToken((Decimal)42) }'                  new ExpressionTestCase { Expression = "42.42M"' ExpectedToken = new LiteralToken((Decimal)42.42) }'                    // Int64                  new ExpressionTestCase { Expression = "42l"' ExpectedToken = new LiteralToken((Int64)42) }'                  new ExpressionTestCase { Expression = "42L"' ExpectedToken = new LiteralToken((Int64)42) }'                    // Int32                  new ExpressionTestCase { Expression = "42"' ExpectedToken = new LiteralToken((Int32)42) }'                  new ExpressionTestCase { Expression = "-123"' ExpectedToken = new LiteralToken((Int32)(-123)) }'                    // Double                  new ExpressionTestCase { Expression = "42.42d"' ExpectedToken = new LiteralToken((Double)42.42) }'                  new ExpressionTestCase { Expression = "-42.42d"' ExpectedToken = new LiteralToken((Double)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456D"' ExpectedToken = new LiteralToken((Double)123456) }'                    // Single                  new ExpressionTestCase { Expression = "42.42f"' ExpectedToken = new LiteralToken((Single)42.42) }'                  new ExpressionTestCase { Expression = "-42.42F"' ExpectedToken = new LiteralToken((Single)(-42.42)) }'                  new ExpressionTestCase { Expression = "123456F"' ExpectedToken = new LiteralToken((Single)123456) }'                    // Guid                  new ExpressionTestCase { Expression = "FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF"' ExpectedToken = new LiteralToken(new Guid("{FD3A4006-A6EF-420E-8EDA-DA2B1C58F6DF}")) }'                    // Binary                  new ExpressionTestCase { Expression = "binary''"' ExpectedToken = new LiteralToken(new byte[0]) }'                  new ExpressionTestCase { Expression = "binary'AQID'"' ExpectedToken = new LiteralToken(new byte[] { 1' 2' 3 }) }'                  new ExpressionTestCase { Expression = "binary'qrvM'"' ExpectedToken = new LiteralToken(new byte[] { 0xaa' 0xbb' 0xcc }) }'                    //// ToDo:When we start supporting spatial uncomment these.                  //// Geography Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POINT (20 10 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POINT (20 10 NULL 40)"))                  ////}'                  ////// Geography LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10' 30 20)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10' 30 20)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;LINESTRING (20 10 30' 30 20 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;LINESTRING (20 10 30' 30 20 40)"))                  ////}'                  ////// Geography Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;POLYGON ((20 10 30' 30 20 40' 40 30 50' 20 10 30)' (-20 -10 30' -30 -20 40' -40 -30 50' -20 -10 30))"))                  ////}'                  ////// Geography Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10' 30 20' 40 30' 20 10)' POINT (-20 -10)' POINT (-30 -20)' POINT (-40 -30)' POINT (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;GEOMETRYCOLLECTION (LINESTRING (20 10 30' 30 20 40' 40 30 50' 20 10 30)' POINT (-20 -10 30)' POINT (-30 -20 40)' POINT (-40 -30 50)' POINT (-20 -10 30))"))                  ////}'                  ////// Geography MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10)' (30 20)' (40 30)' (20 10)' (-20 -10)' (-30 -20)' (-40 -30)' (-20 -10))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOINT ((20 10 30)' (30 20 40)' (40 30 50)' (20 10 30)' (-20 -10 30)' (-30 -20 40)' (-40 -30 50)' (-20 -10 30))"))                  ////}'                  ////// Geography MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10' 30 20)' (20 20' 30 30)' (20 30' 30 40)' (20 40' 30 50))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTILINESTRING ((20 10 1' 30 20 0)' (20 20 2' 30 30 1)' (20 30 3' 30 40 2)' (20 40 4' 30 50 3))"))                  ////}'                  ////// Geography MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10' 30 20' 40 30' 20 10)' (-20 -10' -30 -20' -40 -30' -20 -10))' ((22 12' 32 22' 42 32' 22 12)' (-22 -12' -32 -22' -42 -32' -22 -12))' ((24 14' 34 24' 44 34' 24 14)' (-24 -14' -34 -24' -44 -34' -24 -14))' ((26 16' 36 26' 46 36' 26 16)' (-26 -16' -36 -26' -46 -36' -26 -16)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geography'SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeography("SRID=4326;MULTIPOLYGON (((20 10 1' 30 20 2' 40 30 3' 20 10 1)' (-20 -10 1' -30 -20 2' -40 -30 3' -20 -10 1))' ((22 12 1' 32 22 2' 42 32 3' 22 12 1)' (-22 -12 1' -32 -22 2' -42 -32 3' -22 -12 1))' ((24 14 1' 34 24 2' 44 34 3' 24 14 1)' (-24 -14 1' -34 -24 2' -44 -34 3' -24 -14 1))' ((26 16 1' 36 26 2' 46 36 3' 26 16 1)' (-26 -16 1' -36 -26 2' -46 -36 3' -26 -16 1)))"))                  ////}'                  ////// Geometry Point                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 30 40)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POINT (10 20 NULL 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POINT (10 20 NULL 40)"))                  ////}'                  ////// Geometry LineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20' 20 30)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20' 20 30)"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;LINESTRING (10 20 30' 20 30 40)'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;LINESTRING (10 20 30' 20 30 40)"))                  ////}'                  ////// Geometry Polygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;POLYGON ((10 20 30' 20 30 40' 30 40 50' 10 20 30)' (-10 -20 30' -20 -30 40' -30 -40 50' -10 -20 30))"))                  ////}'                  ////// Geometry Collection                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20' 20 30' 30 40' 10 20)' POINT (-10 -20)' POINT (-20 -30)' POINT (-30 -40)' POINT (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;GEOMETRYCOLLECTION (LINESTRING (10 20 30' 20 30 40' 30 40 50' 10 20 30)' POINT (-10 -20 30)' POINT (-20 -30 40)' POINT (-30 -40 50)' POINT (-10 -20 30))"))                  ////}'                  ////// Geometry MultiPoint                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20)' (20 30)' (30 40)' (10 20)' (-10 -20)' (-20 -30)' (-30 -40)' (-10 -20))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOINT ((10 20 30)' (20 30 40)' (30 40 50)' (10 20 30)' (-10 -20 30)' (-20 -30 40)' (-30 -40 50)' (-10 -20 30))"))                  ////}'                  ////// Geometry MultiLineString                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20' 20 30)' (20 20' 30 30)' (30 20' 40 30)' (40 20' 50 30))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTILINESTRING ((10 20 1' 20 30 0)' (20 20 2' 30 30 1)' (30 20 3' 40 30 2)' (40 20 4' 50 30 3))"))                  ////}'                  ////// Geometry MultiPolygon                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20' 20 30' 30 40' 10 20)' (-10 -20' -20 -30' -30 -40' -10 -20))' ((12 22' 22 32' 32 42' 12 22)' (-12 -22' -22 -32' -32 -42' -12 -22))' ((14 24' 24 34' 34 44' 14 24)' (-14 -24' -24 -34' -34 -44' -14 -24))' ((16 26' 26 36' 36 46' 16 26)' (-16 -26' -26 -36' -36 -46' -16 -26)))"))                  ////}'                  ////new ExpressionTestCase                   ////{                   ////    Expression = "geometry'SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))'"'                   ////    ExpectedToken = new LiteralToken(SpatialHelper.ParseGeometry("SRID=0;MULTIPOLYGON (((10 20 1' 20 30 2' 30 40 3' 10 20 1)' (-10 -20 1' -20 -30 2' -30 -40 3' -10 -20 1))' ((12 22 1' 22 32 2' 32 42 3' 12 22 1)' (-12 -22 1' -22 -32 2' -32 -42 3' -12 -22 1))' ((14 24 1' 24 34 2' 34 44 3' 14 24 1)' (-14 -24 1' -24 -34 2' -34 -44 3' -14 -24 1))' ((16 26 1' 26 36 2' 36 46 3' 16 26 1)' (-16 -26 1' -26 -36 2' -36 -46 3' -16 -26 1)))"))                  ////}'              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The following statement contains a magic number: operatorPairs = operatorPairs.Concat(operatorGroup.OperatorKinds.Variations(2));
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new ExpressionTestCase()                      {                          Expression = "1 " + operatorPair[0].ToOperatorName() + " 2 " + operatorPair[1].ToOperatorName() + " 3"'                          ExpectedToken = new BinaryOperatorToken(                              operatorPair[1]'                              new BinaryOperatorToken(                                  operatorPair[0]'                                   new LiteralToken(1)'                                   new LiteralToken(2))'                              new LiteralToken(3))                      };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new ExpressionTestCase()                      {                          Expression = "1 " + operatorPair[0].ToOperatorName() + " 2 " + operatorPair[1].ToOperatorName() + " 3"'                          ExpectedToken = new BinaryOperatorToken(                              operatorPair[1]'                              new BinaryOperatorToken(                                  operatorPair[0]'                                   new LiteralToken(1)'                                   new LiteralToken(2))'                              new LiteralToken(3))                      };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new ExpressionTestCase()                      {                          Expression = "1 " + operatorPair[0].ToOperatorName() + " (2 " + operatorPair[1].ToOperatorName() + " 3)"'                          ExpectedToken = new BinaryOperatorToken(                              operatorPair[0]'                              new LiteralToken(1)'                              new BinaryOperatorToken(                                  operatorPair[1]'                                  new LiteralToken(2)'                                  new LiteralToken(3)))'                      };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new ExpressionTestCase()                      {                          Expression = "1 " + operatorPair[0].ToOperatorName() + " (2 " + operatorPair[1].ToOperatorName() + " 3)"'                          ExpectedToken = new BinaryOperatorToken(                              operatorPair[0]'                              new LiteralToken(1)'                              new BinaryOperatorToken(                                  operatorPair[1]'                                  new LiteralToken(2)'                                  new LiteralToken(3)))'                      };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new ExpressionTestCase()                              {                                  Expression = "1 " + operatorKindLower.ToOperatorName() + " 2 " + operatorKindHigher.ToOperatorName() + " 3"'                                  ExpectedToken = new BinaryOperatorToken(                                      operatorKindHigher'                                      new BinaryOperatorToken(                                          operatorKindLower'                                          new LiteralToken(1)'                                          new LiteralToken(2))'                                      new LiteralToken(3))                              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new ExpressionTestCase()                              {                                  Expression = "1 " + operatorKindLower.ToOperatorName() + " 2 " + operatorKindHigher.ToOperatorName() + " 3"'                                  ExpectedToken = new BinaryOperatorToken(                                      operatorKindHigher'                                      new BinaryOperatorToken(                                          operatorKindLower'                                          new LiteralToken(1)'                                          new LiteralToken(2))'                                      new LiteralToken(3))                              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new ExpressionTestCase()                              {                                  Expression = "1 " + operatorKindLower.ToOperatorName() + " (2 " + operatorKindHigher.ToOperatorName() + " 3)"'                                  ExpectedToken = new BinaryOperatorToken(                                      operatorKindLower'                                      new LiteralToken(1)'                                      new BinaryOperatorToken(                                          operatorKindHigher'                                          new LiteralToken(2)'                                          new LiteralToken(3)))                              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new ExpressionTestCase()                              {                                  Expression = "1 " + operatorKindLower.ToOperatorName() + " (2 " + operatorKindHigher.ToOperatorName() + " 3)"'                                  ExpectedToken = new BinaryOperatorToken(                                      operatorKindLower'                                      new LiteralToken(1)'                                      new BinaryOperatorToken(                                          operatorKindHigher'                                          new LiteralToken(2)'                                          new LiteralToken(3)))                              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new ExpressionTestCase()                              {                                  Expression = "1 " + operatorKindHigher.ToOperatorName() + " 2 " + operatorKindLower.ToOperatorName() + " 3"'                                  ExpectedToken = new BinaryOperatorToken(                                      operatorKindHigher'                                      new LiteralToken(1)'                                      new BinaryOperatorToken(                                          operatorKindLower'                                          new LiteralToken(2)'                                          new LiteralToken(3)))                              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,BinaryOperatorTestCases,The following statement contains a magic number: yield return new ExpressionTestCase()                              {                                  Expression = "1 " + operatorKindHigher.ToOperatorName() + " 2 " + operatorKindLower.ToOperatorName() + " 3"'                                  ExpectedToken = new BinaryOperatorToken(                                      operatorKindHigher'                                      new LiteralToken(1)'                                      new BinaryOperatorToken(                                          operatorKindLower'                                          new LiteralToken(2)'                                          new LiteralToken(3)))                              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,UnaryOperatorTestCases,The following statement contains a magic number: QueryTestUtils.UnaryOperatorKinds.Variations(2)
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,ParenthesisTestCases,The following statement contains a magic number: i < 5
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,ExpressionTestCase,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\ExpressionTestCases.cs,FunctionCallTestCases,The following statement contains a magic number: VariousExpressions().ToList().Variations(0' 1' 3)
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,FilterQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\FilterQueryTokenTests.cs,UriVariationExpressionsTest,The following statement contains a magic number: IEnumerable<ExpressionTestCase> testCases = new ExpressionTestCase[]              {                  // Uri query where + instead of space is in Uri text                  new ExpressionTestCase { Expression = "1+lt+2+and+true+ne+false"' ExpectedToken = new BinaryOperatorToken(                      BinaryOperatorKind.And'                       new BinaryOperatorToken(BinaryOperatorKind.LessThan' new LiteralToken(1)' new LiteralToken(2))'                      new BinaryOperatorToken(BinaryOperatorKind.NotEqual' new LiteralToken(true)' new LiteralToken(false))) }              };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,OrderByExpressionTest,The following statement contains a magic number: var orderByTestCases = ExpressionTestCase.VariousExpressions().ToList().Variations(3).Select(tc =>                  new OrderByTestCase                  {                      OrderBy = string.Join("'"' tc.Select((t' index) => t.Expression + ((index % 3 == 0) ? "" : ((index % 3 == 1) ? " asc" : " desc"))).ToArray())'                      ExpectedOrderByTokens = tc.Select((t' index) => new OrderByToken(                          t.ExpectedToken'                          (index % 3 == 2) ? OrderByDirection.Descending : OrderByDirection.Ascending)).ToArray()                  });
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,OrderByExpressionTest,The following statement contains a magic number: var orderByTestCases = ExpressionTestCase.VariousExpressions().ToList().Variations(3).Select(tc =>                  new OrderByTestCase                  {                      OrderBy = string.Join("'"' tc.Select((t' index) => t.Expression + ((index % 3 == 0) ? "" : ((index % 3 == 1) ? " asc" : " desc"))).ToArray())'                      ExpectedOrderByTokens = tc.Select((t' index) => new OrderByToken(                          t.ExpectedToken'                          (index % 3 == 2) ? OrderByDirection.Descending : OrderByDirection.Ascending)).ToArray()                  });
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,OrderByExpressionTest,The following statement contains a magic number: var orderByTestCases = ExpressionTestCase.VariousExpressions().ToList().Variations(3).Select(tc =>                  new OrderByTestCase                  {                      OrderBy = string.Join("'"' tc.Select((t' index) => t.Expression + ((index % 3 == 0) ? "" : ((index % 3 == 1) ? " asc" : " desc"))).ToArray())'                      ExpectedOrderByTokens = tc.Select((t' index) => new OrderByToken(                          t.ExpectedToken'                          (index % 3 == 2) ? OrderByDirection.Descending : OrderByDirection.Ascending)).ToArray()                  });
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,OrderByExpressionTest,The following statement contains a magic number: var orderByTestCases = ExpressionTestCase.VariousExpressions().ToList().Variations(3).Select(tc =>                  new OrderByTestCase                  {                      OrderBy = string.Join("'"' tc.Select((t' index) => t.Expression + ((index % 3 == 0) ? "" : ((index % 3 == 1) ? " asc" : " desc"))).ToArray())'                      ExpectedOrderByTokens = tc.Select((t' index) => new OrderByToken(                          t.ExpectedToken'                          (index % 3 == 2) ? OrderByDirection.Descending : OrderByDirection.Ascending)).ToArray()                  });
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,OrderByQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\OrderByQueryTokenTests.cs,OrderByExpressionTest,The following statement contains a magic number: var orderByTestCases = ExpressionTestCase.VariousExpressions().ToList().Variations(3).Select(tc =>                  new OrderByTestCase                  {                      OrderBy = string.Join("'"' tc.Select((t' index) => t.Expression + ((index % 3 == 0) ? "" : ((index % 3 == 1) ? " asc" : " desc"))).ToArray())'                      ExpectedOrderByTokens = tc.Select((t' index) => new OrderByToken(                          t.ExpectedToken'                          (index % 3 == 2) ? OrderByDirection.Descending : OrderByDirection.Ascending)).ToArray()                  });
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,SystemQueryOptionsQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SystemQueryOptionsQueryTokenTests.cs,CountExpressionTest,The following statement contains a magic number: object[] values = new object[] { null' 0' 1' 2' 5' 11111' -2' 12.3' "Foo"' -12.4m' 'c'' (long)int.MaxValue + 1' (long)int.MinValue - 1' 2.3f' "(1)"' "2 + 3"' "int.MaxValue"' "false"' "true"' "False"' "True"' "FaLSE"' "trUE" };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,SystemQueryOptionsQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SystemQueryOptionsQueryTokenTests.cs,CountExpressionTest,The following statement contains a magic number: object[] values = new object[] { null' 0' 1' 2' 5' 11111' -2' 12.3' "Foo"' -12.4m' 'c'' (long)int.MaxValue + 1' (long)int.MinValue - 1' 2.3f' "(1)"' "2 + 3"' "int.MaxValue"' "false"' "true"' "False"' "True"' "FaLSE"' "trUE" };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,SystemQueryOptionsQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SystemQueryOptionsQueryTokenTests.cs,CountExpressionTest,The following statement contains a magic number: object[] values = new object[] { null' 0' 1' 2' 5' 11111' -2' 12.3' "Foo"' -12.4m' 'c'' (long)int.MaxValue + 1' (long)int.MinValue - 1' 2.3f' "(1)"' "2 + 3"' "int.MaxValue"' "false"' "true"' "False"' "True"' "FaLSE"' "trUE" };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,SystemQueryOptionsQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SystemQueryOptionsQueryTokenTests.cs,CountExpressionTest,The following statement contains a magic number: object[] values = new object[] { null' 0' 1' 2' 5' 11111' -2' 12.3' "Foo"' -12.4m' 'c'' (long)int.MaxValue + 1' (long)int.MinValue - 1' 2.3f' "(1)"' "2 + 3"' "int.MaxValue"' "false"' "true"' "False"' "True"' "FaLSE"' "trUE" };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,SystemQueryOptionsQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SystemQueryOptionsQueryTokenTests.cs,CountExpressionTest,The following statement contains a magic number: object[] values = new object[] { null' 0' 1' 2' 5' 11111' -2' 12.3' "Foo"' -12.4m' 'c'' (long)int.MaxValue + 1' (long)int.MinValue - 1' 2.3f' "(1)"' "2 + 3"' "int.MaxValue"' "false"' "true"' "False"' "True"' "FaLSE"' "trUE" };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,SystemQueryOptionsQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SystemQueryOptionsQueryTokenTests.cs,CountExpressionTest,The following statement contains a magic number: object[] values = new object[] { null' 0' 1' 2' 5' 11111' -2' 12.3' "Foo"' -12.4m' 'c'' (long)int.MaxValue + 1' (long)int.MinValue - 1' 2.3f' "(1)"' "2 + 3"' "int.MaxValue"' "false"' "true"' "False"' "True"' "FaLSE"' "trUE" };
Magic Number,Microsoft.Test.Taupo.OData.Query.Tests.UriParser,SystemQueryOptionsQueryTokenTests,C:\research\architectureSmells\repos\OData_odata.net\test\FunctionalTests\Tests\DataOData\Tests\OData.Query.Tests\UriParser\SystemQueryOptionsQueryTokenTests.cs,CountExpressionTest,The following statement contains a magic number: object[] values = new object[] { null' 0' 1' 2' 5' 11111' -2' 12.3' "Foo"' -12.4m' 'c'' (long)int.MaxValue + 1' (long)int.MinValue - 1' 2.3f' "(1)"' "2 + 3"' "int.MaxValue"' "false"' "true"' "False"' "True"' "FaLSE"' "trUE" };
